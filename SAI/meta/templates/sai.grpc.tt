[% PROCESS "$templates_dir/sai_grpc_utils.tt" -%]

[%- ######################################################################## -%]

[%- BLOCK typedef_declaration -%]
    [%- IF dbg -%]
    // [% type.type.name %] [% type.name %][% IF type.raw %] (raw)[% END %];

    [%- END -%]
message [% type.grpc_name %] {
    [% type.grpc_def_gpb %] value = 1;
}

[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_api_typedefs -%]
    [%- FOREACH type IN apis.$api.typedefs %]
        [%- PROCESS typedef_declaration -%]
    [%- END -%]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_enums -%]
// SAI ENUMS
[%- SET generated_enums = {} %]
[% FOREACH api IN apis.keys.sort %]
    [% FOREACH function IN apis.$api.functions %]
        [%- IF apis.$api.objects.${function.object}.attrs.name %]
        [%- SET enum_name = "grpc" _ apis.$api.objects.${function.object}.attrs.name %]
        [%- UNLESS generated_enums.$enum_name %]

enum [%- enum_name %] {
    [%- SET is_enum_first = "YES" %]
    [% FOREACH elem IN apis.$api.objects.${function.object}.attrs.elements %]
        [%- FOREACH attr IN elem %]
            [%- IF attr.value && is_enum_first == 'YES' %]
                [%- SET is_enum_first = "NO" -%]
                [%- attr.value -%] = 0;
            [% END %]
            [%- IF attr.name && attr.value %]
//                [%- attr.name %] = [%- attr.value %];
                [%- IF not loop.last %];[%- END %]
            [%- END %]
        [%- END %]
    [% END %];
}
            [%- generated_enums.$enum_name = 1 -%]
        [%- END -%]
    [% END %]
    [%- END -%]
[%- END -%]
// SAI ENUMS END
[%- END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_typedefs -%]
// common types
message sai_grpc_int {
    int32 value = 1;
}


    [%- PROCESS define_api_typedefs api = 'common' -%]

    [%- FOREACH api IN apis.keys.sort -%]
        [%- IF apis.$api.typedefs.size and api != 'common' -%]

// [% api %] API types

             [%- PROCESS define_api_typedefs -%]
         [%- END -%]
    [%- END -%]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- # TODO: This is workaround, it should be removed -%]
[%- BLOCK define_object_structs -%]
// object API structures
// warning: this struct is invalid and  manually defined - do not use
message sai_grpc_object_key_entry_t {
    int64 object_id = 1;
    int64 fdb_entry = 2;
    int64 neighbor_entry = 3;
    int64 route_entry = 4;
    int64 mcast_fdb_entry = 5;
    int64 l2mc_entry = 6;
    int64 ipmc_entry = 7;
    int64 inseg_entry = 8;
    int64 nat_entry = 9;
}

message sai_grpc_object_key_t {
    sai_grpc_object_key_entry_t key = 1;
}

message sai_grpc_attr_capability_t {
    bool create_implemented = 1;
    bool boolset_implemented = 2;
    bool get_implemented = 3;
}

message sai_grpc_query_attribute_enum_values_capability_msg_arg {
    sai_grpc_object_type_t object_type = 1;
    sai_grpc_attr_id_t attr_id = 2;
    int32 caps_count = 3;
}

message sai_grpc_object_type_get_availability_msg_arg {
    sai_grpc_object_type_t object_type = 1;
    sai_grpc_attr_id_t attr_id = 2;
    int32 attr_type = 3;
}

message sai_grpc_string_response {
    string value = 1;
}

[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_api_structs -%]
            [%- FOREACH struct IN apis.$api.structs %]
                [%- PROCESS struct_declaration %]

            [%- END %]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK struct_declaration -%]
message [% struct.grpc_name %] {
    [%- id = 1; FOREACH member IN struct.members %]
        [%- # IF dbg %]
  // [% member.type.name %] [% member.name %];
        [%- # END -%]
        [%- # TODO: The condition is a workaround, it should be removed and only 'ELSE' part should be kept -%]
        [%- IF struct.grpc_name == 'sai_grpc_attribute_value_t' AND id == 1 %]
    oneof sai_grpc_attribute_value {
        [%- END %]
        [%- IF struct.grpc_name == 'sai_grpc_attr_condition_t' AND member.type.grpc_name == 'sai_grpc_attribute_value_t' AND member.name == 'condition' -%]

    int64 [% member.grpc_name %] = [% id; id = id + 1 %];
        [%- ELSE -%]
            [%- IF member.grpc_name == 'count' %]
                [%- SET temp_variable = 'skip_list' %]
    [% member.type.grpc_name %] [% member.grpc_name %] = [% id; id = id + 1 %];
            [%- ELSE -%]
                [% IF temp_variable == 'skip_list' %]
    repeated [% member.type.grpc_name %] [% member.grpc_name %] = [% id; id = id + 1 %];
                [%- SET temp_variable = 'NONE' %]
                [%- ELSE %]
    [% member.type.grpc_name %] [% member.grpc_name %] = [% id; id = id + 1 %];
                [%- END %]
            [%- END %]
        [%- END -%]
    [%- END %]
        [%- IF struct.grpc_name == 'sai_grpc_attribute_value_t' %]
    }
        [%- END %]
}
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_structs -%]
[% # TODO: This is workaround, it should be removed -%]
[%- PROCESS define_object_structs %]
[% # TODO: This is end of workaround, it should be removed -%]

// common types

    [%- PROCESS define_api_structs api = 'common' -%]

    [%- FOREACH api IN apis.keys.sort -%]
        [%- # TODO: Comparison to 'object' is a part of workaround, it should be removed -%]
        [%- IF apis.$api.structs.size and api != 'common' and api != 'object' -%]
// [% api %] API structures

            [%- PROCESS define_api_structs %]
        [%- END -%]
    [%- END %]

    [%- PROCESS define_attribute_list -%]
    [%- PROCESS define_stats_ptr_list -%]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_exceptions -%]

// error handling
message sai_grpc_exception {
    sai_grpc_status_t status = 1;
}
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_empty_response -%]

// error handling
message sai_grpc_response {
    bool success = 1;
}
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_stats_ptr_list -%]
// Stats attribute list
message sai_grpc_u64_list_t {
    repeated sai_grpc_uint64_t u64 = 1;
}
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_attribute_list -%]
// common attribute list
message sai_grpc_attribute_list_t {
    sai_grpc_int32_t attr_count = 1;
    repeated sai_grpc_attribute_t attr_list = 2;
}
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK function_debug_info -%]
    [%- # IF dbg -%]

    // [% function.dbg_info %]

        [%- IF function.object -%]
            [%- IF function.operation == 'create' -%]
    // [% function.object %] mandatory attrs: 
    // [%- FOREACH attr IN apis.$api.objects.${function.object}.attrs.mandatory -%] [%- attr.name %], [% END %]
            [%- ELSIF function.operation == 'stats' -%]
    // [% function.object %] stats: 
    // [%- FOREACH stat IN apis.$api.objects.${function.object}.stats.all -%] [%- stat.simple_name -%], [%- END -%]
            [%- ELSE -%]
    // [% function.object %] attrs: 
    // [% FOREACH attr IN apis.$api.objects.${function.object}.attrs.${function.operation} %] 
        // [% attr.name %], [% END %]
            [%- END %]

        [%- END -%]
    [%- # END -%]
        // [% RAGHA %]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK function_declaration -%]
    rpc [% function.grpc_name %]([% function.grpc_name %]_msg_args)
    [%- IF function.rpc_return.type.grpc_name == 'void' -%]
        returns (sai_grpc_response);

    [%- ELSIF function.rpc_return.type.grpc_name == 'string' -%]
        returns (sai_grpc_string_response);

    [%- ELSIF function.rpc_return.type.grpc_name == 'sai_grpc_uint64_t' || function.rpc_return.type.grpc_name == 'sai_grpc_uint64_t ' -%]
        returns (sai_grpc_u64_list_t);

    [%- ELSE -%]
        returns ([% function.rpc_return.type.grpc_name %]);
    [% END -%]

[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_api_functions -%]
    [%- FOREACH function IN apis.$api.functions -%]
        [%- PROCESS function_debug_info -%]
        [%- IF api -%]
    // [% api %] API
        [%- END %]

        [%- PROCESS function_declaration -%]
    [%- END -%]
[% END -%]

[%- ######################################################################## -%]

[%- ######################################################################## -%]

[%- BLOCK define_functions -%]
    [%- IF apis.common.functions.size -%]

    // common functions
    [%- PROCESS define_api_functions api = 'common' -%]
    [%- END -%]

    [%- FOREACH api IN apis.keys.sort -%]
        [%- IF apis.$api.functions.size and api != 'common' %]
    // Start of [% api %] API
            [%- PROCESS define_api_functions api = api -%]
        [%- END -%]

    [%- END -%]
[% END -%]

[%- ######################################################################## -%]

[%- BLOCK define_message_sai_args -%]
[%- FOREACH api IN apis.keys.sort -%]
[%- FOREACH function IN apis.$api.functions -%]
message [% function.grpc_name %]_msg_args {
    sai_grpc_int32_t tid = 1;
    [%- id = 2; FOREACH rpcarg IN function.args %]
    [%- IF rpcarg.type.grpc_name != 'sai_grpc_attribute_t ' && rpcarg.type.grpc_name != 'sai_grpc_attribute_t' %]
        [%- IF rpcarg.name == 'attr_count' || rpcarg.name == 'attr_count ' %]
    optional [% rpcarg.type.grpc_name %] [% rpcarg.name %] = [%- id; id = id + 1 %];
        [%- ELSIF rpcarg.name == 'counter_ids'  || rpcarg.name == 'counters' %]
    repeated [% rpcarg.type.grpc_name %] [% rpcarg.name %] = [%- id; id = id + 1 %];
        [%- ELSE %]
    [% rpcarg.type.grpc_name %] [% rpcarg.name %] = [%- id; id = id + 1 %];
        [%- END %]
    [%- ELSE %]
    repeated [% rpcarg.type.grpc_name %] [% rpcarg.name %] = [%- id; id = id + 1 %];
    [%- END %]
    [%- END %]
}
[% END -%]
[% END -%]
[%- END -%]

[%- SET new_template = template_text.replace('sai_grpc_', 'sai_grpc_') -%]

[%- # The body of the file: -%]
// AUTOGENERATED FILE! DO NOT EDIT

syntax = "proto3";

//package my_package;


[% PROCESS define_typedefs %]

[% PROCESS define_enums %]

[% PROCESS define_structs %]

[% PROCESS define_exceptions %]

[% PROCESS define_empty_response %]

[% PROCESS define_message_sai_args %]

service sai_rpc {

    [%- PROCESS define_functions %]
    [%- PROCESS define_utils_functions %]
    [%- new_template -%]
}

