// AUTOGENERATED FILE! DO NOT EDIT

syntax = "proto3";

//package my_package;


// common types
message sai_grpc_int {
    int32 value = 1;
}

message sai_grpc_api_t {
    int32 value = 1;
}

message sai_grpc_log_level_t {
    int32 value = 1;
}

message sai_grpc_attr_value_type_t {
    int32 value = 1;
}

message sai_grpc_attr_flags_t {
    int32 value = 1;
}

message sai_grpc_default_value_type_t {
    int32 value = 1;
}

message sai_grpc_attr_condition_type_t {
    int32 value = 1;
}

message sai_grpc_condition_operator_t {
    int32 value = 1;
}

message sai_grpc_enum_flags_type_t {
    int32 value = 1;
}

message sai_grpc_status_t {
    int32 value = 1;
}

message sai_grpc_switch_profile_id_t {
    int32 value = 1;
}

message sai_grpc_vlan_id_t {
    int32 value = 1;
}

message sai_grpc_attr_id_t {
    int32 value = 1;
}

message sai_grpc_cos_t {
    int32 value = 1;
}

message sai_grpc_queue_index_t {
    int32 value = 1;
}

message sai_grpc_mac_t {
    string value = 1;
}

message sai_grpc_ip4_t {
    string value = 1;
}

message sai_grpc_ip6_t {
    string value = 1;
}

message sai_grpc_switch_hash_seed_t {
    int32 value = 1;
}

message sai_grpc_label_id_t {
    int32 value = 1;
}

message sai_grpc_stat_id_t {
    int32 value = 1;
}

message sai_grpc_encrypt_key_t {
    int32 value = 1;
}

message sai_grpc_auth_key_t {
    int32 value = 1;
}

message sai_grpc_macsec_sak_t {
    int32 value = 1;
}

message sai_grpc_macsec_auth_key_t {
    int32 value = 1;
}

message sai_grpc_macsec_salt_t {
    int32 value = 1;
}

message sai_grpc_uint64_t {
    int64 value = 1;
}

message sai_grpc_int64_t {
    int64 value = 1;
}

message sai_grpc_uint32_t {
    int32 value = 1;
}

message sai_grpc_int32_t {
    int32 value = 1;
}

message sai_grpc_uint16_t {
    int32 value = 1;
}

message sai_grpc_int16_t {
    int32 value = 1;
}

message sai_grpc_uint8_t {
    int32 value = 1;
}

message sai_grpc_int8_t {
    int32 value = 1;
}

message sai_grpc_size_t {
    int64 value = 1;
}

message sai_grpc_object_id_t {
    int64 value = 1;
}

message sai_grpc_pointer_t {
    int64 value = 1;
}

message sai_grpc_api_version_t {
    int64 value = 1;
}

message sai_grpc_common_api_t {
    int32 value = 1;
}

message sai_grpc_object_type_t {
    int32 value = 1;
}

message sai_grpc_ip_addr_family_t {
    int32 value = 1;
}

message sai_grpc_port_prbs_rx_status_t {
    int32 value = 1;
}

message sai_grpc_packet_color_t {
    int32 value = 1;
}

message sai_grpc_acl_table_supported_match_type_t {
    int32 value = 1;
}

message sai_grpc_acl_table_chain_group_stage_t {
    int32 value = 1;
}

message sai_grpc_acl_stage_t {
    int32 value = 1;
}

message sai_grpc_acl_bind_point_type_t {
    int32 value = 1;
}

message sai_grpc_acl_table_match_type_t {
    int32 value = 1;
}

message sai_grpc_tam_bind_point_type_t {
    int32 value = 1;
}

message sai_grpc_tlv_type_t {
    int32 value = 1;
}

message sai_grpc_outseg_type_t {
    int32 value = 1;
}

message sai_grpc_outseg_ttl_mode_t {
    int32 value = 1;
}

message sai_grpc_outseg_exp_mode_t {
    int32 value = 1;
}

message sai_grpc_port_err_status_t {
    int32 value = 1;
}

message sai_grpc_bulk_op_error_mode_t {
    int32 value = 1;
}

message sai_grpc_stats_mode_t {
    int32 value = 1;
}

message sai_grpc_object_stage_t {
    int32 value = 1;
}

message sai_grpc_health_data_type_t {
    int32 value = 1;
}


// acl API types
message sai_grpc_acl_ip_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_ip_frag_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_dtel_flow_op_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_action_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_chain_group_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_group_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_chain_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_table_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_entry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_counter_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_range_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_acl_range_attr_t {
    sai_grpc_int32_t value = 1;
}


// ars API types
message sai_grpc_ars_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ars_attr_t {
    sai_grpc_int32_t value = 1;
}


// ars_profile API types
message sai_grpc_ars_profile_algo_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ars_profile_attr_t {
    sai_grpc_int32_t value = 1;
}


// bfd API types
message sai_grpc_bfd_session_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bfd_session_offload_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bfd_encapsulation_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bfd_session_state_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bfd_session_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bfd_session_stat_t {
    sai_grpc_int32_t value = 1;
}


// bridge API types
message sai_grpc_bridge_port_fdb_learning_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_port_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_port_tagging_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_port_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_port_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_flood_control_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_bridge_stat_t {
    sai_grpc_int32_t value = 1;
}


// buffer API types
message sai_grpc_ingress_priority_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ingress_priority_group_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_pool_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_pool_threshold_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_pool_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_pool_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_profile_threshold_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_buffer_profile_attr_t {
    sai_grpc_int32_t value = 1;
}


// counter API types
message sai_grpc_counter_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_counter_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_counter_stat_t {
    sai_grpc_int32_t value = 1;
}


// debug_counter API types
message sai_grpc_debug_counter_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_debug_counter_bind_method_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_in_drop_reason_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_out_drop_reason_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_debug_counter_attr_t {
    sai_grpc_int32_t value = 1;
}


// dtel API types
message sai_grpc_dtel_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_dtel_queue_report_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_dtel_int_session_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_dtel_report_session_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_dtel_event_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_dtel_event_attr_t {
    sai_grpc_int32_t value = 1;
}


// fdb API types
message sai_grpc_fdb_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_fdb_event_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_fdb_entry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_fdb_flush_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_fdb_flush_attr_t {
    sai_grpc_int32_t value = 1;
}


// generic_programmable API types
message sai_grpc_generic_programmable_attr_t {
    sai_grpc_int32_t value = 1;
}


// hash API types
message sai_grpc_native_hash_field_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_fine_grained_hash_field_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hash_attr_t {
    sai_grpc_int32_t value = 1;
}


// hostif API types
message sai_grpc_hostif_trap_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_trap_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_trap_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_user_defined_trap_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_user_defined_trap_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_vlan_tag_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_table_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_table_entry_channel_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_table_entry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_tx_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hostif_packet_attr_t {
    sai_grpc_int32_t value = 1;
}


// ipmc API types
message sai_grpc_ipmc_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipmc_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// ipmc_group API types
message sai_grpc_ipmc_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipmc_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}


// ipsec API types
message sai_grpc_ipsec_direction_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_cipher_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_sa_octet_count_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_port_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_port_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_sa_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_ipsec_sa_stat_t {
    sai_grpc_int32_t value = 1;
}


// isolation_group API types
message sai_grpc_isolation_group_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_isolation_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_isolation_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}


// l2mc API types
message sai_grpc_l2mc_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_l2mc_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// l2mc_group API types
message sai_grpc_l2mc_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_l2mc_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}


// lag API types
message sai_grpc_lag_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_lag_member_attr_t {
    sai_grpc_int32_t value = 1;
}


// macsec API types
message sai_grpc_macsec_direction_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_cipher_suite_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_max_secure_associations_per_sc_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_port_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_port_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_flow_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_flow_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_sc_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_sc_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_sa_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_macsec_sa_stat_t {
    sai_grpc_int32_t value = 1;
}


// mcast_fdb API types
message sai_grpc_mcast_fdb_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// mirror API types
message sai_grpc_mirror_session_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_erspan_encapsulation_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_mirror_session_congestion_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_mirror_session_attr_t {
    sai_grpc_int32_t value = 1;
}


// mpls API types
message sai_grpc_inseg_entry_psc_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_inseg_entry_pop_ttl_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_inseg_entry_pop_qos_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_inseg_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// my_mac API types
message sai_grpc_my_mac_attr_t {
    sai_grpc_int32_t value = 1;
}


// nat API types
message sai_grpc_nat_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_nat_entry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_nat_event_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_nat_zone_counter_attr_t {
    sai_grpc_int32_t value = 1;
}


// neighbor API types
message sai_grpc_neighbor_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// next_hop API types
message sai_grpc_next_hop_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_attr_t {
    sai_grpc_int32_t value = 1;
}


// next_hop_group API types
message sai_grpc_next_hop_group_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_member_configured_role_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_member_observed_role_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_map_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_next_hop_group_map_attr_t {
    sai_grpc_int32_t value = 1;
}


// policer API types
message sai_grpc_meter_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_policer_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_policer_color_source_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_policer_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_policer_stat_t {
    sai_grpc_int32_t value = 1;
}


// port API types
message sai_grpc_port_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_oper_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_flow_control_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_internal_loopback_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_loopback_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_media_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_breakout_mode_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_fec_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_fec_mode_extended_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_priority_flow_control_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_ptp_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_interface_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_link_training_failure_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_link_training_rx_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_prbs_config_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_connector_failover_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_mdix_mode_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_mdix_mode_config_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_auto_neg_config_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_module_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_dual_media_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_pool_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_pool_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_serdes_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_port_connector_attr_t {
    sai_grpc_int32_t value = 1;
}


// qos_map API types
message sai_grpc_qos_map_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_qos_map_attr_t {
    sai_grpc_int32_t value = 1;
}


// queue API types
message sai_grpc_queue_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_queue_pfc_continuous_deadlock_state_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_queue_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_queue_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_queue_pfc_deadlock_event_type_t {
    sai_grpc_int32_t value = 1;
}


// route API types
message sai_grpc_route_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// router_interface API types
message sai_grpc_router_interface_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_router_interface_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_router_interface_stat_t {
    sai_grpc_int32_t value = 1;
}


// rpf_group API types
message sai_grpc_rpf_group_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_rpf_group_member_attr_t {
    sai_grpc_int32_t value = 1;
}


// samplepacket API types
message sai_grpc_samplepacket_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_samplepacket_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_samplepacket_attr_t {
    sai_grpc_int32_t value = 1;
}


// scheduler API types
message sai_grpc_scheduling_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_scheduler_attr_t {
    sai_grpc_int32_t value = 1;
}


// scheduler_group API types
message sai_grpc_scheduler_group_attr_t {
    sai_grpc_int32_t value = 1;
}


// srv6 API types
message sai_grpc_srv6_sidlist_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_my_sid_entry_endpoint_behavior_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_my_sid_entry_endpoint_behavior_flavor_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_srv6_sidlist_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_srv6_sidlist_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_my_sid_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// stp API types
message sai_grpc_stp_port_state_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_stp_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_stp_port_attr_t {
    sai_grpc_int32_t value = 1;
}


// switch API types
message sai_grpc_switch_oper_status_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_packet_action_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_packet_vlan_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_switching_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_hash_algorithm_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_restart_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_mcast_snooping_capability_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_hardware_access_bus_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_firmware_load_method_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_firmware_load_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_failover_config_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_vxlan_udp_sport_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_encap_ecn_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_decap_ecn_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_tunnel_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_hostif_oper_status_update_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_asic_sdk_health_severity_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_asic_sdk_health_category_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_switch_stat_t {
    sai_grpc_int32_t value = 1;
}


// system_port API types
message sai_grpc_system_port_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_system_port_attr_t {
    sai_grpc_int32_t value = 1;
}


// tam API types
message sai_grpc_tam_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_tel_math_func_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_math_func_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_event_threshold_unit_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_event_threshold_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_int_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_int_presence_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_int_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_telemetry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_tel_type_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_report_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_report_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_report_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_reporting_unit_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_telemetry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_transport_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_transport_auth_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_transport_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_collector_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_event_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_event_action_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tam_event_attr_t {
    sai_grpc_int32_t value = 1;
}


// tunnel API types
message sai_grpc_tunnel_map_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_map_entry_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_map_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_ttl_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_dscp_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_peer_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_stat_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_term_table_entry_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_tunnel_term_table_entry_attr_t {
    sai_grpc_int32_t value = 1;
}


// udf API types
message sai_grpc_udf_base_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_udf_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_udf_match_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_udf_group_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_udf_group_attr_t {
    sai_grpc_int32_t value = 1;
}


// virtual_router API types
message sai_grpc_virtual_router_attr_t {
    sai_grpc_int32_t value = 1;
}


// vlan API types
message sai_grpc_vlan_tagging_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_vlan_mcast_lookup_key_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_vlan_flood_control_type_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_vlan_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_vlan_member_attr_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_vlan_stat_t {
    sai_grpc_int32_t value = 1;
}


// wred API types
message sai_grpc_ecn_mark_mode_t {
    sai_grpc_int32_t value = 1;
}

message sai_grpc_wred_attr_t {
    sai_grpc_int32_t value = 1;
}



// SAI ENUMS

    

enum grpc_sai_acl_table_attr_t {
    SAI_ACL_TABLE_ATTR_START = 0;
            
//                SAI_ACL_TABLE_ATTR_ACL_STAGE = SAI_ACL_TABLE_ATTR_START;
    
//                SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST = SAI_ACL_TABLE_ATTR_START + 1;
    
//                SAI_ACL_TABLE_ATTR_SIZE = SAI_ACL_TABLE_ATTR_START + 2;
    
//                SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST = SAI_ACL_TABLE_ATTR_START + 3;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_START;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x153;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x154;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x155;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x156;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x157;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x158;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x159;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x15a;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_MAC = SAI_ACL_TABLE_ATTR_FIELD_START + 0x5;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_IP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x6;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DST_IP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x7;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x8;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x9;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS = SAI_ACL_TABLE_ATTR_FIELD_START + 0xa;
    
//                SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS = SAI_ACL_TABLE_ATTR_FIELD_START + 0xb;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IN_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0xc;
    
//                SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0xd;
    
//                SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0xe;
    
//                SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID = SAI_ACL_TABLE_ATTR_FIELD_START + 0xf;
    
//                SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x10;
    
//                SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x11;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID = SAI_ACL_TABLE_ATTR_FIELD_START + 0x12;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x13;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x14;
    
//                SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x15;
    
//                SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x16;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x17;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x18;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x19;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1a;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1b;
    
//                SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1c;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1d;
    
//                SAI_ACL_TABLE_ATTR_FIELD_DSCP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1e;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ECN = SAI_ACL_TABLE_ATTR_FIELD_START + 0x1f;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x20;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x21;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x22;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x23;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x24;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG = SAI_ACL_TABLE_ATTR_FIELD_START + 0x25;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x26;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TC = SAI_ACL_TABLE_ATTR_FIELD_START + 0x27;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x28;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x29;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2a;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2b;
    
//                SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2c;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2d;
    
//                SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2e;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI = SAI_ACL_TABLE_ATTR_FIELD_START + 0x2f;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x30;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x31;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x32;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x33;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x34;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x35;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x36;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x37;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x38;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x39;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3a;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3b;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3c;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3d;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3e;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x3f;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x40;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL = SAI_ACL_TABLE_ATTR_FIELD_START + 0x41;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP = SAI_ACL_TABLE_ATTR_FIELD_START + 0x42;
    
//                SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS = SAI_ACL_TABLE_ATTR_FIELD_START + 0x43;
    
//                SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x44;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x45;
    
//                SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x46;
    
//                SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x47;
    
//                SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x48;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META = SAI_ACL_TABLE_ATTR_FIELD_START + 0x49;
    
//                SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4a;
    
//                SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4b;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4c;
    
//                SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4d;
    
//                SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4e;
    
//                SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN = SAI_ACL_TABLE_ATTR_FIELD_START + 0x4f;
    
//                SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX = SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN + SAI_ACL_USER_DEFINED_FIELD_ATTR_ID_RANGE;
    
//                SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x14f;
    
//                SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER = SAI_ACL_TABLE_ATTR_FIELD_START + 0x150;
    
//                SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY = SAI_ACL_TABLE_ATTR_FIELD_START + 0x151;
    
//                SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE = SAI_ACL_TABLE_ATTR_FIELD_START + 0x152;
    
//                SAI_ACL_TABLE_ATTR_ENTRY_LIST = 0x00002000;
    
//                SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY = 0x00002000 + 1;
    
//                SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER = 0x00002000 + 2;
    
//                SAI_ACL_TABLE_ATTR_ACL_TABLE_MATCH_TYPE = 0x00002000 + 3;
    
//                SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_SRC_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_START;
    
//                SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_DST_IPV6 = SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_START + 1;
    ;
}                

enum grpc_sai_acl_entry_attr_t {
    SAI_ACL_ENTRY_ATTR_START = 0;
            
//                SAI_ACL_ENTRY_ATTR_TABLE_ID = SAI_ACL_ENTRY_ATTR_START;
    
//                SAI_ACL_ENTRY_ATTR_PRIORITY = SAI_ACL_ENTRY_ATTR_START + 1;
    
//                SAI_ACL_ENTRY_ATTR_ADMIN_STATE = SAI_ACL_ENTRY_ATTR_START + 2;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6 = SAI_ACL_ENTRY_ATTR_FIELD_START;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x153;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x154;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x155;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x156;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x157;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x158;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x159;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x15a;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6 = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x5;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x6;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DST_IP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x7;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x8;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x9;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xa;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xb;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xc;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xd;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xe;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID = SAI_ACL_ENTRY_ATTR_FIELD_START + 0xf;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x10;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x11;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x12;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x13;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x14;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x15;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x16;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x17;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x18;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x19;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1a;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1b;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1c;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1d;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_DSCP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1e;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ECN = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x1f;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x20;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x21;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x22;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x23;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x24;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x25;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x26;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TC = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x27;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x28;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x29;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2a;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2b;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2c;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2d;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2e;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x2f;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x30;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x31;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x32;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x33;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x34;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x35;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x36;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x37;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x38;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x39;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3a;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3b;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3c;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3d;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3e;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x3f;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x40;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x41;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x42;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x43;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x44;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x45;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x46;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x47;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x48;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x49;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4a;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4b;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4c;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4d;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4e;
    
//                SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x4f;
    
//                SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX = SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN + SAI_ACL_USER_DEFINED_FIELD_ATTR_ID_RANGE;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x14f;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x150;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x151;
    
//                SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE = SAI_ACL_ENTRY_ATTR_FIELD_START + 0x152;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT = SAI_ACL_ENTRY_ATTR_ACTION_START;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x3;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_FLOOD = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x4;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_COUNTER = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x5;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x6;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x7;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x8;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x9;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_TC = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xa;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xb;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xc;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xd;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xe;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI = SAI_ACL_ENTRY_ATTR_ACTION_START + 0xf;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x32;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x33;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x10;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x11;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x12;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x13;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6 = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x14;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6 = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x15;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x16;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x17;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x18;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x19;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1a;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1b;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1c;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1d;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1e;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x1f;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x20;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x21;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x22;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x23;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x24;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x25;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x26;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x27;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x28;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x29;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2a;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2b;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2c;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2d;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2e;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x2f;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x30;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x31;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_FORWARDING_CLASS = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x34;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_MONITORING = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x35;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_OBJECT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x36;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_DISABLE_ARS_FORWARDING = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x37;
    
//                SAI_ACL_ENTRY_ATTR_ACTION_CHAIN_REDIRECT = SAI_ACL_ENTRY_ATTR_ACTION_START + 0x38;
    ;
}                

enum grpc_sai_acl_counter_attr_t {
    SAI_ACL_COUNTER_ATTR_START = 0;
            
//                SAI_ACL_COUNTER_ATTR_TABLE_ID = SAI_ACL_COUNTER_ATTR_START;
    
//                SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT = SAI_ACL_COUNTER_ATTR_START + 1;
    
//                SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT = SAI_ACL_COUNTER_ATTR_START + 2;
    
//                SAI_ACL_COUNTER_ATTR_PACKETS = SAI_ACL_COUNTER_ATTR_START + 3;
    
//                SAI_ACL_COUNTER_ATTR_BYTES = SAI_ACL_COUNTER_ATTR_START + 4;
    
//                SAI_ACL_COUNTER_ATTR_LABEL = SAI_ACL_COUNTER_ATTR_START + 5;
    ;
}                

enum grpc_sai_acl_range_attr_t {
    SAI_ACL_RANGE_ATTR_START = 0;
            
//                SAI_ACL_RANGE_ATTR_TYPE = SAI_ACL_RANGE_ATTR_START;
    
//                SAI_ACL_RANGE_ATTR_LIMIT = SAI_ACL_RANGE_ATTR_START + 1;
    ;
}                

enum grpc_sai_acl_table_group_attr_t {
    SAI_ACL_TABLE_GROUP_ATTR_START = 0;
            
//                SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE = SAI_ACL_TABLE_GROUP_ATTR_START;
    
//                SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST = SAI_ACL_TABLE_GROUP_ATTR_START + 1;
    
//                SAI_ACL_TABLE_GROUP_ATTR_TYPE = SAI_ACL_TABLE_GROUP_ATTR_START + 2;
    
//                SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST = SAI_ACL_TABLE_GROUP_ATTR_START + 3;
    
//                SAI_ACL_TABLE_GROUP_ATTR_CHAIN_GROUP_LIST = SAI_ACL_TABLE_GROUP_ATTR_START + 4;
    ;
}                

enum grpc_sai_acl_table_group_member_attr_t {
    SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID = SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START;
    
//                SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID = SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START + 1;
    
//                SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY = SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START + 2;
    
//                SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_CHAIN_GROUP_ID = SAI_ACL_TABLE_GROUP_MEMBER_ATTR_START + 3;
    ;
}                

enum grpc_sai_acl_table_chain_group_attr_t {
    SAI_ACL_TABLE_CHAIN_GROUP_ATTR_START = 0;
            
//                SAI_ACL_TABLE_CHAIN_GROUP_ATTR_TYPE = SAI_ACL_TABLE_CHAIN_GROUP_ATTR_START;
    
//                SAI_ACL_TABLE_CHAIN_GROUP_ATTR_STAGE = SAI_ACL_TABLE_CHAIN_GROUP_ATTR_START + 1;
    ;
}                
    

enum grpc_sai_ars_attr_t {
    SAI_ARS_ATTR_START = 0;
            
//                SAI_ARS_ATTR_MODE = SAI_ARS_ATTR_START;
    
//                SAI_ARS_ATTR_IDLE_TIME = SAI_ARS_ATTR_START + 1;
    
//                SAI_ARS_ATTR_MAX_FLOWS = SAI_ARS_ATTR_START + 2;
    
//                SAI_ARS_ATTR_MON_ENABLE = SAI_ARS_ATTR_START + 3;
    
//                SAI_ARS_ATTR_SAMPLEPACKET_ENABLE = SAI_ARS_ATTR_START + 4;
    
//                SAI_ARS_ATTR_MAX_ALT_MEMEBERS_PER_GROUP = SAI_ARS_ATTR_START + 5;
    
//                SAI_ARS_ATTR_MAX_PRIMARY_MEMEBERS_PER_GROUP = SAI_ARS_ATTR_START + 6;
    
//                SAI_ARS_ATTR_PRIMARY_PATH_QUALITY_THRESHOLD = SAI_ARS_ATTR_START + 7;
    
//                SAI_ARS_ATTR_ALTERNATE_PATH_COST = SAI_ARS_ATTR_START + 8;
    
//                SAI_ARS_ATTR_ALTERNATE_PATH_BIAS = SAI_ARS_ATTR_START + 9;
    ;
}                
    

enum grpc_sai_ars_profile_attr_t {
    SAI_ARS_PROFILE_ATTR_START = 0;
            
//                SAI_ARS_PROFILE_ATTR_ALGO = SAI_ARS_PROFILE_ATTR_START;
    
//                SAI_ARS_PROFILE_ATTR_SAMPLING_INTERVAL = SAI_ARS_PROFILE_ATTR_START + 1;
    
//                SAI_ARS_PROFILE_ATTR_ARS_RANDOM_SEED = SAI_ARS_PROFILE_ATTR_START + 2;
    
//                SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_GROUPS = SAI_ARS_PROFILE_ATTR_START + 3;
    
//                SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_MEMBERS_PER_GROUP = SAI_ARS_PROFILE_ATTR_START + 4;
    
//                SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_GROUPS = SAI_ARS_PROFILE_ATTR_START + 5;
    
//                SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_MEMBERS_PER_GROUP = SAI_ARS_PROFILE_ATTR_START + 6;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST = SAI_ARS_PROFILE_ATTR_START + 7;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST_WEIGHT = SAI_ARS_PROFILE_ATTR_START + 8;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE = SAI_ARS_PROFILE_ATTR_START + 9;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE_WEIGHT = SAI_ARS_PROFILE_ATTR_START + 10;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_CURRENT = SAI_ARS_PROFILE_ATTR_START + 11;
    
//                SAI_ARS_PROFILE_ATTR_PORT_LOAD_EXPONENT = SAI_ARS_PROFILE_ATTR_START + 12;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BANDS = SAI_ARS_PROFILE_ATTR_START + 13;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 14;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 15;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 16;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 17;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 18;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 19;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 20;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 21;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 22;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 23;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 24;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 25;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 26;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 27;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MIN_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 28;
    
//                SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MAX_THRESHOLD = SAI_ARS_PROFILE_ATTR_START + 29;
    ;
}                
    

enum grpc_sai_bfd_session_attr_t {
    SAI_BFD_SESSION_ATTR_START = 0;
            
//                SAI_BFD_SESSION_ATTR_TYPE = SAI_BFD_SESSION_ATTR_START;
    
//                SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID = SAI_BFD_SESSION_ATTR_START + 1;
    
//                SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER = SAI_BFD_SESSION_ATTR_START + 2;
    
//                SAI_BFD_SESSION_ATTR_PORT = SAI_BFD_SESSION_ATTR_START + 3;
    
//                SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR = SAI_BFD_SESSION_ATTR_START + 4;
    
//                SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR = SAI_BFD_SESSION_ATTR_START + 5;
    
//                SAI_BFD_SESSION_ATTR_UDP_SRC_PORT = SAI_BFD_SESSION_ATTR_START + 6;
    
//                SAI_BFD_SESSION_ATTR_TC = SAI_BFD_SESSION_ATTR_START + 7;
    
//                SAI_BFD_SESSION_ATTR_VLAN_TPID = SAI_BFD_SESSION_ATTR_START + 8;
    
//                SAI_BFD_SESSION_ATTR_VLAN_ID = SAI_BFD_SESSION_ATTR_START + 9;
    
//                SAI_BFD_SESSION_ATTR_VLAN_PRI = SAI_BFD_SESSION_ATTR_START + 10;
    
//                SAI_BFD_SESSION_ATTR_VLAN_CFI = SAI_BFD_SESSION_ATTR_START + 11;
    
//                SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID = SAI_BFD_SESSION_ATTR_START + 12;
    
//                SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE = SAI_BFD_SESSION_ATTR_START + 13;
    
//                SAI_BFD_SESSION_ATTR_IPHDR_VERSION = SAI_BFD_SESSION_ATTR_START + 14;
    
//                SAI_BFD_SESSION_ATTR_TOS = SAI_BFD_SESSION_ATTR_START + 15;
    
//                SAI_BFD_SESSION_ATTR_TTL = SAI_BFD_SESSION_ATTR_START + 16;
    
//                SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS = SAI_BFD_SESSION_ATTR_START + 17;
    
//                SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS = SAI_BFD_SESSION_ATTR_START + 18;
    
//                SAI_BFD_SESSION_ATTR_TUNNEL_TOS = SAI_BFD_SESSION_ATTR_START + 19;
    
//                SAI_BFD_SESSION_ATTR_TUNNEL_TTL = SAI_BFD_SESSION_ATTR_START + 20;
    
//                SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS = SAI_BFD_SESSION_ATTR_START + 21;
    
//                SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS = SAI_BFD_SESSION_ATTR_START + 22;
    
//                SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS = SAI_BFD_SESSION_ATTR_START + 23;
    
//                SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS = SAI_BFD_SESSION_ATTR_START + 24;
    
//                SAI_BFD_SESSION_ATTR_ECHO_ENABLE = SAI_BFD_SESSION_ATTR_START + 25;
    
//                SAI_BFD_SESSION_ATTR_MULTIHOP = SAI_BFD_SESSION_ATTR_START + 26;
    
//                SAI_BFD_SESSION_ATTR_CBIT = SAI_BFD_SESSION_ATTR_START + 27;
    
//                SAI_BFD_SESSION_ATTR_MIN_TX = SAI_BFD_SESSION_ATTR_START + 28;
    
//                SAI_BFD_SESSION_ATTR_MIN_RX = SAI_BFD_SESSION_ATTR_START + 29;
    
//                SAI_BFD_SESSION_ATTR_MULTIPLIER = SAI_BFD_SESSION_ATTR_START + 30;
    
//                SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX = SAI_BFD_SESSION_ATTR_START + 31;
    
//                SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX = SAI_BFD_SESSION_ATTR_START + 32;
    
//                SAI_BFD_SESSION_ATTR_STATE = SAI_BFD_SESSION_ATTR_START + 33;
    
//                SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE = SAI_BFD_SESSION_ATTR_START + 34;
    
//                SAI_BFD_SESSION_ATTR_NEGOTIATED_TX = SAI_BFD_SESSION_ATTR_START + 35;
    
//                SAI_BFD_SESSION_ATTR_NEGOTIATED_RX = SAI_BFD_SESSION_ATTR_START + 36;
    
//                SAI_BFD_SESSION_ATTR_LOCAL_DIAG = SAI_BFD_SESSION_ATTR_START + 37;
    
//                SAI_BFD_SESSION_ATTR_REMOTE_DIAG = SAI_BFD_SESSION_ATTR_START + 38;
    
//                SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER = SAI_BFD_SESSION_ATTR_START + 39;
    
//                SAI_BFD_SESSION_ATTR_SRV6_SIDLIST_ID = SAI_BFD_SESSION_ATTR_START + 40;
    ;
}                            
    

enum grpc_sai_bridge_port_attr_t {
    SAI_BRIDGE_PORT_ATTR_START = 0;
            
//                SAI_BRIDGE_PORT_ATTR_TYPE = SAI_BRIDGE_PORT_ATTR_START;
    
//                SAI_BRIDGE_PORT_ATTR_PORT_ID = SAI_BRIDGE_PORT_ATTR_START + 1;
    
//                SAI_BRIDGE_PORT_ATTR_TAGGING_MODE = SAI_BRIDGE_PORT_ATTR_START + 2;
    
//                SAI_BRIDGE_PORT_ATTR_VLAN_ID = SAI_BRIDGE_PORT_ATTR_START + 3;
    
//                SAI_BRIDGE_PORT_ATTR_RIF_ID = SAI_BRIDGE_PORT_ATTR_START + 4;
    
//                SAI_BRIDGE_PORT_ATTR_TUNNEL_ID = SAI_BRIDGE_PORT_ATTR_START + 5;
    
//                SAI_BRIDGE_PORT_ATTR_BRIDGE_ID = SAI_BRIDGE_PORT_ATTR_START + 6;
    
//                SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE = SAI_BRIDGE_PORT_ATTR_START + 7;
    
//                SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES = SAI_BRIDGE_PORT_ATTR_START + 8;
    
//                SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION = SAI_BRIDGE_PORT_ATTR_START + 9;
    
//                SAI_BRIDGE_PORT_ATTR_ADMIN_STATE = SAI_BRIDGE_PORT_ATTR_START + 10;
    
//                SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING = SAI_BRIDGE_PORT_ATTR_START + 11;
    
//                SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING = SAI_BRIDGE_PORT_ATTR_START + 12;
    
//                SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP = SAI_BRIDGE_PORT_ATTR_START + 13;
    ;
}                            

enum grpc_sai_bridge_attr_t {
    SAI_BRIDGE_ATTR_START = 0;
            
//                SAI_BRIDGE_ATTR_TYPE = SAI_BRIDGE_ATTR_START;
    
//                SAI_BRIDGE_ATTR_PORT_LIST = SAI_BRIDGE_ATTR_START + 1;
    
//                SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES = SAI_BRIDGE_ATTR_START + 2;
    
//                SAI_BRIDGE_ATTR_LEARN_DISABLE = SAI_BRIDGE_ATTR_START + 3;
    
//                SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE = SAI_BRIDGE_ATTR_START + 4;
    
//                SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP = SAI_BRIDGE_ATTR_START + 5;
    
//                SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE = SAI_BRIDGE_ATTR_START + 6;
    
//                SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP = SAI_BRIDGE_ATTR_START + 7;
    
//                SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE = SAI_BRIDGE_ATTR_START + 8;
    
//                SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP = SAI_BRIDGE_ATTR_START + 9;
    ;
}                            
    

enum grpc_sai_ingress_priority_group_attr_t {
    SAI_INGRESS_PRIORITY_GROUP_ATTR_START = 0;
            
//                SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE = SAI_INGRESS_PRIORITY_GROUP_ATTR_START;
    
//                SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT = SAI_INGRESS_PRIORITY_GROUP_ATTR_START + 1;
    
//                SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM = SAI_INGRESS_PRIORITY_GROUP_ATTR_START + 2;
    
//                SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX = SAI_INGRESS_PRIORITY_GROUP_ATTR_START + 3;
    ;
}                            

enum grpc_sai_buffer_pool_attr_t {
    SAI_BUFFER_POOL_ATTR_START = 0;
            
//                SAI_BUFFER_POOL_ATTR_SHARED_SIZE = SAI_BUFFER_POOL_ATTR_START;
    
//                SAI_BUFFER_POOL_ATTR_TYPE = SAI_BUFFER_POOL_ATTR_START + 1;
    
//                SAI_BUFFER_POOL_ATTR_SIZE = SAI_BUFFER_POOL_ATTR_START + 2;
    
//                SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE = SAI_BUFFER_POOL_ATTR_START + 3;
    
//                SAI_BUFFER_POOL_ATTR_TAM = SAI_BUFFER_POOL_ATTR_START + 4;
    
//                SAI_BUFFER_POOL_ATTR_XOFF_SIZE = SAI_BUFFER_POOL_ATTR_START + 5;
    
//                SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID = SAI_BUFFER_POOL_ATTR_START + 6;
    ;
}                            

enum grpc_sai_buffer_profile_attr_t {
    SAI_BUFFER_PROFILE_ATTR_START = 0;
            
//                SAI_BUFFER_PROFILE_ATTR_POOL_ID = SAI_BUFFER_PROFILE_ATTR_START;
    
//                SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE = SAI_BUFFER_PROFILE_ATTR_START + 1;
    
//                SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE = SAI_BUFFER_PROFILE_ATTR_START + 2;
    
//                SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH = SAI_BUFFER_PROFILE_ATTR_START + 3;
    
//                SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH = SAI_BUFFER_PROFILE_ATTR_START + 4;
    
//                SAI_BUFFER_PROFILE_ATTR_XOFF_TH = SAI_BUFFER_PROFILE_ATTR_START + 5;
    
//                SAI_BUFFER_PROFILE_ATTR_XON_TH = SAI_BUFFER_PROFILE_ATTR_START + 6;
    
//                SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH = SAI_BUFFER_PROFILE_ATTR_START + 7;
    ;
}                
    
    

enum grpc_sai_counter_attr_t {
    SAI_COUNTER_ATTR_START = 0;
            
//                SAI_COUNTER_ATTR_TYPE = SAI_COUNTER_ATTR_START;
    
//                SAI_COUNTER_ATTR_LABEL = SAI_COUNTER_ATTR_START + 1;
    ;
}                            
    

enum grpc_sai_debug_counter_attr_t {
    SAI_DEBUG_COUNTER_ATTR_START = 0;
            
//                SAI_DEBUG_COUNTER_ATTR_INDEX = SAI_DEBUG_COUNTER_ATTR_START;
    
//                SAI_DEBUG_COUNTER_ATTR_TYPE = SAI_DEBUG_COUNTER_ATTR_START + 1;
    
//                SAI_DEBUG_COUNTER_ATTR_BIND_METHOD = SAI_DEBUG_COUNTER_ATTR_START + 2;
    
//                SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST = SAI_DEBUG_COUNTER_ATTR_START + 3;
    
//                SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST = SAI_DEBUG_COUNTER_ATTR_START + 4;
    ;
}                
    

enum grpc_sai_dtel_attr_t {
    SAI_DTEL_ATTR_START = 0;
            
//                SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE = SAI_DTEL_ATTR_START;
    
//                SAI_DTEL_ATTR_INT_TRANSIT_ENABLE = SAI_DTEL_ATTR_START + 1;
    
//                SAI_DTEL_ATTR_POSTCARD_ENABLE = SAI_DTEL_ATTR_START + 2;
    
//                SAI_DTEL_ATTR_DROP_REPORT_ENABLE = SAI_DTEL_ATTR_START + 3;
    
//                SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE = SAI_DTEL_ATTR_START + 4;
    
//                SAI_DTEL_ATTR_SWITCH_ID = SAI_DTEL_ATTR_START + 5;
    
//                SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE = SAI_DTEL_ATTR_START + 6;
    
//                SAI_DTEL_ATTR_LATENCY_SENSITIVITY = SAI_DTEL_ATTR_START + 7;
    
//                SAI_DTEL_ATTR_SINK_PORT_LIST = SAI_DTEL_ATTR_START + 8;
    
//                SAI_DTEL_ATTR_INT_L4_DSCP = SAI_DTEL_ATTR_START + 9;
    ;
}                

enum grpc_sai_dtel_queue_report_attr_t {
    SAI_DTEL_QUEUE_REPORT_ATTR_START = 0;
            
//                SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID = SAI_DTEL_QUEUE_REPORT_ATTR_START;
    
//                SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD = SAI_DTEL_QUEUE_REPORT_ATTR_START + 1;
    
//                SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD = SAI_DTEL_QUEUE_REPORT_ATTR_START + 2;
    
//                SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA = SAI_DTEL_QUEUE_REPORT_ATTR_START + 3;
    
//                SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP = SAI_DTEL_QUEUE_REPORT_ATTR_START + 4;
    ;
}                

enum grpc_sai_dtel_int_session_attr_t {
    SAI_DTEL_INT_SESSION_ATTR_START = 0;
            
//                SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT = SAI_DTEL_INT_SESSION_ATTR_START;
    
//                SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID = SAI_DTEL_INT_SESSION_ATTR_START + 1;
    
//                SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS = SAI_DTEL_INT_SESSION_ATTR_START + 2;
    
//                SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP = SAI_DTEL_INT_SESSION_ATTR_START + 3;
    
//                SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP = SAI_DTEL_INT_SESSION_ATTR_START + 4;
    
//                SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO = SAI_DTEL_INT_SESSION_ATTR_START + 5;
    ;
}                

enum grpc_sai_dtel_report_session_attr_t {
    SAI_DTEL_REPORT_SESSION_ATTR_START = 0;
            
//                SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP = SAI_DTEL_REPORT_SESSION_ATTR_START;
    
//                SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST = SAI_DTEL_REPORT_SESSION_ATTR_START + 1;
    
//                SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID = SAI_DTEL_REPORT_SESSION_ATTR_START + 2;
    
//                SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE = SAI_DTEL_REPORT_SESSION_ATTR_START + 3;
    
//                SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT = SAI_DTEL_REPORT_SESSION_ATTR_START + 4;
    ;
}                

enum grpc_sai_dtel_event_attr_t {
    SAI_DTEL_EVENT_ATTR_START = 0;
            
//                SAI_DTEL_EVENT_ATTR_TYPE = SAI_DTEL_EVENT_ATTR_START;
    
//                SAI_DTEL_EVENT_ATTR_REPORT_SESSION = SAI_DTEL_EVENT_ATTR_START + 1;
    
//                SAI_DTEL_EVENT_ATTR_DSCP_VALUE = SAI_DTEL_EVENT_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_fdb_entry_attr_t {
    SAI_FDB_ENTRY_ATTR_START = 0;
            
//                SAI_FDB_ENTRY_ATTR_TYPE = SAI_FDB_ENTRY_ATTR_START;
    
//                SAI_FDB_ENTRY_ATTR_PACKET_ACTION = SAI_FDB_ENTRY_ATTR_START + 1;
    
//                SAI_FDB_ENTRY_ATTR_USER_TRAP_ID = SAI_FDB_ENTRY_ATTR_START + 2;
    
//                SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID = SAI_FDB_ENTRY_ATTR_START + 3;
    
//                SAI_FDB_ENTRY_ATTR_META_DATA = SAI_FDB_ENTRY_ATTR_START + 4;
    
//                SAI_FDB_ENTRY_ATTR_ENDPOINT_IP = SAI_FDB_ENTRY_ATTR_START + 5;
    
//                SAI_FDB_ENTRY_ATTR_COUNTER_ID = SAI_FDB_ENTRY_ATTR_START + 6;
    
//                SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE = SAI_FDB_ENTRY_ATTR_START + 7;
    ;
}                

enum grpc_sai_fdb_flush_attr_t {
    SAI_FDB_FLUSH_ATTR_START = 0;
            
//                SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID = SAI_FDB_FLUSH_ATTR_START;
    
//                SAI_FDB_FLUSH_ATTR_BV_ID = SAI_FDB_FLUSH_ATTR_START + 1;
    
//                SAI_FDB_FLUSH_ATTR_ENTRY_TYPE = SAI_FDB_FLUSH_ATTR_START + 2;
    ;
}                    
    

enum grpc_sai_generic_programmable_attr_t {
    SAI_GENERIC_PROGRAMMABLE_ATTR_START = 0;
            
//                SAI_GENERIC_PROGRAMMABLE_ATTR_OBJECT_NAME = SAI_GENERIC_PROGRAMMABLE_ATTR_START;
    
//                SAI_GENERIC_PROGRAMMABLE_ATTR_ENTRY = SAI_GENERIC_PROGRAMMABLE_ATTR_START + 1;
    
//                SAI_GENERIC_PROGRAMMABLE_ATTR_COUNTER_ID = SAI_GENERIC_PROGRAMMABLE_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_fine_grained_hash_field_attr_t {
    SAI_FINE_GRAINED_HASH_FIELD_ATTR_START = 0;
            
//                SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD = SAI_FINE_GRAINED_HASH_FIELD_ATTR_START;
    
//                SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK = SAI_FINE_GRAINED_HASH_FIELD_ATTR_START + 1;
    
//                SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK = SAI_FINE_GRAINED_HASH_FIELD_ATTR_START + 2;
    
//                SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID = SAI_FINE_GRAINED_HASH_FIELD_ATTR_START + 3;
    ;
}                

enum grpc_sai_hash_attr_t {
    SAI_HASH_ATTR_START = 0;
            
//                SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST = SAI_HASH_ATTR_START;
    
//                SAI_HASH_ATTR_UDF_GROUP_LIST = SAI_HASH_ATTR_START + 1;
    
//                SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST = SAI_HASH_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_hostif_trap_group_attr_t {
    SAI_HOSTIF_TRAP_GROUP_ATTR_START = 0;
            
//                SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE = SAI_HOSTIF_TRAP_GROUP_ATTR_START;
    
//                SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE = SAI_HOSTIF_TRAP_GROUP_ATTR_START + 1;
    
//                SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER = SAI_HOSTIF_TRAP_GROUP_ATTR_START + 2;
    
//                SAI_HOSTIF_TRAP_GROUP_ATTR_OBJECT_STAGE = SAI_HOSTIF_TRAP_GROUP_ATTR_START + 3;
    ;
}                

enum grpc_sai_hostif_trap_attr_t {
    SAI_HOSTIF_TRAP_ATTR_START = 0;
            
//                SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE = SAI_HOSTIF_TRAP_ATTR_START;
    
//                SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION = SAI_HOSTIF_TRAP_ATTR_START + 1;
    
//                SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY = SAI_HOSTIF_TRAP_ATTR_START + 2;
    
//                SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST = SAI_HOSTIF_TRAP_ATTR_START + 3;
    
//                SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP = SAI_HOSTIF_TRAP_ATTR_START + 4;
    
//                SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION = SAI_HOSTIF_TRAP_ATTR_START + 5;
    
//                SAI_HOSTIF_TRAP_ATTR_COUNTER_ID = SAI_HOSTIF_TRAP_ATTR_START + 6;
    ;
}                

enum grpc_sai_hostif_user_defined_trap_attr_t {
    SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_START = 0;
            
//                SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE = SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_START;
    
//                SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY = SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_START + 1;
    
//                SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP = SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_START + 2;
    ;
}                

enum grpc_sai_hostif_attr_t {
    SAI_HOSTIF_ATTR_START = 0;
            
//                SAI_HOSTIF_ATTR_TYPE = SAI_HOSTIF_ATTR_START;
    
//                SAI_HOSTIF_ATTR_OBJ_ID = SAI_HOSTIF_ATTR_START + 1;
    
//                SAI_HOSTIF_ATTR_NAME = SAI_HOSTIF_ATTR_START + 2;
    
//                SAI_HOSTIF_ATTR_OPER_STATUS = SAI_HOSTIF_ATTR_START + 3;
    
//                SAI_HOSTIF_ATTR_QUEUE = SAI_HOSTIF_ATTR_START + 4;
    
//                SAI_HOSTIF_ATTR_VLAN_TAG = SAI_HOSTIF_ATTR_START + 5;
    
//                SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME = SAI_HOSTIF_ATTR_START + 6;
    ;
}                

enum grpc_sai_hostif_table_entry_attr_t {
    SAI_HOSTIF_TABLE_ENTRY_ATTR_START = 0;
            
//                SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE = SAI_HOSTIF_TABLE_ENTRY_ATTR_START;
    
//                SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID = SAI_HOSTIF_TABLE_ENTRY_ATTR_START + 1;
    
//                SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID = SAI_HOSTIF_TABLE_ENTRY_ATTR_START + 2;
    
//                SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE = SAI_HOSTIF_TABLE_ENTRY_ATTR_START + 3;
    
//                SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF = SAI_HOSTIF_TABLE_ENTRY_ATTR_START + 4;
    ;
}                

enum grpc_sai_hostif_packet_attr_t {
    SAI_HOSTIF_PACKET_ATTR_START = 0;
            
//                SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID = SAI_HOSTIF_PACKET_ATTR_START;
    
//                SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT = SAI_HOSTIF_PACKET_ATTR_START + 1;
    
//                SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG = SAI_HOSTIF_PACKET_ATTR_START + 2;
    
//                SAI_HOSTIF_PACKET_ATTR_HOSTIF_TX_TYPE = SAI_HOSTIF_PACKET_ATTR_START + 3;
    
//                SAI_HOSTIF_PACKET_ATTR_EGRESS_PORT_OR_LAG = SAI_HOSTIF_PACKET_ATTR_START + 4;
    
//                SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID = SAI_HOSTIF_PACKET_ATTR_START + 5;
    
//                SAI_HOSTIF_PACKET_ATTR_TIMESTAMP = SAI_HOSTIF_PACKET_ATTR_START + 6;
    
//                SAI_HOSTIF_PACKET_ATTR_EGRESS_QUEUE_INDEX = SAI_HOSTIF_PACKET_ATTR_START + 7;
    
//                SAI_HOSTIF_PACKET_ATTR_ZERO_COPY_TX = SAI_HOSTIF_PACKET_ATTR_START + 8;
    ;
}                
    

enum grpc_sai_ipmc_entry_attr_t {
    SAI_IPMC_ENTRY_ATTR_START = 0;
            
//                SAI_IPMC_ENTRY_ATTR_PACKET_ACTION = SAI_IPMC_ENTRY_ATTR_START;
    
//                SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID = SAI_IPMC_ENTRY_ATTR_START + 1;
    
//                SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID = SAI_IPMC_ENTRY_ATTR_START + 2;
    
//                SAI_IPMC_ENTRY_ATTR_COUNTER_ID = SAI_IPMC_ENTRY_ATTR_START + 3;
    ;
}                
    

enum grpc_sai_ipmc_group_attr_t {
    SAI_IPMC_GROUP_ATTR_START = 0;
            
//                SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT = SAI_IPMC_GROUP_ATTR_START;
    
//                SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST = SAI_IPMC_GROUP_ATTR_START + 1;
    ;
}                

enum grpc_sai_ipmc_group_member_attr_t {
    SAI_IPMC_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID = SAI_IPMC_GROUP_MEMBER_ATTR_START;
    
//                SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID = SAI_IPMC_GROUP_MEMBER_ATTR_START + 1;
    ;
}                
    

enum grpc_sai_ipsec_attr_t {
    SAI_IPSEC_ATTR_START = 0;
            
//                SAI_IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED = SAI_IPSEC_ATTR_START;
    
//                SAI_IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED = SAI_IPSEC_ATTR_START + 1;
    
//                SAI_IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED = SAI_IPSEC_ATTR_START + 2;
    
//                SAI_IPSEC_ATTR_STATS_MODE_READ_SUPPORTED = SAI_IPSEC_ATTR_START + 3;
    
//                SAI_IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED = SAI_IPSEC_ATTR_START + 4;
    
//                SAI_IPSEC_ATTR_SN_32BIT_SUPPORTED = SAI_IPSEC_ATTR_START + 5;
    
//                SAI_IPSEC_ATTR_ESN_64BIT_SUPPORTED = SAI_IPSEC_ATTR_START + 6;
    
//                SAI_IPSEC_ATTR_SUPPORTED_CIPHER_LIST = SAI_IPSEC_ATTR_START + 7;
    
//                SAI_IPSEC_ATTR_SYSTEM_SIDE_MTU = SAI_IPSEC_ATTR_START + 8;
    
//                SAI_IPSEC_ATTR_WARM_BOOT_SUPPORTED = SAI_IPSEC_ATTR_START + 9;
    
//                SAI_IPSEC_ATTR_WARM_BOOT_ENABLE = SAI_IPSEC_ATTR_START + 10;
    
//                SAI_IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE = SAI_IPSEC_ATTR_START + 11;
    
//                SAI_IPSEC_ATTR_CTAG_TPID = SAI_IPSEC_ATTR_START + 12;
    
//                SAI_IPSEC_ATTR_STAG_TPID = SAI_IPSEC_ATTR_START + 13;
    
//                SAI_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED = SAI_IPSEC_ATTR_START + 14;
    
//                SAI_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK = SAI_IPSEC_ATTR_START + 15;
    
//                SAI_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK = SAI_IPSEC_ATTR_START + 16;
    
//                SAI_IPSEC_ATTR_STATS_MODE = SAI_IPSEC_ATTR_START + 17;
    
//                SAI_IPSEC_ATTR_AVAILABLE_IPSEC_SA = SAI_IPSEC_ATTR_START + 18;
    
//                SAI_IPSEC_ATTR_SA_LIST = SAI_IPSEC_ATTR_START + 19;
    ;
}                

enum grpc_sai_ipsec_port_attr_t {
    SAI_IPSEC_PORT_ATTR_START = 0;
            
//                SAI_IPSEC_PORT_ATTR_PORT_ID = SAI_IPSEC_PORT_ATTR_START;
    
//                SAI_IPSEC_PORT_ATTR_CTAG_ENABLE = SAI_IPSEC_PORT_ATTR_START + 1;
    
//                SAI_IPSEC_PORT_ATTR_STAG_ENABLE = SAI_IPSEC_PORT_ATTR_START + 2;
    
//                SAI_IPSEC_PORT_ATTR_NATIVE_VLAN_ID = SAI_IPSEC_PORT_ATTR_START + 3;
    
//                SAI_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE = SAI_IPSEC_PORT_ATTR_START + 4;
    
//                SAI_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE = SAI_IPSEC_PORT_ATTR_START + 5;
    ;
}                            

enum grpc_sai_ipsec_sa_attr_t {
    SAI_IPSEC_SA_ATTR_START = 0;
            
//                SAI_IPSEC_SA_ATTR_IPSEC_DIRECTION = SAI_IPSEC_SA_ATTR_START;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_ID = SAI_IPSEC_SA_ATTR_START + 1;
    
//                SAI_IPSEC_SA_ATTR_OCTET_COUNT_STATUS = SAI_IPSEC_SA_ATTR_START + 2;
    
//                SAI_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX = SAI_IPSEC_SA_ATTR_START + 3;
    
//                SAI_IPSEC_SA_ATTR_SA_INDEX = SAI_IPSEC_SA_ATTR_START + 4;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_PORT_LIST = SAI_IPSEC_SA_ATTR_START + 5;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_SPI = SAI_IPSEC_SA_ATTR_START + 6;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_ESN_ENABLE = SAI_IPSEC_SA_ATTR_START + 7;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_CIPHER = SAI_IPSEC_SA_ATTR_START + 8;
    
//                SAI_IPSEC_SA_ATTR_ENCRYPT_KEY = SAI_IPSEC_SA_ATTR_START + 9;
    
//                SAI_IPSEC_SA_ATTR_SALT = SAI_IPSEC_SA_ATTR_START + 10;
    
//                SAI_IPSEC_SA_ATTR_AUTH_KEY = SAI_IPSEC_SA_ATTR_START + 11;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE = SAI_IPSEC_SA_ATTR_START + 12;
    
//                SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW = SAI_IPSEC_SA_ATTR_START + 13;
    
//                SAI_IPSEC_SA_ATTR_TERM_DST_IP = SAI_IPSEC_SA_ATTR_START + 14;
    
//                SAI_IPSEC_SA_ATTR_TERM_VLAN_ID_ENABLE = SAI_IPSEC_SA_ATTR_START + 15;
    
//                SAI_IPSEC_SA_ATTR_TERM_VLAN_ID = SAI_IPSEC_SA_ATTR_START + 16;
    
//                SAI_IPSEC_SA_ATTR_TERM_SRC_IP_ENABLE = SAI_IPSEC_SA_ATTR_START + 17;
    
//                SAI_IPSEC_SA_ATTR_TERM_SRC_IP = SAI_IPSEC_SA_ATTR_START + 18;
    
//                SAI_IPSEC_SA_ATTR_EGRESS_ESN = SAI_IPSEC_SA_ATTR_START + 19;
    
//                SAI_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN = SAI_IPSEC_SA_ATTR_START + 20;
    ;
}                            
    

enum grpc_sai_isolation_group_attr_t {
    SAI_ISOLATION_GROUP_ATTR_START = 0;
            
//                SAI_ISOLATION_GROUP_ATTR_TYPE = SAI_ISOLATION_GROUP_ATTR_START;
    
//                SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST = SAI_ISOLATION_GROUP_ATTR_START + 1;
    ;
}                

enum grpc_sai_isolation_group_member_attr_t {
    SAI_ISOLATION_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID = SAI_ISOLATION_GROUP_MEMBER_ATTR_START;
    
//                SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT = SAI_ISOLATION_GROUP_MEMBER_ATTR_START + 1;
    ;
}                
    

enum grpc_sai_l2mc_entry_attr_t {
    SAI_L2MC_ENTRY_ATTR_START = 0;
            
//                SAI_L2MC_ENTRY_ATTR_PACKET_ACTION = SAI_L2MC_ENTRY_ATTR_START;
    
//                SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID = SAI_L2MC_ENTRY_ATTR_START + 1;
    ;
}                
    

enum grpc_sai_l2mc_group_attr_t {
    SAI_L2MC_GROUP_ATTR_START = 0;
            
//                SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT = SAI_L2MC_GROUP_ATTR_START;
    
//                SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST = SAI_L2MC_GROUP_ATTR_START + 1;
    ;
}                

enum grpc_sai_l2mc_group_member_attr_t {
    SAI_L2MC_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID = SAI_L2MC_GROUP_MEMBER_ATTR_START;
    
//                SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID = SAI_L2MC_GROUP_MEMBER_ATTR_START + 1;
    
//                SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP = SAI_L2MC_GROUP_MEMBER_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_lag_attr_t {
    SAI_LAG_ATTR_START = 0;
            
//                SAI_LAG_ATTR_PORT_LIST = SAI_LAG_ATTR_START;
    
//                SAI_LAG_ATTR_INGRESS_ACL = SAI_LAG_ATTR_START + 1;
    
//                SAI_LAG_ATTR_EGRESS_ACL = SAI_LAG_ATTR_START + 2;
    
//                SAI_LAG_ATTR_PORT_VLAN_ID = SAI_LAG_ATTR_START + 3;
    
//                SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY = SAI_LAG_ATTR_START + 4;
    
//                SAI_LAG_ATTR_DROP_UNTAGGED = SAI_LAG_ATTR_START + 5;
    
//                SAI_LAG_ATTR_DROP_TAGGED = SAI_LAG_ATTR_START + 6;
    
//                SAI_LAG_ATTR_TPID = SAI_LAG_ATTR_START + 7;
    
//                SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID = SAI_LAG_ATTR_START + 8;
    
//                SAI_LAG_ATTR_LABEL = SAI_LAG_ATTR_START + 9;
    
//                SAI_LAG_ATTR_ARS_OBJECT_ID = SAI_LAG_ATTR_START + 10;
    
//                SAI_LAG_ATTR_ARS_PACKET_DROPS = SAI_LAG_ATTR_START + 11;
    
//                SAI_LAG_ATTR_ARS_PORT_REASSIGNMENTS = SAI_LAG_ATTR_START + 12;
    ;
}                

enum grpc_sai_lag_member_attr_t {
    SAI_LAG_MEMBER_ATTR_START = 0;
            
//                SAI_LAG_MEMBER_ATTR_LAG_ID = SAI_LAG_MEMBER_ATTR_START;
    
//                SAI_LAG_MEMBER_ATTR_PORT_ID = SAI_LAG_MEMBER_ATTR_START + 1;
    
//                SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE = SAI_LAG_MEMBER_ATTR_START + 2;
    
//                SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE = SAI_LAG_MEMBER_ATTR_START + 3;
    ;
}                
    

enum grpc_sai_macsec_attr_t {
    SAI_MACSEC_ATTR_START = 0;
            
//                SAI_MACSEC_ATTR_DIRECTION = SAI_MACSEC_ATTR_START;
    
//                SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED = SAI_MACSEC_ATTR_START + 1;
    
//                SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED = SAI_MACSEC_ATTR_START + 2;
    
//                SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED = SAI_MACSEC_ATTR_START + 3;
    
//                SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED = SAI_MACSEC_ATTR_START + 4;
    
//                SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL = SAI_MACSEC_ATTR_START + 5;
    
//                SAI_MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST = SAI_MACSEC_ATTR_START + 6;
    
//                SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED = SAI_MACSEC_ATTR_START + 7;
    
//                SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED = SAI_MACSEC_ATTR_START + 8;
    
//                SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED = SAI_MACSEC_ATTR_START + 9;
    
//                SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED = SAI_MACSEC_ATTR_START + 10;
    
//                SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED = SAI_MACSEC_ATTR_START + 11;
    
//                SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU = SAI_MACSEC_ATTR_START + 12;
    
//                SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED = SAI_MACSEC_ATTR_START + 13;
    
//                SAI_MACSEC_ATTR_WARM_BOOT_ENABLE = SAI_MACSEC_ATTR_START + 14;
    
//                SAI_MACSEC_ATTR_CTAG_TPID = SAI_MACSEC_ATTR_START + 15;
    
//                SAI_MACSEC_ATTR_STAG_TPID = SAI_MACSEC_ATTR_START + 16;
    
//                SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED = SAI_MACSEC_ATTR_START + 17;
    
//                SAI_MACSEC_ATTR_STATS_MODE = SAI_MACSEC_ATTR_START + 18;
    
//                SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE = SAI_MACSEC_ATTR_START + 19;
    
//                SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST = SAI_MACSEC_ATTR_START + 20;
    
//                SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW = SAI_MACSEC_ATTR_START + 21;
    
//                SAI_MACSEC_ATTR_FLOW_LIST = SAI_MACSEC_ATTR_START + 22;
    
//                SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC = SAI_MACSEC_ATTR_START + 23;
    
//                SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA = SAI_MACSEC_ATTR_START + 24;
    
//                SAI_MACSEC_ATTR_MAX_SECURE_ASSOCIATIONS_PER_SC = SAI_MACSEC_ATTR_START + 25;
    ;
}                

enum grpc_sai_macsec_port_attr_t {
    SAI_MACSEC_PORT_ATTR_START = 0;
            
//                SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION = SAI_MACSEC_PORT_ATTR_START;
    
//                SAI_MACSEC_PORT_ATTR_PORT_ID = SAI_MACSEC_PORT_ATTR_START + 1;
    
//                SAI_MACSEC_PORT_ATTR_CTAG_ENABLE = SAI_MACSEC_PORT_ATTR_START + 2;
    
//                SAI_MACSEC_PORT_ATTR_STAG_ENABLE = SAI_MACSEC_PORT_ATTR_START + 3;
    
//                SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE = SAI_MACSEC_PORT_ATTR_START + 4;
    ;
}                            

enum grpc_sai_macsec_flow_attr_t {
    SAI_MACSEC_FLOW_ATTR_START = 0;
            
//                SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION = SAI_MACSEC_FLOW_ATTR_START;
    
//                SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST = SAI_MACSEC_FLOW_ATTR_START + 1;
    
//                SAI_MACSEC_FLOW_ATTR_SC_LIST = SAI_MACSEC_FLOW_ATTR_START + 2;
    ;
}                            

enum grpc_sai_macsec_sc_attr_t {
    SAI_MACSEC_SC_ATTR_START = 0;
            
//                SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION = SAI_MACSEC_SC_ATTR_START;
    
//                SAI_MACSEC_SC_ATTR_FLOW_ID = SAI_MACSEC_SC_ATTR_START + 1;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_SCI = SAI_MACSEC_SC_ATTR_START + 2;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE = SAI_MACSEC_SC_ATTR_START + 3;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET = SAI_MACSEC_SC_ATTR_START + 4;
    
//                SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID = SAI_MACSEC_SC_ATTR_START + 5;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE = SAI_MACSEC_SC_ATTR_START + 6;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW = SAI_MACSEC_SC_ATTR_START + 7;
    
//                SAI_MACSEC_SC_ATTR_SA_LIST = SAI_MACSEC_SC_ATTR_START + 8;
    
//                SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE = SAI_MACSEC_SC_ATTR_START + 9;
    
//                SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE = SAI_MACSEC_SC_ATTR_START + 10;
    ;
}                            

enum grpc_sai_macsec_sa_attr_t {
    SAI_MACSEC_SA_ATTR_START = 0;
            
//                SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION = SAI_MACSEC_SA_ATTR_START;
    
//                SAI_MACSEC_SA_ATTR_SC_ID = SAI_MACSEC_SA_ATTR_START + 1;
    
//                SAI_MACSEC_SA_ATTR_AN = SAI_MACSEC_SA_ATTR_START + 2;
    
//                SAI_MACSEC_SA_ATTR_SAK = SAI_MACSEC_SA_ATTR_START + 3;
    
//                SAI_MACSEC_SA_ATTR_SALT = SAI_MACSEC_SA_ATTR_START + 4;
    
//                SAI_MACSEC_SA_ATTR_AUTH_KEY = SAI_MACSEC_SA_ATTR_START + 5;
    
//                SAI_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN = SAI_MACSEC_SA_ATTR_START + 6;
    
//                SAI_MACSEC_SA_ATTR_CURRENT_XPN = SAI_MACSEC_SA_ATTR_START + 7;
    
//                SAI_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN = SAI_MACSEC_SA_ATTR_START + 8;
    
//                SAI_MACSEC_SA_ATTR_MACSEC_SSCI = SAI_MACSEC_SA_ATTR_START + 9;
    ;
}                            
    

enum grpc_sai_mcast_fdb_entry_attr_t {
    SAI_MCAST_FDB_ENTRY_ATTR_START = 0;
            
//                SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID = SAI_MCAST_FDB_ENTRY_ATTR_START;
    
//                SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION = SAI_MCAST_FDB_ENTRY_ATTR_START + 1;
    
//                SAI_MCAST_FDB_ENTRY_ATTR_META_DATA = SAI_MCAST_FDB_ENTRY_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_mirror_session_attr_t {
    SAI_MIRROR_SESSION_ATTR_START = 0;
            
//                SAI_MIRROR_SESSION_ATTR_TYPE = SAI_MIRROR_SESSION_ATTR_START;
    
//                SAI_MIRROR_SESSION_ATTR_MONITOR_PORT = SAI_MIRROR_SESSION_ATTR_START + 1;
    
//                SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE = SAI_MIRROR_SESSION_ATTR_START + 2;
    
//                SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE = SAI_MIRROR_SESSION_ATTR_START + 3;
    
//                SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE = SAI_MIRROR_SESSION_ATTR_START + 4;
    
//                SAI_MIRROR_SESSION_ATTR_TC = SAI_MIRROR_SESSION_ATTR_START + 5;
    
//                SAI_MIRROR_SESSION_ATTR_VLAN_TPID = SAI_MIRROR_SESSION_ATTR_START + 6;
    
//                SAI_MIRROR_SESSION_ATTR_VLAN_ID = SAI_MIRROR_SESSION_ATTR_START + 7;
    
//                SAI_MIRROR_SESSION_ATTR_VLAN_PRI = SAI_MIRROR_SESSION_ATTR_START + 8;
    
//                SAI_MIRROR_SESSION_ATTR_VLAN_CFI = SAI_MIRROR_SESSION_ATTR_START + 9;
    
//                SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID = SAI_MIRROR_SESSION_ATTR_START + 10;
    
//                SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE = SAI_MIRROR_SESSION_ATTR_START + 11;
    
//                SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION = SAI_MIRROR_SESSION_ATTR_START + 12;
    
//                SAI_MIRROR_SESSION_ATTR_TOS = SAI_MIRROR_SESSION_ATTR_START + 13;
    
//                SAI_MIRROR_SESSION_ATTR_TTL = SAI_MIRROR_SESSION_ATTR_START + 14;
    
//                SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS = SAI_MIRROR_SESSION_ATTR_START + 15;
    
//                SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS = SAI_MIRROR_SESSION_ATTR_START + 16;
    
//                SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS = SAI_MIRROR_SESSION_ATTR_START + 17;
    
//                SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS = SAI_MIRROR_SESSION_ATTR_START + 18;
    
//                SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE = SAI_MIRROR_SESSION_ATTR_START + 19;
    
//                SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID = SAI_MIRROR_SESSION_ATTR_START + 20;
    
//                SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST = SAI_MIRROR_SESSION_ATTR_START + 21;
    
//                SAI_MIRROR_SESSION_ATTR_POLICER = SAI_MIRROR_SESSION_ATTR_START + 22;
    
//                SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT = SAI_MIRROR_SESSION_ATTR_START + 23;
    
//                SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT = SAI_MIRROR_SESSION_ATTR_START + 24;
    
//                SAI_MIRROR_SESSION_ATTR_COUNTER_ID = SAI_MIRROR_SESSION_ATTR_START + 25;
    ;
}                
    

enum grpc_sai_inseg_entry_attr_t {
    SAI_INSEG_ENTRY_ATTR_START = 0;
            
//                SAI_INSEG_ENTRY_ATTR_NUM_OF_POP = SAI_INSEG_ENTRY_ATTR_START;
    
//                SAI_INSEG_ENTRY_ATTR_PACKET_ACTION = SAI_INSEG_ENTRY_ATTR_START + 1;
    
//                SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY = SAI_INSEG_ENTRY_ATTR_START + 2;
    
//                SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID = SAI_INSEG_ENTRY_ATTR_START + 3;
    
//                SAI_INSEG_ENTRY_ATTR_PSC_TYPE = SAI_INSEG_ENTRY_ATTR_START + 4;
    
//                SAI_INSEG_ENTRY_ATTR_QOS_TC = SAI_INSEG_ENTRY_ATTR_START + 5;
    
//                SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP = SAI_INSEG_ENTRY_ATTR_START + 6;
    
//                SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP = SAI_INSEG_ENTRY_ATTR_START + 7;
    
//                SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE = SAI_INSEG_ENTRY_ATTR_START + 8;
    
//                SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE = SAI_INSEG_ENTRY_ATTR_START + 9;
    
//                SAI_INSEG_ENTRY_ATTR_COUNTER_ID = SAI_INSEG_ENTRY_ATTR_START + 10;
    ;
}                                
    

enum grpc_sai_my_mac_attr_t {
    SAI_MY_MAC_ATTR_START = 0;
            
//                SAI_MY_MAC_ATTR_PRIORITY = SAI_MY_MAC_ATTR_START;
    
//                SAI_MY_MAC_ATTR_PORT_ID = SAI_MY_MAC_ATTR_START + 1;
    
//                SAI_MY_MAC_ATTR_VLAN_ID = SAI_MY_MAC_ATTR_START + 2;
    
//                SAI_MY_MAC_ATTR_MAC_ADDRESS = SAI_MY_MAC_ATTR_START + 3;
    
//                SAI_MY_MAC_ATTR_MAC_ADDRESS_MASK = SAI_MY_MAC_ATTR_START + 4;
    ;
}                
    

enum grpc_sai_nat_entry_attr_t {
    SAI_NAT_ENTRY_ATTR_START = 0;
            
//                SAI_NAT_ENTRY_ATTR_NAT_TYPE = SAI_NAT_ENTRY_ATTR_START;
    
//                SAI_NAT_ENTRY_ATTR_SRC_IP = SAI_NAT_ENTRY_ATTR_START + 1;
    
//                SAI_NAT_ENTRY_ATTR_SRC_IP_MASK = SAI_NAT_ENTRY_ATTR_START + 2;
    
//                SAI_NAT_ENTRY_ATTR_VR_ID = SAI_NAT_ENTRY_ATTR_START + 3;
    
//                SAI_NAT_ENTRY_ATTR_DST_IP = SAI_NAT_ENTRY_ATTR_START + 4;
    
//                SAI_NAT_ENTRY_ATTR_DST_IP_MASK = SAI_NAT_ENTRY_ATTR_START + 5;
    
//                SAI_NAT_ENTRY_ATTR_L4_SRC_PORT = SAI_NAT_ENTRY_ATTR_START + 6;
    
//                SAI_NAT_ENTRY_ATTR_L4_DST_PORT = SAI_NAT_ENTRY_ATTR_START + 7;
    
//                SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT = SAI_NAT_ENTRY_ATTR_START + 8;
    
//                SAI_NAT_ENTRY_ATTR_PACKET_COUNT = SAI_NAT_ENTRY_ATTR_START + 9;
    
//                SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT = SAI_NAT_ENTRY_ATTR_START + 10;
    
//                SAI_NAT_ENTRY_ATTR_BYTE_COUNT = SAI_NAT_ENTRY_ATTR_START + 11;
    
//                SAI_NAT_ENTRY_ATTR_HIT_BIT_COR = SAI_NAT_ENTRY_ATTR_START + 12;
    
//                SAI_NAT_ENTRY_ATTR_HIT_BIT = SAI_NAT_ENTRY_ATTR_START + 13;
    
//                SAI_NAT_ENTRY_ATTR_AGING_TIME = SAI_NAT_ENTRY_ATTR_START + 14;
    ;
}                                

enum grpc_sai_nat_zone_counter_attr_t {
    SAI_NAT_ZONE_COUNTER_ATTR_START = 0;
            
//                SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE = SAI_NAT_ZONE_COUNTER_ATTR_START;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID = SAI_NAT_ZONE_COUNTER_ATTR_START + 1;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD = SAI_NAT_ZONE_COUNTER_ATTR_START + 2;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT = SAI_NAT_ZONE_COUNTER_ATTR_START + 3;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED = SAI_NAT_ZONE_COUNTER_ATTR_START + 4;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT = SAI_NAT_ZONE_COUNTER_ATTR_START + 5;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS = SAI_NAT_ZONE_COUNTER_ATTR_START + 6;
    
//                SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT = SAI_NAT_ZONE_COUNTER_ATTR_START + 7;
    ;
}                
    

enum grpc_sai_neighbor_entry_attr_t {
    SAI_NEIGHBOR_ENTRY_ATTR_START = 0;
            
//                SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS = SAI_NEIGHBOR_ENTRY_ATTR_START;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION = SAI_NEIGHBOR_ENTRY_ATTR_START + 1;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID = SAI_NEIGHBOR_ENTRY_ATTR_START + 2;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE = SAI_NEIGHBOR_ENTRY_ATTR_START + 3;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_META_DATA = SAI_NEIGHBOR_ENTRY_ATTR_START + 4;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID = SAI_NEIGHBOR_ENTRY_ATTR_START + 5;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX = SAI_NEIGHBOR_ENTRY_ATTR_START + 6;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX = SAI_NEIGHBOR_ENTRY_ATTR_START + 7;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL = SAI_NEIGHBOR_ENTRY_ATTR_START + 8;
    
//                SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY = SAI_NEIGHBOR_ENTRY_ATTR_START + 9;
    ;
}                                
    

enum grpc_sai_next_hop_attr_t {
    SAI_NEXT_HOP_ATTR_START = 0;
            
//                SAI_NEXT_HOP_ATTR_TYPE = SAI_NEXT_HOP_ATTR_START;
    
//                SAI_NEXT_HOP_ATTR_IP = SAI_NEXT_HOP_ATTR_START + 1;
    
//                SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID = SAI_NEXT_HOP_ATTR_START + 2;
    
//                SAI_NEXT_HOP_ATTR_TUNNEL_ID = SAI_NEXT_HOP_ATTR_START + 3;
    
//                SAI_NEXT_HOP_ATTR_TUNNEL_VNI = SAI_NEXT_HOP_ATTR_START + 4;
    
//                SAI_NEXT_HOP_ATTR_TUNNEL_MAC = SAI_NEXT_HOP_ATTR_START + 5;
    
//                SAI_NEXT_HOP_ATTR_SRV6_SIDLIST_ID = SAI_NEXT_HOP_ATTR_START + 6;
    
//                SAI_NEXT_HOP_ATTR_LABELSTACK = SAI_NEXT_HOP_ATTR_START + 7;
    
//                SAI_NEXT_HOP_ATTR_COUNTER_ID = SAI_NEXT_HOP_ATTR_START + 8;
    
//                SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL = SAI_NEXT_HOP_ATTR_START + 9;
    
//                SAI_NEXT_HOP_ATTR_OUTSEG_TYPE = SAI_NEXT_HOP_ATTR_START + 10;
    
//                SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE = SAI_NEXT_HOP_ATTR_START + 11;
    
//                SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE = SAI_NEXT_HOP_ATTR_START + 12;
    
//                SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE = SAI_NEXT_HOP_ATTR_START + 13;
    
//                SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE = SAI_NEXT_HOP_ATTR_START + 14;
    
//                SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP = SAI_NEXT_HOP_ATTR_START + 15;
    ;
}                
    

enum grpc_sai_next_hop_group_attr_t {
    SAI_NEXT_HOP_GROUP_ATTR_START = 0;
            
//                SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT = SAI_NEXT_HOP_GROUP_ATTR_START;
    
//                SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST = SAI_NEXT_HOP_GROUP_ATTR_START + 1;
    
//                SAI_NEXT_HOP_GROUP_ATTR_TYPE = SAI_NEXT_HOP_GROUP_ATTR_START + 2;
    
//                SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER = SAI_NEXT_HOP_GROUP_ATTR_START + 3;
    
//                SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID = SAI_NEXT_HOP_GROUP_ATTR_START + 4;
    
//                SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE = SAI_NEXT_HOP_GROUP_ATTR_START + 5;
    
//                SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE = SAI_NEXT_HOP_GROUP_ATTR_START + 6;
    
//                SAI_NEXT_HOP_GROUP_ATTR_SELECTION_MAP = SAI_NEXT_HOP_GROUP_ATTR_START + 7;
    
//                SAI_NEXT_HOP_GROUP_ATTR_HIERARCHICAL_NEXTHOP = SAI_NEXT_HOP_GROUP_ATTR_START + 8;
    
//                SAI_NEXT_HOP_GROUP_ATTR_ARS_OBJECT_ID = SAI_NEXT_HOP_GROUP_ATTR_START + 9;
    
//                SAI_NEXT_HOP_GROUP_ATTR_ARS_PACKET_DROPS = SAI_NEXT_HOP_GROUP_ATTR_START + 10;
    
//                SAI_NEXT_HOP_GROUP_ATTR_ARS_NEXT_HOP_REASSIGNMENTS = SAI_NEXT_HOP_GROUP_ATTR_START + 11;
    
//                SAI_NEXT_HOP_GROUP_ATTR_ARS_PORT_REASSIGNMENTS = SAI_NEXT_HOP_GROUP_ATTR_START + 12;
    ;
}                

enum grpc_sai_next_hop_group_member_attr_t {
    SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 1;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 2;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 3;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 4;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 5;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 6;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 7;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 8;
    
//                SAI_NEXT_HOP_GROUP_MEMBER_ATTR_ARS_ALTERNATE_PATH = SAI_NEXT_HOP_GROUP_MEMBER_ATTR_START + 9;
    ;
}                

enum grpc_sai_next_hop_group_map_attr_t {
    SAI_NEXT_HOP_GROUP_MAP_ATTR_START = 0;
            
//                SAI_NEXT_HOP_GROUP_MAP_ATTR_TYPE = SAI_NEXT_HOP_GROUP_MAP_ATTR_START;
    
//                SAI_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST = SAI_NEXT_HOP_GROUP_MAP_ATTR_START + 1;
    ;
}                
    
    

enum grpc_sai_policer_attr_t {
    SAI_POLICER_ATTR_START = 0;
            
//                SAI_POLICER_ATTR_METER_TYPE = SAI_POLICER_ATTR_START;
    
//                SAI_POLICER_ATTR_MODE = 0x00000001;
    
//                SAI_POLICER_ATTR_COLOR_SOURCE = 0x00000002;
    
//                SAI_POLICER_ATTR_CBS = 0x00000003;
    
//                SAI_POLICER_ATTR_CIR = 0x00000004;
    
//                SAI_POLICER_ATTR_PBS = 0x00000005;
    
//                SAI_POLICER_ATTR_PIR = 0x00000006;
    
//                SAI_POLICER_ATTR_GREEN_PACKET_ACTION = 0x00000007;
    
//                SAI_POLICER_ATTR_YELLOW_PACKET_ACTION = 0x00000008;
    
//                SAI_POLICER_ATTR_RED_PACKET_ACTION = 0x00000009;
    
//                SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST = 0x0000000a;
    
//                SAI_POLICER_ATTR_OBJECT_STAGE = 0x0000000b;
    ;
}                            
    

enum grpc_sai_port_attr_t {
    SAI_PORT_ATTR_START = 0;
            
//                SAI_PORT_ATTR_TYPE = SAI_PORT_ATTR_START;
    
//                SAI_PORT_ATTR_OPER_STATUS = SAI_PORT_ATTR_START + 1;
    
//                SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE = SAI_PORT_ATTR_START + 2;
    
//                SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE = SAI_PORT_ATTR_START + 3;
    
//                SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES = SAI_PORT_ATTR_START + 4;
    
//                SAI_PORT_ATTR_QOS_QUEUE_LIST = SAI_PORT_ATTR_START + 5;
    
//                SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS = SAI_PORT_ATTR_START + 6;
    
//                SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST = SAI_PORT_ATTR_START + 7;
    
//                SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE = SAI_PORT_ATTR_START + 8;
    
//                SAI_PORT_ATTR_SUPPORTED_SPEED = SAI_PORT_ATTR_START + 9;
    
//                SAI_PORT_ATTR_SUPPORTED_FEC_MODE = SAI_PORT_ATTR_START + 10;
    
//                SAI_PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED = SAI_PORT_ATTR_START + 11;
    
//                SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED = SAI_PORT_ATTR_START + 12;
    
//                SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE = SAI_PORT_ATTR_START + 13;
    
//                SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE = SAI_PORT_ATTR_START + 14;
    
//                SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE = SAI_PORT_ATTR_START + 15;
    
//                SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE = SAI_PORT_ATTR_START + 16;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED = SAI_PORT_ATTR_START + 17;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE = SAI_PORT_ATTR_START + 18;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED = SAI_PORT_ATTR_START + 19;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED = SAI_PORT_ATTR_START + 20;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE = SAI_PORT_ATTR_START + 21;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE = SAI_PORT_ATTR_START + 22;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE = SAI_PORT_ATTR_START + 23;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE = SAI_PORT_ATTR_START + 24;
    
//                SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE = SAI_PORT_ATTR_START + 25;
    
//                SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS = SAI_PORT_ATTR_START + 26;
    
//                SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST = SAI_PORT_ATTR_START + 27;
    
//                SAI_PORT_ATTR_EYE_VALUES = SAI_PORT_ATTR_START + 28;
    
//                SAI_PORT_ATTR_OPER_SPEED = SAI_PORT_ATTR_START + 29;
    
//                SAI_PORT_ATTR_HW_LANE_LIST = SAI_PORT_ATTR_START + 30;
    
//                SAI_PORT_ATTR_SPEED = SAI_PORT_ATTR_START + 31;
    
//                SAI_PORT_ATTR_FULL_DUPLEX_MODE = SAI_PORT_ATTR_START + 32;
    
//                SAI_PORT_ATTR_AUTO_NEG_MODE = SAI_PORT_ATTR_START + 33;
    
//                SAI_PORT_ATTR_ADMIN_STATE = SAI_PORT_ATTR_START + 34;
    
//                SAI_PORT_ATTR_MEDIA_TYPE = SAI_PORT_ATTR_START + 35;
    
//                SAI_PORT_ATTR_ADVERTISED_SPEED = SAI_PORT_ATTR_START + 36;
    
//                SAI_PORT_ATTR_ADVERTISED_FEC_MODE = SAI_PORT_ATTR_START + 37;
    
//                SAI_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED = SAI_PORT_ATTR_START + 38;
    
//                SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED = SAI_PORT_ATTR_START + 39;
    
//                SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE = SAI_PORT_ATTR_START + 40;
    
//                SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE = SAI_PORT_ATTR_START + 41;
    
//                SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE = SAI_PORT_ATTR_START + 42;
    
//                SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE = SAI_PORT_ATTR_START + 43;
    
//                SAI_PORT_ATTR_ADVERTISED_OUI_CODE = SAI_PORT_ATTR_START + 44;
    
//                SAI_PORT_ATTR_PORT_VLAN_ID = SAI_PORT_ATTR_START + 45;
    
//                SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY = SAI_PORT_ATTR_START + 46;
    
//                SAI_PORT_ATTR_DROP_UNTAGGED = SAI_PORT_ATTR_START + 47;
    
//                SAI_PORT_ATTR_DROP_TAGGED = SAI_PORT_ATTR_START + 48;
    
//                SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE = SAI_PORT_ATTR_START + 49;
    
//                SAI_PORT_ATTR_USE_EXTENDED_FEC = SAI_PORT_ATTR_START + 50;
    
//                SAI_PORT_ATTR_FEC_MODE = SAI_PORT_ATTR_START + 51;
    
//                SAI_PORT_ATTR_FEC_MODE_EXTENDED = SAI_PORT_ATTR_START + 52;
    
//                SAI_PORT_ATTR_UPDATE_DSCP = SAI_PORT_ATTR_START + 53;
    
//                SAI_PORT_ATTR_MTU = SAI_PORT_ATTR_START + 54;
    
//                SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID = SAI_PORT_ATTR_START + 55;
    
//                SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID = SAI_PORT_ATTR_START + 56;
    
//                SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID = SAI_PORT_ATTR_START + 57;
    
//                SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE = SAI_PORT_ATTR_START + 58;
    
//                SAI_PORT_ATTR_INGRESS_ACL = SAI_PORT_ATTR_START + 59;
    
//                SAI_PORT_ATTR_EGRESS_ACL = SAI_PORT_ATTR_START + 60;
    
//                SAI_PORT_ATTR_INGRESS_MACSEC_ACL = SAI_PORT_ATTR_START + 61;
    
//                SAI_PORT_ATTR_EGRESS_MACSEC_ACL = SAI_PORT_ATTR_START + 62;
    
//                SAI_PORT_ATTR_MACSEC_PORT_LIST = SAI_PORT_ATTR_START + 63;
    
//                SAI_PORT_ATTR_INGRESS_MIRROR_SESSION = SAI_PORT_ATTR_START + 64;
    
//                SAI_PORT_ATTR_EGRESS_MIRROR_SESSION = SAI_PORT_ATTR_START + 65;
    
//                SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE = SAI_PORT_ATTR_START + 66;
    
//                SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE = SAI_PORT_ATTR_START + 67;
    
//                SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION = SAI_PORT_ATTR_START + 68;
    
//                SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION = SAI_PORT_ATTR_START + 69;
    
//                SAI_PORT_ATTR_POLICER_ID = SAI_PORT_ATTR_START + 70;
    
//                SAI_PORT_ATTR_QOS_DEFAULT_TC = SAI_PORT_ATTR_START + 71;
    
//                SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP = SAI_PORT_ATTR_START + 72;
    
//                SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP = SAI_PORT_ATTR_START + 73;
    
//                SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP = SAI_PORT_ATTR_START + 74;
    
//                SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP = SAI_PORT_ATTR_START + 75;
    
//                SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP = SAI_PORT_ATTR_START + 76;
    
//                SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP = SAI_PORT_ATTR_START + 77;
    
//                SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP = SAI_PORT_ATTR_START + 78;
    
//                SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP = SAI_PORT_ATTR_START + 79;
    
//                SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP = SAI_PORT_ATTR_START + 80;
    
//                SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP = SAI_PORT_ATTR_START + 81;
    
//                SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID = SAI_PORT_ATTR_START + 82;
    
//                SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST = SAI_PORT_ATTR_START + 83;
    
//                SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST = SAI_PORT_ATTR_START + 84;
    
//                SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE = SAI_PORT_ATTR_START + 85;
    
//                SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL = SAI_PORT_ATTR_START + 86;
    
//                SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX = SAI_PORT_ATTR_START + 87;
    
//                SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX = SAI_PORT_ATTR_START + 88;
    
//                SAI_PORT_ATTR_META_DATA = SAI_PORT_ATTR_START + 89;
    
//                SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST = SAI_PORT_ATTR_START + 90;
    
//                SAI_PORT_ATTR_HW_PROFILE_ID = SAI_PORT_ATTR_START + 91;
    
//                SAI_PORT_ATTR_EEE_ENABLE = SAI_PORT_ATTR_START + 92;
    
//                SAI_PORT_ATTR_EEE_IDLE_TIME = SAI_PORT_ATTR_START + 93;
    
//                SAI_PORT_ATTR_EEE_WAKE_TIME = SAI_PORT_ATTR_START + 94;
    
//                SAI_PORT_ATTR_PORT_POOL_LIST = SAI_PORT_ATTR_START + 95;
    
//                SAI_PORT_ATTR_ISOLATION_GROUP = SAI_PORT_ATTR_START + 96;
    
//                SAI_PORT_ATTR_PKT_TX_ENABLE = SAI_PORT_ATTR_START + 97;
    
//                SAI_PORT_ATTR_TAM_OBJECT = SAI_PORT_ATTR_START + 98;
    
//                SAI_PORT_ATTR_SERDES_PREEMPHASIS = SAI_PORT_ATTR_START + 99;
    
//                SAI_PORT_ATTR_SERDES_IDRIVER = SAI_PORT_ATTR_START + 100;
    
//                SAI_PORT_ATTR_SERDES_IPREDRIVER = SAI_PORT_ATTR_START + 101;
    
//                SAI_PORT_ATTR_LINK_TRAINING_ENABLE = SAI_PORT_ATTR_START + 102;
    
//                SAI_PORT_ATTR_PTP_MODE = SAI_PORT_ATTR_START + 103;
    
//                SAI_PORT_ATTR_INTERFACE_TYPE = SAI_PORT_ATTR_START + 104;
    
//                SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE = SAI_PORT_ATTR_START + 105;
    
//                SAI_PORT_ATTR_REFERENCE_CLOCK = SAI_PORT_ATTR_START + 106;
    
//                SAI_PORT_ATTR_PRBS_POLYNOMIAL = SAI_PORT_ATTR_START + 107;
    
//                SAI_PORT_ATTR_PORT_SERDES_ID = SAI_PORT_ATTR_START + 108;
    
//                SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS = SAI_PORT_ATTR_START + 109;
    
//                SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS = SAI_PORT_ATTR_START + 110;
    
//                SAI_PORT_ATTR_PRBS_CONFIG = SAI_PORT_ATTR_START + 111;
    
//                SAI_PORT_ATTR_PRBS_LOCK_STATUS = SAI_PORT_ATTR_START + 112;
    
//                SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS = SAI_PORT_ATTR_START + 113;
    
//                SAI_PORT_ATTR_PRBS_RX_STATUS = SAI_PORT_ATTR_START + 114;
    
//                SAI_PORT_ATTR_PRBS_RX_STATE = SAI_PORT_ATTR_START + 115;
    
//                SAI_PORT_ATTR_AUTO_NEG_STATUS = SAI_PORT_ATTR_START + 116;
    
//                SAI_PORT_ATTR_DISABLE_DECREMENT_TTL = SAI_PORT_ATTR_START + 117;
    
//                SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP = SAI_PORT_ATTR_START + 118;
    
//                SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP = SAI_PORT_ATTR_START + 119;
    
//                SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP = SAI_PORT_ATTR_START + 120;
    
//                SAI_PORT_ATTR_TPID = SAI_PORT_ATTR_START + 121;
    
//                SAI_PORT_ATTR_ERR_STATUS_LIST = SAI_PORT_ATTR_START + 122;
    
//                SAI_PORT_ATTR_FABRIC_ATTACHED = SAI_PORT_ATTR_START + 123;
    
//                SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE = SAI_PORT_ATTR_START + 124;
    
//                SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID = SAI_PORT_ATTR_START + 125;
    
//                SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX = SAI_PORT_ATTR_START + 126;
    
//                SAI_PORT_ATTR_FABRIC_REACHABILITY = SAI_PORT_ATTR_START + 127;
    
//                SAI_PORT_ATTR_SYSTEM_PORT = SAI_PORT_ATTR_START + 128;
    
//                SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE = SAI_PORT_ATTR_START + 129;
    
//                SAI_PORT_ATTR_LOOPBACK_MODE = SAI_PORT_ATTR_START + 130;
    
//                SAI_PORT_ATTR_MDIX_MODE_STATUS = SAI_PORT_ATTR_START + 131;
    
//                SAI_PORT_ATTR_MDIX_MODE_CONFIG = SAI_PORT_ATTR_START + 132;
    
//                SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE = SAI_PORT_ATTR_START + 133;
    
//                SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT = SAI_PORT_ATTR_START + 134;
    
//                SAI_PORT_ATTR_MODULE_TYPE = SAI_PORT_ATTR_START + 135;
    
//                SAI_PORT_ATTR_DUAL_MEDIA = SAI_PORT_ATTR_START + 136;
    
//                SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED = SAI_PORT_ATTR_START + 137;
    
//                SAI_PORT_ATTR_IPG = SAI_PORT_ATTR_START + 138;
    
//                SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD = SAI_PORT_ATTR_START + 139;
    
//                SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD = SAI_PORT_ATTR_START + 140;
    
//                SAI_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP = SAI_PORT_ATTR_START + 141;
    
//                SAI_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP = SAI_PORT_ATTR_START + 142;
    
//                SAI_PORT_ATTR_IPSEC_PORT = SAI_PORT_ATTR_START + 143;
    
//                SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL_RANGE = SAI_PORT_ATTR_START + 144;
    
//                SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL = SAI_PORT_ATTR_START + 145;
    
//                SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL_RANGE = SAI_PORT_ATTR_START + 146;
    
//                SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL = SAI_PORT_ATTR_START + 147;
    
//                SAI_PORT_ATTR_SUPPORTED_LINK_TRAINING_MODE = SAI_PORT_ATTR_START + 148;
    
//                SAI_PORT_ATTR_RX_SIGNAL_DETECT = SAI_PORT_ATTR_START + 149;
    
//                SAI_PORT_ATTR_RX_LOCK_STATUS = SAI_PORT_ATTR_START + 150;
    
//                SAI_PORT_ATTR_PCS_RX_LINK_STATUS = SAI_PORT_ATTR_START + 151;
    
//                SAI_PORT_ATTR_FEC_ALIGNMENT_LOCK = SAI_PORT_ATTR_START + 152;
    
//                SAI_PORT_ATTR_FABRIC_ISOLATE = SAI_PORT_ATTR_START + 153;
    
//                SAI_PORT_ATTR_MAX_FEC_SYMBOL_ERRORS_DETECTABLE = SAI_PORT_ATTR_START + 154;
    
//                SAI_PORT_ATTR_ARS_ENABLE = SAI_PORT_ATTR_START + 155;
    
//                SAI_PORT_ATTR_ARS_PORT_LOAD_SCALING_FACTOR = SAI_PORT_ATTR_START + 156;
    
//                SAI_PORT_ATTR_ARS_PORT_LOAD_PAST_ENABLE = SAI_PORT_ATTR_START + 157;
    
//                SAI_PORT_ATTR_ARS_PORT_LOAD_FUTURE_ENABLE = SAI_PORT_ATTR_START + 158;
    
//                SAI_PORT_ATTR_ARS_ALTERNATE_PATH = SAI_PORT_ATTR_START + 159;
    
//                SAI_PORT_ATTR_JSON_FORMATTED_DEBUG_DATA = SAI_PORT_ATTR_START + 160;
    
//                SAI_PORT_ATTR_ECMP_HASH_ALGORITHM = SAI_PORT_ATTR_START + 161;
    
//                SAI_PORT_ATTR_ECMP_HASH_SEED = SAI_PORT_ATTR_START + 162;
    
//                SAI_PORT_ATTR_ECMP_HASH_OFFSET = SAI_PORT_ATTR_START + 163;
    
//                SAI_PORT_ATTR_OPER_PORT_FEC_MODE = SAI_PORT_ATTR_START + 164;
    ;
}                            

enum grpc_sai_port_pool_attr_t {
    SAI_PORT_POOL_ATTR_START = 0;
            
//                SAI_PORT_POOL_ATTR_PORT_ID = SAI_PORT_POOL_ATTR_START;
    
//                SAI_PORT_POOL_ATTR_BUFFER_POOL_ID = SAI_PORT_POOL_ATTR_START + 1;
    
//                SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID = SAI_PORT_POOL_ATTR_START + 2;
    ;
}                            

enum grpc_sai_port_serdes_attr_t {
    SAI_PORT_SERDES_ATTR_START = 0;
            
//                SAI_PORT_SERDES_ATTR_PORT_ID = SAI_PORT_SERDES_ATTR_START;
    
//                SAI_PORT_SERDES_ATTR_PREEMPHASIS = SAI_PORT_SERDES_ATTR_START + 1;
    
//                SAI_PORT_SERDES_ATTR_IDRIVER = SAI_PORT_SERDES_ATTR_START + 2;
    
//                SAI_PORT_SERDES_ATTR_IPREDRIVER = SAI_PORT_SERDES_ATTR_START + 3;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_PRE1 = SAI_PORT_SERDES_ATTR_START + 4;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_PRE2 = SAI_PORT_SERDES_ATTR_START + 5;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_PRE3 = SAI_PORT_SERDES_ATTR_START + 6;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_MAIN = SAI_PORT_SERDES_ATTR_START + 7;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_POST1 = SAI_PORT_SERDES_ATTR_START + 8;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_POST2 = SAI_PORT_SERDES_ATTR_START + 9;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_POST3 = SAI_PORT_SERDES_ATTR_START + 10;
    
//                SAI_PORT_SERDES_ATTR_TX_FIR_ATTN = SAI_PORT_SERDES_ATTR_START + 11;
    ;
}                

enum grpc_sai_port_connector_attr_t {
    SAI_PORT_CONNECTOR_ATTR_START = 0;
            
//                SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID = SAI_PORT_CONNECTOR_ATTR_START;
    
//                SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID = SAI_PORT_CONNECTOR_ATTR_START + 1;
    
//                SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID = SAI_PORT_CONNECTOR_ATTR_START + 2;
    
//                SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID = SAI_PORT_CONNECTOR_ATTR_START + 3;
    
//                SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE = SAI_PORT_CONNECTOR_ATTR_START + 4;
    ;
}                
    

enum grpc_sai_qos_map_attr_t {
    SAI_QOS_MAP_ATTR_START = 0;
            
//                SAI_QOS_MAP_ATTR_TYPE = SAI_QOS_MAP_ATTR_START;
    
//                SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST = 0x00000001;
    ;
}                
    

enum grpc_sai_queue_attr_t {
    SAI_QUEUE_ATTR_START = 0;
            
//                SAI_QUEUE_ATTR_TYPE = SAI_QUEUE_ATTR_START;
    
//                SAI_QUEUE_ATTR_PORT = 0x00000001;
    
//                SAI_QUEUE_ATTR_INDEX = 0x00000002;
    
//                SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE = 0x00000003;
    
//                SAI_QUEUE_ATTR_WRED_PROFILE_ID = 0x00000004;
    
//                SAI_QUEUE_ATTR_BUFFER_PROFILE_ID = 0x00000005;
    
//                SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID = 0x00000006;
    
//                SAI_QUEUE_ATTR_PAUSE_STATUS = 0x00000007;
    
//                SAI_QUEUE_ATTR_ENABLE_PFC_DLDR = 0x00000008;
    
//                SAI_QUEUE_ATTR_PFC_DLR_INIT = 0x00000009;
    
//                SAI_QUEUE_ATTR_TAM_OBJECT = 0x00000009 + 1;
    
//                SAI_QUEUE_ATTR_PFC_DLR_PACKET_ACTION = 0x00000009 + 2;
    
//                SAI_QUEUE_ATTR_PFC_CONTINUOUS_DEADLOCK_STATE = 0x00000009 + 3;
    ;
}                            
    

enum grpc_sai_route_entry_attr_t {
    SAI_ROUTE_ENTRY_ATTR_START = 0;
            
//                SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION = SAI_ROUTE_ENTRY_ATTR_START;
    
//                SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID = SAI_ROUTE_ENTRY_ATTR_START + 1;
    
//                SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID = SAI_ROUTE_ENTRY_ATTR_START + 2;
    
//                SAI_ROUTE_ENTRY_ATTR_META_DATA = SAI_ROUTE_ENTRY_ATTR_START + 3;
    
//                SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY = SAI_ROUTE_ENTRY_ATTR_START + 4;
    
//                SAI_ROUTE_ENTRY_ATTR_COUNTER_ID = SAI_ROUTE_ENTRY_ATTR_START + 5;
    
//                SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID = SAI_ROUTE_ENTRY_ATTR_START + 6;
    ;
}                                
    

enum grpc_sai_router_interface_attr_t {
    SAI_ROUTER_INTERFACE_ATTR_START = 0;
            
//                SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID = SAI_ROUTER_INTERFACE_ATTR_START;
    
//                SAI_ROUTER_INTERFACE_ATTR_TYPE = SAI_ROUTER_INTERFACE_ATTR_START + 1;
    
//                SAI_ROUTER_INTERFACE_ATTR_PORT_ID = SAI_ROUTER_INTERFACE_ATTR_START + 2;
    
//                SAI_ROUTER_INTERFACE_ATTR_VLAN_ID = SAI_ROUTER_INTERFACE_ATTR_START + 3;
    
//                SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID = SAI_ROUTER_INTERFACE_ATTR_START + 4;
    
//                SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID = SAI_ROUTER_INTERFACE_ATTR_START + 5;
    
//                SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID = SAI_ROUTER_INTERFACE_ATTR_START + 6;
    
//                SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS = SAI_ROUTER_INTERFACE_ATTR_START + 7;
    
//                SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE = SAI_ROUTER_INTERFACE_ATTR_START + 8;
    
//                SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE = SAI_ROUTER_INTERFACE_ATTR_START + 9;
    
//                SAI_ROUTER_INTERFACE_ATTR_MTU = SAI_ROUTER_INTERFACE_ATTR_START + 10;
    
//                SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL = SAI_ROUTER_INTERFACE_ATTR_START + 11;
    
//                SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL = SAI_ROUTER_INTERFACE_ATTR_START + 12;
    
//                SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION = SAI_ROUTER_INTERFACE_ATTR_START + 13;
    
//                SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE = SAI_ROUTER_INTERFACE_ATTR_START + 14;
    
//                SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE = SAI_ROUTER_INTERFACE_ATTR_START + 15;
    
//                SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION = SAI_ROUTER_INTERFACE_ATTR_START + 16;
    
//                SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL = SAI_ROUTER_INTERFACE_ATTR_START + 17;
    
//                SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID = SAI_ROUTER_INTERFACE_ATTR_START + 18;
    
//                SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL = SAI_ROUTER_INTERFACE_ATTR_START + 19;
    
//                SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE = SAI_ROUTER_INTERFACE_ATTR_START + 20;
    ;
}                            
    

enum grpc_sai_rpf_group_attr_t {
    SAI_RPF_GROUP_ATTR_START = 0;
            
//                SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT = SAI_RPF_GROUP_ATTR_START;
    
//                SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST = SAI_RPF_GROUP_ATTR_START + 1;
    ;
}                

enum grpc_sai_rpf_group_member_attr_t {
    SAI_RPF_GROUP_MEMBER_ATTR_START = 0;
            
//                SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID = SAI_RPF_GROUP_MEMBER_ATTR_START;
    
//                SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID = SAI_RPF_GROUP_MEMBER_ATTR_START + 1;
    ;
}                
    

enum grpc_sai_samplepacket_attr_t {
    SAI_SAMPLEPACKET_ATTR_START = 0;
            
//                SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE = SAI_SAMPLEPACKET_ATTR_START;
    
//                SAI_SAMPLEPACKET_ATTR_TYPE = SAI_SAMPLEPACKET_ATTR_START + 1;
    
//                SAI_SAMPLEPACKET_ATTR_MODE = SAI_SAMPLEPACKET_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_scheduler_attr_t {
    SAI_SCHEDULER_ATTR_START = 0;
            
//                SAI_SCHEDULER_ATTR_SCHEDULING_TYPE = SAI_SCHEDULER_ATTR_START;
    
//                SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT = 0x00000001;
    
//                SAI_SCHEDULER_ATTR_METER_TYPE = 0x00000002;
    
//                SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE = 0x00000003;
    
//                SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE = 0x00000004;
    
//                SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE = 0x00000005;
    
//                SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE = 0x00000006;
    ;
}                
    

enum grpc_sai_scheduler_group_attr_t {
    SAI_SCHEDULER_GROUP_ATTR_START = 0;
            
//                SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT = SAI_SCHEDULER_GROUP_ATTR_START;
    
//                SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST = 0x00000001;
    
//                SAI_SCHEDULER_GROUP_ATTR_PORT_ID = 0x00000002;
    
//                SAI_SCHEDULER_GROUP_ATTR_LEVEL = 0x00000003;
    
//                SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS = 0x00000004;
    
//                SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID = 0x00000005;
    
//                SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE = 0x00000006;
    ;
}                
    

enum grpc_sai_srv6_sidlist_attr_t {
    SAI_SRV6_SIDLIST_ATTR_START = 0;
            
//                SAI_SRV6_SIDLIST_ATTR_TYPE = SAI_SRV6_SIDLIST_ATTR_START;
    
//                SAI_SRV6_SIDLIST_ATTR_TLV_LIST = SAI_SRV6_SIDLIST_ATTR_START + 1;
    
//                SAI_SRV6_SIDLIST_ATTR_SEGMENT_LIST = SAI_SRV6_SIDLIST_ATTR_START + 2;
    
//                SAI_SRV6_SIDLIST_ATTR_NEXT_HOP_ID = SAI_SRV6_SIDLIST_ATTR_START + 3;
    ;
}                            

enum grpc_sai_my_sid_entry_attr_t {
    SAI_MY_SID_ENTRY_ATTR_START = 0;
            
//                SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR = SAI_MY_SID_ENTRY_ATTR_START;
    
//                SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR = SAI_MY_SID_ENTRY_ATTR_START + 1;
    
//                SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION = SAI_MY_SID_ENTRY_ATTR_START + 2;
    
//                SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY = SAI_MY_SID_ENTRY_ATTR_START + 3;
    
//                SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID = SAI_MY_SID_ENTRY_ATTR_START + 4;
    
//                SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID = SAI_MY_SID_ENTRY_ATTR_START + 5;
    
//                SAI_MY_SID_ENTRY_ATTR_VRF = SAI_MY_SID_ENTRY_ATTR_START + 6;
    
//                SAI_MY_SID_ENTRY_ATTR_COUNTER_ID = SAI_MY_SID_ENTRY_ATTR_START + 7;
    ;
}                                
    

enum grpc_sai_stp_attr_t {
    SAI_STP_ATTR_START = 0;
            
//                SAI_STP_ATTR_VLAN_LIST = SAI_STP_ATTR_START;
    
//                SAI_STP_ATTR_BRIDGE_ID = SAI_STP_ATTR_START + 1;
    
//                SAI_STP_ATTR_PORT_LIST = SAI_STP_ATTR_START + 2;
    ;
}                

enum grpc_sai_stp_port_attr_t {
    SAI_STP_PORT_ATTR_START = 0;
            
//                SAI_STP_PORT_ATTR_STP = SAI_STP_PORT_ATTR_START;
    
//                SAI_STP_PORT_ATTR_BRIDGE_PORT = SAI_STP_PORT_ATTR_START + 1;
    
//                SAI_STP_PORT_ATTR_STATE = SAI_STP_PORT_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_switch_attr_t {
    SAI_SWITCH_ATTR_START = 0;
            
//                SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS = SAI_SWITCH_ATTR_START;
    
//                SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS = SAI_SWITCH_ATTR_START + 1;
    
//                SAI_SWITCH_ATTR_PORT_LIST = SAI_SWITCH_ATTR_START + 2;
    
//                SAI_SWITCH_ATTR_PORT_MAX_MTU = SAI_SWITCH_ATTR_START + 3;
    
//                SAI_SWITCH_ATTR_CPU_PORT = SAI_SWITCH_ATTR_START + 4;
    
//                SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS = SAI_SWITCH_ATTR_START + 5;
    
//                SAI_SWITCH_ATTR_FDB_TABLE_SIZE = SAI_SWITCH_ATTR_START + 6;
    
//                SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE = SAI_SWITCH_ATTR_START + 7;
    
//                SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE = SAI_SWITCH_ATTR_START + 8;
    
//                SAI_SWITCH_ATTR_LAG_MEMBERS = SAI_SWITCH_ATTR_START + 9;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_LAGS = SAI_SWITCH_ATTR_START + 10;
    
//                SAI_SWITCH_ATTR_ECMP_MEMBERS = SAI_SWITCH_ATTR_START + 11;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS = SAI_SWITCH_ATTR_START + 12;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES = SAI_SWITCH_ATTR_START + 13;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES = SAI_SWITCH_ATTR_START + 14;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_QUEUES = SAI_SWITCH_ATTR_START + 15;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES = SAI_SWITCH_ATTR_START + 16;
    
//                SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED = SAI_SWITCH_ATTR_START + 17;
    
//                SAI_SWITCH_ATTR_OPER_STATUS = SAI_SWITCH_ATTR_START + 18;
    
//                SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS = SAI_SWITCH_ATTR_START + 19;
    
//                SAI_SWITCH_ATTR_TEMP_LIST = SAI_SWITCH_ATTR_START + 20;
    
//                SAI_SWITCH_ATTR_MAX_TEMP = SAI_SWITCH_ATTR_START + 21;
    
//                SAI_SWITCH_ATTR_AVERAGE_TEMP = SAI_SWITCH_ATTR_START + 22;
    
//                SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 23;
    
//                SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 24;
    
//                SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 25;
    
//                SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 26;
    
//                SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 27;
    
//                SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 28;
    
//                SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 29;
    
//                SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 30;
    
//                SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 31;
    
//                SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 32;
    
//                SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 33;
    
//                SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE = SAI_SWITCH_ATTR_START + 34;
    
//                SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE = SAI_SWITCH_ATTR_START + 35;
    
//                SAI_SWITCH_ATTR_DEFAULT_VLAN_ID = SAI_SWITCH_ATTR_START + 36;
    
//                SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID = SAI_SWITCH_ATTR_START + 37;
    
//                SAI_SWITCH_ATTR_MAX_STP_INSTANCE = SAI_SWITCH_ATTR_START + 38;
    
//                SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID = SAI_SWITCH_ATTR_START + 39;
    
//                SAI_SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID = SAI_SWITCH_ATTR_START + 40;
    
//                SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID = SAI_SWITCH_ATTR_START + 41;
    
//                SAI_SWITCH_ATTR_INGRESS_ACL = SAI_SWITCH_ATTR_START + 42;
    
//                SAI_SWITCH_ATTR_EGRESS_ACL = SAI_SWITCH_ATTR_START + 43;
    
//                SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES = SAI_SWITCH_ATTR_START + 44;
    
//                SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS = SAI_SWITCH_ATTR_START + 45;
    
//                SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL = SAI_SWITCH_ATTR_START + 46;
    
//                SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP = SAI_SWITCH_ATTR_START + 47;
    
//                SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE = SAI_SWITCH_ATTR_START + 48;
    
//                SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM = SAI_SWITCH_ATTR_START + 49;
    
//                SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM = SAI_SWITCH_ATTR_START + 50;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY = SAI_SWITCH_ATTR_START + 51;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY = SAI_SWITCH_ATTR_START + 52;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY = SAI_SWITCH_ATTR_START + 53;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY = SAI_SWITCH_ATTR_START + 54;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY = SAI_SWITCH_ATTR_START + 55;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY = SAI_SWITCH_ATTR_START + 56;
    
//                SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY = SAI_SWITCH_ATTR_START + 57;
    
//                SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY = SAI_SWITCH_ATTR_START + 58;
    
//                SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY = SAI_SWITCH_ATTR_START + 59;
    
//                SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY = SAI_SWITCH_ATTR_START + 60;
    
//                SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY = SAI_SWITCH_ATTR_START + 61;
    
//                SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY = SAI_SWITCH_ATTR_START + 62;
    
//                SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY = SAI_SWITCH_ATTR_START + 63;
    
//                SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY = SAI_SWITCH_ATTR_START + 64;
    
//                SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE = SAI_SWITCH_ATTR_START + 65;
    
//                SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP = SAI_SWITCH_ATTR_START + 66;
    
//                SAI_SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY = SAI_SWITCH_ATTR_START + 67;
    
//                SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP = SAI_SWITCH_ATTR_START + 68;
    
//                SAI_SWITCH_ATTR_ECMP_HASH = SAI_SWITCH_ATTR_START + 69;
    
//                SAI_SWITCH_ATTR_LAG_HASH = SAI_SWITCH_ATTR_START + 70;
    
//                SAI_SWITCH_ATTR_RESTART_WARM = SAI_SWITCH_ATTR_START + 71;
    
//                SAI_SWITCH_ATTR_WARM_RECOVER = SAI_SWITCH_ATTR_START + 72;
    
//                SAI_SWITCH_ATTR_RESTART_TYPE = SAI_SWITCH_ATTR_START + 73;
    
//                SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL = SAI_SWITCH_ATTR_START + 74;
    
//                SAI_SWITCH_ATTR_NV_STORAGE_SIZE = SAI_SWITCH_ATTR_START + 75;
    
//                SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT = SAI_SWITCH_ATTR_START + 76;
    
//                SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT = SAI_SWITCH_ATTR_START + 77;
    
//                SAI_SWITCH_ATTR_ACL_CAPABILITY = SAI_SWITCH_ATTR_START + 78;
    
//                SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY = SAI_SWITCH_ATTR_START + 79;
    
//                SAI_SWITCH_ATTR_SWITCHING_MODE = SAI_SWITCH_ATTR_START + 80;
    
//                SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE = SAI_SWITCH_ATTR_START + 81;
    
//                SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE = SAI_SWITCH_ATTR_START + 82;
    
//                SAI_SWITCH_ATTR_SRC_MAC_ADDRESS = SAI_SWITCH_ATTR_START + 83;
    
//                SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES = SAI_SWITCH_ATTR_START + 84;
    
//                SAI_SWITCH_ATTR_FDB_AGING_TIME = SAI_SWITCH_ATTR_START + 85;
    
//                SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION = SAI_SWITCH_ATTR_START + 86;
    
//                SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION = SAI_SWITCH_ATTR_START + 87;
    
//                SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION = SAI_SWITCH_ATTR_START + 88;
    
//                SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM = SAI_SWITCH_ATTR_START + 89;
    
//                SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED = SAI_SWITCH_ATTR_START + 90;
    
//                SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET = SAI_SWITCH_ATTR_START + 91;
    
//                SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH = SAI_SWITCH_ATTR_START + 92;
    
//                SAI_SWITCH_ATTR_ECMP_HASH_IPV4 = SAI_SWITCH_ATTR_START + 93;
    
//                SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4 = SAI_SWITCH_ATTR_START + 94;
    
//                SAI_SWITCH_ATTR_ECMP_HASH_IPV6 = SAI_SWITCH_ATTR_START + 95;
    
//                SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM = SAI_SWITCH_ATTR_START + 96;
    
//                SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED = SAI_SWITCH_ATTR_START + 97;
    
//                SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET = SAI_SWITCH_ATTR_START + 98;
    
//                SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH = SAI_SWITCH_ATTR_START + 99;
    
//                SAI_SWITCH_ATTR_LAG_HASH_IPV4 = SAI_SWITCH_ATTR_START + 100;
    
//                SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4 = SAI_SWITCH_ATTR_START + 101;
    
//                SAI_SWITCH_ATTR_LAG_HASH_IPV6 = SAI_SWITCH_ATTR_START + 102;
    
//                SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL = SAI_SWITCH_ATTR_START + 103;
    
//                SAI_SWITCH_ATTR_QOS_DEFAULT_TC = SAI_SWITCH_ATTR_START + 104;
    
//                SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP = SAI_SWITCH_ATTR_START + 105;
    
//                SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP = SAI_SWITCH_ATTR_START + 106;
    
//                SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP = SAI_SWITCH_ATTR_START + 107;
    
//                SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP = SAI_SWITCH_ATTR_START + 108;
    
//                SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP = SAI_SWITCH_ATTR_START + 109;
    
//                SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP = SAI_SWITCH_ATTR_START + 110;
    
//                SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP = SAI_SWITCH_ATTR_START + 111;
    
//                SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE = SAI_SWITCH_ATTR_START + 112;
    
//                SAI_SWITCH_ATTR_SWITCH_PROFILE_ID = SAI_SWITCH_ATTR_START + 113;
    
//                SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO = SAI_SWITCH_ATTR_START + 114;
    
//                SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME = SAI_SWITCH_ATTR_START + 115;
    
//                SAI_SWITCH_ATTR_INIT_SWITCH = SAI_SWITCH_ATTR_START + 116;
    
//                SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY = SAI_SWITCH_ATTR_START + 117;
    
//                SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY = SAI_SWITCH_ATTR_START + 118;
    
//                SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY = SAI_SWITCH_ATTR_START + 119;
    
//                SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY = SAI_SWITCH_ATTR_START + 120;
    
//                SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY = SAI_SWITCH_ATTR_START + 121;
    
//                SAI_SWITCH_ATTR_FAST_API_ENABLE = SAI_SWITCH_ATTR_START + 122;
    
//                SAI_SWITCH_ATTR_MIRROR_TC = SAI_SWITCH_ATTR_START + 123;
    
//                SAI_SWITCH_ATTR_ACL_STAGE_INGRESS = SAI_SWITCH_ATTR_START + 124;
    
//                SAI_SWITCH_ATTR_ACL_STAGE_EGRESS = SAI_SWITCH_ATTR_START + 125;
    
//                SAI_SWITCH_ATTR_SRV6_MAX_SID_DEPTH = SAI_SWITCH_ATTR_START + 126;
    
//                SAI_SWITCH_ATTR_SRV6_TLV_TYPE = SAI_SWITCH_ATTR_START + 127;
    
//                SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES = SAI_SWITCH_ATTR_START + 128;
    
//                SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY = SAI_SWITCH_ATTR_START + 129;
    
//                SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION = SAI_SWITCH_ATTR_START + 130;
    
//                SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE = SAI_SWITCH_ATTR_START + 131;
    
//                SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL = SAI_SWITCH_ATTR_START + 132;
    
//                SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE = SAI_SWITCH_ATTR_START + 133;
    
//                SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL = SAI_SWITCH_ATTR_START + 134;
    
//                SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE = SAI_SWITCH_ATTR_START + 135;
    
//                SAI_SWITCH_ATTR_TPID_OUTER_VLAN = SAI_SWITCH_ATTR_START + 136;
    
//                SAI_SWITCH_ATTR_TPID_INNER_VLAN = SAI_SWITCH_ATTR_START + 137;
    
//                SAI_SWITCH_ATTR_CRC_CHECK_ENABLE = SAI_SWITCH_ATTR_START + 138;
    
//                SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE = SAI_SWITCH_ATTR_START + 139;
    
//                SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY = SAI_SWITCH_ATTR_START + 140;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION = SAI_SWITCH_ATTR_START + 141;
    
//                SAI_SWITCH_ATTR_MAX_BFD_SESSION = SAI_SWITCH_ATTR_START + 142;
    
//                SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE = SAI_SWITCH_ATTR_START + 143;
    
//                SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE = SAI_SWITCH_ATTR_START + 144;
    
//                SAI_SWITCH_ATTR_MIN_BFD_RX = SAI_SWITCH_ATTR_START + 145;
    
//                SAI_SWITCH_ATTR_MIN_BFD_TX = SAI_SWITCH_ATTR_START + 146;
    
//                SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE = SAI_SWITCH_ATTR_START + 147;
    
//                SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC = SAI_SWITCH_ATTR_START + 148;
    
//                SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT = SAI_SWITCH_ATTR_START + 149;
    
//                SAI_SWITCH_ATTR_MAX_MIRROR_SESSION = SAI_SWITCH_ATTR_START + 150;
    
//                SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION = SAI_SWITCH_ATTR_START + 151;
    
//                SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE = SAI_SWITCH_ATTR_START + 152;
    
//                SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL = SAI_SWITCH_ATTR_START + 153;
    
//                SAI_SWITCH_ATTR_TAM_OBJECT_ID = SAI_SWITCH_ATTR_START + 154;
    
//                SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY = SAI_SWITCH_ATTR_START + 155;
    
//                SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST = SAI_SWITCH_ATTR_START + 156;
    
//                SAI_SWITCH_ATTR_PRE_SHUTDOWN = SAI_SWITCH_ATTR_START + 157;
    
//                SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID = SAI_SWITCH_ATTR_START + 158;
    
//                SAI_SWITCH_ATTR_NAT_ENABLE = SAI_SWITCH_ATTR_START + 159;
    
//                SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS = SAI_SWITCH_ATTR_START + 160;
    
//                SAI_SWITCH_ATTR_PLATFROM_CONTEXT = SAI_SWITCH_ATTR_START + 161;
    
//                SAI_SWITCH_ATTR_REGISTER_READ = SAI_SWITCH_ATTR_START + 162;
    
//                SAI_SWITCH_ATTR_REGISTER_WRITE = SAI_SWITCH_ATTR_START + 163;
    
//                SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST = SAI_SWITCH_ATTR_START + 164;
    
//                SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD = SAI_SWITCH_ATTR_START + 165;
    
//                SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE = SAI_SWITCH_ATTR_START + 166;
    
//                SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE = SAI_SWITCH_ATTR_START + 167;
    
//                SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP = SAI_SWITCH_ATTR_START + 168;
    
//                SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH = SAI_SWITCH_ATTR_START + 169;
    
//                SAI_SWITCH_ATTR_FIRMWARE_STATUS = SAI_SWITCH_ATTR_START + 170;
    
//                SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION = SAI_SWITCH_ATTR_START + 171;
    
//                SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION = SAI_SWITCH_ATTR_START + 172;
    
//                SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST = SAI_SWITCH_ATTR_START + 173;
    
//                SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT = SAI_SWITCH_ATTR_START + 174;
    
//                SAI_SWITCH_ATTR_TYPE = SAI_SWITCH_ATTR_START + 175;
    
//                SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST = SAI_SWITCH_ATTR_START + 176;
    
//                SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP = SAI_SWITCH_ATTR_START + 177;
    
//                SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP = SAI_SWITCH_ATTR_START + 178;
    
//                SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP = SAI_SWITCH_ATTR_START + 179;
    
//                SAI_SWITCH_ATTR_SWITCH_ID = SAI_SWITCH_ATTR_START + 180;
    
//                SAI_SWITCH_ATTR_MAX_SYSTEM_CORES = SAI_SWITCH_ATTR_START + 181;
    
//                SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST = SAI_SWITCH_ATTR_START + 182;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS = SAI_SWITCH_ATTR_START + 183;
    
//                SAI_SWITCH_ATTR_SYSTEM_PORT_LIST = SAI_SWITCH_ATTR_START + 184;
    
//                SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS = SAI_SWITCH_ATTR_START + 185;
    
//                SAI_SWITCH_ATTR_FABRIC_PORT_LIST = SAI_SWITCH_ATTR_START + 186;
    
//                SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE = SAI_SWITCH_ATTR_START + 187;
    
//                SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE = SAI_SWITCH_ATTR_START + 188;
    
//                SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE = SAI_SWITCH_ATTR_START + 189;
    
//                SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST = SAI_SWITCH_ATTR_START + 190;
    
//                SAI_SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE = SAI_SWITCH_ATTR_START + 191;
    
//                SAI_SWITCH_ATTR_PRE_INGRESS_ACL = SAI_SWITCH_ATTR_START + 192;
    
//                SAI_SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY = SAI_SWITCH_ATTR_START + 193;
    
//                SAI_SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY = SAI_SWITCH_ATTR_START + 194;
    
//                SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY = SAI_SWITCH_ATTR_START + 195;
    
//                SAI_SWITCH_ATTR_SLAVE_MDIO_ADDR_LIST = SAI_SWITCH_ATTR_START + 196;
    
//                SAI_SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 197;
    
//                SAI_SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY = SAI_SWITCH_ATTR_START + 198;
    
//                SAI_SWITCH_ATTR_MY_MAC_LIST = SAI_SWITCH_ATTR_START + 199;
    
//                SAI_SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES = SAI_SWITCH_ATTR_START + 200;
    
//                SAI_SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES = SAI_SWITCH_ATTR_START + 201;
    
//                SAI_SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES = SAI_SWITCH_ATTR_START + 202;
    
//                SAI_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP = SAI_SWITCH_ATTR_START + 203;
    
//                SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP = SAI_SWITCH_ATTR_START + 204;
    
//                SAI_SWITCH_ATTR_IPSEC_OBJECT_ID = SAI_SWITCH_ATTR_START + 205;
    
//                SAI_SWITCH_ATTR_IPSEC_SA_TAG_TPID = SAI_SWITCH_ATTR_START + 206;
    
//                SAI_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY = SAI_SWITCH_ATTR_START + 207;
    
//                SAI_SWITCH_ATTR_NAT_EVENT_NOTIFY = SAI_SWITCH_ATTR_START + 208;
    
//                SAI_SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT = SAI_SWITCH_ATTR_START + 209;
    
//                SAI_SWITCH_ATTR_ECMP_MEMBER_COUNT = SAI_SWITCH_ATTR_START + 210;
    
//                SAI_SWITCH_ATTR_ARS_PROFILE = SAI_SWITCH_ATTR_START + 211;
    
//                SAI_SWITCH_ATTR_ACL_STAGE_POST_INGRESS = SAI_SWITCH_ATTR_START + 212;
    
//                SAI_SWITCH_ATTR_CREDIT_WD = SAI_SWITCH_ATTR_START + 213;
    
//                SAI_SWITCH_ATTR_CREDIT_WD_TIMER = SAI_SWITCH_ATTR_START + 214;
    
//                SAI_SWITCH_ATTR_SWITCH_ISOLATE = SAI_SWITCH_ATTR_START + 215;
    
//                SAI_SWITCH_ATTR_HOSTIF_OPER_STATUS_UPDATE_MODE = SAI_SWITCH_ATTR_START + 216;
    
//                SAI_SWITCH_ATTR_SWITCH_ASIC_SDK_HEALTH_EVENT_NOTIFY = SAI_SWITCH_ATTR_START + 217;
    
//                SAI_SWITCH_ATTR_REG_FATAL_SWITCH_ASIC_SDK_HEALTH_CATEGORY = SAI_SWITCH_ATTR_START + 218;
    
//                SAI_SWITCH_ATTR_REG_WARNING_SWITCH_ASIC_SDK_HEALTH_CATEGORY = SAI_SWITCH_ATTR_START + 219;
    
//                SAI_SWITCH_ATTR_REG_NOTICE_SWITCH_ASIC_SDK_HEALTH_CATEGORY = SAI_SWITCH_ATTR_START + 220;
    
//                SAI_SWITCH_ATTR_ACL_CHAIN_LIST = SAI_SWITCH_ATTR_START + 221;
    ;
}                            

enum grpc_sai_switch_tunnel_attr_t {
    SAI_SWITCH_TUNNEL_ATTR_START = 0;
            
//                SAI_SWITCH_TUNNEL_ATTR_TUNNEL_TYPE = SAI_SWITCH_TUNNEL_ATTR_START;
    
//                SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION = SAI_SWITCH_TUNNEL_ATTR_START + 1;
    
//                SAI_SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE = SAI_SWITCH_TUNNEL_ATTR_START + 2;
    
//                SAI_SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS = SAI_SWITCH_TUNNEL_ATTR_START + 3;
    
//                SAI_SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE = SAI_SWITCH_TUNNEL_ATTR_START + 4;
    
//                SAI_SWITCH_TUNNEL_ATTR_DECAP_MAPPERS = SAI_SWITCH_TUNNEL_ATTR_START + 5;
    
//                SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE = SAI_SWITCH_TUNNEL_ATTR_START + 6;
    
//                SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT = SAI_SWITCH_TUNNEL_ATTR_START + 7;
    
//                SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK = SAI_SWITCH_TUNNEL_ATTR_START + 8;
    
//                SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP = SAI_SWITCH_TUNNEL_ATTR_START + 9;
    
//                SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP = SAI_SWITCH_TUNNEL_ATTR_START + 10;
    
//                SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP = SAI_SWITCH_TUNNEL_ATTR_START + 11;
    
//                SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP = SAI_SWITCH_TUNNEL_ATTR_START + 12;
    ;
}                
    

enum grpc_sai_system_port_attr_t {
    SAI_SYSTEM_PORT_ATTR_START = 0;
            
//                SAI_SYSTEM_PORT_ATTR_TYPE = SAI_SYSTEM_PORT_ATTR_START;
    
//                SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS = SAI_SYSTEM_PORT_ATTR_START + 1;
    
//                SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST = SAI_SYSTEM_PORT_ATTR_START + 2;
    
//                SAI_SYSTEM_PORT_ATTR_PORT = SAI_SYSTEM_PORT_ATTR_START + 3;
    
//                SAI_SYSTEM_PORT_ATTR_ADMIN_STATE = SAI_SYSTEM_PORT_ATTR_START + 4;
    
//                SAI_SYSTEM_PORT_ATTR_CONFIG_INFO = SAI_SYSTEM_PORT_ATTR_START + 5;
    
//                SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP = SAI_SYSTEM_PORT_ATTR_START + 6;
    ;
}                
    

enum grpc_sai_tam_attr_t {
    SAI_TAM_ATTR_START = 0;
            
//                SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST = SAI_TAM_ATTR_START;
    
//                SAI_TAM_ATTR_EVENT_OBJECTS_LIST = SAI_TAM_ATTR_START + 1;
    
//                SAI_TAM_ATTR_INT_OBJECTS_LIST = SAI_TAM_ATTR_START + 2;
    
//                SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST = SAI_TAM_ATTR_START + 3;
    ;
}                

enum grpc_sai_tam_math_func_attr_t {
    SAI_TAM_MATH_FUNC_ATTR_START = 0;
            
//                SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE = SAI_TAM_MATH_FUNC_ATTR_START;
    ;
}                

enum grpc_sai_tam_event_threshold_attr_t {
    SAI_TAM_EVENT_THRESHOLD_ATTR_START = 0;
            
//                SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK = SAI_TAM_EVENT_THRESHOLD_ATTR_START;
    
//                SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK = SAI_TAM_EVENT_THRESHOLD_ATTR_START + 1;
    
//                SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY = SAI_TAM_EVENT_THRESHOLD_ATTR_START + 2;
    
//                SAI_TAM_EVENT_THRESHOLD_ATTR_RATE = SAI_TAM_EVENT_THRESHOLD_ATTR_START + 3;
    
//                SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE = SAI_TAM_EVENT_THRESHOLD_ATTR_START + 4;
    
//                SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT = SAI_TAM_EVENT_THRESHOLD_ATTR_START + 5;
    ;
}                

enum grpc_sai_tam_int_attr_t {
    SAI_TAM_INT_ATTR_START = 0;
            
//                SAI_TAM_INT_ATTR_TYPE = SAI_TAM_INT_ATTR_START;
    
//                SAI_TAM_INT_ATTR_DEVICE_ID = SAI_TAM_INT_ATTR_START + 1;
    
//                SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE = SAI_TAM_INT_ATTR_START + 2;
    
//                SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE = SAI_TAM_INT_ATTR_START + 3;
    
//                SAI_TAM_INT_ATTR_INT_PRESENCE_PB1 = SAI_TAM_INT_ATTR_START + 4;
    
//                SAI_TAM_INT_ATTR_INT_PRESENCE_PB2 = SAI_TAM_INT_ATTR_START + 5;
    
//                SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE = SAI_TAM_INT_ATTR_START + 6;
    
//                SAI_TAM_INT_ATTR_INLINE = SAI_TAM_INT_ATTR_START + 7;
    
//                SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL = SAI_TAM_INT_ATTR_START + 8;
    
//                SAI_TAM_INT_ATTR_TRACE_VECTOR = SAI_TAM_INT_ATTR_START + 9;
    
//                SAI_TAM_INT_ATTR_ACTION_VECTOR = SAI_TAM_INT_ATTR_START + 10;
    
//                SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP = SAI_TAM_INT_ATTR_START + 11;
    
//                SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE = SAI_TAM_INT_ATTR_START + 12;
    
//                SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE = SAI_TAM_INT_ATTR_START + 13;
    
//                SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS = SAI_TAM_INT_ATTR_START + 14;
    
//                SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD = SAI_TAM_INT_ATTR_START + 15;
    
//                SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY = SAI_TAM_INT_ATTR_START + 16;
    
//                SAI_TAM_INT_ATTR_ACL_GROUP = SAI_TAM_INT_ATTR_START + 17;
    
//                SAI_TAM_INT_ATTR_MAX_HOP_COUNT = SAI_TAM_INT_ATTR_START + 18;
    
//                SAI_TAM_INT_ATTR_MAX_LENGTH = SAI_TAM_INT_ATTR_START + 19;
    
//                SAI_TAM_INT_ATTR_NAME_SPACE_ID = SAI_TAM_INT_ATTR_START + 20;
    
//                SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL = SAI_TAM_INT_ATTR_START + 21;
    
//                SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE = SAI_TAM_INT_ATTR_START + 22;
    
//                SAI_TAM_INT_ATTR_COLLECTOR_LIST = SAI_TAM_INT_ATTR_START + 23;
    
//                SAI_TAM_INT_ATTR_MATH_FUNC = SAI_TAM_INT_ATTR_START + 24;
    
//                SAI_TAM_INT_ATTR_REPORT_ID = SAI_TAM_INT_ATTR_START + 25;
    ;
}                

enum grpc_sai_tam_tel_type_attr_t {
    SAI_TAM_TEL_TYPE_ATTR_START = 0;
            
//                SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE = SAI_TAM_TEL_TYPE_ATTR_START;
    
//                SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER = SAI_TAM_TEL_TYPE_ATTR_START + 1;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 2;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS = SAI_TAM_TEL_TYPE_ATTR_START + 3;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS = SAI_TAM_TEL_TYPE_ATTR_START + 4;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 5;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 6;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 7;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 8;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 9;
    
//                SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS = SAI_TAM_TEL_TYPE_ATTR_START + 10;
    
//                SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q = SAI_TAM_TEL_TYPE_ATTR_START + 11;
    
//                SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE = SAI_TAM_TEL_TYPE_ATTR_START + 12;
    
//                SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE = SAI_TAM_TEL_TYPE_ATTR_START + 13;
    
//                SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC = SAI_TAM_TEL_TYPE_ATTR_START + 14;
    
//                SAI_TAM_TEL_TYPE_ATTR_REPORT_ID = SAI_TAM_TEL_TYPE_ATTR_START + 15;
    ;
}                

enum grpc_sai_tam_report_attr_t {
    SAI_TAM_REPORT_ATTR_START = 0;
            
//                SAI_TAM_REPORT_ATTR_TYPE = SAI_TAM_REPORT_ATTR_START;
    
//                SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS = SAI_TAM_REPORT_ATTR_START + 1;
    
//                SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY = SAI_TAM_REPORT_ATTR_START + 2;
    
//                SAI_TAM_REPORT_ATTR_QUOTA = SAI_TAM_REPORT_ATTR_START + 3;
    
//                SAI_TAM_REPORT_ATTR_REPORT_MODE = SAI_TAM_REPORT_ATTR_START + 4;
    
//                SAI_TAM_REPORT_ATTR_REPORT_INTERVAL = SAI_TAM_REPORT_ATTR_START + 5;
    
//                SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER = SAI_TAM_REPORT_ATTR_START + 6;
    
//                SAI_TAM_REPORT_ATTR_TEMPLATE_REPORT_INTERVAL = SAI_TAM_REPORT_ATTR_START + 7;
    ;
}                

enum grpc_sai_tam_telemetry_attr_t {
    SAI_TAM_TELEMETRY_ATTR_START = 0;
            
//                SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST = SAI_TAM_TELEMETRY_ATTR_START;
    
//                SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST = SAI_TAM_TELEMETRY_ATTR_START + 1;
    
//                SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT = SAI_TAM_TELEMETRY_ATTR_START + 2;
    
//                SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL = SAI_TAM_TELEMETRY_ATTR_START + 3;
    ;
}                

enum grpc_sai_tam_transport_attr_t {
    SAI_TAM_TRANSPORT_ATTR_START = 0;
            
//                SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE = SAI_TAM_TRANSPORT_ATTR_START;
    
//                SAI_TAM_TRANSPORT_ATTR_SRC_PORT = SAI_TAM_TRANSPORT_ATTR_START + 1;
    
//                SAI_TAM_TRANSPORT_ATTR_DST_PORT = SAI_TAM_TRANSPORT_ATTR_START + 2;
    
//                SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE = SAI_TAM_TRANSPORT_ATTR_START + 3;
    
//                SAI_TAM_TRANSPORT_ATTR_MTU = SAI_TAM_TRANSPORT_ATTR_START + 4;
    ;
}                

enum grpc_sai_tam_collector_attr_t {
    SAI_TAM_COLLECTOR_ATTR_START = 0;
            
//                SAI_TAM_COLLECTOR_ATTR_SRC_IP = SAI_TAM_COLLECTOR_ATTR_START;
    
//                SAI_TAM_COLLECTOR_ATTR_DST_IP = SAI_TAM_COLLECTOR_ATTR_START + 1;
    
//                SAI_TAM_COLLECTOR_ATTR_LOCALHOST = SAI_TAM_COLLECTOR_ATTR_START + 2;
    
//                SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID = SAI_TAM_COLLECTOR_ATTR_START + 3;
    
//                SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE = SAI_TAM_COLLECTOR_ATTR_START + 4;
    
//                SAI_TAM_COLLECTOR_ATTR_TRANSPORT = SAI_TAM_COLLECTOR_ATTR_START + 5;
    
//                SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE = SAI_TAM_COLLECTOR_ATTR_START + 6;
    ;
}                

enum grpc_sai_tam_event_action_attr_t {
    SAI_TAM_EVENT_ACTION_ATTR_START = 0;
            
//                SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE = SAI_TAM_EVENT_ACTION_ATTR_START;
    
//                SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE = SAI_TAM_EVENT_ACTION_ATTR_START + 1;
    ;
}                

enum grpc_sai_tam_event_attr_t {
    SAI_TAM_EVENT_ATTR_START = 0;
            
//                SAI_TAM_EVENT_ATTR_TYPE = SAI_TAM_EVENT_ATTR_START;
    
//                SAI_TAM_EVENT_ATTR_ACTION_LIST = SAI_TAM_EVENT_ATTR_START + 1;
    
//                SAI_TAM_EVENT_ATTR_COLLECTOR_LIST = SAI_TAM_EVENT_ATTR_START + 2;
    
//                SAI_TAM_EVENT_ATTR_THRESHOLD = SAI_TAM_EVENT_ATTR_START + 3;
    
//                SAI_TAM_EVENT_ATTR_DSCP_VALUE = SAI_TAM_EVENT_ATTR_START + 4;
    ;
}                
    

enum grpc_sai_tunnel_map_attr_t {
    SAI_TUNNEL_MAP_ATTR_START = 0;
            
//                SAI_TUNNEL_MAP_ATTR_TYPE = SAI_TUNNEL_MAP_ATTR_START;
    
//                SAI_TUNNEL_MAP_ATTR_ENTRY_LIST = SAI_TUNNEL_MAP_ATTR_START + 1;
    ;
}                

enum grpc_sai_tunnel_attr_t {
    SAI_TUNNEL_ATTR_START = 0;
            
//                SAI_TUNNEL_ATTR_TYPE = SAI_TUNNEL_ATTR_START;
    
//                SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE = SAI_TUNNEL_ATTR_START + 1;
    
//                SAI_TUNNEL_ATTR_OVERLAY_INTERFACE = SAI_TUNNEL_ATTR_START + 2;
    
//                SAI_TUNNEL_ATTR_PEER_MODE = SAI_TUNNEL_ATTR_START + 3;
    
//                SAI_TUNNEL_ATTR_ENCAP_SRC_IP = SAI_TUNNEL_ATTR_START + 4;
    
//                SAI_TUNNEL_ATTR_ENCAP_DST_IP = SAI_TUNNEL_ATTR_START + 5;
    
//                SAI_TUNNEL_ATTR_ENCAP_TTL_MODE = SAI_TUNNEL_ATTR_START + 6;
    
//                SAI_TUNNEL_ATTR_ENCAP_TTL_VAL = SAI_TUNNEL_ATTR_START + 7;
    
//                SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE = SAI_TUNNEL_ATTR_START + 8;
    
//                SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL = SAI_TUNNEL_ATTR_START + 9;
    
//                SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID = SAI_TUNNEL_ATTR_START + 10;
    
//                SAI_TUNNEL_ATTR_ENCAP_GRE_KEY = SAI_TUNNEL_ATTR_START + 11;
    
//                SAI_TUNNEL_ATTR_ENCAP_ECN_MODE = SAI_TUNNEL_ATTR_START + 12;
    
//                SAI_TUNNEL_ATTR_ENCAP_MAPPERS = SAI_TUNNEL_ATTR_START + 13;
    
//                SAI_TUNNEL_ATTR_DECAP_ECN_MODE = SAI_TUNNEL_ATTR_START + 14;
    
//                SAI_TUNNEL_ATTR_DECAP_MAPPERS = SAI_TUNNEL_ATTR_START + 15;
    
//                SAI_TUNNEL_ATTR_DECAP_TTL_MODE = SAI_TUNNEL_ATTR_START + 16;
    
//                SAI_TUNNEL_ATTR_DECAP_DSCP_MODE = SAI_TUNNEL_ATTR_START + 17;
    
//                SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST = SAI_TUNNEL_ATTR_START + 18;
    
//                SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION = SAI_TUNNEL_ATTR_START + 19;
    
//                SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE = SAI_TUNNEL_ATTR_START + 20;
    
//                SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT = SAI_TUNNEL_ATTR_START + 21;
    
//                SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK = SAI_TUNNEL_ATTR_START + 22;
    
//                SAI_TUNNEL_ATTR_SA_INDEX = SAI_TUNNEL_ATTR_START + 23;
    
//                SAI_TUNNEL_ATTR_IPSEC_SA_PORT_LIST = SAI_TUNNEL_ATTR_START + 24;
    
//                SAI_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP = SAI_TUNNEL_ATTR_START + 25;
    
//                SAI_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP = SAI_TUNNEL_ATTR_START + 26;
    
//                SAI_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP = SAI_TUNNEL_ATTR_START + 27;
    
//                SAI_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP = SAI_TUNNEL_ATTR_START + 28;
    
//                SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY = SAI_TUNNEL_ATTR_START + 29;
    ;
}                            

enum grpc_sai_tunnel_term_table_entry_attr_t {
    SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START = 0;
            
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 1;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 2;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 3;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 4;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 5;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 6;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 7;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 8;
    
//                SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED = SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_START + 9;
    ;
}                

enum grpc_sai_tunnel_map_entry_attr_t {
    SAI_TUNNEL_MAP_ENTRY_ATTR_START = 0;
            
//                SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE = SAI_TUNNEL_MAP_ENTRY_ATTR_START;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP = 0x00000001;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY = 0x00000002;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE = 0x00000003;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY = 0x00000004;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE = 0x00000005;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY = 0x00000006;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE = 0x00000007;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY = 0x00000008;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE = 0x00000009;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY = 0x0000000a;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE = 0x0000000b;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY = 0x0000000c;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE = 0x0000000d;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY = 0x0000000e;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE = 0x0000000f;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_PREFIX_AGG_ID_KEY = 0x00000010;
    
//                SAI_TUNNEL_MAP_ENTRY_ATTR_SRV6_VPN_SID_VALUE = 0x00000011;
    ;
}                
    

enum grpc_sai_udf_attr_t {
    SAI_UDF_ATTR_START = 0;
            
//                SAI_UDF_ATTR_MATCH_ID = SAI_UDF_ATTR_START;
    
//                SAI_UDF_ATTR_GROUP_ID = SAI_UDF_ATTR_START + 1;
    
//                SAI_UDF_ATTR_BASE = SAI_UDF_ATTR_START + 2;
    
//                SAI_UDF_ATTR_OFFSET = SAI_UDF_ATTR_START + 3;
    
//                SAI_UDF_ATTR_HASH_MASK = SAI_UDF_ATTR_START + 4;
    ;
}                

enum grpc_sai_udf_match_attr_t {
    SAI_UDF_MATCH_ATTR_START = 0;
            
//                SAI_UDF_MATCH_ATTR_L2_TYPE = SAI_UDF_MATCH_ATTR_START;
    
//                SAI_UDF_MATCH_ATTR_L3_TYPE = SAI_UDF_MATCH_ATTR_START + 1;
    
//                SAI_UDF_MATCH_ATTR_GRE_TYPE = SAI_UDF_MATCH_ATTR_START + 2;
    
//                SAI_UDF_MATCH_ATTR_PRIORITY = SAI_UDF_MATCH_ATTR_START + 3;
    
//                SAI_UDF_MATCH_ATTR_L4_DST_PORT_TYPE = SAI_UDF_MATCH_ATTR_START + 4;
    ;
}                

enum grpc_sai_udf_group_attr_t {
    SAI_UDF_GROUP_ATTR_START = 0;
            
//                SAI_UDF_GROUP_ATTR_UDF_LIST = SAI_UDF_GROUP_ATTR_START;
    
//                SAI_UDF_GROUP_ATTR_TYPE = SAI_UDF_GROUP_ATTR_START + 1;
    
//                SAI_UDF_GROUP_ATTR_LENGTH = SAI_UDF_GROUP_ATTR_START + 2;
    ;
}                
    

enum grpc_sai_virtual_router_attr_t {
    SAI_VIRTUAL_ROUTER_ATTR_START = 0;
            
//                SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE = SAI_VIRTUAL_ROUTER_ATTR_START;
    
//                SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE = SAI_VIRTUAL_ROUTER_ATTR_START + 1;
    
//                SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS = SAI_VIRTUAL_ROUTER_ATTR_START + 2;
    
//                SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION = SAI_VIRTUAL_ROUTER_ATTR_START + 3;
    
//                SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION = SAI_VIRTUAL_ROUTER_ATTR_START + 4;
    
//                SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION = SAI_VIRTUAL_ROUTER_ATTR_START + 5;
    
//                SAI_VIRTUAL_ROUTER_ATTR_LABEL = SAI_VIRTUAL_ROUTER_ATTR_START + 6;
    ;
}                
    

enum grpc_sai_vlan_attr_t {
    SAI_VLAN_ATTR_START = 0;
            
//                SAI_VLAN_ATTR_VLAN_ID = SAI_VLAN_ATTR_START;
    
//                SAI_VLAN_ATTR_MEMBER_LIST = SAI_VLAN_ATTR_START + 1;
    
//                SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES = SAI_VLAN_ATTR_START + 2;
    
//                SAI_VLAN_ATTR_STP_INSTANCE = SAI_VLAN_ATTR_START + 3;
    
//                SAI_VLAN_ATTR_LEARN_DISABLE = SAI_VLAN_ATTR_START + 4;
    
//                SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE = SAI_VLAN_ATTR_START + 5;
    
//                SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE = SAI_VLAN_ATTR_START + 6;
    
//                SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID = SAI_VLAN_ATTR_START + 7;
    
//                SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID = SAI_VLAN_ATTR_START + 8;
    
//                SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID = SAI_VLAN_ATTR_START + 9;
    
//                SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID = SAI_VLAN_ATTR_START + 10;
    
//                SAI_VLAN_ATTR_INGRESS_ACL = SAI_VLAN_ATTR_START + 11;
    
//                SAI_VLAN_ATTR_EGRESS_ACL = SAI_VLAN_ATTR_START + 12;
    
//                SAI_VLAN_ATTR_META_DATA = SAI_VLAN_ATTR_START + 13;
    
//                SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE = SAI_VLAN_ATTR_START + 14;
    
//                SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP = SAI_VLAN_ATTR_START + 15;
    
//                SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE = SAI_VLAN_ATTR_START + 16;
    
//                SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP = SAI_VLAN_ATTR_START + 17;
    
//                SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE = SAI_VLAN_ATTR_START + 18;
    
//                SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP = SAI_VLAN_ATTR_START + 19;
    
//                SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE = SAI_VLAN_ATTR_START + 20;
    
//                SAI_VLAN_ATTR_TAM_OBJECT = SAI_VLAN_ATTR_START + 21;
    ;
}                

enum grpc_sai_vlan_member_attr_t {
    SAI_VLAN_MEMBER_ATTR_START = 0;
            
//                SAI_VLAN_MEMBER_ATTR_VLAN_ID = SAI_VLAN_MEMBER_ATTR_START;
    
//                SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID = SAI_VLAN_MEMBER_ATTR_START + 1;
    
//                SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE = SAI_VLAN_MEMBER_ATTR_START + 2;
    ;
}                            
    

enum grpc_sai_wred_attr_t {
    SAI_WRED_ATTR_START = 0;
            
//                SAI_WRED_ATTR_GREEN_ENABLE = SAI_WRED_ATTR_START;
    
//                SAI_WRED_ATTR_GREEN_MIN_THRESHOLD = 0x00000001;
    
//                SAI_WRED_ATTR_GREEN_MAX_THRESHOLD = 0x00000002;
    
//                SAI_WRED_ATTR_GREEN_DROP_PROBABILITY = 0x00000003;
    
//                SAI_WRED_ATTR_YELLOW_ENABLE = 0x00000004;
    
//                SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD = 0x00000005;
    
//                SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD = 0x00000006;
    
//                SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY = 0x00000007;
    
//                SAI_WRED_ATTR_RED_ENABLE = 0x00000008;
    
//                SAI_WRED_ATTR_RED_MIN_THRESHOLD = 0x00000009;
    
//                SAI_WRED_ATTR_RED_MAX_THRESHOLD = 0x0000000a;
    
//                SAI_WRED_ATTR_RED_DROP_PROBABILITY = 0x0000000b;
    
//                SAI_WRED_ATTR_WEIGHT = 0x0000000c;
    
//                SAI_WRED_ATTR_ECN_MARK_MODE = 0x0000000d;
    
//                SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD = 0x0000000e;
    
//                SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD = 0x0000000f;
    
//                SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY = 0x00000010;
    
//                SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD = 0x00000011;
    
//                SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD = 0x00000012;
    
//                SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY = 0x00000013;
    
//                SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD = 0x00000014;
    
//                SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD = 0x00000015;
    
//                SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY = 0x00000016;
    
//                SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD = 0x00000017;
    
//                SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD = 0x00000018;
    
//                SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY = 0x00000019;
    
//                SAI_WRED_ATTR_GREEN_MIN_THRESHOLD_64 = 0x0000001a;
    
//                SAI_WRED_ATTR_GREEN_MAX_THRESHOLD_64 = 0x0000001b;
    
//                SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD_64 = 0x0000001c;
    
//                SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD_64 = 0x0000001d;
    
//                SAI_WRED_ATTR_RED_MIN_THRESHOLD_64 = 0x0000001e;
    
//                SAI_WRED_ATTR_RED_MAX_THRESHOLD_64 = 0x0000001f;
    
//                SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD_64 = 0x00000020;
    
//                SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD_64 = 0x00000021;
    
//                SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD_64 = 0x00000022;
    
//                SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD_64 = 0x00000023;
    
//                SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD_64 = 0x00000024;
    
//                SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD_64 = 0x00000025;
    
//                SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD_64 = 0x00000026;
    
//                SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD_64 = 0x00000027;
    ;
}                // SAI ENUMS END

// object API structures
// warning: this struct is invalid and  manually defined - do not use
message sai_grpc_object_key_entry_t {
    int64 object_id = 1;
    int64 fdb_entry = 2;
    int64 neighbor_entry = 3;
    int64 route_entry = 4;
    int64 mcast_fdb_entry = 5;
    int64 l2mc_entry = 6;
    int64 ipmc_entry = 7;
    int64 inseg_entry = 8;
    int64 nat_entry = 9;
}

message sai_grpc_object_key_t {
    sai_grpc_object_key_entry_t key = 1;
}

message sai_grpc_attr_capability_t {
    bool create_implemented = 1;
    bool boolset_implemented = 2;
    bool get_implemented = 3;
}

message sai_grpc_query_attribute_enum_values_capability_msg_arg {
    sai_grpc_object_type_t object_type = 1;
    sai_grpc_attr_id_t attr_id = 2;
    int32 caps_count = 3;
}

message sai_grpc_object_type_get_availability_msg_arg {
    sai_grpc_object_type_t object_type = 1;
    sai_grpc_attr_id_t attr_id = 2;
    int32 attr_type = 3;
}

message sai_grpc_string_response {
    string value = 1;
}



// common types
message sai_grpc_service_method_table_t {
  // sai_profile_get_value_fn profile_get_value;                
    sai_grpc_pointer_t profile_get_value = 1;
  // sai_profile_get_next_value_fn profile_get_next_value;                
    sai_grpc_pointer_t profile_get_next_value = 2;
}

message sai_grpc_object_meta_key_t {
  // sai_object_type_t objecttype;                
    sai_grpc_object_type_t objecttype = 1;
  // sai_object_key_t objectkey;                
    sai_grpc_object_key_t objectkey = 2;
}

message sai_grpc_attr_condition_t {
  // sai_attr_id_t attrid;                
    sai_grpc_attr_id_t attrid = 1;
  // sai_attribute_value_t condition;
    int64 condition = 2;
  // sai_condition_operator_t op;                
    sai_grpc_condition_operator_t op = 3;
  // sai_attr_condition_type_t type;                
    sai_grpc_attr_condition_type_t type = 4;
}

message sai_grpc_enum_metadata_t {
  // PTR=>char name;                
    string name = 1;
  // size_t valuescount;                
    sai_grpc_size_t valuescount = 2;
  // PTR=>int values;                
    sai_grpc_int  values = 3;
  // PTR=>char valuesnames;                
    string valuesnames = 4;
  // PTR=>char valuesshortnames;                
    string valuesshortnames = 5;
  // bool containsflags;                
    bool containsflags = 6;
  // sai_enum_flags_type_t flagstype;                
    sai_grpc_enum_flags_type_t flagstype = 7;
  // PTR=>int ignorevalues;                
    sai_grpc_int  ignorevalues = 8;
  // PTR=>char ignorevaluesnames;                
    string ignorevaluesnames = 9;
  // sai_object_type_t objecttype;                
    sai_grpc_object_type_t objecttype = 10;
}

message sai_grpc_attr_capability_metadata_t {
  // uint64_t vendorid;                
    sai_grpc_uint64_t vendorid = 1;
  // sai_attr_capability_t operationcapability;                
    sai_grpc_attr_capability_t operationcapability = 2;
  // size_t enumvaluescount;                
    sai_grpc_size_t enumvaluescount = 3;
  // PTR=>int enumvalues;                
    sai_grpc_int  enumvalues = 4;
}

message sai_grpc_attr_metadata_t {
  // sai_object_type_t objecttype;                
    sai_grpc_object_type_t objecttype = 1;
  // sai_attr_id_t attrid;                
    sai_grpc_attr_id_t attrid = 2;
  // PTR=>char attridname;                
    string attridname = 3;
  // PTR=>char brief;                
    string brief = 4;
  // sai_attr_value_type_t attrvaluetype;                
    sai_grpc_attr_value_type_t attrvaluetype = 5;
  // sai_attr_flags_t flags;                
    sai_grpc_attr_flags_t flags = 6;
  // PTR=>sai_object_type_t allowedobjecttypes;                
    sai_grpc_object_type_t  allowedobjecttypes = 7;
  // size_t allowedobjecttypeslength;                
    sai_grpc_size_t allowedobjecttypeslength = 8;
  // bool allowrepetitiononlist;                
    bool allowrepetitiononlist = 9;
  // bool allowmixedobjecttypes;                
    bool allowmixedobjecttypes = 10;
  // bool allowemptylist;                
    bool allowemptylist = 11;
  // bool allownullobjectid;                
    bool allownullobjectid = 12;
  // bool isoidattribute;                
    bool isoidattribute = 13;
  // sai_default_value_type_t defaultvaluetype;                
    sai_grpc_default_value_type_t defaultvaluetype = 14;
  // PTR=>sai_attribute_value_t defaultvalue;                
    sai_grpc_attribute_value_t  defaultvalue = 15;
  // sai_object_type_t defaultvalueobjecttype;                
    sai_grpc_object_type_t defaultvalueobjecttype = 16;
  // sai_attr_id_t defaultvalueattrid;                
    sai_grpc_attr_id_t defaultvalueattrid = 17;
  // bool storedefaultvalue;                
    bool storedefaultvalue = 18;
  // bool isenum;                
    bool isenum = 19;
  // bool isenumlist;                
    bool isenumlist = 20;
  // PTR=>sai_enum_metadata_t enummetadata;                
    sai_grpc_enum_metadata_t  enummetadata = 21;
  // sai_attr_condition_type_t conditiontype;                
    sai_grpc_attr_condition_type_t conditiontype = 22;
  // PTR=>sai_attr_condition_t conditions;                
    sai_grpc_attr_condition_t  conditions = 23;
  // size_t conditionslength;                
    sai_grpc_size_t conditionslength = 24;
  // bool isconditional;                
    bool isconditional = 25;
  // sai_attr_condition_type_t validonlytype;                
    sai_grpc_attr_condition_type_t validonlytype = 26;
  // PTR=>sai_attr_condition_t validonly;                
    sai_grpc_attr_condition_t  validonly = 27;
  // size_t validonlylength;                
    sai_grpc_size_t validonlylength = 28;
  // bool isvalidonly;                
    bool isvalidonly = 29;
  // bool getsave;                
    bool getsave = 30;
  // bool isvlan;                
    bool isvlan = 31;
  // bool isaclfield;                
    bool isaclfield = 32;
  // bool isaclaction;                
    bool isaclaction = 33;
  // bool isaclmask;                
    bool isaclmask = 34;
  // bool ismandatoryoncreate;                
    bool ismandatoryoncreate = 35;
  // bool iscreateonly;                
    bool iscreateonly = 36;
  // bool iscreateandset;                
    bool iscreateandset = 37;
  // bool isreadonly;                
    bool isreadonly = 38;
  // bool iskey;                
    bool iskey = 39;
  // bool isprimitive;                
    bool isprimitive = 40;
  // int notificationtype;                
    sai_grpc_int notificationtype = 41;
  // bool iscallback;                
    bool iscallback = 42;
  // int pointertype;                
    sai_grpc_int pointertype = 43;
  // PTR=>sai_attr_capability_metadata_t capability;                
    sai_grpc_attr_capability_metadata_t  capability = 44;
  // size_t capabilitylength;                
    sai_grpc_size_t capabilitylength = 45;
  // bool isextensionattr;                
    bool isextensionattr = 46;
  // bool isresourcetype;                
    bool isresourcetype = 47;
  // bool isdeprecated;                
    bool isdeprecated = 48;
}

message sai_grpc_struct_member_info_t {
  // sai_attr_value_type_t membervaluetype;                
    sai_grpc_attr_value_type_t membervaluetype = 1;
  // PTR=>char membername;                
    string membername = 2;
  // bool isvlan;                
    bool isvlan = 3;
  // PTR=>sai_object_type_t allowedobjecttypes;                
    sai_grpc_object_type_t  allowedobjecttypes = 4;
  // size_t allowedobjecttypeslength;                
    sai_grpc_size_t allowedobjecttypeslength = 5;
  // bool isenum;                
    bool isenum = 6;
  // PTR=>sai_enum_metadata_t enummetadata;                
    sai_grpc_enum_metadata_t  enummetadata = 7;
  // sai_meta_get_struct_member_oid_fn getoid;                
    sai_grpc_pointer_t getoid = 8;
  // sai_meta_set_struct_member_oid_fn setoid;                
    sai_grpc_pointer_t setoid = 9;
  // size_t offset;                
    sai_grpc_size_t offset = 10;
  // size_t size;                
    sai_grpc_size_t size = 11;
}

message sai_grpc_rev_graph_member_t {
  // sai_object_type_t objecttype;                
    sai_grpc_object_type_t objecttype = 1;
  // sai_object_type_t depobjecttype;                
    sai_grpc_object_type_t depobjecttype = 2;
  // PTR=>sai_attr_metadata_t attrmetadata;                
    sai_grpc_attr_metadata_t  attrmetadata = 3;
  // PTR=>sai_struct_member_info_t structmember;                
    sai_grpc_struct_member_info_t  structmember = 4;
}

message sai_grpc_object_type_info_t {
  // sai_object_type_t objecttype;                
    sai_grpc_object_type_t objecttype = 1;
  // PTR=>char objecttypename;                
    string objecttypename = 2;
  // sai_attr_id_t attridstart;                
    sai_grpc_attr_id_t attridstart = 3;
  // sai_attr_id_t attridend;                
    sai_grpc_attr_id_t attridend = 4;
  // PTR=>sai_enum_metadata_t enummetadata;                
    sai_grpc_enum_metadata_t  enummetadata = 5;
  // PTR=>sai_attr_metadata_t attrmetadata;                
    sai_grpc_attr_metadata_t  attrmetadata = 6;
  // size_t attrmetadatalength;                
    sai_grpc_size_t attrmetadatalength = 7;
  // bool isnonobjectid;                
    bool isnonobjectid = 8;
  // bool isobjectid;                
    bool isobjectid = 9;
  // PTR=>sai_struct_member_info_t structmembers;                
    sai_grpc_struct_member_info_t  structmembers = 10;
  // size_t structmemberscount;                
    sai_grpc_size_t structmemberscount = 11;
  // PTR=>sai_rev_graph_member_t revgraphmembers;                
    sai_grpc_rev_graph_member_t  revgraphmembers = 12;
  // size_t revgraphmemberscount;                
    sai_grpc_size_t revgraphmemberscount = 13;
  // sai_meta_generic_create_fn create;                
    sai_grpc_pointer_t create = 14;
  // sai_meta_generic_remove_fn remove;                
    sai_grpc_pointer_t remove = 15;
  // sai_meta_generic_set_fn set;                
    sai_grpc_pointer_t fnset = 16;
  // sai_meta_generic_get_fn get;                
    sai_grpc_pointer_t fnget = 17;
  // sai_meta_generic_get_stats_fn getstats;                
    sai_grpc_pointer_t getstats = 18;
  // sai_meta_generic_get_stats_ext_fn getstatsext;                
    sai_grpc_pointer_t getstatsext = 19;
  // sai_meta_generic_clear_stats_fn clearstats;                
    sai_grpc_pointer_t clearstats = 20;
  // bool isexperimental;                
    bool isexperimental = 21;
  // PTR=>sai_enum_metadata_t statenum;                
    sai_grpc_enum_metadata_t  statenum = 22;
}

message sai_grpc_timespec_t {
  // uint64_t tv_sec;                
    sai_grpc_uint64_t tv_sec = 1;
  // uint32_t tv_nsec;                
    sai_grpc_uint32_t tv_nsec = 2;
}

message sai_grpc_object_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_object_id_t list;                
    repeated sai_grpc_object_id_t  idlist = 2;
}

message sai_grpc_u8_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>uint8_t list;                
    repeated sai_grpc_uint8_t  uint8list = 2;
}

message sai_grpc_s8_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>int8_t list;                
    repeated sai_grpc_int8_t  int8list = 2;
}

message sai_grpc_u16_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>uint16_t list;                
    repeated sai_grpc_uint16_t  uint16list = 2;
}

message sai_grpc_s16_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>int16_t list;                
    repeated sai_grpc_int16_t  int16list = 2;
}

message sai_grpc_u32_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>uint32_t list;                
    repeated sai_grpc_uint32_t  uint32list = 2;
}

message sai_grpc_s32_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>int32_t list;                
    repeated sai_grpc_int32_t  int32list = 2;
}

message sai_grpc_u32_range_t {
  // uint32_t min;                
    sai_grpc_uint32_t min = 1;
  // uint32_t max;                
    sai_grpc_uint32_t max = 2;
}

message sai_grpc_s32_range_t {
  // int32_t min;                
    sai_grpc_int32_t min = 1;
  // int32_t max;                
    sai_grpc_int32_t max = 2;
}

message sai_grpc_u16_range_t {
  // uint16_t min;                
    sai_grpc_uint16_t min = 1;
  // uint16_t max;                
    sai_grpc_uint16_t max = 2;
}

message sai_grpc_u16_range_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_u16_range_t list;                
    repeated sai_grpc_u16_range_t  rangelist = 2;
}

message sai_grpc_vlan_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_vlan_id_t list;                
    repeated sai_grpc_vlan_id_t  idlist = 2;
}

message sai_grpc_ip_addr_t {
  // sai_ip4_t ip4;                
    sai_grpc_ip4_t ip4 = 1;
  // sai_ip6_t ip6;                
    sai_grpc_ip6_t ip6 = 2;
}

message sai_grpc_ip_address_t {
  // sai_ip_addr_family_t addr_family;                
    sai_grpc_ip_addr_family_t addr_family = 1;
  // sai_ip_addr_t addr;                
    sai_grpc_ip_addr_t addr = 2;
}

message sai_grpc_ip_address_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_ip_address_t list;                
    repeated sai_grpc_ip_address_t  addresslist = 2;
}

message sai_grpc_ip_prefix_t {
  // sai_ip_addr_family_t addr_family;                
    sai_grpc_ip_addr_family_t addr_family = 1;
  // sai_ip_addr_t addr;                
    sai_grpc_ip_addr_t addr = 2;
  // sai_ip_addr_t mask;                
    sai_grpc_ip_addr_t mask = 3;
}

message sai_grpc_ip_prefix_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_ip_prefix_t list;                
    repeated sai_grpc_ip_prefix_t  prefixlist = 2;
}

message sai_grpc_prbs_rx_state_t {
  // sai_port_prbs_rx_status_t rx_status;                
    sai_grpc_port_prbs_rx_status_t rx_status = 1;
  // uint32_t error_count;                
    sai_grpc_uint32_t error_count = 2;
}

message sai_grpc_latch_status_t {
  // bool current_status;                
    bool current_status = 1;
  // bool changed;                
    bool changed = 2;
}

message sai_grpc_port_lane_latch_status_t {
  // uint32_t lane;                
    sai_grpc_uint32_t lane = 1;
  // sai_latch_status_t value;                
    sai_grpc_latch_status_t value = 2;
}

message sai_grpc_port_lane_latch_status_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_port_lane_latch_status_t list;                
    repeated sai_grpc_port_lane_latch_status_t  statuslist = 2;
}

message sai_grpc_acl_field_data_mask_t {
  // sai_uint8_t u8;                
    sai_grpc_uint8_t u8 = 1;
  // sai_int8_t s8;                
    sai_grpc_int8_t s8 = 2;
  // sai_uint16_t u16;                
    sai_grpc_uint16_t u16 = 3;
  // sai_int16_t s16;                
    sai_grpc_int16_t s16 = 4;
  // sai_uint32_t u32;                
    sai_grpc_uint32_t u32 = 5;
  // sai_int32_t s32;                
    sai_grpc_int32_t s32 = 6;
  // sai_uint64_t u64;                
    sai_grpc_uint64_t u64 = 7;
  // sai_mac_t mac;                
    sai_grpc_mac_t mac = 8;
  // sai_ip4_t ip4;                
    sai_grpc_ip4_t ip4 = 9;
  // sai_ip6_t ip6;                
    sai_grpc_ip6_t ip6 = 10;
  // sai_u8_list_t u8list;                
    sai_grpc_u8_list_t u8list = 11;
}

message sai_grpc_acl_field_data_data_t {
  // bool booldata;                
    bool booldata = 1;
  // sai_uint8_t u8;                
    sai_grpc_uint8_t u8 = 2;
  // sai_int8_t s8;                
    sai_grpc_int8_t s8 = 3;
  // sai_uint16_t u16;                
    sai_grpc_uint16_t u16 = 4;
  // sai_int16_t s16;                
    sai_grpc_int16_t s16 = 5;
  // sai_uint32_t u32;                
    sai_grpc_uint32_t u32 = 6;
  // sai_int32_t s32;                
    sai_grpc_int32_t s32 = 7;
  // sai_uint64_t u64;                
    sai_grpc_uint64_t u64 = 8;
  // sai_mac_t mac;                
    sai_grpc_mac_t mac = 9;
  // sai_ip4_t ip4;                
    sai_grpc_ip4_t ip4 = 10;
  // sai_ip6_t ip6;                
    sai_grpc_ip6_t ip6 = 11;
  // sai_object_id_t oid;                
    sai_grpc_object_id_t oid = 12;
  // sai_object_list_t objlist;                
    sai_grpc_object_list_t objlist = 13;
  // sai_u8_list_t u8list;                
    sai_grpc_u8_list_t u8list = 14;
}

message sai_grpc_acl_field_data_t {
  // bool enable;                
    bool enable = 1;
  // sai_acl_field_data_mask_t mask;                
    sai_grpc_acl_field_data_mask_t mask = 2;
  // sai_acl_field_data_data_t data;                
    sai_grpc_acl_field_data_data_t data = 3;
}

message sai_grpc_acl_action_parameter_t {
  // bool booldata;                
    bool booldata = 1;
  // sai_uint8_t u8;                
    sai_grpc_uint8_t u8 = 2;
  // sai_int8_t s8;                
    sai_grpc_int8_t s8 = 3;
  // sai_uint16_t u16;                
    sai_grpc_uint16_t u16 = 4;
  // sai_int16_t s16;                
    sai_grpc_int16_t s16 = 5;
  // sai_uint32_t u32;                
    sai_grpc_uint32_t u32 = 6;
  // sai_int32_t s32;                
    sai_grpc_int32_t s32 = 7;
  // sai_mac_t mac;                
    sai_grpc_mac_t mac = 8;
  // sai_ip4_t ip4;                
    sai_grpc_ip4_t ip4 = 9;
  // sai_ip6_t ip6;                
    sai_grpc_ip6_t ip6 = 10;
  // sai_object_id_t oid;                
    sai_grpc_object_id_t oid = 11;
  // sai_object_list_t objlist;                
    sai_grpc_object_list_t objlist = 12;
  // sai_ip_address_t ipaddr;                
    sai_grpc_ip_address_t ipaddr = 13;
}

message sai_grpc_acl_action_data_t {
  // bool enable;                
    bool enable = 1;
  // sai_acl_action_parameter_t parameter;                
    sai_grpc_acl_action_parameter_t parameter = 2;
}

message sai_grpc_qos_map_params_t {
  // sai_cos_t tc;                
    sai_grpc_cos_t tc = 1;
  // sai_uint8_t dscp;                
    sai_grpc_uint8_t dscp = 2;
  // sai_uint8_t dot1p;                
    sai_grpc_uint8_t dot1p = 3;
  // sai_uint8_t prio;                
    sai_grpc_uint8_t prio = 4;
  // sai_uint8_t pg;                
    sai_grpc_uint8_t pg = 5;
  // sai_queue_index_t queue_index;                
    sai_grpc_queue_index_t queue_index = 6;
  // sai_packet_color_t color;                
    sai_grpc_packet_color_t color = 7;
  // sai_uint8_t mpls_exp;                
    sai_grpc_uint8_t mpls_exp = 8;
  // sai_uint8_t fc;                
    sai_grpc_uint8_t fc = 9;
}

message sai_grpc_qos_map_t {
  // sai_qos_map_params_t key;                
    sai_grpc_qos_map_params_t key = 1;
  // sai_qos_map_params_t value;                
    sai_grpc_qos_map_params_t value = 2;
}

message sai_grpc_qos_map_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_qos_map_t list;                
    repeated sai_grpc_qos_map_t  maplist = 2;
}

message sai_grpc_map_t {
  // sai_uint32_t key;                
    sai_grpc_uint32_t key = 1;
  // sai_int32_t value;                
    sai_grpc_int32_t value = 2;
}

message sai_grpc_map_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_map_t list;                
    repeated sai_grpc_map_t  maplist = 2;
}

message sai_grpc_acl_chain_t {
  // sai_acl_table_chain_group_stage_t chain_group_stage;                
    sai_grpc_acl_table_chain_group_stage_t chain_group_stage = 1;
  // sai_acl_table_supported_match_type_t supported_match_type;                
    sai_grpc_acl_table_supported_match_type_t supported_match_type = 2;
}

message sai_grpc_acl_chain_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_acl_chain_t list;                
    repeated sai_grpc_acl_chain_t  chainlist = 2;
}

message sai_grpc_acl_capability_t {
  // bool is_action_list_mandatory;                
    bool is_action_list_mandatory = 1;
  // sai_s32_list_t action_list;                
    sai_grpc_s32_list_t action_list = 2;
  // sai_acl_table_supported_match_type_t supported_match_type;                
    sai_grpc_acl_table_supported_match_type_t supported_match_type = 3;
  // bool is_non_contiguous_bits_exact_match_supported;                
    bool is_non_contiguous_bits_exact_match_supported = 4;
}

message sai_grpc_acl_resource_t {
  // sai_acl_stage_t stage;                
    sai_grpc_acl_stage_t stage = 1;
  // sai_acl_bind_point_type_t bind_point;                
    sai_grpc_acl_bind_point_type_t bind_point = 2;
  // sai_uint32_t avail_num;                
    sai_grpc_uint32_t avail_num = 3;
}

message sai_grpc_acl_resource_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_acl_resource_t list;                
    repeated sai_grpc_acl_resource_t  resourcelist = 2;
}

message sai_grpc_hmac_t {
  // sai_uint32_t key_id;                
    sai_grpc_uint32_t key_id = 1;
  // ARRAY=>sai_uint32_t hmac;                
    sai_grpc_uint32_t  hmac = 2;
}

message sai_grpc_tlv_entry_t {
  // sai_ip6_t ingress_node;                
    sai_grpc_ip6_t ingress_node = 1;
  // sai_ip6_t egress_node;                
    sai_grpc_ip6_t egress_node = 2;
  // ARRAY=>sai_uint32_t opaque_container;                
    sai_grpc_uint32_t  opaque_container = 3;
  // sai_hmac_t hmac;                
    sai_grpc_hmac_t hmac = 4;
}

message sai_grpc_tlv_t {
  // sai_tlv_type_t tlv_type;                
    sai_grpc_tlv_type_t tlv_type = 1;
  // sai_tlv_entry_t entry;                
    sai_grpc_tlv_entry_t entry = 2;
}

message sai_grpc_tlv_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_tlv_t list;                
    repeated sai_grpc_tlv_t  tlvlist = 2;
}

message sai_grpc_segment_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_ip6_t list;                
    repeated sai_grpc_ip6_t  ip6list = 2;
}

message sai_grpc_json_t {
  // sai_s8_list_t json;                
    sai_grpc_s8_list_t json = 1;
}

message sai_grpc_port_lane_eye_values_t {
  // uint32_t lane;                
    sai_grpc_uint32_t lane = 1;
  // int32_t left;                
    sai_grpc_int32_t left = 2;
  // int32_t right;                
    sai_grpc_int32_t right = 3;
  // int32_t up;                
    sai_grpc_int32_t up = 4;
  // int32_t down;                
    sai_grpc_int32_t down = 5;
}

message sai_grpc_port_eye_values_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_port_lane_eye_values_t list;                
    repeated sai_grpc_port_lane_eye_values_t  valueslist = 2;
}

message sai_grpc_system_port_config_t {
  // uint32_t port_id;                
    sai_grpc_uint32_t port_id = 1;
  // uint32_t attached_switch_id;                
    sai_grpc_uint32_t attached_switch_id = 2;
  // uint32_t attached_core_index;                
    sai_grpc_uint32_t attached_core_index = 3;
  // uint32_t attached_core_port_index;                
    sai_grpc_uint32_t attached_core_port_index = 4;
  // uint32_t speed;                
    sai_grpc_uint32_t speed = 5;
  // uint32_t num_voq;                
    sai_grpc_uint32_t num_voq = 6;
}

message sai_grpc_system_port_config_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_system_port_config_t list;                
    repeated sai_grpc_system_port_config_t  configlist = 2;
}

message sai_grpc_fabric_port_reachability_t {
  // uint32_t switch_id;                
    sai_grpc_uint32_t switch_id = 1;
  // bool reachable;                
    bool reachable = 2;
}

message sai_grpc_port_err_status_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_port_err_status_t list;                
    repeated sai_grpc_port_err_status_t  statuslist = 2;
}

message sai_grpc_attribute_value_t {
  // bool booldata;
    oneof sai_grpc_attribute_value {                
    bool booldata = 1;
  // ARRAY=>char chardata;                
    string chardata = 2;
  // sai_uint8_t u8;                
    sai_grpc_uint8_t u8 = 3;
  // sai_int8_t s8;                
    sai_grpc_int8_t s8 = 4;
  // sai_uint16_t u16;                
    sai_grpc_uint16_t u16 = 5;
  // sai_int16_t s16;                
    sai_grpc_int16_t s16 = 6;
  // sai_uint32_t u32;                
    sai_grpc_uint32_t u32 = 7;
  // sai_int32_t s32;                
    sai_grpc_int32_t s32 = 8;
  // sai_uint64_t u64;                
    sai_grpc_uint64_t u64 = 9;
  // sai_int64_t s64;                
    sai_grpc_int64_t s64 = 10;
  // sai_pointer_t ptr;                
    sai_grpc_pointer_t ptr = 11;
  // sai_mac_t mac;                
    sai_grpc_mac_t mac = 12;
  // sai_ip4_t ip4;                
    sai_grpc_ip4_t ip4 = 13;
  // sai_ip6_t ip6;                
    sai_grpc_ip6_t ip6 = 14;
  // sai_ip_address_t ipaddr;                
    sai_grpc_ip_address_t ipaddr = 15;
  // sai_ip_prefix_t ipprefix;                
    sai_grpc_ip_prefix_t ipprefix = 16;
  // sai_prbs_rx_state_t rx_state;                
    sai_grpc_prbs_rx_state_t rx_state = 17;
  // sai_object_id_t oid;                
    sai_grpc_object_id_t oid = 18;
  // sai_object_list_t objlist;                
    sai_grpc_object_list_t objlist = 19;
  // sai_u8_list_t u8list;                
    sai_grpc_u8_list_t u8list = 20;
  // sai_s8_list_t s8list;                
    sai_grpc_s8_list_t s8list = 21;
  // sai_u16_list_t u16list;                
    sai_grpc_u16_list_t u16list = 22;
  // sai_s16_list_t s16list;                
    sai_grpc_s16_list_t s16list = 23;
  // sai_u32_list_t u32list;                
    sai_grpc_u32_list_t u32list = 24;
  // sai_s32_list_t s32list;                
    sai_grpc_s32_list_t s32list = 25;
  // sai_u32_range_t u32range;                
    sai_grpc_u32_range_t u32range = 26;
  // sai_s32_range_t s32range;                
    sai_grpc_s32_range_t s32range = 27;
  // sai_u16_range_list_t u16rangelist;                
    sai_grpc_u16_range_list_t u16rangelist = 28;
  // sai_vlan_list_t vlanlist;                
    sai_grpc_vlan_list_t vlanlist = 29;
  // sai_qos_map_list_t qosmap;                
    sai_grpc_qos_map_list_t qosmap = 30;
  // sai_map_list_t maplist;                
    sai_grpc_map_list_t maplist = 31;
  // sai_acl_field_data_t aclfield;                
    sai_grpc_acl_field_data_t aclfield = 32;
  // sai_acl_action_data_t aclaction;                
    sai_grpc_acl_action_data_t aclaction = 33;
  // sai_acl_field_data_mask_t aclmask;                
    sai_grpc_acl_field_data_mask_t aclmask = 34;
  // sai_acl_capability_t aclcapability;                
    sai_grpc_acl_capability_t aclcapability = 35;
  // sai_acl_resource_list_t aclresource;                
    sai_grpc_acl_resource_list_t aclresource = 36;
  // sai_tlv_list_t tlvlist;                
    sai_grpc_tlv_list_t tlvlist = 37;
  // sai_segment_list_t segmentlist;                
    sai_grpc_segment_list_t segmentlist = 38;
  // sai_ip_address_list_t ipaddrlist;                
    sai_grpc_ip_address_list_t ipaddrlist = 39;
  // sai_port_eye_values_list_t porteyevalues;                
    sai_grpc_port_eye_values_list_t porteyevalues = 40;
  // sai_timespec_t timespec;                
    sai_grpc_timespec_t timespec = 41;
  // sai_encrypt_key_t encrypt_key;                
    sai_grpc_encrypt_key_t encrypt_key = 42;
  // sai_auth_key_t authkey;                
    sai_grpc_auth_key_t authkey = 43;
  // sai_macsec_sak_t macsecsak;                
    sai_grpc_macsec_sak_t macsecsak = 44;
  // sai_macsec_auth_key_t macsecauthkey;                
    sai_grpc_macsec_auth_key_t macsecauthkey = 45;
  // sai_macsec_salt_t macsecsalt;                
    sai_grpc_macsec_salt_t macsecsalt = 46;
  // sai_system_port_config_t sysportconfig;                
    sai_grpc_system_port_config_t sysportconfig = 47;
  // sai_system_port_config_list_t sysportconfiglist;                
    sai_grpc_system_port_config_list_t sysportconfiglist = 48;
  // sai_fabric_port_reachability_t reachability;                
    sai_grpc_fabric_port_reachability_t reachability = 49;
  // sai_port_err_status_list_t porterror;                
    sai_grpc_port_err_status_list_t porterror = 50;
  // sai_port_lane_latch_status_list_t portlanelatchstatuslist;                
    sai_grpc_port_lane_latch_status_list_t portlanelatchstatuslist = 51;
  // sai_latch_status_t latchstatus;                
    sai_grpc_latch_status_t latchstatus = 52;
  // sai_json_t json;                
    sai_grpc_json_t json = 53;
  // sai_ip_prefix_list_t ipprefixlist;                
    sai_grpc_ip_prefix_list_t ipprefixlist = 54;
  // sai_acl_chain_list_t aclchainlist;                
    sai_grpc_acl_chain_list_t aclchainlist = 55;
    }
}

message sai_grpc_attribute_t {
  // sai_attr_id_t id;                
    sai_grpc_attr_id_t id = 1;
  // sai_attribute_value_t value;                
    sai_grpc_attribute_value_t value = 2;
}

message sai_grpc_stat_capability_t {
  // sai_stat_id_t stat_enum;                
    sai_grpc_stat_id_t stat_enum = 1;
  // uint32_t stat_modes;                
    sai_grpc_uint32_t stat_modes = 2;
}

message sai_grpc_stat_capability_list_t {
  // uint32_t count;
    sai_grpc_uint32_t count = 1;
  // PTR=>sai_stat_capability_t list;                
    repeated sai_grpc_stat_capability_t  capabilitylist = 2;
}

message sai_grpc_switch_health_data_t {
  // sai_health_data_type_t data_type;                
    sai_grpc_health_data_type_t data_type = 1;
}


// bfd API structures
message sai_grpc_bfd_session_state_notification_t {
  // sai_object_id_t bfd_session_id;                
    sai_grpc_object_id_t bfd_session_id = 1;
  // sai_bfd_session_state_t session_state;                
    sai_grpc_bfd_session_state_t session_state = 2;
}


// fdb API structures
message sai_grpc_fdb_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_mac_t mac_address;                
    sai_grpc_mac_t mac_address = 2;
  // sai_object_id_t bv_id;                
    sai_grpc_object_id_t bv_id = 3;
}

message sai_grpc_fdb_event_notification_data_t {
  // sai_fdb_event_t event_type;                
    sai_grpc_fdb_event_t event_type = 1;
  // sai_fdb_entry_t fdb_entry;                
    sai_grpc_fdb_entry_t fdb_entry = 2;
  // uint32_t attr_count;                
    sai_grpc_uint32_t attr_count = 3;
  // PTR=>sai_attribute_t attr;                
    sai_grpc_attribute_t  attr = 4;
}


// ipmc API structures
message sai_grpc_ipmc_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t vr_id;                
    sai_grpc_object_id_t vr_id = 2;
  // sai_ipmc_entry_type_t type;                
    sai_grpc_ipmc_entry_type_t type = 3;
  // sai_ip_address_t destination;                
    sai_grpc_ip_address_t destination = 4;
  // sai_ip_address_t source;                
    sai_grpc_ip_address_t source = 5;
}


// ipsec API structures
message sai_grpc_ipsec_sa_status_notification_t {
  // sai_object_id_t ipsec_sa_id;                
    sai_grpc_object_id_t ipsec_sa_id = 1;
  // sai_ipsec_sa_octet_count_status_t ipsec_sa_octet_count_status;                
    sai_grpc_ipsec_sa_octet_count_status_t ipsec_sa_octet_count_status = 2;
  // bool ipsec_egress_sn_at_max_limit;                
    bool ipsec_egress_sn_at_max_limit = 3;
}


// l2mc API structures
message sai_grpc_l2mc_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t bv_id;                
    sai_grpc_object_id_t bv_id = 2;
  // sai_l2mc_entry_type_t type;                
    sai_grpc_l2mc_entry_type_t type = 3;
  // sai_ip_address_t destination;                
    sai_grpc_ip_address_t destination = 4;
  // sai_ip_address_t source;                
    sai_grpc_ip_address_t source = 5;
}


// mcast_fdb API structures
message sai_grpc_mcast_fdb_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_mac_t mac_address;                
    sai_grpc_mac_t mac_address = 2;
  // sai_object_id_t bv_id;                
    sai_grpc_object_id_t bv_id = 3;
}


// mpls API structures
message sai_grpc_inseg_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_label_id_t label;                
    sai_grpc_label_id_t label = 2;
}


// nat API structures
message sai_grpc_nat_entry_key_t {
  // sai_ip4_t src_ip;                
    sai_grpc_ip4_t src_ip = 1;
  // sai_ip4_t dst_ip;                
    sai_grpc_ip4_t dst_ip = 2;
  // sai_uint8_t proto;                
    sai_grpc_uint8_t proto = 3;
  // sai_uint16_t l4_src_port;                
    sai_grpc_uint16_t l4_src_port = 4;
  // sai_uint16_t l4_dst_port;                
    sai_grpc_uint16_t l4_dst_port = 5;
}

message sai_grpc_nat_entry_mask_t {
  // sai_ip4_t src_ip;                
    sai_grpc_ip4_t src_ip = 1;
  // sai_ip4_t dst_ip;                
    sai_grpc_ip4_t dst_ip = 2;
  // sai_uint8_t proto;                
    sai_grpc_uint8_t proto = 3;
  // sai_uint16_t l4_src_port;                
    sai_grpc_uint16_t l4_src_port = 4;
  // sai_uint16_t l4_dst_port;                
    sai_grpc_uint16_t l4_dst_port = 5;
}

message sai_grpc_nat_entry_data_t {
  // sai_nat_entry_key_t key;                
    sai_grpc_nat_entry_key_t key = 1;
  // sai_nat_entry_mask_t mask;                
    sai_grpc_nat_entry_mask_t mask = 2;
}

message sai_grpc_nat_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t vr_id;                
    sai_grpc_object_id_t vr_id = 2;
  // sai_nat_type_t nat_type;                
    sai_grpc_nat_type_t nat_type = 3;
  // sai_nat_entry_data_t data;                
    sai_grpc_nat_entry_data_t data = 4;
}

message sai_grpc_nat_event_notification_data_t {
  // sai_nat_event_t event_type;                
    sai_grpc_nat_event_t event_type = 1;
  // sai_nat_entry_t nat_entry;                
    sai_grpc_nat_entry_t nat_entry = 2;
}


// neighbor API structures
message sai_grpc_neighbor_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t rif_id;                
    sai_grpc_object_id_t rif_id = 2;
  // sai_ip_address_t ip_address;                
    sai_grpc_ip_address_t ip_address = 3;
}


// port API structures
message sai_grpc_port_oper_status_notification_t {
  // sai_object_id_t port_id;                
    sai_grpc_object_id_t port_id = 1;
  // sai_port_oper_status_t port_state;                
    sai_grpc_port_oper_status_t port_state = 2;
}


// queue API structures
message sai_grpc_queue_deadlock_notification_data_t {
  // sai_object_id_t queue_id;                
    sai_grpc_object_id_t queue_id = 1;
  // sai_queue_pfc_deadlock_event_type_t event;                
    sai_grpc_queue_pfc_deadlock_event_type_t event = 2;
  // bool app_managed_recovery;                
    bool app_managed_recovery = 3;
}


// route API structures
message sai_grpc_route_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t vr_id;                
    sai_grpc_object_id_t vr_id = 2;
  // sai_ip_prefix_t destination;                
    sai_grpc_ip_prefix_t destination = 3;
}


// srv6 API structures
message sai_grpc_my_sid_entry_t {
  // sai_object_id_t switch_id;                
    sai_grpc_object_id_t switch_id = 1;
  // sai_object_id_t vr_id;                
    sai_grpc_object_id_t vr_id = 2;
  // sai_uint8_t locator_block_len;                
    sai_grpc_uint8_t locator_block_len = 3;
  // sai_uint8_t locator_node_len;                
    sai_grpc_uint8_t locator_node_len = 4;
  // sai_uint8_t function_len;                
    sai_grpc_uint8_t function_len = 5;
  // sai_uint8_t args_len;                
    sai_grpc_uint8_t args_len = 6;
  // sai_ip6_t sid;                
    sai_grpc_ip6_t sid = 7;
}



// common attribute list
message sai_grpc_attribute_list_t {
    sai_grpc_int32_t attr_count = 1;
    repeated sai_grpc_attribute_t attr_list = 2;
}
// Stats attribute list
message sai_grpc_u64_list_t {
    repeated sai_grpc_uint64_t u64 = 1;
}



// error handling
message sai_grpc_exception {
    sai_grpc_status_t status = 1;
}



// error handling
message sai_grpc_response {
    bool success = 1;
}


message sai_grpc_create_acl_table_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_table_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_oid = 2;
}
message sai_grpc_set_acl_table_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_table_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_entry_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_entry_oid = 2;
}
message sai_grpc_set_acl_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_entry_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_entry_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_counter_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_counter_oid = 2;
}
message sai_grpc_set_acl_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_counter_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_counter_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_range_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_range_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_range_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_range_oid = 2;
}
message sai_grpc_set_acl_range_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_range_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_range_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_range_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_table_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_table_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_oid = 2;
}
message sai_grpc_set_acl_table_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_table_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_table_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_table_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_member_oid = 2;
}
message sai_grpc_set_acl_table_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_table_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_acl_table_chain_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_chain_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_acl_table_chain_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_chain_group_oid = 2;
}
message sai_grpc_set_acl_table_chain_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_chain_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_acl_table_chain_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t acl_table_chain_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ars_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ars_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_oid = 2;
}
message sai_grpc_set_ars_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ars_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ars_profile_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_profile_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ars_profile_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_profile_oid = 2;
}
message sai_grpc_set_ars_profile_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_profile_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ars_profile_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ars_profile_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_bfd_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_bfd_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
}
message sai_grpc_set_bfd_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_bfd_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_bfd_session_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_bfd_session_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_bfd_session_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bfd_session_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_bridge_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_bridge_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
}
message sai_grpc_set_bridge_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_bridge_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_bridge_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_bridge_port_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_bridge_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_bridge_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_bridge_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
}
message sai_grpc_set_bridge_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_bridge_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_bridge_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_bridge_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_bridge_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t bridge_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_ingress_priority_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ingress_priority_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
}
message sai_grpc_set_ingress_priority_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ingress_priority_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_ingress_priority_group_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_ingress_priority_group_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_ingress_priority_group_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ingress_priority_group_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_buffer_pool_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_buffer_pool_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
}
message sai_grpc_set_buffer_pool_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_buffer_pool_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_buffer_pool_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_buffer_pool_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_buffer_pool_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_buffer_profile_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_profile_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_buffer_profile_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_profile_oid = 2;
}
message sai_grpc_set_buffer_profile_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_profile_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_buffer_profile_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t buffer_profile_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
}
message sai_grpc_set_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_counter_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_counter_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_counter_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t counter_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_debug_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t debug_counter_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_debug_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t debug_counter_oid = 2;
}
message sai_grpc_set_debug_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t debug_counter_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_debug_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t debug_counter_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_dtel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_dtel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_oid = 2;
}
message sai_grpc_set_dtel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_dtel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_dtel_queue_report_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_queue_report_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_dtel_queue_report_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_queue_report_oid = 2;
}
message sai_grpc_set_dtel_queue_report_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_queue_report_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_dtel_queue_report_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_queue_report_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_dtel_int_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_int_session_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_dtel_int_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_int_session_oid = 2;
}
message sai_grpc_set_dtel_int_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_int_session_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_dtel_int_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_int_session_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_dtel_report_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_report_session_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_dtel_report_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_report_session_oid = 2;
}
message sai_grpc_set_dtel_report_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_report_session_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_dtel_report_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_report_session_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_dtel_event_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_event_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_dtel_event_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_event_oid = 2;
}
message sai_grpc_set_dtel_event_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_event_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_dtel_event_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t dtel_event_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_fdb_entry_t fdb_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_fdb_entry_t fdb_entry = 2;
}
message sai_grpc_set_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_fdb_entry_t fdb_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_fdb_entry_t fdb_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_flush_fdb_entries_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_bulk_create_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_fdb_entry_t  fdb_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_fdb_entry_t  fdb_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_fdb_entry_t  fdb_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_fdb_entry_t  fdb_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_generic_programmable_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t generic_programmable_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_generic_programmable_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t generic_programmable_oid = 2;
}
message sai_grpc_set_generic_programmable_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t generic_programmable_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_generic_programmable_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t generic_programmable_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_fine_grained_hash_field_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t fine_grained_hash_field_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_fine_grained_hash_field_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t fine_grained_hash_field_oid = 2;
}
message sai_grpc_set_fine_grained_hash_field_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t fine_grained_hash_field_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_fine_grained_hash_field_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t fine_grained_hash_field_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hash_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hash_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hash_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hash_oid = 2;
}
message sai_grpc_set_hash_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hash_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hash_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hash_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hostif_trap_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hostif_trap_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_group_oid = 2;
}
message sai_grpc_set_hostif_trap_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hostif_trap_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hostif_trap_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hostif_trap_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_oid = 2;
}
message sai_grpc_set_hostif_trap_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hostif_trap_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_trap_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hostif_user_defined_trap_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_user_defined_trap_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hostif_user_defined_trap_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_user_defined_trap_oid = 2;
}
message sai_grpc_set_hostif_user_defined_trap_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_user_defined_trap_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hostif_user_defined_trap_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_user_defined_trap_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hostif_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hostif_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
}
message sai_grpc_set_hostif_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hostif_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_hostif_table_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_table_entry_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_hostif_table_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_table_entry_oid = 2;
}
message sai_grpc_set_hostif_table_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_table_entry_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_hostif_table_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_table_entry_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_recv_hostif_packet_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    sai_grpc_size_t buffer_size = 3;
    string buffer = 4;
    optional sai_grpc_uint32_t attr_count = 5;
    repeated sai_grpc_attribute_t  attr_list = 6;
}
message sai_grpc_send_hostif_packet_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    sai_grpc_size_t buffer_size = 3;
    string buffer = 4;
    optional sai_grpc_uint32_t attr_count = 5;
    repeated sai_grpc_attribute_t  attr_list = 6;
}
message sai_grpc_allocate_hostif_packet_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    sai_grpc_size_t buffer_size = 3;
    string buffer = 4;
    optional sai_grpc_uint32_t attr_count = 5;
    repeated sai_grpc_attribute_t  attr_list = 6;
}
message sai_grpc_free_hostif_packet_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t hostif_oid = 2;
    string buffer = 3;
}
message sai_grpc_create_ipmc_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_ipmc_entry_t ipmc_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_ipmc_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_ipmc_entry_t ipmc_entry = 2;
}
message sai_grpc_set_ipmc_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_ipmc_entry_t ipmc_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipmc_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_ipmc_entry_t ipmc_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ipmc_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ipmc_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_oid = 2;
}
message sai_grpc_set_ipmc_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipmc_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ipmc_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ipmc_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_member_oid = 2;
}
message sai_grpc_set_ipmc_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipmc_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipmc_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ipsec_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ipsec_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_oid = 2;
}
message sai_grpc_set_ipsec_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipsec_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_ipsec_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ipsec_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
}
message sai_grpc_set_ipsec_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipsec_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_ipsec_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_ipsec_port_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_ipsec_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_ipsec_sa_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_ipsec_sa_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
}
message sai_grpc_set_ipsec_sa_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_ipsec_sa_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_ipsec_sa_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_ipsec_sa_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_ipsec_sa_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t ipsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_isolation_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_isolation_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_oid = 2;
}
message sai_grpc_set_isolation_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_isolation_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_isolation_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_isolation_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_member_oid = 2;
}
message sai_grpc_set_isolation_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_isolation_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t isolation_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_l2mc_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_l2mc_entry_t l2mc_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_l2mc_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_l2mc_entry_t l2mc_entry = 2;
}
message sai_grpc_set_l2mc_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_l2mc_entry_t l2mc_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_l2mc_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_l2mc_entry_t l2mc_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_l2mc_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_l2mc_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_oid = 2;
}
message sai_grpc_set_l2mc_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_l2mc_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_l2mc_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_l2mc_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_member_oid = 2;
}
message sai_grpc_set_l2mc_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_l2mc_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t l2mc_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_lag_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_lag_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_oid = 2;
}
message sai_grpc_set_lag_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_lag_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_lag_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_lag_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_member_oid = 2;
}
message sai_grpc_set_lag_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_lag_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t lag_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_macsec_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_macsec_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_oid = 2;
}
message sai_grpc_set_macsec_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_macsec_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_macsec_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_macsec_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
}
message sai_grpc_set_macsec_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_macsec_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_macsec_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_macsec_port_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_macsec_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_macsec_flow_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_macsec_flow_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
}
message sai_grpc_set_macsec_flow_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_macsec_flow_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_macsec_flow_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_macsec_flow_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_macsec_flow_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_flow_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_macsec_sc_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_macsec_sc_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
}
message sai_grpc_set_macsec_sc_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_macsec_sc_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_macsec_sc_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_macsec_sc_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_macsec_sc_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sc_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_macsec_sa_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_macsec_sa_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
}
message sai_grpc_set_macsec_sa_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_macsec_sa_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_macsec_sa_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_macsec_sa_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_macsec_sa_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t macsec_sa_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_mcast_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_mcast_fdb_entry_t mcast_fdb_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_mcast_fdb_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_mcast_fdb_entry_t mcast_fdb_entry = 2;
}
message sai_grpc_set_mcast_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_mcast_fdb_entry_t mcast_fdb_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_mcast_fdb_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_mcast_fdb_entry_t mcast_fdb_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_mirror_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t mirror_session_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_mirror_session_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t mirror_session_oid = 2;
}
message sai_grpc_set_mirror_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t mirror_session_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_mirror_session_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t mirror_session_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_inseg_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_inseg_entry_t inseg_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_inseg_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_inseg_entry_t inseg_entry = 2;
}
message sai_grpc_set_inseg_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_inseg_entry_t inseg_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_inseg_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_inseg_entry_t inseg_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_bulk_create_inseg_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_inseg_entry_t  inseg_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_inseg_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_inseg_entry_t  inseg_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_inseg_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_inseg_entry_t  inseg_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_inseg_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_inseg_entry_t  inseg_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_my_mac_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t my_mac_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_my_mac_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t my_mac_oid = 2;
}
message sai_grpc_set_my_mac_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t my_mac_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_my_mac_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t my_mac_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_nat_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_nat_entry_t nat_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_nat_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_nat_entry_t nat_entry = 2;
}
message sai_grpc_set_nat_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_nat_entry_t nat_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_nat_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_nat_entry_t nat_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_bulk_create_nat_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_nat_entry_t  nat_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_nat_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_nat_entry_t  nat_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_nat_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_nat_entry_t  nat_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_nat_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_nat_entry_t  nat_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_nat_zone_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t nat_zone_counter_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_nat_zone_counter_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t nat_zone_counter_oid = 2;
}
message sai_grpc_set_nat_zone_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t nat_zone_counter_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_nat_zone_counter_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t nat_zone_counter_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_neighbor_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_neighbor_entry_t neighbor_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_neighbor_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_neighbor_entry_t neighbor_entry = 2;
}
message sai_grpc_set_neighbor_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_neighbor_entry_t neighbor_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_neighbor_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_neighbor_entry_t neighbor_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_remove_all_neighbor_entries_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
}
message sai_grpc_bulk_create_neighbor_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_neighbor_entry_t  neighbor_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_neighbor_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_neighbor_entry_t  neighbor_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_neighbor_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_neighbor_entry_t  neighbor_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_neighbor_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_neighbor_entry_t  neighbor_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_next_hop_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_next_hop_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_oid = 2;
}
message sai_grpc_set_next_hop_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_next_hop_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_next_hop_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_next_hop_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_oid = 2;
}
message sai_grpc_set_next_hop_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_next_hop_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_next_hop_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_next_hop_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_member_oid = 2;
}
message sai_grpc_set_next_hop_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_next_hop_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_next_hop_group_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_map_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_next_hop_group_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_map_oid = 2;
}
message sai_grpc_set_next_hop_group_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_map_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_next_hop_group_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t next_hop_group_map_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_policer_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_policer_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
}
message sai_grpc_set_policer_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_policer_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_policer_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_policer_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_policer_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t policer_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
}
message sai_grpc_set_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_port_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_port_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_clear_port_all_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_oid = 2;
}
message sai_grpc_create_port_pool_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_port_pool_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
}
message sai_grpc_set_port_pool_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_port_pool_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_port_pool_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_port_pool_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_port_pool_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_pool_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_port_serdes_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_serdes_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_port_serdes_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_serdes_oid = 2;
}
message sai_grpc_set_port_serdes_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_serdes_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_port_serdes_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_serdes_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_port_connector_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_connector_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_port_connector_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_connector_oid = 2;
}
message sai_grpc_set_port_connector_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_connector_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_port_connector_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t port_connector_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_qos_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t qos_map_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_qos_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t qos_map_oid = 2;
}
message sai_grpc_set_qos_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t qos_map_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_qos_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t qos_map_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_queue_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_queue_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
}
message sai_grpc_set_queue_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_queue_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_queue_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_queue_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_queue_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t queue_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_route_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_route_entry_t route_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_route_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_route_entry_t route_entry = 2;
}
message sai_grpc_set_route_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_route_entry_t route_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_route_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_route_entry_t route_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_bulk_create_route_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_route_entry_t  route_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_route_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_route_entry_t  route_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_route_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_route_entry_t  route_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_route_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_route_entry_t  route_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_router_interface_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_router_interface_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
}
message sai_grpc_set_router_interface_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_router_interface_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_router_interface_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_router_interface_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_router_interface_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t router_interface_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_rpf_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_rpf_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_oid = 2;
}
message sai_grpc_set_rpf_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_rpf_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_rpf_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_rpf_group_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_member_oid = 2;
}
message sai_grpc_set_rpf_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_rpf_group_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t rpf_group_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_samplepacket_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t samplepacket_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_samplepacket_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t samplepacket_oid = 2;
}
message sai_grpc_set_samplepacket_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t samplepacket_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_samplepacket_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t samplepacket_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_scheduler_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_scheduler_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_oid = 2;
}
message sai_grpc_set_scheduler_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_scheduler_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_scheduler_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_scheduler_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_group_oid = 2;
}
message sai_grpc_set_scheduler_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_scheduler_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t scheduler_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_srv6_sidlist_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_srv6_sidlist_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
}
message sai_grpc_set_srv6_sidlist_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_srv6_sidlist_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_srv6_sidlist_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_srv6_sidlist_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_srv6_sidlist_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t srv6_sidlist_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_my_sid_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_my_sid_entry_t my_sid_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_my_sid_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_my_sid_entry_t my_sid_entry = 2;
}
message sai_grpc_set_my_sid_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_my_sid_entry_t my_sid_entry = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_my_sid_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_my_sid_entry_t my_sid_entry = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_bulk_create_my_sid_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_my_sid_entry_t  my_sid_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_bulk_remove_my_sid_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_my_sid_entry_t  my_sid_entry = 3;
    sai_grpc_bulk_op_error_mode_t mode = 4;
    sai_grpc_status_t  object_statuses = 5;
}
message sai_grpc_bulk_set_my_sid_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_my_sid_entry_t  my_sid_entry = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
    sai_grpc_bulk_op_error_mode_t mode = 5;
    sai_grpc_status_t  object_statuses = 6;
}
message sai_grpc_bulk_get_my_sid_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint32_t object_count = 2;
    sai_grpc_my_sid_entry_t  my_sid_entry = 3;
    optional sai_grpc_uint32_t  attr_count = 4;
    sai_grpc_attribute_list_t attr_list = 5;
    sai_grpc_bulk_op_error_mode_t mode = 6;
    sai_grpc_status_t  object_statuses = 7;
}
message sai_grpc_create_stp_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_stp_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_oid = 2;
}
message sai_grpc_set_stp_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_stp_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_stp_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_stp_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_port_oid = 2;
}
message sai_grpc_set_stp_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_stp_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t stp_port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_switch_register_read_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint64_t platform_context = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_switch_register_write_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_uint64_t platform_context = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_switch_mdio_read_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_switch_mdio_write_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_switch_mdio_cl22_read_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_switch_mdio_cl22_write_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t device_addr = 3;
    sai_grpc_uint32_t start_reg_addr = 4;
    sai_grpc_uint32_t number_of_registers = 5;
    sai_grpc_uint32_t  reg_val = 6;
}
message sai_grpc_create_switch_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    repeated sai_grpc_attribute_t  attr_list = 4;
}
message sai_grpc_remove_switch_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
}
message sai_grpc_set_switch_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_switch_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_switch_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_switch_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_switch_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_id = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_switch_tunnel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_tunnel_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_switch_tunnel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_tunnel_oid = 2;
}
message sai_grpc_set_switch_tunnel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_tunnel_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_switch_tunnel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t switch_tunnel_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_system_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t system_port_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_system_port_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t system_port_oid = 2;
}
message sai_grpc_set_system_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t system_port_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_system_port_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t system_port_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_tam_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_oid = 2;
}
message sai_grpc_set_tam_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_tam_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_tam_math_func_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_math_func_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_math_func_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_math_func_oid = 2;
}
message sai_grpc_get_tam_math_func_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_math_func_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_math_func_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_math_func_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_event_threshold_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_threshold_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_event_threshold_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_threshold_oid = 2;
}
message sai_grpc_get_tam_event_threshold_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_threshold_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_event_threshold_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_threshold_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_int_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_int_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_int_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_int_oid = 2;
}
message sai_grpc_get_tam_int_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_int_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_int_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_int_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_tel_type_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_tel_type_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_tel_type_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_tel_type_oid = 2;
}
message sai_grpc_get_tam_tel_type_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_tel_type_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_tel_type_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_tel_type_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_report_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_report_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_report_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_report_oid = 2;
}
message sai_grpc_get_tam_report_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_report_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_report_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_report_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_telemetry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_telemetry_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_telemetry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_telemetry_oid = 2;
}
message sai_grpc_get_tam_telemetry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_telemetry_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_telemetry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_telemetry_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_transport_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_transport_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_transport_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_transport_oid = 2;
}
message sai_grpc_get_tam_transport_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_transport_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_transport_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_transport_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_collector_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_collector_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_collector_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_collector_oid = 2;
}
message sai_grpc_get_tam_collector_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_collector_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_collector_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_collector_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_event_action_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_action_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_event_action_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_action_oid = 2;
}
message sai_grpc_get_tam_event_action_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_action_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_event_action_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_action_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tam_event_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tam_event_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_oid = 2;
}
message sai_grpc_get_tam_event_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_set_tam_event_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tam_event_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_create_tunnel_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tunnel_map_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_oid = 2;
}
message sai_grpc_set_tunnel_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_tunnel_map_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_tunnel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tunnel_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
}
message sai_grpc_set_tunnel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_tunnel_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_tunnel_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_tunnel_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_tunnel_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_tunnel_term_table_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_term_table_entry_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tunnel_term_table_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_term_table_entry_oid = 2;
}
message sai_grpc_set_tunnel_term_table_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_term_table_entry_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_tunnel_term_table_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_term_table_entry_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_tunnel_map_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_entry_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_tunnel_map_entry_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_entry_oid = 2;
}
message sai_grpc_set_tunnel_map_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_entry_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_tunnel_map_entry_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t tunnel_map_entry_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_udf_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_udf_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_oid = 2;
}
message sai_grpc_set_udf_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_udf_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_udf_match_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_match_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_udf_match_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_match_oid = 2;
}
message sai_grpc_set_udf_match_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_match_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_udf_match_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_match_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_udf_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_group_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_udf_group_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_group_oid = 2;
}
message sai_grpc_set_udf_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_group_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_udf_group_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t udf_group_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_virtual_router_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t virtual_router_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_virtual_router_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t virtual_router_oid = 2;
}
message sai_grpc_set_virtual_router_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t virtual_router_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_virtual_router_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t virtual_router_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_vlan_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_vlan_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
}
message sai_grpc_set_vlan_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_vlan_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_create_vlan_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_member_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_vlan_member_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_member_oid = 2;
}
message sai_grpc_set_vlan_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_member_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_vlan_member_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_member_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}
message sai_grpc_get_vlan_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    repeated sai_grpc_uint64_t  counters = 5;
}
message sai_grpc_get_vlan_stats_ext_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
    sai_grpc_stats_mode_t mode = 5;
    repeated sai_grpc_uint64_t  counters = 6;
}
message sai_grpc_clear_vlan_stats_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t vlan_oid = 2;
    sai_grpc_uint32_t number_of_counters = 3;
    repeated sai_grpc_stat_id_t  counter_ids = 4;
}
message sai_grpc_create_wred_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t wred_oid = 2;
    sai_grpc_object_id_t switch_id = 3;
    optional sai_grpc_uint32_t attr_count = 4;
    repeated sai_grpc_attribute_t  attr_list = 5;
}
message sai_grpc_remove_wred_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t wred_oid = 2;
}
message sai_grpc_set_wred_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t wred_oid = 2;
    repeated sai_grpc_attribute_t attr = 3;
}
message sai_grpc_get_wred_attribute_msg_args {
    sai_grpc_int32_t tid = 1;
    sai_grpc_object_id_t wred_oid = 2;
    optional sai_grpc_uint32_t attr_count = 3;
    sai_grpc_attribute_list_t attr_list = 4;
}


service sai_rpc {

    // Start of acl API
    // sai_status_t(*sai_create_acl_table_fn)(_Out_ sai_object_id_t *acl_table_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_table mandatory attrs: 
    // SAI_ACL_TABLE_ATTR_ACL_STAGE, 
        // 
    // acl API
    rpc sai_grpc_create_acl_table(sai_grpc_create_acl_table_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_table_fn)(_In_ sai_object_id_t acl_table_id)
    // acl_table attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_table(sai_grpc_remove_acl_table_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_table_attribute_fn)(_In_ sai_object_id_t acl_table_id, _In_ const sai_attribute_t *attr)
    // acl_table attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_set_acl_table_attribute(sai_grpc_set_acl_table_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_table_attribute_fn)(_In_ sai_object_id_t acl_table_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_table attrs: 
    //  
        // SAI_ACL_TABLE_ATTR_ACL_STAGE,  
        // SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST,  
        // SAI_ACL_TABLE_ATTR_SIZE,  
        // SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_MAC,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_IP,  
        // SAI_ACL_TABLE_ATTR_FIELD_DST_IP,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP,  
        // SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS,  
        // SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS,  
        // SAI_ACL_TABLE_ATTR_FIELD_IN_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID,  
        // SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI,  
        // SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI,  
        // SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT,  
        // SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL,  
        // SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL,  
        // SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION,  
        // SAI_ACL_TABLE_ATTR_FIELD_DSCP,  
        // SAI_ACL_TABLE_ATTR_FIELD_ECN,  
        // SAI_ACL_TABLE_ATTR_FIELD_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_TOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS,  
        // SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS,  
        // SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG,  
        // SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_TC,  
        // SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE,  
        // SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE,  
        // SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN,  
        // SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI,  
        // SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG,  
        // SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP,  
        // SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS,  
        // SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META,  
        // SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT,  
        // SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT,  
        // SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT,  
        // SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE,  
        // SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME,  
        // SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN,  
        // SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX,  
        // SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER,  
        // SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY,  
        // SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE,  
        // SAI_ACL_TABLE_ATTR_ENTRY_LIST,  
        // SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY,  
        // SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER,  
        // SAI_ACL_TABLE_ATTR_ACL_TABLE_MATCH_TYPE,  
        // SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_SRC_IPV6,  
        // SAI_ACL_TABLE_ATTR_FIELD_VALID_BITS_DST_IPV6, 
        // 
    // acl API
    rpc sai_grpc_get_acl_table_attribute(sai_grpc_get_acl_table_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_entry_fn)(_Out_ sai_object_id_t *acl_entry_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_entry mandatory attrs: 
    // SAI_ACL_ENTRY_ATTR_TABLE_ID, 
        // 
    // acl API
    rpc sai_grpc_create_acl_entry(sai_grpc_create_acl_entry_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_entry_fn)(_In_ sai_object_id_t acl_entry_id)
    // acl_entry attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_entry(sai_grpc_remove_acl_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_entry_attribute_fn)(_In_ sai_object_id_t acl_entry_id, _In_ const sai_attribute_t *attr)
    // acl_entry attrs: 
    //  
        // SAI_ACL_ENTRY_ATTR_PRIORITY,  
        // SAI_ACL_ENTRY_ATTR_ADMIN_STATE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DSCP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ECN,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME,  
        // SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN,  
        // SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER,  
        // SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST,  
        // SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,  
        // SAI_ACL_ENTRY_ATTR_ACTION_FLOOD,  
        // SAI_ACL_ENTRY_ATTR_ACTION_COUNTER,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_TC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA,  
        // SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_FORWARDING_CLASS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_MONITORING,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_OBJECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DISABLE_ARS_FORWARDING,  
        // SAI_ACL_ENTRY_ATTR_ACTION_CHAIN_REDIRECT, 
        // 
    // acl API
    rpc sai_grpc_set_acl_entry_attribute(sai_grpc_set_acl_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_entry_attribute_fn)(_In_ sai_object_id_t acl_entry_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_entry attrs: 
    //  
        // SAI_ACL_ENTRY_ATTR_TABLE_ID,  
        // SAI_ACL_ENTRY_ATTR_PRIORITY,  
        // SAI_ACL_ENTRY_ATTR_ADMIN_STATE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION,  
        // SAI_ACL_ENTRY_ATTR_FIELD_DSCP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ECN,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TC,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP,  
        // SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS,  
        // SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META,  
        // SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT,  
        // SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME,  
        // SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN,  
        // SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX,  
        // SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE,  
        // SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER,  
        // SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY,  
        // SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST,  
        // SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION,  
        // SAI_ACL_ENTRY_ATTR_ACTION_FLOOD,  
        // SAI_ACL_ENTRY_ATTR_ACTION_COUNTER,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_TC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA,  
        // SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN,  
        // SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP,  
        // SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_VRF,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_FORWARDING_CLASS,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_MONITORING,  
        // SAI_ACL_ENTRY_ATTR_ACTION_SET_ARS_OBJECT,  
        // SAI_ACL_ENTRY_ATTR_ACTION_DISABLE_ARS_FORWARDING,  
        // SAI_ACL_ENTRY_ATTR_ACTION_CHAIN_REDIRECT, 
        // 
    // acl API
    rpc sai_grpc_get_acl_entry_attribute(sai_grpc_get_acl_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_counter_fn)(_Out_ sai_object_id_t *acl_counter_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_counter mandatory attrs: 
    // SAI_ACL_COUNTER_ATTR_TABLE_ID, 
        // 
    // acl API
    rpc sai_grpc_create_acl_counter(sai_grpc_create_acl_counter_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_counter_fn)(_In_ sai_object_id_t acl_counter_id)
    // acl_counter attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_counter(sai_grpc_remove_acl_counter_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_counter_attribute_fn)(_In_ sai_object_id_t acl_counter_id, _In_ const sai_attribute_t *attr)
    // acl_counter attrs: 
    //  
        // SAI_ACL_COUNTER_ATTR_PACKETS,  
        // SAI_ACL_COUNTER_ATTR_BYTES,  
        // SAI_ACL_COUNTER_ATTR_LABEL, 
        // 
    // acl API
    rpc sai_grpc_set_acl_counter_attribute(sai_grpc_set_acl_counter_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_counter_attribute_fn)(_In_ sai_object_id_t acl_counter_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_counter attrs: 
    //  
        // SAI_ACL_COUNTER_ATTR_TABLE_ID,  
        // SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT,  
        // SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT,  
        // SAI_ACL_COUNTER_ATTR_PACKETS,  
        // SAI_ACL_COUNTER_ATTR_BYTES,  
        // SAI_ACL_COUNTER_ATTR_LABEL, 
        // 
    // acl API
    rpc sai_grpc_get_acl_counter_attribute(sai_grpc_get_acl_counter_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_range_fn)(_Out_ sai_object_id_t *acl_range_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_range mandatory attrs: 
    // SAI_ACL_RANGE_ATTR_TYPE, SAI_ACL_RANGE_ATTR_LIMIT, 
        // 
    // acl API
    rpc sai_grpc_create_acl_range(sai_grpc_create_acl_range_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_range_fn)(_In_ sai_object_id_t acl_range_id)
    // acl_range attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_range(sai_grpc_remove_acl_range_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_range_attribute_fn)(_In_ sai_object_id_t acl_range_id, _In_ const sai_attribute_t *attr)
    // acl_range attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_set_acl_range_attribute(sai_grpc_set_acl_range_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_range_attribute_fn)(_In_ sai_object_id_t acl_range_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_range attrs: 
    //  
        // SAI_ACL_RANGE_ATTR_TYPE,  
        // SAI_ACL_RANGE_ATTR_LIMIT, 
        // 
    // acl API
    rpc sai_grpc_get_acl_range_attribute(sai_grpc_get_acl_range_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_table_group_fn)(_Out_ sai_object_id_t *acl_table_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_table_group mandatory attrs: 
    // SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE, 
        // 
    // acl API
    rpc sai_grpc_create_acl_table_group(sai_grpc_create_acl_table_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_table_group_fn)(_In_ sai_object_id_t acl_table_group_id)
    // acl_table_group attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_table_group(sai_grpc_remove_acl_table_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_table_group_attribute_fn)(_In_ sai_object_id_t acl_table_group_id, _In_ const sai_attribute_t *attr)
    // acl_table_group attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_set_acl_table_group_attribute(sai_grpc_set_acl_table_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_table_group_attribute_fn)(_In_ sai_object_id_t acl_table_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_table_group attrs: 
    //  
        // SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE,  
        // SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST,  
        // SAI_ACL_TABLE_GROUP_ATTR_TYPE,  
        // SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST,  
        // SAI_ACL_TABLE_GROUP_ATTR_CHAIN_GROUP_LIST, 
        // 
    // acl API
    rpc sai_grpc_get_acl_table_group_attribute(sai_grpc_get_acl_table_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_table_group_member_fn)(_Out_ sai_object_id_t *acl_table_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_table_group_member mandatory attrs: 
    // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID, SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID, SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY, 
        // 
    // acl API
    rpc sai_grpc_create_acl_table_group_member(sai_grpc_create_acl_table_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_table_group_member_fn)(_In_ sai_object_id_t acl_table_group_member_id)
    // acl_table_group_member attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_table_group_member(sai_grpc_remove_acl_table_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_table_group_member_attribute_fn)(_In_ sai_object_id_t acl_table_group_member_id, _In_ const sai_attribute_t *attr)
    // acl_table_group_member attrs: 
    //  
        // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_CHAIN_GROUP_ID, 
        // 
    // acl API
    rpc sai_grpc_set_acl_table_group_member_attribute(sai_grpc_set_acl_table_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_table_group_member_attribute_fn)(_In_ sai_object_id_t acl_table_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_table_group_member attrs: 
    //  
        // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID,  
        // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID,  
        // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY,  
        // SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_CHAIN_GROUP_ID, 
        // 
    // acl API
    rpc sai_grpc_get_acl_table_group_member_attribute(sai_grpc_get_acl_table_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_acl_table_chain_group_fn)(_Out_ sai_object_id_t *acl_table_chain_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // acl_table_chain_group mandatory attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_create_acl_table_chain_group(sai_grpc_create_acl_table_chain_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_acl_table_chain_group_fn)(_In_ sai_object_id_t acl_table_chain_group_id)
    // acl_table_chain_group attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_remove_acl_table_chain_group(sai_grpc_remove_acl_table_chain_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_acl_table_chain_group_attribute_fn)(_In_ sai_object_id_t acl_table_chain_group_id, _In_ const sai_attribute_t *attr)
    // acl_table_chain_group attrs: 
    // 
        // 
    // acl API
    rpc sai_grpc_set_acl_table_chain_group_attribute(sai_grpc_set_acl_table_chain_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_acl_table_chain_group_attribute_fn)(_In_ sai_object_id_t acl_table_chain_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // acl_table_chain_group attrs: 
    //  
        // SAI_ACL_TABLE_CHAIN_GROUP_ATTR_TYPE,  
        // SAI_ACL_TABLE_CHAIN_GROUP_ATTR_STAGE, 
        // 
    // acl API
    rpc sai_grpc_get_acl_table_chain_group_attribute(sai_grpc_get_acl_table_chain_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of ars API
    // sai_status_t(*sai_create_ars_fn)(_Out_ sai_object_id_t *ars_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ars mandatory attrs: 
    // 
        // 
    // ars API
    rpc sai_grpc_create_ars(sai_grpc_create_ars_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ars_fn)(_In_ sai_object_id_t ars_id)
    // ars attrs: 
    // 
        // 
    // ars API
    rpc sai_grpc_remove_ars(sai_grpc_remove_ars_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ars_attribute_fn)(_In_ sai_object_id_t ars_id, _In_ const sai_attribute_t *attr)
    // ars attrs: 
    //  
        // SAI_ARS_ATTR_MODE,  
        // SAI_ARS_ATTR_IDLE_TIME,  
        // SAI_ARS_ATTR_MAX_FLOWS,  
        // SAI_ARS_ATTR_MON_ENABLE,  
        // SAI_ARS_ATTR_SAMPLEPACKET_ENABLE,  
        // SAI_ARS_ATTR_MAX_ALT_MEMEBERS_PER_GROUP,  
        // SAI_ARS_ATTR_MAX_PRIMARY_MEMEBERS_PER_GROUP,  
        // SAI_ARS_ATTR_PRIMARY_PATH_QUALITY_THRESHOLD,  
        // SAI_ARS_ATTR_ALTERNATE_PATH_COST,  
        // SAI_ARS_ATTR_ALTERNATE_PATH_BIAS, 
        // 
    // ars API
    rpc sai_grpc_set_ars_attribute(sai_grpc_set_ars_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ars_attribute_fn)(_In_ sai_object_id_t ars_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ars attrs: 
    //  
        // SAI_ARS_ATTR_MODE,  
        // SAI_ARS_ATTR_IDLE_TIME,  
        // SAI_ARS_ATTR_MAX_FLOWS,  
        // SAI_ARS_ATTR_MON_ENABLE,  
        // SAI_ARS_ATTR_SAMPLEPACKET_ENABLE,  
        // SAI_ARS_ATTR_MAX_ALT_MEMEBERS_PER_GROUP,  
        // SAI_ARS_ATTR_MAX_PRIMARY_MEMEBERS_PER_GROUP,  
        // SAI_ARS_ATTR_PRIMARY_PATH_QUALITY_THRESHOLD,  
        // SAI_ARS_ATTR_ALTERNATE_PATH_COST,  
        // SAI_ARS_ATTR_ALTERNATE_PATH_BIAS, 
        // 
    // ars API
    rpc sai_grpc_get_ars_attribute(sai_grpc_get_ars_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of ars_profile API
    // sai_status_t(*sai_create_ars_profile_fn)(_Out_ sai_object_id_t *ars_profile_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ars_profile mandatory attrs: 
    // 
        // 
    // ars_profile API
    rpc sai_grpc_create_ars_profile(sai_grpc_create_ars_profile_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ars_profile_fn)(_In_ sai_object_id_t ars_profile_id)
    // ars_profile attrs: 
    // 
        // 
    // ars_profile API
    rpc sai_grpc_remove_ars_profile(sai_grpc_remove_ars_profile_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ars_profile_attribute_fn)(_In_ sai_object_id_t ars_profile_id, _In_ const sai_attribute_t *attr)
    // ars_profile attrs: 
    //  
        // SAI_ARS_PROFILE_ATTR_ALGO,  
        // SAI_ARS_PROFILE_ATTR_SAMPLING_INTERVAL,  
        // SAI_ARS_PROFILE_ATTR_ARS_RANDOM_SEED,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST_WEIGHT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE_WEIGHT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_CURRENT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_EXPONENT,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MAX_THRESHOLD, 
        // 
    // ars_profile API
    rpc sai_grpc_set_ars_profile_attribute(sai_grpc_set_ars_profile_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ars_profile_attribute_fn)(_In_ sai_object_id_t ars_profile_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ars_profile attrs: 
    //  
        // SAI_ARS_PROFILE_ATTR_ALGO,  
        // SAI_ARS_PROFILE_ATTR_SAMPLING_INTERVAL,  
        // SAI_ARS_PROFILE_ATTR_ARS_RANDOM_SEED,  
        // SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_GROUPS,  
        // SAI_ARS_PROFILE_ATTR_ECMP_ARS_MAX_MEMBERS_PER_GROUP,  
        // SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_GROUPS,  
        // SAI_ARS_PROFILE_ATTR_LAG_ARS_MAX_MEMBERS_PER_GROUP,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_PAST_WEIGHT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_FUTURE_WEIGHT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_CURRENT,  
        // SAI_ARS_PROFILE_ATTR_PORT_LOAD_EXPONENT,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BANDS,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_0_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_1_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_2_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_3_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_4_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_5_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_6_MAX_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MIN_THRESHOLD,  
        // SAI_ARS_PROFILE_ATTR_QUANT_BAND_7_MAX_THRESHOLD, 
        // 
    // ars_profile API
    rpc sai_grpc_get_ars_profile_attribute(sai_grpc_get_ars_profile_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of bfd API
    // sai_status_t(*sai_create_bfd_session_fn)(_Out_ sai_object_id_t *bfd_session_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // bfd_session mandatory attrs: 
    // SAI_BFD_SESSION_ATTR_TYPE, SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER, SAI_BFD_SESSION_ATTR_PORT, SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR, SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR, SAI_BFD_SESSION_ATTR_UDP_SRC_PORT, SAI_BFD_SESSION_ATTR_VLAN_ID, SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE, SAI_BFD_SESSION_ATTR_IPHDR_VERSION, SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS, SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS, SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS, SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS, SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS, SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS, SAI_BFD_SESSION_ATTR_MIN_TX, SAI_BFD_SESSION_ATTR_MIN_RX, SAI_BFD_SESSION_ATTR_MULTIPLIER, SAI_BFD_SESSION_ATTR_SRV6_SIDLIST_ID, 
        // 
    // bfd API
    rpc sai_grpc_create_bfd_session(sai_grpc_create_bfd_session_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_bfd_session_fn)(_In_ sai_object_id_t bfd_session_id)
    // bfd_session attrs: 
    // 
        // 
    // bfd API
    rpc sai_grpc_remove_bfd_session(sai_grpc_remove_bfd_session_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_bfd_session_attribute_fn)(_In_ sai_object_id_t bfd_session_id, _In_ const sai_attribute_t *attr)
    // bfd_session attrs: 
    //  
        // SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER,  
        // SAI_BFD_SESSION_ATTR_PORT,  
        // SAI_BFD_SESSION_ATTR_TC,  
        // SAI_BFD_SESSION_ATTR_VLAN_TPID,  
        // SAI_BFD_SESSION_ATTR_VLAN_PRI,  
        // SAI_BFD_SESSION_ATTR_VLAN_CFI,  
        // SAI_BFD_SESSION_ATTR_IPHDR_VERSION,  
        // SAI_BFD_SESSION_ATTR_TOS,  
        // SAI_BFD_SESSION_ATTR_TTL,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_TOS,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_TTL,  
        // SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_ECHO_ENABLE,  
        // SAI_BFD_SESSION_ATTR_MIN_TX,  
        // SAI_BFD_SESSION_ATTR_MIN_RX,  
        // SAI_BFD_SESSION_ATTR_MULTIPLIER, 
        // 
    // bfd API
    rpc sai_grpc_set_bfd_session_attribute(sai_grpc_set_bfd_session_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_bfd_session_attribute_fn)(_In_ sai_object_id_t bfd_session_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // bfd_session attrs: 
    //  
        // SAI_BFD_SESSION_ATTR_TYPE,  
        // SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID,  
        // SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER,  
        // SAI_BFD_SESSION_ATTR_PORT,  
        // SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR,  
        // SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR,  
        // SAI_BFD_SESSION_ATTR_UDP_SRC_PORT,  
        // SAI_BFD_SESSION_ATTR_TC,  
        // SAI_BFD_SESSION_ATTR_VLAN_TPID,  
        // SAI_BFD_SESSION_ATTR_VLAN_ID,  
        // SAI_BFD_SESSION_ATTR_VLAN_PRI,  
        // SAI_BFD_SESSION_ATTR_VLAN_CFI,  
        // SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID,  
        // SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE,  
        // SAI_BFD_SESSION_ATTR_IPHDR_VERSION,  
        // SAI_BFD_SESSION_ATTR_TOS,  
        // SAI_BFD_SESSION_ATTR_TTL,  
        // SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_TOS,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_TTL,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS,  
        // SAI_BFD_SESSION_ATTR_ECHO_ENABLE,  
        // SAI_BFD_SESSION_ATTR_MULTIHOP,  
        // SAI_BFD_SESSION_ATTR_CBIT,  
        // SAI_BFD_SESSION_ATTR_MIN_TX,  
        // SAI_BFD_SESSION_ATTR_MIN_RX,  
        // SAI_BFD_SESSION_ATTR_MULTIPLIER,  
        // SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX,  
        // SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX,  
        // SAI_BFD_SESSION_ATTR_STATE,  
        // SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE,  
        // SAI_BFD_SESSION_ATTR_NEGOTIATED_TX,  
        // SAI_BFD_SESSION_ATTR_NEGOTIATED_RX,  
        // SAI_BFD_SESSION_ATTR_LOCAL_DIAG,  
        // SAI_BFD_SESSION_ATTR_REMOTE_DIAG,  
        // SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER,  
        // SAI_BFD_SESSION_ATTR_SRV6_SIDLIST_ID, 
        // 
    // bfd API
    rpc sai_grpc_get_bfd_session_attribute(sai_grpc_get_bfd_session_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_bfd_session_stats_fn)(_In_ sai_object_id_t bfd_session_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // bfd_session stats: 
    // in_packets, out_packets, drop_packets, 
        // 
    // bfd API
    rpc sai_grpc_get_bfd_session_stats(sai_grpc_get_bfd_session_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_bfd_session_stats_ext_fn)(_In_ sai_object_id_t bfd_session_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // bfd_session stats: 
    // in_packets, out_packets, drop_packets, 
        // 
    // bfd API
    rpc sai_grpc_get_bfd_session_stats_ext(sai_grpc_get_bfd_session_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_bfd_session_stats_fn)(_In_ sai_object_id_t bfd_session_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // bfd_session attrs: 
    // 
        // 
    // bfd API
    rpc sai_grpc_clear_bfd_session_stats(sai_grpc_clear_bfd_session_stats_msg_args)        returns (sai_grpc_response);


    // Start of bridge API
    // sai_status_t(*sai_create_bridge_port_fn)(_Out_ sai_object_id_t *bridge_port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // bridge_port mandatory attrs: 
    // SAI_BRIDGE_PORT_ATTR_TYPE, SAI_BRIDGE_PORT_ATTR_PORT_ID, SAI_BRIDGE_PORT_ATTR_VLAN_ID, SAI_BRIDGE_PORT_ATTR_RIF_ID, SAI_BRIDGE_PORT_ATTR_TUNNEL_ID, SAI_BRIDGE_PORT_ATTR_BRIDGE_ID, 
        // 
    // bridge API
    rpc sai_grpc_create_bridge_port(sai_grpc_create_bridge_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_bridge_port_fn)(_In_ sai_object_id_t bridge_port_id)
    // bridge_port attrs: 
    // 
        // 
    // bridge API
    rpc sai_grpc_remove_bridge_port(sai_grpc_remove_bridge_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_bridge_port_attribute_fn)(_In_ sai_object_id_t bridge_port_id, _In_ const sai_attribute_t *attr)
    // bridge_port attrs: 
    //  
        // SAI_BRIDGE_PORT_ATTR_TAGGING_MODE,  
        // SAI_BRIDGE_PORT_ATTR_BRIDGE_ID,  
        // SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE,  
        // SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION,  
        // SAI_BRIDGE_PORT_ATTR_ADMIN_STATE,  
        // SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING,  
        // SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING,  
        // SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP, 
        // 
    // bridge API
    rpc sai_grpc_set_bridge_port_attribute(sai_grpc_set_bridge_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_bridge_port_attribute_fn)(_In_ sai_object_id_t bridge_port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // bridge_port attrs: 
    //  
        // SAI_BRIDGE_PORT_ATTR_TYPE,  
        // SAI_BRIDGE_PORT_ATTR_PORT_ID,  
        // SAI_BRIDGE_PORT_ATTR_TAGGING_MODE,  
        // SAI_BRIDGE_PORT_ATTR_VLAN_ID,  
        // SAI_BRIDGE_PORT_ATTR_RIF_ID,  
        // SAI_BRIDGE_PORT_ATTR_TUNNEL_ID,  
        // SAI_BRIDGE_PORT_ATTR_BRIDGE_ID,  
        // SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE,  
        // SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION,  
        // SAI_BRIDGE_PORT_ATTR_ADMIN_STATE,  
        // SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING,  
        // SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING,  
        // SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_port_attribute(sai_grpc_get_bridge_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_bridge_port_stats_fn)(_In_ sai_object_id_t bridge_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // bridge_port stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_port_stats(sai_grpc_get_bridge_port_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_bridge_port_stats_ext_fn)(_In_ sai_object_id_t bridge_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // bridge_port stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_port_stats_ext(sai_grpc_get_bridge_port_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_bridge_port_stats_fn)(_In_ sai_object_id_t bridge_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // bridge_port attrs: 
    // 
        // 
    // bridge API
    rpc sai_grpc_clear_bridge_port_stats(sai_grpc_clear_bridge_port_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_bridge_fn)(_Out_ sai_object_id_t *bridge_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // bridge mandatory attrs: 
    // SAI_BRIDGE_ATTR_TYPE, 
        // 
    // bridge API
    rpc sai_grpc_create_bridge(sai_grpc_create_bridge_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_bridge_fn)(_In_ sai_object_id_t bridge_id)
    // bridge attrs: 
    // 
        // 
    // bridge API
    rpc sai_grpc_remove_bridge(sai_grpc_remove_bridge_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_bridge_attribute_fn)(_In_ sai_object_id_t bridge_id, _In_ const sai_attribute_t *attr)
    // bridge attrs: 
    //  
        // SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_BRIDGE_ATTR_LEARN_DISABLE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,  
        // SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,  
        // SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP, 
        // 
    // bridge API
    rpc sai_grpc_set_bridge_attribute(sai_grpc_set_bridge_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_bridge_attribute_fn)(_In_ sai_object_id_t bridge_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // bridge attrs: 
    //  
        // SAI_BRIDGE_ATTR_TYPE,  
        // SAI_BRIDGE_ATTR_PORT_LIST,  
        // SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_BRIDGE_ATTR_LEARN_DISABLE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,  
        // SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,  
        // SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,  
        // SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_attribute(sai_grpc_get_bridge_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_bridge_stats_fn)(_In_ sai_object_id_t bridge_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // bridge stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_stats(sai_grpc_get_bridge_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_bridge_stats_ext_fn)(_In_ sai_object_id_t bridge_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // bridge stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // bridge API
    rpc sai_grpc_get_bridge_stats_ext(sai_grpc_get_bridge_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_bridge_stats_fn)(_In_ sai_object_id_t bridge_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // bridge attrs: 
    // 
        // 
    // bridge API
    rpc sai_grpc_clear_bridge_stats(sai_grpc_clear_bridge_stats_msg_args)        returns (sai_grpc_response);


    // Start of buffer API
    // sai_status_t(*sai_create_ingress_priority_group_fn)(_Out_ sai_object_id_t *ingress_priority_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ingress_priority_group mandatory attrs: 
    // SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT, SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX, 
        // 
    // buffer API
    rpc sai_grpc_create_ingress_priority_group(sai_grpc_create_ingress_priority_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ingress_priority_group_fn)(_In_ sai_object_id_t ingress_priority_group_id)
    // ingress_priority_group attrs: 
    // 
        // 
    // buffer API
    rpc sai_grpc_remove_ingress_priority_group(sai_grpc_remove_ingress_priority_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ingress_priority_group_attribute_fn)(_In_ sai_object_id_t ingress_priority_group_id, _In_ const sai_attribute_t *attr)
    // ingress_priority_group attrs: 
    //  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE,  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM, 
        // 
    // buffer API
    rpc sai_grpc_set_ingress_priority_group_attribute(sai_grpc_set_ingress_priority_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ingress_priority_group_attribute_fn)(_In_ sai_object_id_t ingress_priority_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ingress_priority_group attrs: 
    //  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE,  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT,  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM,  
        // SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX, 
        // 
    // buffer API
    rpc sai_grpc_get_ingress_priority_group_attribute(sai_grpc_get_ingress_priority_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_ingress_priority_group_stats_fn)(_In_ sai_object_id_t ingress_priority_group_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // ingress_priority_group stats: 
    // packets, bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, xoff_room_curr_occupancy_bytes, xoff_room_watermark_bytes, dropped_packets, custom_range_base, 
        // 
    // buffer API
    rpc sai_grpc_get_ingress_priority_group_stats(sai_grpc_get_ingress_priority_group_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_ingress_priority_group_stats_ext_fn)(_In_ sai_object_id_t ingress_priority_group_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // ingress_priority_group stats: 
    // packets, bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, xoff_room_curr_occupancy_bytes, xoff_room_watermark_bytes, dropped_packets, custom_range_base, 
        // 
    // buffer API
    rpc sai_grpc_get_ingress_priority_group_stats_ext(sai_grpc_get_ingress_priority_group_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_ingress_priority_group_stats_fn)(_In_ sai_object_id_t ingress_priority_group_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // ingress_priority_group attrs: 
    // 
        // 
    // buffer API
    rpc sai_grpc_clear_ingress_priority_group_stats(sai_grpc_clear_ingress_priority_group_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_buffer_pool_fn)(_Out_ sai_object_id_t *buffer_pool_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // buffer_pool mandatory attrs: 
    // SAI_BUFFER_POOL_ATTR_TYPE, SAI_BUFFER_POOL_ATTR_SIZE, 
        // 
    // buffer API
    rpc sai_grpc_create_buffer_pool(sai_grpc_create_buffer_pool_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_buffer_pool_fn)(_In_ sai_object_id_t buffer_pool_id)
    // buffer_pool attrs: 
    // 
        // 
    // buffer API
    rpc sai_grpc_remove_buffer_pool(sai_grpc_remove_buffer_pool_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_buffer_pool_attribute_fn)(_In_ sai_object_id_t buffer_pool_id, _In_ const sai_attribute_t *attr)
    // buffer_pool attrs: 
    //  
        // SAI_BUFFER_POOL_ATTR_SIZE,  
        // SAI_BUFFER_POOL_ATTR_TAM,  
        // SAI_BUFFER_POOL_ATTR_XOFF_SIZE,  
        // SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID, 
        // 
    // buffer API
    rpc sai_grpc_set_buffer_pool_attribute(sai_grpc_set_buffer_pool_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_buffer_pool_attribute_fn)(_In_ sai_object_id_t buffer_pool_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // buffer_pool attrs: 
    //  
        // SAI_BUFFER_POOL_ATTR_SHARED_SIZE,  
        // SAI_BUFFER_POOL_ATTR_TYPE,  
        // SAI_BUFFER_POOL_ATTR_SIZE,  
        // SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE,  
        // SAI_BUFFER_POOL_ATTR_TAM,  
        // SAI_BUFFER_POOL_ATTR_XOFF_SIZE,  
        // SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID, 
        // 
    // buffer API
    rpc sai_grpc_get_buffer_pool_attribute(sai_grpc_get_buffer_pool_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_buffer_pool_stats_fn)(_In_ sai_object_id_t buffer_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // buffer_pool stats: 
    // curr_occupancy_bytes, watermark_bytes, dropped_packets, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, xoff_room_curr_occupancy_bytes, xoff_room_watermark_bytes, custom_range_base, 
        // 
    // buffer API
    rpc sai_grpc_get_buffer_pool_stats(sai_grpc_get_buffer_pool_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_buffer_pool_stats_ext_fn)(_In_ sai_object_id_t buffer_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // buffer_pool stats: 
    // curr_occupancy_bytes, watermark_bytes, dropped_packets, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, xoff_room_curr_occupancy_bytes, xoff_room_watermark_bytes, custom_range_base, 
        // 
    // buffer API
    rpc sai_grpc_get_buffer_pool_stats_ext(sai_grpc_get_buffer_pool_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_buffer_pool_stats_fn)(_In_ sai_object_id_t buffer_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // buffer_pool attrs: 
    // 
        // 
    // buffer API
    rpc sai_grpc_clear_buffer_pool_stats(sai_grpc_clear_buffer_pool_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_buffer_profile_fn)(_Out_ sai_object_id_t *buffer_profile_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // buffer_profile mandatory attrs: 
    // SAI_BUFFER_PROFILE_ATTR_POOL_ID, SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE, SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE, SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH, SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH, 
        // 
    // buffer API
    rpc sai_grpc_create_buffer_profile(sai_grpc_create_buffer_profile_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_buffer_profile_fn)(_In_ sai_object_id_t buffer_profile_id)
    // buffer_profile attrs: 
    // 
        // 
    // buffer API
    rpc sai_grpc_remove_buffer_profile(sai_grpc_remove_buffer_profile_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_buffer_profile_attribute_fn)(_In_ sai_object_id_t buffer_profile_id, _In_ const sai_attribute_t *attr)
    // buffer_profile attrs: 
    //  
        // SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE,  
        // SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH,  
        // SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XOFF_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XON_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH, 
        // 
    // buffer API
    rpc sai_grpc_set_buffer_profile_attribute(sai_grpc_set_buffer_profile_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_buffer_profile_attribute_fn)(_In_ sai_object_id_t buffer_profile_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // buffer_profile attrs: 
    //  
        // SAI_BUFFER_PROFILE_ATTR_POOL_ID,  
        // SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE,  
        // SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE,  
        // SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH,  
        // SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XOFF_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XON_TH,  
        // SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH, 
        // 
    // buffer API
    rpc sai_grpc_get_buffer_profile_attribute(sai_grpc_get_buffer_profile_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of counter API
    // sai_status_t(*sai_create_counter_fn)(_Out_ sai_object_id_t *counter_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // counter mandatory attrs: 
    // 
        // 
    // counter API
    rpc sai_grpc_create_counter(sai_grpc_create_counter_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_counter_fn)(_In_ sai_object_id_t counter_id)
    // counter attrs: 
    // 
        // 
    // counter API
    rpc sai_grpc_remove_counter(sai_grpc_remove_counter_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_counter_attribute_fn)(_In_ sai_object_id_t counter_id, _In_ const sai_attribute_t *attr)
    // counter attrs: 
    //  
        // SAI_COUNTER_ATTR_LABEL, 
        // 
    // counter API
    rpc sai_grpc_set_counter_attribute(sai_grpc_set_counter_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_counter_attribute_fn)(_In_ sai_object_id_t counter_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // counter attrs: 
    //  
        // SAI_COUNTER_ATTR_TYPE,  
        // SAI_COUNTER_ATTR_LABEL, 
        // 
    // counter API
    rpc sai_grpc_get_counter_attribute(sai_grpc_get_counter_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_counter_stats_fn)(_In_ sai_object_id_t counter_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // counter stats: 
    // packets, bytes, custom_range_base, 
        // 
    // counter API
    rpc sai_grpc_get_counter_stats(sai_grpc_get_counter_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_counter_stats_ext_fn)(_In_ sai_object_id_t counter_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // counter stats: 
    // packets, bytes, custom_range_base, 
        // 
    // counter API
    rpc sai_grpc_get_counter_stats_ext(sai_grpc_get_counter_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_counter_stats_fn)(_In_ sai_object_id_t counter_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // counter attrs: 
    // 
        // 
    // counter API
    rpc sai_grpc_clear_counter_stats(sai_grpc_clear_counter_stats_msg_args)        returns (sai_grpc_response);


    // Start of debug_counter API
    // sai_status_t(*sai_create_debug_counter_fn)(_Out_ sai_object_id_t *debug_counter_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // debug_counter mandatory attrs: 
    // SAI_DEBUG_COUNTER_ATTR_TYPE, 
        // 
    // debug_counter API
    rpc sai_grpc_create_debug_counter(sai_grpc_create_debug_counter_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_debug_counter_fn)(_In_ sai_object_id_t debug_counter_id)
    // debug_counter attrs: 
    // 
        // 
    // debug_counter API
    rpc sai_grpc_remove_debug_counter(sai_grpc_remove_debug_counter_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_debug_counter_attribute_fn)(_In_ sai_object_id_t debug_counter_id, _In_ const sai_attribute_t *attr)
    // debug_counter attrs: 
    //  
        // SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST,  
        // SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST, 
        // 
    // debug_counter API
    rpc sai_grpc_set_debug_counter_attribute(sai_grpc_set_debug_counter_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_debug_counter_attribute_fn)(_In_ sai_object_id_t debug_counter_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // debug_counter attrs: 
    //  
        // SAI_DEBUG_COUNTER_ATTR_INDEX,  
        // SAI_DEBUG_COUNTER_ATTR_TYPE,  
        // SAI_DEBUG_COUNTER_ATTR_BIND_METHOD,  
        // SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST,  
        // SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST, 
        // 
    // debug_counter API
    rpc sai_grpc_get_debug_counter_attribute(sai_grpc_get_debug_counter_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of dtel API
    // sai_status_t(*sai_create_dtel_fn)(_Out_ sai_object_id_t *dtel_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // dtel mandatory attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_create_dtel(sai_grpc_create_dtel_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_dtel_fn)(_In_ sai_object_id_t dtel_id)
    // dtel attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_remove_dtel(sai_grpc_remove_dtel_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_dtel_attribute_fn)(_In_ sai_object_id_t dtel_id, _In_ const sai_attribute_t *attr)
    // dtel attrs: 
    //  
        // SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE,  
        // SAI_DTEL_ATTR_INT_TRANSIT_ENABLE,  
        // SAI_DTEL_ATTR_POSTCARD_ENABLE,  
        // SAI_DTEL_ATTR_DROP_REPORT_ENABLE,  
        // SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE,  
        // SAI_DTEL_ATTR_SWITCH_ID,  
        // SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE,  
        // SAI_DTEL_ATTR_LATENCY_SENSITIVITY,  
        // SAI_DTEL_ATTR_SINK_PORT_LIST,  
        // SAI_DTEL_ATTR_INT_L4_DSCP, 
        // 
    // dtel API
    rpc sai_grpc_set_dtel_attribute(sai_grpc_set_dtel_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_dtel_attribute_fn)(_In_ sai_object_id_t dtel_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // dtel attrs: 
    //  
        // SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE,  
        // SAI_DTEL_ATTR_INT_TRANSIT_ENABLE,  
        // SAI_DTEL_ATTR_POSTCARD_ENABLE,  
        // SAI_DTEL_ATTR_DROP_REPORT_ENABLE,  
        // SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE,  
        // SAI_DTEL_ATTR_SWITCH_ID,  
        // SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE,  
        // SAI_DTEL_ATTR_LATENCY_SENSITIVITY,  
        // SAI_DTEL_ATTR_SINK_PORT_LIST,  
        // SAI_DTEL_ATTR_INT_L4_DSCP, 
        // 
    // dtel API
    rpc sai_grpc_get_dtel_attribute(sai_grpc_get_dtel_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_dtel_queue_report_fn)(_Out_ sai_object_id_t *dtel_queue_report_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // dtel_queue_report mandatory attrs: 
    // SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID, 
        // 
    // dtel API
    rpc sai_grpc_create_dtel_queue_report(sai_grpc_create_dtel_queue_report_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_dtel_queue_report_fn)(_In_ sai_object_id_t dtel_queue_report_id)
    // dtel_queue_report attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_remove_dtel_queue_report(sai_grpc_remove_dtel_queue_report_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_dtel_queue_report_attribute_fn)(_In_ sai_object_id_t dtel_queue_report_id, _In_ const sai_attribute_t *attr)
    // dtel_queue_report attrs: 
    //  
        // SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP, 
        // 
    // dtel API
    rpc sai_grpc_set_dtel_queue_report_attribute(sai_grpc_set_dtel_queue_report_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_dtel_queue_report_attribute_fn)(_In_ sai_object_id_t dtel_queue_report_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // dtel_queue_report attrs: 
    //  
        // SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA,  
        // SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP, 
        // 
    // dtel API
    rpc sai_grpc_get_dtel_queue_report_attribute(sai_grpc_get_dtel_queue_report_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_dtel_int_session_fn)(_Out_ sai_object_id_t *dtel_int_session_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // dtel_int_session mandatory attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_create_dtel_int_session(sai_grpc_create_dtel_int_session_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_dtel_int_session_fn)(_In_ sai_object_id_t dtel_int_session_id)
    // dtel_int_session attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_remove_dtel_int_session(sai_grpc_remove_dtel_int_session_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_dtel_int_session_attribute_fn)(_In_ sai_object_id_t dtel_int_session_id, _In_ const sai_attribute_t *attr)
    // dtel_int_session attrs: 
    //  
        // SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO, 
        // 
    // dtel API
    rpc sai_grpc_set_dtel_int_session_attribute(sai_grpc_set_dtel_int_session_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_dtel_int_session_attribute_fn)(_In_ sai_object_id_t dtel_int_session_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // dtel_int_session attrs: 
    //  
        // SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP,  
        // SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO, 
        // 
    // dtel API
    rpc sai_grpc_get_dtel_int_session_attribute(sai_grpc_get_dtel_int_session_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_dtel_report_session_fn)(_Out_ sai_object_id_t *dtel_report_session_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // dtel_report_session mandatory attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_create_dtel_report_session(sai_grpc_create_dtel_report_session_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_dtel_report_session_fn)(_In_ sai_object_id_t dtel_report_session_id)
    // dtel_report_session attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_remove_dtel_report_session(sai_grpc_remove_dtel_report_session_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_dtel_report_session_attribute_fn)(_In_ sai_object_id_t dtel_report_session_id, _In_ const sai_attribute_t *attr)
    // dtel_report_session attrs: 
    //  
        // SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP,  
        // SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST,  
        // SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID,  
        // SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE,  
        // SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT, 
        // 
    // dtel API
    rpc sai_grpc_set_dtel_report_session_attribute(sai_grpc_set_dtel_report_session_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_dtel_report_session_attribute_fn)(_In_ sai_object_id_t dtel_report_session_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // dtel_report_session attrs: 
    //  
        // SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP,  
        // SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST,  
        // SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID,  
        // SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE,  
        // SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT, 
        // 
    // dtel API
    rpc sai_grpc_get_dtel_report_session_attribute(sai_grpc_get_dtel_report_session_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_dtel_event_fn)(_Out_ sai_object_id_t *dtel_event_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // dtel_event mandatory attrs: 
    // SAI_DTEL_EVENT_ATTR_TYPE, 
        // 
    // dtel API
    rpc sai_grpc_create_dtel_event(sai_grpc_create_dtel_event_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_dtel_event_fn)(_In_ sai_object_id_t dtel_event_id)
    // dtel_event attrs: 
    // 
        // 
    // dtel API
    rpc sai_grpc_remove_dtel_event(sai_grpc_remove_dtel_event_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_dtel_event_attribute_fn)(_In_ sai_object_id_t dtel_event_id, _In_ const sai_attribute_t *attr)
    // dtel_event attrs: 
    //  
        // SAI_DTEL_EVENT_ATTR_REPORT_SESSION,  
        // SAI_DTEL_EVENT_ATTR_DSCP_VALUE, 
        // 
    // dtel API
    rpc sai_grpc_set_dtel_event_attribute(sai_grpc_set_dtel_event_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_dtel_event_attribute_fn)(_In_ sai_object_id_t dtel_event_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // dtel_event attrs: 
    //  
        // SAI_DTEL_EVENT_ATTR_TYPE,  
        // SAI_DTEL_EVENT_ATTR_REPORT_SESSION,  
        // SAI_DTEL_EVENT_ATTR_DSCP_VALUE, 
        // 
    // dtel API
    rpc sai_grpc_get_dtel_event_attribute(sai_grpc_get_dtel_event_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of fdb API
    // sai_status_t(*sai_create_fdb_entry_fn)(_In_ const sai_fdb_entry_t *fdb_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // fdb_entry mandatory attrs: 
    // SAI_FDB_ENTRY_ATTR_TYPE, 
        // 
    // fdb API
    rpc sai_grpc_create_fdb_entry(sai_grpc_create_fdb_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_fdb_entry_fn)(_In_ const sai_fdb_entry_t *fdb_entry)
    // fdb_entry attrs: 
    // 
        // 
    // fdb API
    rpc sai_grpc_remove_fdb_entry(sai_grpc_remove_fdb_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_fdb_entry_attribute_fn)(_In_ const sai_fdb_entry_t *fdb_entry, _In_ const sai_attribute_t *attr)
    // fdb_entry attrs: 
    //  
        // SAI_FDB_ENTRY_ATTR_TYPE,  
        // SAI_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_FDB_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID,  
        // SAI_FDB_ENTRY_ATTR_META_DATA,  
        // SAI_FDB_ENTRY_ATTR_ENDPOINT_IP,  
        // SAI_FDB_ENTRY_ATTR_COUNTER_ID,  
        // SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, 
        // 
    // fdb API
    rpc sai_grpc_set_fdb_entry_attribute(sai_grpc_set_fdb_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_fdb_entry_attribute_fn)(_In_ const sai_fdb_entry_t *fdb_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // fdb_entry attrs: 
    //  
        // SAI_FDB_ENTRY_ATTR_TYPE,  
        // SAI_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_FDB_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID,  
        // SAI_FDB_ENTRY_ATTR_META_DATA,  
        // SAI_FDB_ENTRY_ATTR_ENDPOINT_IP,  
        // SAI_FDB_ENTRY_ATTR_COUNTER_ID,  
        // SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, 
        // 
    // fdb API
    rpc sai_grpc_get_fdb_entry_attribute(sai_grpc_get_fdb_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_flush_fdb_entries_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // fdb_flush attrs: 
    //  
        // SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID,  
        // SAI_FDB_FLUSH_ATTR_BV_ID,  
        // SAI_FDB_FLUSH_ATTR_ENTRY_TYPE, 
        // 
    // fdb API
    rpc sai_grpc_flush_fdb_entries(sai_grpc_flush_fdb_entries_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_bulk_create_fdb_entry_fn)(_In_ uint32_t object_count, _In_ const sai_fdb_entry_t *fdb_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // fdb_entry mandatory attrs: 
    // SAI_FDB_ENTRY_ATTR_TYPE, 
        // 
    // fdb API
    rpc sai_grpc_bulk_create_fdb_entry(sai_grpc_bulk_create_fdb_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_fdb_entry_fn)(_In_ uint32_t object_count, _In_ const sai_fdb_entry_t *fdb_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // fdb_entry attrs: 
    // 
        // 
    // fdb API
    rpc sai_grpc_bulk_remove_fdb_entry(sai_grpc_bulk_remove_fdb_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_fdb_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_fdb_entry_t *fdb_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // fdb_entry attrs: 
    //  
        // SAI_FDB_ENTRY_ATTR_TYPE,  
        // SAI_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_FDB_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID,  
        // SAI_FDB_ENTRY_ATTR_META_DATA,  
        // SAI_FDB_ENTRY_ATTR_ENDPOINT_IP,  
        // SAI_FDB_ENTRY_ATTR_COUNTER_ID,  
        // SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, 
        // 
    // fdb API
    rpc sai_grpc_bulk_set_fdb_entry_attribute(sai_grpc_bulk_set_fdb_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_fdb_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_fdb_entry_t *fdb_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // fdb_entry attrs: 
    //  
        // SAI_FDB_ENTRY_ATTR_TYPE,  
        // SAI_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_FDB_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID,  
        // SAI_FDB_ENTRY_ATTR_META_DATA,  
        // SAI_FDB_ENTRY_ATTR_ENDPOINT_IP,  
        // SAI_FDB_ENTRY_ATTR_COUNTER_ID,  
        // SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, 
        // 
    // fdb API
    rpc sai_grpc_bulk_get_fdb_entry_attribute(sai_grpc_bulk_get_fdb_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of generic_programmable API
    // sai_status_t(*sai_create_generic_programmable_fn)(_Out_ sai_object_id_t *generic_programmable_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // generic_programmable mandatory attrs: 
    // SAI_GENERIC_PROGRAMMABLE_ATTR_OBJECT_NAME, 
        // 
    // generic_programmable API
    rpc sai_grpc_create_generic_programmable(sai_grpc_create_generic_programmable_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_generic_programmable_fn)(_In_ sai_object_id_t generic_programmable_id)
    // generic_programmable attrs: 
    // 
        // 
    // generic_programmable API
    rpc sai_grpc_remove_generic_programmable(sai_grpc_remove_generic_programmable_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_generic_programmable_attribute_fn)(_In_ sai_object_id_t generic_programmable_id, _In_ const sai_attribute_t *attr)
    // generic_programmable attrs: 
    //  
        // SAI_GENERIC_PROGRAMMABLE_ATTR_ENTRY,  
        // SAI_GENERIC_PROGRAMMABLE_ATTR_COUNTER_ID, 
        // 
    // generic_programmable API
    rpc sai_grpc_set_generic_programmable_attribute(sai_grpc_set_generic_programmable_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_generic_programmable_attribute_fn)(_In_ sai_object_id_t generic_programmable_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // generic_programmable attrs: 
    //  
        // SAI_GENERIC_PROGRAMMABLE_ATTR_OBJECT_NAME,  
        // SAI_GENERIC_PROGRAMMABLE_ATTR_ENTRY,  
        // SAI_GENERIC_PROGRAMMABLE_ATTR_COUNTER_ID, 
        // 
    // generic_programmable API
    rpc sai_grpc_get_generic_programmable_attribute(sai_grpc_get_generic_programmable_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of hash API
    // sai_status_t(*sai_create_fine_grained_hash_field_fn)(_Out_ sai_object_id_t *fine_grained_hash_field_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // fine_grained_hash_field mandatory attrs: 
    // SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK, SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK, 
        // 
    // hash API
    rpc sai_grpc_create_fine_grained_hash_field(sai_grpc_create_fine_grained_hash_field_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_fine_grained_hash_field_fn)(_In_ sai_object_id_t fine_grained_hash_field_id)
    // fine_grained_hash_field attrs: 
    // 
        // 
    // hash API
    rpc sai_grpc_remove_fine_grained_hash_field(sai_grpc_remove_fine_grained_hash_field_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_fine_grained_hash_field_attribute_fn)(_In_ sai_object_id_t fine_grained_hash_field_id, _In_ const sai_attribute_t *attr)
    // fine_grained_hash_field attrs: 
    // 
        // 
    // hash API
    rpc sai_grpc_set_fine_grained_hash_field_attribute(sai_grpc_set_fine_grained_hash_field_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_fine_grained_hash_field_attribute_fn)(_In_ sai_object_id_t fine_grained_hash_field_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // fine_grained_hash_field attrs: 
    //  
        // SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD,  
        // SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK,  
        // SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK,  
        // SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID, 
        // 
    // hash API
    rpc sai_grpc_get_fine_grained_hash_field_attribute(sai_grpc_get_fine_grained_hash_field_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_hash_fn)(_Out_ sai_object_id_t *hash_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hash mandatory attrs: 
    // 
        // 
    // hash API
    rpc sai_grpc_create_hash(sai_grpc_create_hash_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hash_fn)(_In_ sai_object_id_t hash_id)
    // hash attrs: 
    // 
        // 
    // hash API
    rpc sai_grpc_remove_hash(sai_grpc_remove_hash_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hash_attribute_fn)(_In_ sai_object_id_t hash_id, _In_ const sai_attribute_t *attr)
    // hash attrs: 
    //  
        // SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST,  
        // SAI_HASH_ATTR_UDF_GROUP_LIST,  
        // SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST, 
        // 
    // hash API
    rpc sai_grpc_set_hash_attribute(sai_grpc_set_hash_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hash_attribute_fn)(_In_ sai_object_id_t hash_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hash attrs: 
    //  
        // SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST,  
        // SAI_HASH_ATTR_UDF_GROUP_LIST,  
        // SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST, 
        // 
    // hash API
    rpc sai_grpc_get_hash_attribute(sai_grpc_get_hash_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of hostif API
    // sai_status_t(*sai_create_hostif_trap_group_fn)(_Out_ sai_object_id_t *hostif_trap_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_trap_group mandatory attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_create_hostif_trap_group(sai_grpc_create_hostif_trap_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hostif_trap_group_fn)(_In_ sai_object_id_t hostif_trap_group_id)
    // hostif_trap_group attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_remove_hostif_trap_group(sai_grpc_remove_hostif_trap_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hostif_trap_group_attribute_fn)(_In_ sai_object_id_t hostif_trap_group_id, _In_ const sai_attribute_t *attr)
    // hostif_trap_group attrs: 
    //  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE,  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE,  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER, 
        // 
    // hostif API
    rpc sai_grpc_set_hostif_trap_group_attribute(sai_grpc_set_hostif_trap_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hostif_trap_group_attribute_fn)(_In_ sai_object_id_t hostif_trap_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hostif_trap_group attrs: 
    //  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE,  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE,  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER,  
        // SAI_HOSTIF_TRAP_GROUP_ATTR_OBJECT_STAGE, 
        // 
    // hostif API
    rpc sai_grpc_get_hostif_trap_group_attribute(sai_grpc_get_hostif_trap_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_hostif_trap_fn)(_Out_ sai_object_id_t *hostif_trap_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_trap mandatory attrs: 
    // SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE, SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION, 
        // 
    // hostif API
    rpc sai_grpc_create_hostif_trap(sai_grpc_create_hostif_trap_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hostif_trap_fn)(_In_ sai_object_id_t hostif_trap_id)
    // hostif_trap attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_remove_hostif_trap(sai_grpc_remove_hostif_trap_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hostif_trap_attribute_fn)(_In_ sai_object_id_t hostif_trap_id, _In_ const sai_attribute_t *attr)
    // hostif_trap attrs: 
    //  
        // SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION,  
        // SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY,  
        // SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST,  
        // SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP,  
        // SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION,  
        // SAI_HOSTIF_TRAP_ATTR_COUNTER_ID, 
        // 
    // hostif API
    rpc sai_grpc_set_hostif_trap_attribute(sai_grpc_set_hostif_trap_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hostif_trap_attribute_fn)(_In_ sai_object_id_t hostif_trap_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hostif_trap attrs: 
    //  
        // SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE,  
        // SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION,  
        // SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY,  
        // SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST,  
        // SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP,  
        // SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION,  
        // SAI_HOSTIF_TRAP_ATTR_COUNTER_ID, 
        // 
    // hostif API
    rpc sai_grpc_get_hostif_trap_attribute(sai_grpc_get_hostif_trap_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_hostif_user_defined_trap_fn)(_Out_ sai_object_id_t *hostif_user_defined_trap_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_user_defined_trap mandatory attrs: 
    // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE, 
        // 
    // hostif API
    rpc sai_grpc_create_hostif_user_defined_trap(sai_grpc_create_hostif_user_defined_trap_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hostif_user_defined_trap_fn)(_In_ sai_object_id_t hostif_user_defined_trap_id)
    // hostif_user_defined_trap attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_remove_hostif_user_defined_trap(sai_grpc_remove_hostif_user_defined_trap_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hostif_user_defined_trap_attribute_fn)(_In_ sai_object_id_t hostif_user_defined_trap_id, _In_ const sai_attribute_t *attr)
    // hostif_user_defined_trap attrs: 
    //  
        // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY,  
        // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP, 
        // 
    // hostif API
    rpc sai_grpc_set_hostif_user_defined_trap_attribute(sai_grpc_set_hostif_user_defined_trap_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hostif_user_defined_trap_attribute_fn)(_In_ sai_object_id_t hostif_user_defined_trap_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hostif_user_defined_trap attrs: 
    //  
        // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE,  
        // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY,  
        // SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP, 
        // 
    // hostif API
    rpc sai_grpc_get_hostif_user_defined_trap_attribute(sai_grpc_get_hostif_user_defined_trap_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_hostif_fn)(_Out_ sai_object_id_t *hostif_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif mandatory attrs: 
    // SAI_HOSTIF_ATTR_TYPE, SAI_HOSTIF_ATTR_OBJ_ID, SAI_HOSTIF_ATTR_NAME, SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME, 
        // 
    // hostif API
    rpc sai_grpc_create_hostif(sai_grpc_create_hostif_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hostif_fn)(_In_ sai_object_id_t hostif_id)
    // hostif attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_remove_hostif(sai_grpc_remove_hostif_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hostif_attribute_fn)(_In_ sai_object_id_t hostif_id, _In_ const sai_attribute_t *attr)
    // hostif attrs: 
    //  
        // SAI_HOSTIF_ATTR_OPER_STATUS,  
        // SAI_HOSTIF_ATTR_QUEUE,  
        // SAI_HOSTIF_ATTR_VLAN_TAG, 
        // 
    // hostif API
    rpc sai_grpc_set_hostif_attribute(sai_grpc_set_hostif_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hostif_attribute_fn)(_In_ sai_object_id_t hostif_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hostif attrs: 
    //  
        // SAI_HOSTIF_ATTR_TYPE,  
        // SAI_HOSTIF_ATTR_OBJ_ID,  
        // SAI_HOSTIF_ATTR_NAME,  
        // SAI_HOSTIF_ATTR_OPER_STATUS,  
        // SAI_HOSTIF_ATTR_QUEUE,  
        // SAI_HOSTIF_ATTR_VLAN_TAG,  
        // SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME, 
        // 
    // hostif API
    rpc sai_grpc_get_hostif_attribute(sai_grpc_get_hostif_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_hostif_table_entry_fn)(_Out_ sai_object_id_t *hostif_table_entry_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_table_entry mandatory attrs: 
    // SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE, SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID, SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID, SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE, SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF, 
        // 
    // hostif API
    rpc sai_grpc_create_hostif_table_entry(sai_grpc_create_hostif_table_entry_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_hostif_table_entry_fn)(_In_ sai_object_id_t hostif_table_entry_id)
    // hostif_table_entry attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_remove_hostif_table_entry(sai_grpc_remove_hostif_table_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_hostif_table_entry_attribute_fn)(_In_ sai_object_id_t hostif_table_entry_id, _In_ const sai_attribute_t *attr)
    // hostif_table_entry attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_set_hostif_table_entry_attribute(sai_grpc_set_hostif_table_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_hostif_table_entry_attribute_fn)(_In_ sai_object_id_t hostif_table_entry_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // hostif_table_entry attrs: 
    //  
        // SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE,  
        // SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID,  
        // SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID,  
        // SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE,  
        // SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF, 
        // 
    // hostif API
    rpc sai_grpc_get_hostif_table_entry_attribute(sai_grpc_get_hostif_table_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_recv_hostif_packet_fn)(_In_ sai_object_id_t hostif_id, _Inout_ sai_size_t *buffer_size, _Out_ void *buffer, _Inout_ uint32_t *attr_count, _Out_ sai_attribute_t *attr_list)
    // hostif_packet attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_recv_hostif_packet(sai_grpc_recv_hostif_packet_msg_args)        returns (sai_grpc_size_t);
    

    // sai_status_t(*sai_send_hostif_packet_fn)(_In_ sai_object_id_t hostif_id, _In_ sai_size_t buffer_size, _In_ const void *buffer, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_packet attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_send_hostif_packet(sai_grpc_send_hostif_packet_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_allocate_hostif_packet_fn)(_In_ sai_object_id_t hostif_id, _In_ sai_size_t buffer_size, _Out_ void **buffer, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // hostif_packet attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_allocate_hostif_packet(sai_grpc_allocate_hostif_packet_msg_args)        returns (sai_grpc_string_response);


    // sai_status_t(*sai_free_hostif_packet_fn)(_In_ sai_object_id_t hostif_id, _Inout_ void *buffer)
    // hostif_packet attrs: 
    // 
        // 
    // hostif API
    rpc sai_grpc_free_hostif_packet(sai_grpc_free_hostif_packet_msg_args)        returns (sai_grpc_string_response);


    // Start of ipmc API
    // sai_status_t(*sai_create_ipmc_entry_fn)(_In_ const sai_ipmc_entry_t *ipmc_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipmc_entry mandatory attrs: 
    // SAI_IPMC_ENTRY_ATTR_PACKET_ACTION, SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID, 
        // 
    // ipmc API
    rpc sai_grpc_create_ipmc_entry(sai_grpc_create_ipmc_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_ipmc_entry_fn)(_In_ const sai_ipmc_entry_t *ipmc_entry)
    // ipmc_entry attrs: 
    // 
        // 
    // ipmc API
    rpc sai_grpc_remove_ipmc_entry(sai_grpc_remove_ipmc_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipmc_entry_attribute_fn)(_In_ const sai_ipmc_entry_t *ipmc_entry, _In_ const sai_attribute_t *attr)
    // ipmc_entry attrs: 
    //  
        // SAI_IPMC_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID,  
        // SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID,  
        // SAI_IPMC_ENTRY_ATTR_COUNTER_ID, 
        // 
    // ipmc API
    rpc sai_grpc_set_ipmc_entry_attribute(sai_grpc_set_ipmc_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipmc_entry_attribute_fn)(_In_ const sai_ipmc_entry_t *ipmc_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipmc_entry attrs: 
    //  
        // SAI_IPMC_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID,  
        // SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID,  
        // SAI_IPMC_ENTRY_ATTR_COUNTER_ID, 
        // 
    // ipmc API
    rpc sai_grpc_get_ipmc_entry_attribute(sai_grpc_get_ipmc_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of ipmc_group API
    // sai_status_t(*sai_create_ipmc_group_fn)(_Out_ sai_object_id_t *ipmc_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipmc_group mandatory attrs: 
    // 
        // 
    // ipmc_group API
    rpc sai_grpc_create_ipmc_group(sai_grpc_create_ipmc_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ipmc_group_fn)(_In_ sai_object_id_t ipmc_group_id)
    // ipmc_group attrs: 
    // 
        // 
    // ipmc_group API
    rpc sai_grpc_remove_ipmc_group(sai_grpc_remove_ipmc_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipmc_group_attribute_fn)(_In_ sai_object_id_t ipmc_group_id, _In_ const sai_attribute_t *attr)
    // ipmc_group attrs: 
    // 
        // 
    // ipmc_group API
    rpc sai_grpc_set_ipmc_group_attribute(sai_grpc_set_ipmc_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipmc_group_attribute_fn)(_In_ sai_object_id_t ipmc_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipmc_group attrs: 
    //  
        // SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT,  
        // SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST, 
        // 
    // ipmc_group API
    rpc sai_grpc_get_ipmc_group_attribute(sai_grpc_get_ipmc_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_ipmc_group_member_fn)(_Out_ sai_object_id_t *ipmc_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipmc_group_member mandatory attrs: 
    // SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID, SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID, 
        // 
    // ipmc_group API
    rpc sai_grpc_create_ipmc_group_member(sai_grpc_create_ipmc_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ipmc_group_member_fn)(_In_ sai_object_id_t ipmc_group_member_id)
    // ipmc_group_member attrs: 
    // 
        // 
    // ipmc_group API
    rpc sai_grpc_remove_ipmc_group_member(sai_grpc_remove_ipmc_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipmc_group_member_attribute_fn)(_In_ sai_object_id_t ipmc_group_member_id, _In_ const sai_attribute_t *attr)
    // ipmc_group_member attrs: 
    // 
        // 
    // ipmc_group API
    rpc sai_grpc_set_ipmc_group_member_attribute(sai_grpc_set_ipmc_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipmc_group_member_attribute_fn)(_In_ sai_object_id_t ipmc_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipmc_group_member attrs: 
    //  
        // SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID,  
        // SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID, 
        // 
    // ipmc_group API
    rpc sai_grpc_get_ipmc_group_member_attribute(sai_grpc_get_ipmc_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of ipsec API
    // sai_status_t(*sai_create_ipsec_fn)(_Out_ sai_object_id_t *ipsec_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipsec mandatory attrs: 
    // SAI_IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE, 
        // 
    // ipsec API
    rpc sai_grpc_create_ipsec(sai_grpc_create_ipsec_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ipsec_fn)(_In_ sai_object_id_t ipsec_id)
    // ipsec attrs: 
    // 
        // 
    // ipsec API
    rpc sai_grpc_remove_ipsec(sai_grpc_remove_ipsec_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipsec_attribute_fn)(_In_ sai_object_id_t ipsec_id, _In_ const sai_attribute_t *attr)
    // ipsec attrs: 
    //  
        // SAI_IPSEC_ATTR_WARM_BOOT_ENABLE,  
        // SAI_IPSEC_ATTR_CTAG_TPID,  
        // SAI_IPSEC_ATTR_STAG_TPID,  
        // SAI_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED,  
        // SAI_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK,  
        // SAI_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK,  
        // SAI_IPSEC_ATTR_STATS_MODE, 
        // 
    // ipsec API
    rpc sai_grpc_set_ipsec_attribute(sai_grpc_set_ipsec_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipsec_attribute_fn)(_In_ sai_object_id_t ipsec_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipsec attrs: 
    //  
        // SAI_IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED,  
        // SAI_IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED,  
        // SAI_IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED,  
        // SAI_IPSEC_ATTR_STATS_MODE_READ_SUPPORTED,  
        // SAI_IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED,  
        // SAI_IPSEC_ATTR_SN_32BIT_SUPPORTED,  
        // SAI_IPSEC_ATTR_ESN_64BIT_SUPPORTED,  
        // SAI_IPSEC_ATTR_SUPPORTED_CIPHER_LIST,  
        // SAI_IPSEC_ATTR_SYSTEM_SIDE_MTU,  
        // SAI_IPSEC_ATTR_WARM_BOOT_SUPPORTED,  
        // SAI_IPSEC_ATTR_WARM_BOOT_ENABLE,  
        // SAI_IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE,  
        // SAI_IPSEC_ATTR_CTAG_TPID,  
        // SAI_IPSEC_ATTR_STAG_TPID,  
        // SAI_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED,  
        // SAI_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK,  
        // SAI_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK,  
        // SAI_IPSEC_ATTR_STATS_MODE,  
        // SAI_IPSEC_ATTR_AVAILABLE_IPSEC_SA,  
        // SAI_IPSEC_ATTR_SA_LIST, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_attribute(sai_grpc_get_ipsec_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_ipsec_port_fn)(_Out_ sai_object_id_t *ipsec_port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipsec_port mandatory attrs: 
    // SAI_IPSEC_PORT_ATTR_PORT_ID, SAI_IPSEC_PORT_ATTR_NATIVE_VLAN_ID, 
        // 
    // ipsec API
    rpc sai_grpc_create_ipsec_port(sai_grpc_create_ipsec_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ipsec_port_fn)(_In_ sai_object_id_t ipsec_port_id)
    // ipsec_port attrs: 
    // 
        // 
    // ipsec API
    rpc sai_grpc_remove_ipsec_port(sai_grpc_remove_ipsec_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipsec_port_attribute_fn)(_In_ sai_object_id_t ipsec_port_id, _In_ const sai_attribute_t *attr)
    // ipsec_port attrs: 
    //  
        // SAI_IPSEC_PORT_ATTR_CTAG_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_STAG_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, 
        // 
    // ipsec API
    rpc sai_grpc_set_ipsec_port_attribute(sai_grpc_set_ipsec_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipsec_port_attribute_fn)(_In_ sai_object_id_t ipsec_port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipsec_port attrs: 
    //  
        // SAI_IPSEC_PORT_ATTR_PORT_ID,  
        // SAI_IPSEC_PORT_ATTR_CTAG_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_STAG_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_NATIVE_VLAN_ID,  
        // SAI_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE,  
        // SAI_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_port_attribute(sai_grpc_get_ipsec_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_ipsec_port_stats_fn)(_In_ sai_object_id_t ipsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // ipsec_port stats: 
    // tx_error_pkts, tx_ipsec_pkts, tx_non_ipsec_pkts, rx_error_pkts, rx_ipsec_pkts, rx_non_ipsec_pkts, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_port_stats(sai_grpc_get_ipsec_port_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_ipsec_port_stats_ext_fn)(_In_ sai_object_id_t ipsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // ipsec_port stats: 
    // tx_error_pkts, tx_ipsec_pkts, tx_non_ipsec_pkts, rx_error_pkts, rx_ipsec_pkts, rx_non_ipsec_pkts, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_port_stats_ext(sai_grpc_get_ipsec_port_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_ipsec_port_stats_fn)(_In_ sai_object_id_t ipsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // ipsec_port attrs: 
    // 
        // 
    // ipsec API
    rpc sai_grpc_clear_ipsec_port_stats(sai_grpc_clear_ipsec_port_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_ipsec_sa_fn)(_Out_ sai_object_id_t *ipsec_sa_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // ipsec_sa mandatory attrs: 
    // SAI_IPSEC_SA_ATTR_IPSEC_DIRECTION, SAI_IPSEC_SA_ATTR_IPSEC_ID, SAI_IPSEC_SA_ATTR_IPSEC_SPI, SAI_IPSEC_SA_ATTR_ENCRYPT_KEY, SAI_IPSEC_SA_ATTR_SALT, SAI_IPSEC_SA_ATTR_AUTH_KEY, SAI_IPSEC_SA_ATTR_TERM_DST_IP, SAI_IPSEC_SA_ATTR_TERM_VLAN_ID, SAI_IPSEC_SA_ATTR_TERM_SRC_IP, 
        // 
    // ipsec API
    rpc sai_grpc_create_ipsec_sa(sai_grpc_create_ipsec_sa_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_ipsec_sa_fn)(_In_ sai_object_id_t ipsec_sa_id)
    // ipsec_sa attrs: 
    // 
        // 
    // ipsec API
    rpc sai_grpc_remove_ipsec_sa(sai_grpc_remove_ipsec_sa_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_ipsec_sa_attribute_fn)(_In_ sai_object_id_t ipsec_sa_id, _In_ const sai_attribute_t *attr)
    // ipsec_sa attrs: 
    //  
        // SAI_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX,  
        // SAI_IPSEC_SA_ATTR_IPSEC_PORT_LIST,  
        // SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE,  
        // SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW,  
        // SAI_IPSEC_SA_ATTR_EGRESS_ESN,  
        // SAI_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN, 
        // 
    // ipsec API
    rpc sai_grpc_set_ipsec_sa_attribute(sai_grpc_set_ipsec_sa_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_ipsec_sa_attribute_fn)(_In_ sai_object_id_t ipsec_sa_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // ipsec_sa attrs: 
    //  
        // SAI_IPSEC_SA_ATTR_IPSEC_DIRECTION,  
        // SAI_IPSEC_SA_ATTR_IPSEC_ID,  
        // SAI_IPSEC_SA_ATTR_OCTET_COUNT_STATUS,  
        // SAI_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX,  
        // SAI_IPSEC_SA_ATTR_SA_INDEX,  
        // SAI_IPSEC_SA_ATTR_IPSEC_PORT_LIST,  
        // SAI_IPSEC_SA_ATTR_IPSEC_SPI,  
        // SAI_IPSEC_SA_ATTR_IPSEC_ESN_ENABLE,  
        // SAI_IPSEC_SA_ATTR_IPSEC_CIPHER,  
        // SAI_IPSEC_SA_ATTR_ENCRYPT_KEY,  
        // SAI_IPSEC_SA_ATTR_SALT,  
        // SAI_IPSEC_SA_ATTR_AUTH_KEY,  
        // SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE,  
        // SAI_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW,  
        // SAI_IPSEC_SA_ATTR_TERM_DST_IP,  
        // SAI_IPSEC_SA_ATTR_TERM_VLAN_ID_ENABLE,  
        // SAI_IPSEC_SA_ATTR_TERM_VLAN_ID,  
        // SAI_IPSEC_SA_ATTR_TERM_SRC_IP_ENABLE,  
        // SAI_IPSEC_SA_ATTR_TERM_SRC_IP,  
        // SAI_IPSEC_SA_ATTR_EGRESS_ESN,  
        // SAI_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_sa_attribute(sai_grpc_get_ipsec_sa_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_ipsec_sa_stats_fn)(_In_ sai_object_id_t ipsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // ipsec_sa stats: 
    // protected_octets, protected_pkts, good_pkts, bad_header_pkts_in, replayed_pkts_in, late_pkts_in, bad_trailer_pkts_in, auth_fail_pkts_in, dummy_dropped_pkts_in, other_dropped_pkts, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_sa_stats(sai_grpc_get_ipsec_sa_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_ipsec_sa_stats_ext_fn)(_In_ sai_object_id_t ipsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // ipsec_sa stats: 
    // protected_octets, protected_pkts, good_pkts, bad_header_pkts_in, replayed_pkts_in, late_pkts_in, bad_trailer_pkts_in, auth_fail_pkts_in, dummy_dropped_pkts_in, other_dropped_pkts, 
        // 
    // ipsec API
    rpc sai_grpc_get_ipsec_sa_stats_ext(sai_grpc_get_ipsec_sa_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_ipsec_sa_stats_fn)(_In_ sai_object_id_t ipsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // ipsec_sa attrs: 
    // 
        // 
    // ipsec API
    rpc sai_grpc_clear_ipsec_sa_stats(sai_grpc_clear_ipsec_sa_stats_msg_args)        returns (sai_grpc_response);


    // Start of isolation_group API
    // sai_status_t(*sai_create_isolation_group_fn)(_Out_ sai_object_id_t *isolation_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // isolation_group mandatory attrs: 
    // SAI_ISOLATION_GROUP_ATTR_TYPE, 
        // 
    // isolation_group API
    rpc sai_grpc_create_isolation_group(sai_grpc_create_isolation_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_isolation_group_fn)(_In_ sai_object_id_t isolation_group_id)
    // isolation_group attrs: 
    // 
        // 
    // isolation_group API
    rpc sai_grpc_remove_isolation_group(sai_grpc_remove_isolation_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_isolation_group_attribute_fn)(_In_ sai_object_id_t isolation_group_id, _In_ const sai_attribute_t *attr)
    // isolation_group attrs: 
    // 
        // 
    // isolation_group API
    rpc sai_grpc_set_isolation_group_attribute(sai_grpc_set_isolation_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_isolation_group_attribute_fn)(_In_ sai_object_id_t isolation_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // isolation_group attrs: 
    //  
        // SAI_ISOLATION_GROUP_ATTR_TYPE,  
        // SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST, 
        // 
    // isolation_group API
    rpc sai_grpc_get_isolation_group_attribute(sai_grpc_get_isolation_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_isolation_group_member_fn)(_Out_ sai_object_id_t *isolation_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // isolation_group_member mandatory attrs: 
    // SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID, SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT, 
        // 
    // isolation_group API
    rpc sai_grpc_create_isolation_group_member(sai_grpc_create_isolation_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_isolation_group_member_fn)(_In_ sai_object_id_t isolation_group_member_id)
    // isolation_group_member attrs: 
    // 
        // 
    // isolation_group API
    rpc sai_grpc_remove_isolation_group_member(sai_grpc_remove_isolation_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_isolation_group_member_attribute_fn)(_In_ sai_object_id_t isolation_group_member_id, _In_ const sai_attribute_t *attr)
    // isolation_group_member attrs: 
    // 
        // 
    // isolation_group API
    rpc sai_grpc_set_isolation_group_member_attribute(sai_grpc_set_isolation_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_isolation_group_member_attribute_fn)(_In_ sai_object_id_t isolation_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // isolation_group_member attrs: 
    //  
        // SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID,  
        // SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT, 
        // 
    // isolation_group API
    rpc sai_grpc_get_isolation_group_member_attribute(sai_grpc_get_isolation_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of l2mc API
    // sai_status_t(*sai_create_l2mc_entry_fn)(_In_ const sai_l2mc_entry_t *l2mc_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // l2mc_entry mandatory attrs: 
    // SAI_L2MC_ENTRY_ATTR_PACKET_ACTION, 
        // 
    // l2mc API
    rpc sai_grpc_create_l2mc_entry(sai_grpc_create_l2mc_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_l2mc_entry_fn)(_In_ const sai_l2mc_entry_t *l2mc_entry)
    // l2mc_entry attrs: 
    // 
        // 
    // l2mc API
    rpc sai_grpc_remove_l2mc_entry(sai_grpc_remove_l2mc_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_l2mc_entry_attribute_fn)(_In_ const sai_l2mc_entry_t *l2mc_entry, _In_ const sai_attribute_t *attr)
    // l2mc_entry attrs: 
    //  
        // SAI_L2MC_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID, 
        // 
    // l2mc API
    rpc sai_grpc_set_l2mc_entry_attribute(sai_grpc_set_l2mc_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_l2mc_entry_attribute_fn)(_In_ const sai_l2mc_entry_t *l2mc_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // l2mc_entry attrs: 
    //  
        // SAI_L2MC_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID, 
        // 
    // l2mc API
    rpc sai_grpc_get_l2mc_entry_attribute(sai_grpc_get_l2mc_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of l2mc_group API
    // sai_status_t(*sai_create_l2mc_group_fn)(_Out_ sai_object_id_t *l2mc_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // l2mc_group mandatory attrs: 
    // 
        // 
    // l2mc_group API
    rpc sai_grpc_create_l2mc_group(sai_grpc_create_l2mc_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_l2mc_group_fn)(_In_ sai_object_id_t l2mc_group_id)
    // l2mc_group attrs: 
    // 
        // 
    // l2mc_group API
    rpc sai_grpc_remove_l2mc_group(sai_grpc_remove_l2mc_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_l2mc_group_attribute_fn)(_In_ sai_object_id_t l2mc_group_id, _In_ const sai_attribute_t *attr)
    // l2mc_group attrs: 
    // 
        // 
    // l2mc_group API
    rpc sai_grpc_set_l2mc_group_attribute(sai_grpc_set_l2mc_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_l2mc_group_attribute_fn)(_In_ sai_object_id_t l2mc_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // l2mc_group attrs: 
    //  
        // SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT,  
        // SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST, 
        // 
    // l2mc_group API
    rpc sai_grpc_get_l2mc_group_attribute(sai_grpc_get_l2mc_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_l2mc_group_member_fn)(_Out_ sai_object_id_t *l2mc_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // l2mc_group_member mandatory attrs: 
    // SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID, SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID, 
        // 
    // l2mc_group API
    rpc sai_grpc_create_l2mc_group_member(sai_grpc_create_l2mc_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_l2mc_group_member_fn)(_In_ sai_object_id_t l2mc_group_member_id)
    // l2mc_group_member attrs: 
    // 
        // 
    // l2mc_group API
    rpc sai_grpc_remove_l2mc_group_member(sai_grpc_remove_l2mc_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_l2mc_group_member_attribute_fn)(_In_ sai_object_id_t l2mc_group_member_id, _In_ const sai_attribute_t *attr)
    // l2mc_group_member attrs: 
    // 
        // 
    // l2mc_group API
    rpc sai_grpc_set_l2mc_group_member_attribute(sai_grpc_set_l2mc_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_l2mc_group_member_attribute_fn)(_In_ sai_object_id_t l2mc_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // l2mc_group_member attrs: 
    //  
        // SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID,  
        // SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID,  
        // SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP, 
        // 
    // l2mc_group API
    rpc sai_grpc_get_l2mc_group_member_attribute(sai_grpc_get_l2mc_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of lag API
    // sai_status_t(*sai_create_lag_fn)(_Out_ sai_object_id_t *lag_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // lag mandatory attrs: 
    // 
        // 
    // lag API
    rpc sai_grpc_create_lag(sai_grpc_create_lag_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_lag_fn)(_In_ sai_object_id_t lag_id)
    // lag attrs: 
    // 
        // 
    // lag API
    rpc sai_grpc_remove_lag(sai_grpc_remove_lag_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_lag_attribute_fn)(_In_ sai_object_id_t lag_id, _In_ const sai_attribute_t *attr)
    // lag attrs: 
    //  
        // SAI_LAG_ATTR_INGRESS_ACL,  
        // SAI_LAG_ATTR_EGRESS_ACL,  
        // SAI_LAG_ATTR_PORT_VLAN_ID,  
        // SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY,  
        // SAI_LAG_ATTR_DROP_UNTAGGED,  
        // SAI_LAG_ATTR_DROP_TAGGED,  
        // SAI_LAG_ATTR_TPID,  
        // SAI_LAG_ATTR_LABEL,  
        // SAI_LAG_ATTR_ARS_OBJECT_ID, 
        // 
    // lag API
    rpc sai_grpc_set_lag_attribute(sai_grpc_set_lag_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_lag_attribute_fn)(_In_ sai_object_id_t lag_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // lag attrs: 
    //  
        // SAI_LAG_ATTR_PORT_LIST,  
        // SAI_LAG_ATTR_INGRESS_ACL,  
        // SAI_LAG_ATTR_EGRESS_ACL,  
        // SAI_LAG_ATTR_PORT_VLAN_ID,  
        // SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY,  
        // SAI_LAG_ATTR_DROP_UNTAGGED,  
        // SAI_LAG_ATTR_DROP_TAGGED,  
        // SAI_LAG_ATTR_TPID,  
        // SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID,  
        // SAI_LAG_ATTR_LABEL,  
        // SAI_LAG_ATTR_ARS_OBJECT_ID,  
        // SAI_LAG_ATTR_ARS_PACKET_DROPS,  
        // SAI_LAG_ATTR_ARS_PORT_REASSIGNMENTS, 
        // 
    // lag API
    rpc sai_grpc_get_lag_attribute(sai_grpc_get_lag_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_lag_member_fn)(_Out_ sai_object_id_t *lag_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // lag_member mandatory attrs: 
    // SAI_LAG_MEMBER_ATTR_LAG_ID, SAI_LAG_MEMBER_ATTR_PORT_ID, 
        // 
    // lag API
    rpc sai_grpc_create_lag_member(sai_grpc_create_lag_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_lag_member_fn)(_In_ sai_object_id_t lag_member_id)
    // lag_member attrs: 
    // 
        // 
    // lag API
    rpc sai_grpc_remove_lag_member(sai_grpc_remove_lag_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_lag_member_attribute_fn)(_In_ sai_object_id_t lag_member_id, _In_ const sai_attribute_t *attr)
    // lag_member attrs: 
    //  
        // SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE,  
        // SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE, 
        // 
    // lag API
    rpc sai_grpc_set_lag_member_attribute(sai_grpc_set_lag_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_lag_member_attribute_fn)(_In_ sai_object_id_t lag_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // lag_member attrs: 
    //  
        // SAI_LAG_MEMBER_ATTR_LAG_ID,  
        // SAI_LAG_MEMBER_ATTR_PORT_ID,  
        // SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE,  
        // SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE, 
        // 
    // lag API
    rpc sai_grpc_get_lag_member_attribute(sai_grpc_get_lag_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of macsec API
    // sai_status_t(*sai_create_macsec_fn)(_Out_ sai_object_id_t *macsec_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // macsec mandatory attrs: 
    // SAI_MACSEC_ATTR_DIRECTION, 
        // 
    // macsec API
    rpc sai_grpc_create_macsec(sai_grpc_create_macsec_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_macsec_fn)(_In_ sai_object_id_t macsec_id)
    // macsec attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_remove_macsec(sai_grpc_remove_macsec_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_macsec_attribute_fn)(_In_ sai_object_id_t macsec_id, _In_ const sai_attribute_t *attr)
    // macsec attrs: 
    //  
        // SAI_MACSEC_ATTR_WARM_BOOT_ENABLE,  
        // SAI_MACSEC_ATTR_CTAG_TPID,  
        // SAI_MACSEC_ATTR_STAG_TPID,  
        // SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED,  
        // SAI_MACSEC_ATTR_STATS_MODE,  
        // SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE, 
        // 
    // macsec API
    rpc sai_grpc_set_macsec_attribute(sai_grpc_set_macsec_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_macsec_attribute_fn)(_In_ sai_object_id_t macsec_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // macsec attrs: 
    //  
        // SAI_MACSEC_ATTR_DIRECTION,  
        // SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED,  
        // SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED,  
        // SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED,  
        // SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED,  
        // SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL,  
        // SAI_MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST,  
        // SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED,  
        // SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED,  
        // SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED,  
        // SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED,  
        // SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED,  
        // SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU,  
        // SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED,  
        // SAI_MACSEC_ATTR_WARM_BOOT_ENABLE,  
        // SAI_MACSEC_ATTR_CTAG_TPID,  
        // SAI_MACSEC_ATTR_STAG_TPID,  
        // SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED,  
        // SAI_MACSEC_ATTR_STATS_MODE,  
        // SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE,  
        // SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST,  
        // SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW,  
        // SAI_MACSEC_ATTR_FLOW_LIST,  
        // SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC,  
        // SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA,  
        // SAI_MACSEC_ATTR_MAX_SECURE_ASSOCIATIONS_PER_SC, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_attribute(sai_grpc_get_macsec_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_macsec_port_fn)(_Out_ sai_object_id_t *macsec_port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // macsec_port mandatory attrs: 
    // SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION, SAI_MACSEC_PORT_ATTR_PORT_ID, 
        // 
    // macsec API
    rpc sai_grpc_create_macsec_port(sai_grpc_create_macsec_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_macsec_port_fn)(_In_ sai_object_id_t macsec_port_id)
    // macsec_port attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_remove_macsec_port(sai_grpc_remove_macsec_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_macsec_port_attribute_fn)(_In_ sai_object_id_t macsec_port_id, _In_ const sai_attribute_t *attr)
    // macsec_port attrs: 
    //  
        // SAI_MACSEC_PORT_ATTR_CTAG_ENABLE,  
        // SAI_MACSEC_PORT_ATTR_STAG_ENABLE,  
        // SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, 
        // 
    // macsec API
    rpc sai_grpc_set_macsec_port_attribute(sai_grpc_set_macsec_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_macsec_port_attribute_fn)(_In_ sai_object_id_t macsec_port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // macsec_port attrs: 
    //  
        // SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION,  
        // SAI_MACSEC_PORT_ATTR_PORT_ID,  
        // SAI_MACSEC_PORT_ATTR_CTAG_ENABLE,  
        // SAI_MACSEC_PORT_ATTR_STAG_ENABLE,  
        // SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_port_attribute(sai_grpc_get_macsec_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_macsec_port_stats_fn)(_In_ sai_object_id_t macsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // macsec_port stats: 
    // pre_macsec_drop_pkts, control_pkts, data_pkts, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_port_stats(sai_grpc_get_macsec_port_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_macsec_port_stats_ext_fn)(_In_ sai_object_id_t macsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // macsec_port stats: 
    // pre_macsec_drop_pkts, control_pkts, data_pkts, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_port_stats_ext(sai_grpc_get_macsec_port_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_macsec_port_stats_fn)(_In_ sai_object_id_t macsec_port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // macsec_port attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_clear_macsec_port_stats(sai_grpc_clear_macsec_port_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_macsec_flow_fn)(_Out_ sai_object_id_t *macsec_flow_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // macsec_flow mandatory attrs: 
    // SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION, 
        // 
    // macsec API
    rpc sai_grpc_create_macsec_flow(sai_grpc_create_macsec_flow_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_macsec_flow_fn)(_In_ sai_object_id_t macsec_flow_id)
    // macsec_flow attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_remove_macsec_flow(sai_grpc_remove_macsec_flow_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_macsec_flow_attribute_fn)(_In_ sai_object_id_t macsec_flow_id, _In_ const sai_attribute_t *attr)
    // macsec_flow attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_set_macsec_flow_attribute(sai_grpc_set_macsec_flow_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_macsec_flow_attribute_fn)(_In_ sai_object_id_t macsec_flow_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // macsec_flow attrs: 
    //  
        // SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION,  
        // SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST,  
        // SAI_MACSEC_FLOW_ATTR_SC_LIST, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_flow_attribute(sai_grpc_get_macsec_flow_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_macsec_flow_stats_fn)(_In_ sai_object_id_t macsec_flow_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // macsec_flow stats: 
    // other_err, octets_uncontrolled, octets_controlled, out_octets_common, ucast_pkts_uncontrolled, ucast_pkts_controlled, multicast_pkts_uncontrolled, multicast_pkts_controlled, broadcast_pkts_uncontrolled, broadcast_pkts_controlled, control_pkts, pkts_untagged, in_tagged_control_pkts, out_pkts_too_long, in_pkts_no_tag, in_pkts_bad_tag, in_pkts_no_sci, in_pkts_unknown_sci, in_pkts_overrun, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_flow_stats(sai_grpc_get_macsec_flow_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_macsec_flow_stats_ext_fn)(_In_ sai_object_id_t macsec_flow_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // macsec_flow stats: 
    // other_err, octets_uncontrolled, octets_controlled, out_octets_common, ucast_pkts_uncontrolled, ucast_pkts_controlled, multicast_pkts_uncontrolled, multicast_pkts_controlled, broadcast_pkts_uncontrolled, broadcast_pkts_controlled, control_pkts, pkts_untagged, in_tagged_control_pkts, out_pkts_too_long, in_pkts_no_tag, in_pkts_bad_tag, in_pkts_no_sci, in_pkts_unknown_sci, in_pkts_overrun, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_flow_stats_ext(sai_grpc_get_macsec_flow_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_macsec_flow_stats_fn)(_In_ sai_object_id_t macsec_flow_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // macsec_flow attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_clear_macsec_flow_stats(sai_grpc_clear_macsec_flow_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_macsec_sc_fn)(_Out_ sai_object_id_t *macsec_sc_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // macsec_sc mandatory attrs: 
    // SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION, SAI_MACSEC_SC_ATTR_FLOW_ID, SAI_MACSEC_SC_ATTR_MACSEC_SCI, SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE, 
        // 
    // macsec API
    rpc sai_grpc_create_macsec_sc(sai_grpc_create_macsec_sc_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_macsec_sc_fn)(_In_ sai_object_id_t macsec_sc_id)
    // macsec_sc attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_remove_macsec_sc(sai_grpc_remove_macsec_sc_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_macsec_sc_attribute_fn)(_In_ sai_object_id_t macsec_sc_id, _In_ const sai_attribute_t *attr)
    // macsec_sc attrs: 
    //  
        // SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE,  
        // SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET,  
        // SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE,  
        // SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW,  
        // SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE,  
        // SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE, 
        // 
    // macsec API
    rpc sai_grpc_set_macsec_sc_attribute(sai_grpc_set_macsec_sc_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_macsec_sc_attribute_fn)(_In_ sai_object_id_t macsec_sc_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // macsec_sc attrs: 
    //  
        // SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION,  
        // SAI_MACSEC_SC_ATTR_FLOW_ID,  
        // SAI_MACSEC_SC_ATTR_MACSEC_SCI,  
        // SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE,  
        // SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET,  
        // SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID,  
        // SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE,  
        // SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW,  
        // SAI_MACSEC_SC_ATTR_SA_LIST,  
        // SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE,  
        // SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sc_attribute(sai_grpc_get_macsec_sc_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_macsec_sc_stats_fn)(_In_ sai_object_id_t macsec_sc_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // macsec_sc stats: 
    // sa_not_in_use, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sc_stats(sai_grpc_get_macsec_sc_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_macsec_sc_stats_ext_fn)(_In_ sai_object_id_t macsec_sc_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // macsec_sc stats: 
    // sa_not_in_use, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sc_stats_ext(sai_grpc_get_macsec_sc_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_macsec_sc_stats_fn)(_In_ sai_object_id_t macsec_sc_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // macsec_sc attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_clear_macsec_sc_stats(sai_grpc_clear_macsec_sc_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_macsec_sa_fn)(_Out_ sai_object_id_t *macsec_sa_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // macsec_sa mandatory attrs: 
    // SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION, SAI_MACSEC_SA_ATTR_SC_ID, SAI_MACSEC_SA_ATTR_AN, SAI_MACSEC_SA_ATTR_SAK, SAI_MACSEC_SA_ATTR_SALT, SAI_MACSEC_SA_ATTR_AUTH_KEY, SAI_MACSEC_SA_ATTR_MACSEC_SSCI, 
        // 
    // macsec API
    rpc sai_grpc_create_macsec_sa(sai_grpc_create_macsec_sa_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_macsec_sa_fn)(_In_ sai_object_id_t macsec_sa_id)
    // macsec_sa attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_remove_macsec_sa(sai_grpc_remove_macsec_sa_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_macsec_sa_attribute_fn)(_In_ sai_object_id_t macsec_sa_id, _In_ const sai_attribute_t *attr)
    // macsec_sa attrs: 
    //  
        // SAI_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN,  
        // SAI_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN, 
        // 
    // macsec API
    rpc sai_grpc_set_macsec_sa_attribute(sai_grpc_set_macsec_sa_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_macsec_sa_attribute_fn)(_In_ sai_object_id_t macsec_sa_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // macsec_sa attrs: 
    //  
        // SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION,  
        // SAI_MACSEC_SA_ATTR_SC_ID,  
        // SAI_MACSEC_SA_ATTR_AN,  
        // SAI_MACSEC_SA_ATTR_SAK,  
        // SAI_MACSEC_SA_ATTR_SALT,  
        // SAI_MACSEC_SA_ATTR_AUTH_KEY,  
        // SAI_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN,  
        // SAI_MACSEC_SA_ATTR_CURRENT_XPN,  
        // SAI_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN,  
        // SAI_MACSEC_SA_ATTR_MACSEC_SSCI, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sa_attribute(sai_grpc_get_macsec_sa_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_macsec_sa_stats_fn)(_In_ sai_object_id_t macsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // macsec_sa stats: 
    // octets_encrypted, octets_protected, out_pkts_encrypted, out_pkts_protected, in_pkts_unchecked, in_pkts_delayed, in_pkts_late, in_pkts_invalid, in_pkts_not_valid, in_pkts_not_using_sa, in_pkts_unused_sa, in_pkts_ok, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sa_stats(sai_grpc_get_macsec_sa_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_macsec_sa_stats_ext_fn)(_In_ sai_object_id_t macsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // macsec_sa stats: 
    // octets_encrypted, octets_protected, out_pkts_encrypted, out_pkts_protected, in_pkts_unchecked, in_pkts_delayed, in_pkts_late, in_pkts_invalid, in_pkts_not_valid, in_pkts_not_using_sa, in_pkts_unused_sa, in_pkts_ok, 
        // 
    // macsec API
    rpc sai_grpc_get_macsec_sa_stats_ext(sai_grpc_get_macsec_sa_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_macsec_sa_stats_fn)(_In_ sai_object_id_t macsec_sa_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // macsec_sa attrs: 
    // 
        // 
    // macsec API
    rpc sai_grpc_clear_macsec_sa_stats(sai_grpc_clear_macsec_sa_stats_msg_args)        returns (sai_grpc_response);


    // Start of mcast_fdb API
    // sai_status_t(*sai_create_mcast_fdb_entry_fn)(_In_ const sai_mcast_fdb_entry_t *mcast_fdb_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // mcast_fdb_entry mandatory attrs: 
    // SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID, SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION, 
        // 
    // mcast_fdb API
    rpc sai_grpc_create_mcast_fdb_entry(sai_grpc_create_mcast_fdb_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_mcast_fdb_entry_fn)(_In_ const sai_mcast_fdb_entry_t *mcast_fdb_entry)
    // mcast_fdb_entry attrs: 
    // 
        // 
    // mcast_fdb API
    rpc sai_grpc_remove_mcast_fdb_entry(sai_grpc_remove_mcast_fdb_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_mcast_fdb_entry_attribute_fn)(_In_ const sai_mcast_fdb_entry_t *mcast_fdb_entry, _In_ const sai_attribute_t *attr)
    // mcast_fdb_entry attrs: 
    //  
        // SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID,  
        // SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MCAST_FDB_ENTRY_ATTR_META_DATA, 
        // 
    // mcast_fdb API
    rpc sai_grpc_set_mcast_fdb_entry_attribute(sai_grpc_set_mcast_fdb_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_mcast_fdb_entry_attribute_fn)(_In_ const sai_mcast_fdb_entry_t *mcast_fdb_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // mcast_fdb_entry attrs: 
    //  
        // SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID,  
        // SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MCAST_FDB_ENTRY_ATTR_META_DATA, 
        // 
    // mcast_fdb API
    rpc sai_grpc_get_mcast_fdb_entry_attribute(sai_grpc_get_mcast_fdb_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of mirror API
    // sai_status_t(*sai_create_mirror_session_fn)(_Out_ sai_object_id_t *mirror_session_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // mirror_session mandatory attrs: 
    // SAI_MIRROR_SESSION_ATTR_TYPE, SAI_MIRROR_SESSION_ATTR_MONITOR_PORT, SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE, SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION, SAI_MIRROR_SESSION_ATTR_TOS, SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS, SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS, SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS, SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS, SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE, SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST, SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT, SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT, 
        // 
    // mirror API
    rpc sai_grpc_create_mirror_session(sai_grpc_create_mirror_session_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_mirror_session_fn)(_In_ sai_object_id_t mirror_session_id)
    // mirror_session attrs: 
    // 
        // 
    // mirror API
    rpc sai_grpc_remove_mirror_session(sai_grpc_remove_mirror_session_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_mirror_session_attribute_fn)(_In_ sai_object_id_t mirror_session_id, _In_ const sai_attribute_t *attr)
    // mirror_session attrs: 
    //  
        // SAI_MIRROR_SESSION_ATTR_MONITOR_PORT,  
        // SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE,  
        // SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE,  
        // SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE,  
        // SAI_MIRROR_SESSION_ATTR_TC,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_TPID,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_ID,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_PRI,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_CFI,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID,  
        // SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION,  
        // SAI_MIRROR_SESSION_ATTR_TOS,  
        // SAI_MIRROR_SESSION_ATTR_TTL,  
        // SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE,  
        // SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST,  
        // SAI_MIRROR_SESSION_ATTR_POLICER,  
        // SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT,  
        // SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT,  
        // SAI_MIRROR_SESSION_ATTR_COUNTER_ID, 
        // 
    // mirror API
    rpc sai_grpc_set_mirror_session_attribute(sai_grpc_set_mirror_session_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_mirror_session_attribute_fn)(_In_ sai_object_id_t mirror_session_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // mirror_session attrs: 
    //  
        // SAI_MIRROR_SESSION_ATTR_TYPE,  
        // SAI_MIRROR_SESSION_ATTR_MONITOR_PORT,  
        // SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE,  
        // SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE,  
        // SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE,  
        // SAI_MIRROR_SESSION_ATTR_TC,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_TPID,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_ID,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_PRI,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_CFI,  
        // SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID,  
        // SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE,  
        // SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION,  
        // SAI_MIRROR_SESSION_ATTR_TOS,  
        // SAI_MIRROR_SESSION_ATTR_TTL,  
        // SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS,  
        // SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE,  
        // SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID,  
        // SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST,  
        // SAI_MIRROR_SESSION_ATTR_POLICER,  
        // SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT,  
        // SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT,  
        // SAI_MIRROR_SESSION_ATTR_COUNTER_ID, 
        // 
    // mirror API
    rpc sai_grpc_get_mirror_session_attribute(sai_grpc_get_mirror_session_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of mpls API
    // sai_status_t(*sai_create_inseg_entry_fn)(_In_ const sai_inseg_entry_t *inseg_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // inseg_entry mandatory attrs: 
    // 
        // 
    // mpls API
    rpc sai_grpc_create_inseg_entry(sai_grpc_create_inseg_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_inseg_entry_fn)(_In_ const sai_inseg_entry_t *inseg_entry)
    // inseg_entry attrs: 
    // 
        // 
    // mpls API
    rpc sai_grpc_remove_inseg_entry(sai_grpc_remove_inseg_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_inseg_entry_attribute_fn)(_In_ const sai_inseg_entry_t *inseg_entry, _In_ const sai_attribute_t *attr)
    // inseg_entry attrs: 
    //  
        // SAI_INSEG_ENTRY_ATTR_NUM_OF_POP,  
        // SAI_INSEG_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_INSEG_ENTRY_ATTR_PSC_TYPE,  
        // SAI_INSEG_ENTRY_ATTR_QOS_TC,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE,  
        // SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE,  
        // SAI_INSEG_ENTRY_ATTR_COUNTER_ID, 
        // 
    // mpls API
    rpc sai_grpc_set_inseg_entry_attribute(sai_grpc_set_inseg_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_inseg_entry_attribute_fn)(_In_ const sai_inseg_entry_t *inseg_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // inseg_entry attrs: 
    //  
        // SAI_INSEG_ENTRY_ATTR_NUM_OF_POP,  
        // SAI_INSEG_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_INSEG_ENTRY_ATTR_PSC_TYPE,  
        // SAI_INSEG_ENTRY_ATTR_QOS_TC,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE,  
        // SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE,  
        // SAI_INSEG_ENTRY_ATTR_COUNTER_ID, 
        // 
    // mpls API
    rpc sai_grpc_get_inseg_entry_attribute(sai_grpc_get_inseg_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_bulk_create_inseg_entry_fn)(_In_ uint32_t object_count, _In_ const sai_inseg_entry_t *inseg_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // inseg_entry mandatory attrs: 
    // 
        // 
    // mpls API
    rpc sai_grpc_bulk_create_inseg_entry(sai_grpc_bulk_create_inseg_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_inseg_entry_fn)(_In_ uint32_t object_count, _In_ const sai_inseg_entry_t *inseg_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // inseg_entry attrs: 
    // 
        // 
    // mpls API
    rpc sai_grpc_bulk_remove_inseg_entry(sai_grpc_bulk_remove_inseg_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_inseg_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_inseg_entry_t *inseg_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // inseg_entry attrs: 
    //  
        // SAI_INSEG_ENTRY_ATTR_NUM_OF_POP,  
        // SAI_INSEG_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_INSEG_ENTRY_ATTR_PSC_TYPE,  
        // SAI_INSEG_ENTRY_ATTR_QOS_TC,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE,  
        // SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE,  
        // SAI_INSEG_ENTRY_ATTR_COUNTER_ID, 
        // 
    // mpls API
    rpc sai_grpc_bulk_set_inseg_entry_attribute(sai_grpc_bulk_set_inseg_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_inseg_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_inseg_entry_t *inseg_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // inseg_entry attrs: 
    //  
        // SAI_INSEG_ENTRY_ATTR_NUM_OF_POP,  
        // SAI_INSEG_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_INSEG_ENTRY_ATTR_PSC_TYPE,  
        // SAI_INSEG_ENTRY_ATTR_QOS_TC,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP,  
        // SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE,  
        // SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE,  
        // SAI_INSEG_ENTRY_ATTR_COUNTER_ID, 
        // 
    // mpls API
    rpc sai_grpc_bulk_get_inseg_entry_attribute(sai_grpc_bulk_get_inseg_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of my_mac API
    // sai_status_t(*sai_create_my_mac_fn)(_Out_ sai_object_id_t *my_mac_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // my_mac mandatory attrs: 
    // 
        // 
    // my_mac API
    rpc sai_grpc_create_my_mac(sai_grpc_create_my_mac_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_my_mac_fn)(_In_ sai_object_id_t my_mac_id)
    // my_mac attrs: 
    // 
        // 
    // my_mac API
    rpc sai_grpc_remove_my_mac(sai_grpc_remove_my_mac_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_my_mac_attribute_fn)(_In_ sai_object_id_t my_mac_id, _In_ const sai_attribute_t *attr)
    // my_mac attrs: 
    //  
        // SAI_MY_MAC_ATTR_PRIORITY, 
        // 
    // my_mac API
    rpc sai_grpc_set_my_mac_attribute(sai_grpc_set_my_mac_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_my_mac_attribute_fn)(_In_ sai_object_id_t my_mac_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // my_mac attrs: 
    //  
        // SAI_MY_MAC_ATTR_PRIORITY,  
        // SAI_MY_MAC_ATTR_PORT_ID,  
        // SAI_MY_MAC_ATTR_VLAN_ID,  
        // SAI_MY_MAC_ATTR_MAC_ADDRESS,  
        // SAI_MY_MAC_ATTR_MAC_ADDRESS_MASK, 
        // 
    // my_mac API
    rpc sai_grpc_get_my_mac_attribute(sai_grpc_get_my_mac_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of nat API
    // sai_status_t(*sai_create_nat_entry_fn)(_In_ const sai_nat_entry_t *nat_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // nat_entry mandatory attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_create_nat_entry(sai_grpc_create_nat_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_nat_entry_fn)(_In_ const sai_nat_entry_t *nat_entry)
    // nat_entry attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_remove_nat_entry(sai_grpc_remove_nat_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_nat_entry_attribute_fn)(_In_ const sai_nat_entry_t *nat_entry, _In_ const sai_attribute_t *attr)
    // nat_entry attrs: 
    //  
        // SAI_NAT_ENTRY_ATTR_NAT_TYPE,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_VR_ID,  
        // SAI_NAT_ENTRY_ATTR_DST_IP,  
        // SAI_NAT_ENTRY_ATTR_DST_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_L4_SRC_PORT,  
        // SAI_NAT_ENTRY_ATTR_L4_DST_PORT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT_COR,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT,  
        // SAI_NAT_ENTRY_ATTR_AGING_TIME, 
        // 
    // nat API
    rpc sai_grpc_set_nat_entry_attribute(sai_grpc_set_nat_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_nat_entry_attribute_fn)(_In_ const sai_nat_entry_t *nat_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // nat_entry attrs: 
    //  
        // SAI_NAT_ENTRY_ATTR_NAT_TYPE,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_VR_ID,  
        // SAI_NAT_ENTRY_ATTR_DST_IP,  
        // SAI_NAT_ENTRY_ATTR_DST_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_L4_SRC_PORT,  
        // SAI_NAT_ENTRY_ATTR_L4_DST_PORT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT_COR,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT,  
        // SAI_NAT_ENTRY_ATTR_AGING_TIME, 
        // 
    // nat API
    rpc sai_grpc_get_nat_entry_attribute(sai_grpc_get_nat_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_bulk_create_nat_entry_fn)(_In_ uint32_t object_count, _In_ const sai_nat_entry_t *nat_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // nat_entry mandatory attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_bulk_create_nat_entry(sai_grpc_bulk_create_nat_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_nat_entry_fn)(_In_ uint32_t object_count, _In_ const sai_nat_entry_t *nat_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // nat_entry attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_bulk_remove_nat_entry(sai_grpc_bulk_remove_nat_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_nat_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_nat_entry_t *nat_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // nat_entry attrs: 
    //  
        // SAI_NAT_ENTRY_ATTR_NAT_TYPE,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_VR_ID,  
        // SAI_NAT_ENTRY_ATTR_DST_IP,  
        // SAI_NAT_ENTRY_ATTR_DST_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_L4_SRC_PORT,  
        // SAI_NAT_ENTRY_ATTR_L4_DST_PORT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT_COR,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT,  
        // SAI_NAT_ENTRY_ATTR_AGING_TIME, 
        // 
    // nat API
    rpc sai_grpc_bulk_set_nat_entry_attribute(sai_grpc_bulk_set_nat_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_nat_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_nat_entry_t *nat_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // nat_entry attrs: 
    //  
        // SAI_NAT_ENTRY_ATTR_NAT_TYPE,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP,  
        // SAI_NAT_ENTRY_ATTR_SRC_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_VR_ID,  
        // SAI_NAT_ENTRY_ATTR_DST_IP,  
        // SAI_NAT_ENTRY_ATTR_DST_IP_MASK,  
        // SAI_NAT_ENTRY_ATTR_L4_SRC_PORT,  
        // SAI_NAT_ENTRY_ATTR_L4_DST_PORT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_PACKET_COUNT,  
        // SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_BYTE_COUNT,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT_COR,  
        // SAI_NAT_ENTRY_ATTR_HIT_BIT,  
        // SAI_NAT_ENTRY_ATTR_AGING_TIME, 
        // 
    // nat API
    rpc sai_grpc_bulk_get_nat_entry_attribute(sai_grpc_bulk_get_nat_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_nat_zone_counter_fn)(_Out_ sai_object_id_t *nat_zone_counter_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // nat_zone_counter mandatory attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_create_nat_zone_counter(sai_grpc_create_nat_zone_counter_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_nat_zone_counter_fn)(_In_ sai_object_id_t nat_zone_counter_id)
    // nat_zone_counter attrs: 
    // 
        // 
    // nat API
    rpc sai_grpc_remove_nat_zone_counter(sai_grpc_remove_nat_zone_counter_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_nat_zone_counter_attribute_fn)(_In_ sai_object_id_t nat_zone_counter_id, _In_ const sai_attribute_t *attr)
    // nat_zone_counter attrs: 
    //  
        // SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE,  
        // SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID,  
        // SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT,  
        // SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT,  
        // SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT, 
        // 
    // nat API
    rpc sai_grpc_set_nat_zone_counter_attribute(sai_grpc_set_nat_zone_counter_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_nat_zone_counter_attribute_fn)(_In_ sai_object_id_t nat_zone_counter_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // nat_zone_counter attrs: 
    //  
        // SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE,  
        // SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID,  
        // SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD,  
        // SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT,  
        // SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED,  
        // SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT,  
        // SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS,  
        // SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT, 
        // 
    // nat API
    rpc sai_grpc_get_nat_zone_counter_attribute(sai_grpc_get_nat_zone_counter_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of neighbor API
    // sai_status_t(*sai_create_neighbor_entry_fn)(_In_ const sai_neighbor_entry_t *neighbor_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // neighbor_entry mandatory attrs: 
    // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS, 
        // 
    // neighbor API
    rpc sai_grpc_create_neighbor_entry(sai_grpc_create_neighbor_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_neighbor_entry_fn)(_In_ const sai_neighbor_entry_t *neighbor_entry)
    // neighbor_entry attrs: 
    // 
        // 
    // neighbor API
    rpc sai_grpc_remove_neighbor_entry(sai_grpc_remove_neighbor_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_neighbor_entry_attribute_fn)(_In_ const sai_neighbor_entry_t *neighbor_entry, _In_ const sai_attribute_t *attr)
    // neighbor_entry attrs: 
    //  
        // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS,  
        // SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE,  
        // SAI_NEIGHBOR_ENTRY_ATTR_META_DATA,  
        // SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL, 
        // 
    // neighbor API
    rpc sai_grpc_set_neighbor_entry_attribute(sai_grpc_set_neighbor_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_neighbor_entry_attribute_fn)(_In_ const sai_neighbor_entry_t *neighbor_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // neighbor_entry attrs: 
    //  
        // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS,  
        // SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE,  
        // SAI_NEIGHBOR_ENTRY_ATTR_META_DATA,  
        // SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY, 
        // 
    // neighbor API
    rpc sai_grpc_get_neighbor_entry_attribute(sai_grpc_get_neighbor_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_remove_all_neighbor_entries_fn)(_In_ sai_object_id_t switch_id)
    // all_neighbor_entries attrs: 
    // 
        // 
    // neighbor API
    rpc sai_grpc_remove_all_neighbor_entries(sai_grpc_remove_all_neighbor_entries_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_bulk_create_neighbor_entry_fn)(_In_ uint32_t object_count, _In_ const sai_neighbor_entry_t *neighbor_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // neighbor_entry mandatory attrs: 
    // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS, 
        // 
    // neighbor API
    rpc sai_grpc_bulk_create_neighbor_entry(sai_grpc_bulk_create_neighbor_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_neighbor_entry_fn)(_In_ uint32_t object_count, _In_ const sai_neighbor_entry_t *neighbor_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // neighbor_entry attrs: 
    // 
        // 
    // neighbor API
    rpc sai_grpc_bulk_remove_neighbor_entry(sai_grpc_bulk_remove_neighbor_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_neighbor_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_neighbor_entry_t *neighbor_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // neighbor_entry attrs: 
    //  
        // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS,  
        // SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE,  
        // SAI_NEIGHBOR_ENTRY_ATTR_META_DATA,  
        // SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL, 
        // 
    // neighbor API
    rpc sai_grpc_bulk_set_neighbor_entry_attribute(sai_grpc_bulk_set_neighbor_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_neighbor_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_neighbor_entry_t *neighbor_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // neighbor_entry attrs: 
    //  
        // SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS,  
        // SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE,  
        // SAI_NEIGHBOR_ENTRY_ATTR_META_DATA,  
        // SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL,  
        // SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY, 
        // 
    // neighbor API
    rpc sai_grpc_bulk_get_neighbor_entry_attribute(sai_grpc_bulk_get_neighbor_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of next_hop API
    // sai_status_t(*sai_create_next_hop_fn)(_Out_ sai_object_id_t *next_hop_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // next_hop mandatory attrs: 
    // SAI_NEXT_HOP_ATTR_TYPE, SAI_NEXT_HOP_ATTR_IP, SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID, SAI_NEXT_HOP_ATTR_TUNNEL_ID, SAI_NEXT_HOP_ATTR_SRV6_SIDLIST_ID, SAI_NEXT_HOP_ATTR_LABELSTACK, 
        // 
    // next_hop API
    rpc sai_grpc_create_next_hop(sai_grpc_create_next_hop_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_next_hop_fn)(_In_ sai_object_id_t next_hop_id)
    // next_hop attrs: 
    // 
        // 
    // next_hop API
    rpc sai_grpc_remove_next_hop(sai_grpc_remove_next_hop_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_next_hop_attribute_fn)(_In_ sai_object_id_t next_hop_id, _In_ const sai_attribute_t *attr)
    // next_hop attrs: 
    //  
        // SAI_NEXT_HOP_ATTR_TUNNEL_VNI,  
        // SAI_NEXT_HOP_ATTR_TUNNEL_MAC,  
        // SAI_NEXT_HOP_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TYPE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE,  
        // SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, 
        // 
    // next_hop API
    rpc sai_grpc_set_next_hop_attribute(sai_grpc_set_next_hop_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_next_hop_attribute_fn)(_In_ sai_object_id_t next_hop_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // next_hop attrs: 
    //  
        // SAI_NEXT_HOP_ATTR_TYPE,  
        // SAI_NEXT_HOP_ATTR_IP,  
        // SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID,  
        // SAI_NEXT_HOP_ATTR_TUNNEL_ID,  
        // SAI_NEXT_HOP_ATTR_TUNNEL_VNI,  
        // SAI_NEXT_HOP_ATTR_TUNNEL_MAC,  
        // SAI_NEXT_HOP_ATTR_SRV6_SIDLIST_ID,  
        // SAI_NEXT_HOP_ATTR_LABELSTACK,  
        // SAI_NEXT_HOP_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TYPE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE,  
        // SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE,  
        // SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, 
        // 
    // next_hop API
    rpc sai_grpc_get_next_hop_attribute(sai_grpc_get_next_hop_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of next_hop_group API
    // sai_status_t(*sai_create_next_hop_group_fn)(_Out_ sai_object_id_t *next_hop_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // next_hop_group mandatory attrs: 
    // SAI_NEXT_HOP_GROUP_ATTR_TYPE, 
        // 
    // next_hop_group API
    rpc sai_grpc_create_next_hop_group(sai_grpc_create_next_hop_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_next_hop_group_fn)(_In_ sai_object_id_t next_hop_group_id)
    // next_hop_group attrs: 
    // 
        // 
    // next_hop_group API
    rpc sai_grpc_remove_next_hop_group(sai_grpc_remove_next_hop_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_next_hop_group_attribute_fn)(_In_ sai_object_id_t next_hop_group_id, _In_ const sai_attribute_t *attr)
    // next_hop_group attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER,  
        // SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_GROUP_ATTR_SELECTION_MAP,  
        // SAI_NEXT_HOP_GROUP_ATTR_ARS_OBJECT_ID, 
        // 
    // next_hop_group API
    rpc sai_grpc_set_next_hop_group_attribute(sai_grpc_set_next_hop_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_next_hop_group_attribute_fn)(_In_ sai_object_id_t next_hop_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // next_hop_group attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT,  
        // SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST,  
        // SAI_NEXT_HOP_GROUP_ATTR_TYPE,  
        // SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER,  
        // SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE,  
        // SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE,  
        // SAI_NEXT_HOP_GROUP_ATTR_SELECTION_MAP,  
        // SAI_NEXT_HOP_GROUP_ATTR_HIERARCHICAL_NEXTHOP,  
        // SAI_NEXT_HOP_GROUP_ATTR_ARS_OBJECT_ID,  
        // SAI_NEXT_HOP_GROUP_ATTR_ARS_PACKET_DROPS,  
        // SAI_NEXT_HOP_GROUP_ATTR_ARS_NEXT_HOP_REASSIGNMENTS,  
        // SAI_NEXT_HOP_GROUP_ATTR_ARS_PORT_REASSIGNMENTS, 
        // 
    // next_hop_group API
    rpc sai_grpc_get_next_hop_group_attribute(sai_grpc_get_next_hop_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_next_hop_group_member_fn)(_Out_ sai_object_id_t *next_hop_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // next_hop_group_member mandatory attrs: 
    // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID, SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID, 
        // 
    // next_hop_group API
    rpc sai_grpc_create_next_hop_group_member(sai_grpc_create_next_hop_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_next_hop_group_member_fn)(_In_ sai_object_id_t next_hop_group_member_id)
    // next_hop_group_member attrs: 
    // 
        // 
    // next_hop_group API
    rpc sai_grpc_remove_next_hop_group_member(sai_grpc_remove_next_hop_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_next_hop_group_member_attribute_fn)(_In_ sai_object_id_t next_hop_group_member_id, _In_ const sai_attribute_t *attr)
    // next_hop_group_member attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_ARS_ALTERNATE_PATH, 
        // 
    // next_hop_group API
    rpc sai_grpc_set_next_hop_group_member_attribute(sai_grpc_set_next_hop_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_next_hop_group_member_attribute_fn)(_In_ sai_object_id_t next_hop_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // next_hop_group_member attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID,  
        // SAI_NEXT_HOP_GROUP_MEMBER_ATTR_ARS_ALTERNATE_PATH, 
        // 
    // next_hop_group API
    rpc sai_grpc_get_next_hop_group_member_attribute(sai_grpc_get_next_hop_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_next_hop_group_map_fn)(_Out_ sai_object_id_t *next_hop_group_map_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // next_hop_group_map mandatory attrs: 
    // SAI_NEXT_HOP_GROUP_MAP_ATTR_TYPE, 
        // 
    // next_hop_group API
    rpc sai_grpc_create_next_hop_group_map(sai_grpc_create_next_hop_group_map_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_next_hop_group_map_fn)(_In_ sai_object_id_t next_hop_group_map_id)
    // next_hop_group_map attrs: 
    // 
        // 
    // next_hop_group API
    rpc sai_grpc_remove_next_hop_group_map(sai_grpc_remove_next_hop_group_map_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_next_hop_group_map_attribute_fn)(_In_ sai_object_id_t next_hop_group_map_id, _In_ const sai_attribute_t *attr)
    // next_hop_group_map attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST, 
        // 
    // next_hop_group API
    rpc sai_grpc_set_next_hop_group_map_attribute(sai_grpc_set_next_hop_group_map_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_next_hop_group_map_attribute_fn)(_In_ sai_object_id_t next_hop_group_map_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // next_hop_group_map attrs: 
    //  
        // SAI_NEXT_HOP_GROUP_MAP_ATTR_TYPE,  
        // SAI_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST, 
        // 
    // next_hop_group API
    rpc sai_grpc_get_next_hop_group_map_attribute(sai_grpc_get_next_hop_group_map_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of policer API
    // sai_status_t(*sai_create_policer_fn)(_Out_ sai_object_id_t *policer_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // policer mandatory attrs: 
    // SAI_POLICER_ATTR_METER_TYPE, SAI_POLICER_ATTR_MODE, 
        // 
    // policer API
    rpc sai_grpc_create_policer(sai_grpc_create_policer_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_policer_fn)(_In_ sai_object_id_t policer_id)
    // policer attrs: 
    // 
        // 
    // policer API
    rpc sai_grpc_remove_policer(sai_grpc_remove_policer_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_policer_attribute_fn)(_In_ sai_object_id_t policer_id, _In_ const sai_attribute_t *attr)
    // policer attrs: 
    //  
        // SAI_POLICER_ATTR_CBS,  
        // SAI_POLICER_ATTR_CIR,  
        // SAI_POLICER_ATTR_PBS,  
        // SAI_POLICER_ATTR_PIR,  
        // SAI_POLICER_ATTR_GREEN_PACKET_ACTION,  
        // SAI_POLICER_ATTR_YELLOW_PACKET_ACTION,  
        // SAI_POLICER_ATTR_RED_PACKET_ACTION,  
        // SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST, 
        // 
    // policer API
    rpc sai_grpc_set_policer_attribute(sai_grpc_set_policer_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_policer_attribute_fn)(_In_ sai_object_id_t policer_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // policer attrs: 
    //  
        // SAI_POLICER_ATTR_METER_TYPE,  
        // SAI_POLICER_ATTR_MODE,  
        // SAI_POLICER_ATTR_COLOR_SOURCE,  
        // SAI_POLICER_ATTR_CBS,  
        // SAI_POLICER_ATTR_CIR,  
        // SAI_POLICER_ATTR_PBS,  
        // SAI_POLICER_ATTR_PIR,  
        // SAI_POLICER_ATTR_GREEN_PACKET_ACTION,  
        // SAI_POLICER_ATTR_YELLOW_PACKET_ACTION,  
        // SAI_POLICER_ATTR_RED_PACKET_ACTION,  
        // SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST,  
        // SAI_POLICER_ATTR_OBJECT_STAGE, 
        // 
    // policer API
    rpc sai_grpc_get_policer_attribute(sai_grpc_get_policer_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_policer_stats_fn)(_In_ sai_object_id_t policer_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // policer stats: 
    // packets, bytes, green_packets, green_bytes, yellow_packets, yellow_bytes, red_packets, red_bytes, custom_range_base, 
        // 
    // policer API
    rpc sai_grpc_get_policer_stats(sai_grpc_get_policer_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_policer_stats_ext_fn)(_In_ sai_object_id_t policer_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // policer stats: 
    // packets, bytes, green_packets, green_bytes, yellow_packets, yellow_bytes, red_packets, red_bytes, custom_range_base, 
        // 
    // policer API
    rpc sai_grpc_get_policer_stats_ext(sai_grpc_get_policer_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_policer_stats_fn)(_In_ sai_object_id_t policer_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // policer attrs: 
    // 
        // 
    // policer API
    rpc sai_grpc_clear_policer_stats(sai_grpc_clear_policer_stats_msg_args)        returns (sai_grpc_response);


    // Start of port API
    // sai_status_t(*sai_create_port_fn)(_Out_ sai_object_id_t *port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // port mandatory attrs: 
    // SAI_PORT_ATTR_HW_LANE_LIST, SAI_PORT_ATTR_SPEED, 
        // 
    // port API
    rpc sai_grpc_create_port(sai_grpc_create_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_port_fn)(_In_ sai_object_id_t port_id)
    // port attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_remove_port(sai_grpc_remove_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_port_attribute_fn)(_In_ sai_object_id_t port_id, _In_ const sai_attribute_t *attr)
    // port attrs: 
    //  
        // SAI_PORT_ATTR_SPEED,  
        // SAI_PORT_ATTR_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_ADMIN_STATE,  
        // SAI_PORT_ATTR_MEDIA_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_SPEED,  
        // SAI_PORT_ATTR_ADVERTISED_FEC_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED,  
        // SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_OUI_CODE,  
        // SAI_PORT_ATTR_PORT_VLAN_ID,  
        // SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY,  
        // SAI_PORT_ATTR_DROP_UNTAGGED,  
        // SAI_PORT_ATTR_DROP_TAGGED,  
        // SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE,  
        // SAI_PORT_ATTR_USE_EXTENDED_FEC,  
        // SAI_PORT_ATTR_FEC_MODE,  
        // SAI_PORT_ATTR_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_UPDATE_DSCP,  
        // SAI_PORT_ATTR_MTU,  
        // SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_INGRESS_ACL,  
        // SAI_PORT_ATTR_EGRESS_ACL,  
        // SAI_PORT_ATTR_INGRESS_MACSEC_ACL,  
        // SAI_PORT_ATTR_EGRESS_MACSEC_ACL,  
        // SAI_PORT_ATTR_INGRESS_MIRROR_SESSION,  
        // SAI_PORT_ATTR_EGRESS_MIRROR_SESSION,  
        // SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION,  
        // SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION,  
        // SAI_PORT_ATTR_POLICER_ID,  
        // SAI_PORT_ATTR_QOS_DEFAULT_TC,  
        // SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP,  
        // SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP,  
        // SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP,  
        // SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID,  
        // SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST,  
        // SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX,  
        // SAI_PORT_ATTR_META_DATA,  
        // SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST,  
        // SAI_PORT_ATTR_HW_PROFILE_ID,  
        // SAI_PORT_ATTR_EEE_ENABLE,  
        // SAI_PORT_ATTR_EEE_IDLE_TIME,  
        // SAI_PORT_ATTR_EEE_WAKE_TIME,  
        // SAI_PORT_ATTR_ISOLATION_GROUP,  
        // SAI_PORT_ATTR_PKT_TX_ENABLE,  
        // SAI_PORT_ATTR_TAM_OBJECT,  
        // SAI_PORT_ATTR_SERDES_PREEMPHASIS,  
        // SAI_PORT_ATTR_SERDES_IDRIVER,  
        // SAI_PORT_ATTR_SERDES_IPREDRIVER,  
        // SAI_PORT_ATTR_LINK_TRAINING_ENABLE,  
        // SAI_PORT_ATTR_PTP_MODE,  
        // SAI_PORT_ATTR_INTERFACE_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE,  
        // SAI_PORT_ATTR_PRBS_POLYNOMIAL,  
        // SAI_PORT_ATTR_PRBS_CONFIG,  
        // SAI_PORT_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,  
        // SAI_PORT_ATTR_TPID,  
        // SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE,  
        // SAI_PORT_ATTR_LOOPBACK_MODE,  
        // SAI_PORT_ATTR_MDIX_MODE_CONFIG,  
        // SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE,  
        // SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT,  
        // SAI_PORT_ATTR_MODULE_TYPE,  
        // SAI_PORT_ATTR_DUAL_MEDIA,  
        // SAI_PORT_ATTR_IPG,  
        // SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP,  
        // SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL,  
        // SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL,  
        // SAI_PORT_ATTR_FABRIC_ISOLATE,  
        // SAI_PORT_ATTR_ARS_ENABLE,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_SCALING_FACTOR,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_PAST_ENABLE,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_FUTURE_ENABLE,  
        // SAI_PORT_ATTR_ARS_ALTERNATE_PATH,  
        // SAI_PORT_ATTR_ECMP_HASH_ALGORITHM,  
        // SAI_PORT_ATTR_ECMP_HASH_SEED,  
        // SAI_PORT_ATTR_ECMP_HASH_OFFSET, 
        // 
    // port API
    rpc sai_grpc_set_port_attribute(sai_grpc_set_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_port_attribute_fn)(_In_ sai_object_id_t port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // port attrs: 
    //  
        // SAI_PORT_ATTR_TYPE,  
        // SAI_PORT_ATTR_OPER_STATUS,  
        // SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE,  
        // SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE,  
        // SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES,  
        // SAI_PORT_ATTR_QOS_QUEUE_LIST,  
        // SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS,  
        // SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST,  
        // SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE,  
        // SAI_PORT_ATTR_SUPPORTED_SPEED,  
        // SAI_PORT_ATTR_SUPPORTED_FEC_MODE,  
        // SAI_PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED,  
        // SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE,  
        // SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE,  
        // SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE,  
        // SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS,  
        // SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST,  
        // SAI_PORT_ATTR_EYE_VALUES,  
        // SAI_PORT_ATTR_OPER_SPEED,  
        // SAI_PORT_ATTR_HW_LANE_LIST,  
        // SAI_PORT_ATTR_SPEED,  
        // SAI_PORT_ATTR_FULL_DUPLEX_MODE,  
        // SAI_PORT_ATTR_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_ADMIN_STATE,  
        // SAI_PORT_ATTR_MEDIA_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_SPEED,  
        // SAI_PORT_ATTR_ADVERTISED_FEC_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED,  
        // SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE,  
        // SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_OUI_CODE,  
        // SAI_PORT_ATTR_PORT_VLAN_ID,  
        // SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY,  
        // SAI_PORT_ATTR_DROP_UNTAGGED,  
        // SAI_PORT_ATTR_DROP_TAGGED,  
        // SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE,  
        // SAI_PORT_ATTR_USE_EXTENDED_FEC,  
        // SAI_PORT_ATTR_FEC_MODE,  
        // SAI_PORT_ATTR_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_UPDATE_DSCP,  
        // SAI_PORT_ATTR_MTU,  
        // SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID,  
        // SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_INGRESS_ACL,  
        // SAI_PORT_ATTR_EGRESS_ACL,  
        // SAI_PORT_ATTR_INGRESS_MACSEC_ACL,  
        // SAI_PORT_ATTR_EGRESS_MACSEC_ACL,  
        // SAI_PORT_ATTR_MACSEC_PORT_LIST,  
        // SAI_PORT_ATTR_INGRESS_MIRROR_SESSION,  
        // SAI_PORT_ATTR_EGRESS_MIRROR_SESSION,  
        // SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION,  
        // SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION,  
        // SAI_PORT_ATTR_POLICER_ID,  
        // SAI_PORT_ATTR_QOS_DEFAULT_TC,  
        // SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP,  
        // SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP,  
        // SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP,  
        // SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID,  
        // SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST,  
        // SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX,  
        // SAI_PORT_ATTR_META_DATA,  
        // SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST,  
        // SAI_PORT_ATTR_HW_PROFILE_ID,  
        // SAI_PORT_ATTR_EEE_ENABLE,  
        // SAI_PORT_ATTR_EEE_IDLE_TIME,  
        // SAI_PORT_ATTR_EEE_WAKE_TIME,  
        // SAI_PORT_ATTR_PORT_POOL_LIST,  
        // SAI_PORT_ATTR_ISOLATION_GROUP,  
        // SAI_PORT_ATTR_PKT_TX_ENABLE,  
        // SAI_PORT_ATTR_TAM_OBJECT,  
        // SAI_PORT_ATTR_SERDES_PREEMPHASIS,  
        // SAI_PORT_ATTR_SERDES_IDRIVER,  
        // SAI_PORT_ATTR_SERDES_IPREDRIVER,  
        // SAI_PORT_ATTR_LINK_TRAINING_ENABLE,  
        // SAI_PORT_ATTR_PTP_MODE,  
        // SAI_PORT_ATTR_INTERFACE_TYPE,  
        // SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE,  
        // SAI_PORT_ATTR_REFERENCE_CLOCK,  
        // SAI_PORT_ATTR_PRBS_POLYNOMIAL,  
        // SAI_PORT_ATTR_PORT_SERDES_ID,  
        // SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS,  
        // SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS,  
        // SAI_PORT_ATTR_PRBS_CONFIG,  
        // SAI_PORT_ATTR_PRBS_LOCK_STATUS,  
        // SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS,  
        // SAI_PORT_ATTR_PRBS_RX_STATUS,  
        // SAI_PORT_ATTR_PRBS_RX_STATE,  
        // SAI_PORT_ATTR_AUTO_NEG_STATUS,  
        // SAI_PORT_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,  
        // SAI_PORT_ATTR_TPID,  
        // SAI_PORT_ATTR_ERR_STATUS_LIST,  
        // SAI_PORT_ATTR_FABRIC_ATTACHED,  
        // SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE,  
        // SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID,  
        // SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX,  
        // SAI_PORT_ATTR_FABRIC_REACHABILITY,  
        // SAI_PORT_ATTR_SYSTEM_PORT,  
        // SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE,  
        // SAI_PORT_ATTR_LOOPBACK_MODE,  
        // SAI_PORT_ATTR_MDIX_MODE_STATUS,  
        // SAI_PORT_ATTR_MDIX_MODE_CONFIG,  
        // SAI_PORT_ATTR_AUTO_NEG_CONFIG_MODE,  
        // SAI_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT,  
        // SAI_PORT_ATTR_MODULE_TYPE,  
        // SAI_PORT_ATTR_DUAL_MEDIA,  
        // SAI_PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED,  
        // SAI_PORT_ATTR_IPG,  
        // SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD,  
        // SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD,  
        // SAI_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP,  
        // SAI_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP,  
        // SAI_PORT_ATTR_IPSEC_PORT,  
        // SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL_RANGE,  
        // SAI_PORT_ATTR_PFC_TC_DLD_INTERVAL,  
        // SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL_RANGE,  
        // SAI_PORT_ATTR_PFC_TC_DLR_INTERVAL,  
        // SAI_PORT_ATTR_SUPPORTED_LINK_TRAINING_MODE,  
        // SAI_PORT_ATTR_RX_SIGNAL_DETECT,  
        // SAI_PORT_ATTR_RX_LOCK_STATUS,  
        // SAI_PORT_ATTR_PCS_RX_LINK_STATUS,  
        // SAI_PORT_ATTR_FEC_ALIGNMENT_LOCK,  
        // SAI_PORT_ATTR_FABRIC_ISOLATE,  
        // SAI_PORT_ATTR_MAX_FEC_SYMBOL_ERRORS_DETECTABLE,  
        // SAI_PORT_ATTR_ARS_ENABLE,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_SCALING_FACTOR,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_PAST_ENABLE,  
        // SAI_PORT_ATTR_ARS_PORT_LOAD_FUTURE_ENABLE,  
        // SAI_PORT_ATTR_ARS_ALTERNATE_PATH,  
        // SAI_PORT_ATTR_JSON_FORMATTED_DEBUG_DATA,  
        // SAI_PORT_ATTR_ECMP_HASH_ALGORITHM,  
        // SAI_PORT_ATTR_ECMP_HASH_SEED,  
        // SAI_PORT_ATTR_ECMP_HASH_OFFSET,  
        // SAI_PORT_ATTR_OPER_PORT_FEC_MODE, 
        // 
    // port API
    rpc sai_grpc_get_port_attribute(sai_grpc_get_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_port_stats_fn)(_In_ sai_object_id_t port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // port stats: 
    // if_in_octets, if_in_ucast_pkts, if_in_non_ucast_pkts, if_in_discards, if_in_errors, if_in_unknown_protos, if_in_broadcast_pkts, if_in_multicast_pkts, if_in_vlan_discards, if_out_octets, if_out_ucast_pkts, if_out_non_ucast_pkts, if_out_discards, if_out_errors, if_out_qlen, if_out_broadcast_pkts, if_out_multicast_pkts, ether_stats_drop_events, ether_stats_multicast_pkts, ether_stats_broadcast_pkts, ether_stats_undersize_pkts, ether_stats_fragments, ether_stats_pkts_64_octets, ether_stats_pkts_65_to_127_octets, ether_stats_pkts_128_to_255_octets, ether_stats_pkts_256_to_511_octets, ether_stats_pkts_512_to_1023_octets, ether_stats_pkts_1024_to_1518_octets, ether_stats_pkts_1519_to_2047_octets, ether_stats_pkts_2048_to_4095_octets, ether_stats_pkts_4096_to_9216_octets, ether_stats_pkts_9217_to_16383_octets, ether_stats_oversize_pkts, ether_rx_oversize_pkts, ether_tx_oversize_pkts, ether_stats_jabbers, ether_stats_octets, ether_stats_pkts, ether_stats_collisions, ether_stats_crc_align_errors, ether_stats_tx_no_errors, ether_stats_rx_no_errors, ip_in_receives, ip_in_octets, ip_in_ucast_pkts, ip_in_non_ucast_pkts, ip_in_discards, ip_out_octets, ip_out_ucast_pkts, ip_out_non_ucast_pkts, ip_out_discards, ipv6_in_receives, ipv6_in_octets, ipv6_in_ucast_pkts, ipv6_in_non_ucast_pkts, ipv6_in_mcast_pkts, ipv6_in_discards, ipv6_out_octets, ipv6_out_ucast_pkts, ipv6_out_non_ucast_pkts, ipv6_out_mcast_pkts, ipv6_out_discards, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, ecn_marked_packets, ether_in_pkts_64_octets, ether_in_pkts_65_to_127_octets, ether_in_pkts_128_to_255_octets, ether_in_pkts_256_to_511_octets, ether_in_pkts_512_to_1023_octets, ether_in_pkts_1024_to_1518_octets, ether_in_pkts_1519_to_2047_octets, ether_in_pkts_2048_to_4095_octets, ether_in_pkts_4096_to_9216_octets, ether_in_pkts_9217_to_16383_octets, ether_out_pkts_64_octets, ether_out_pkts_65_to_127_octets, ether_out_pkts_128_to_255_octets, ether_out_pkts_256_to_511_octets, ether_out_pkts_512_to_1023_octets, ether_out_pkts_1024_to_1518_octets, ether_out_pkts_1519_to_2047_octets, ether_out_pkts_2048_to_4095_octets, ether_out_pkts_4096_to_9216_octets, ether_out_pkts_9217_to_16383_octets, in_curr_occupancy_bytes, in_watermark_bytes, in_shared_curr_occupancy_bytes, in_shared_watermark_bytes, out_curr_occupancy_bytes, out_watermark_bytes, out_shared_curr_occupancy_bytes, out_shared_watermark_bytes, in_dropped_pkts, out_dropped_pkts, pause_rx_pkts, pause_tx_pkts, pfc_0_rx_pkts, pfc_0_tx_pkts, pfc_1_rx_pkts, pfc_1_tx_pkts, pfc_2_rx_pkts, pfc_2_tx_pkts, pfc_3_rx_pkts, pfc_3_tx_pkts, pfc_4_rx_pkts, pfc_4_tx_pkts, pfc_5_rx_pkts, pfc_5_tx_pkts, pfc_6_rx_pkts, pfc_6_tx_pkts, pfc_7_rx_pkts, pfc_7_tx_pkts, pfc_0_rx_pause_duration, pfc_0_tx_pause_duration, pfc_1_rx_pause_duration, pfc_1_tx_pause_duration, pfc_2_rx_pause_duration, pfc_2_tx_pause_duration, pfc_3_rx_pause_duration, pfc_3_tx_pause_duration, pfc_4_rx_pause_duration, pfc_4_tx_pause_duration, pfc_5_rx_pause_duration, pfc_5_tx_pause_duration, pfc_6_rx_pause_duration, pfc_6_tx_pause_duration, pfc_7_rx_pause_duration, pfc_7_tx_pause_duration, pfc_0_rx_pause_duration_us, pfc_0_tx_pause_duration_us, pfc_1_rx_pause_duration_us, pfc_1_tx_pause_duration_us, pfc_2_rx_pause_duration_us, pfc_2_tx_pause_duration_us, pfc_3_rx_pause_duration_us, pfc_3_tx_pause_duration_us, pfc_4_rx_pause_duration_us, pfc_4_tx_pause_duration_us, pfc_5_rx_pause_duration_us, pfc_5_tx_pause_duration_us, pfc_6_rx_pause_duration_us, pfc_6_tx_pause_duration_us, pfc_7_rx_pause_duration_us, pfc_7_tx_pause_duration_us, pfc_0_on2off_rx_pkts, pfc_1_on2off_rx_pkts, pfc_2_on2off_rx_pkts, pfc_3_on2off_rx_pkts, pfc_4_on2off_rx_pkts, pfc_5_on2off_rx_pkts, pfc_6_on2off_rx_pkts, pfc_7_on2off_rx_pkts, dot3_stats_alignment_errors, dot3_stats_fcs_errors, dot3_stats_single_collision_frames, dot3_stats_multiple_collision_frames, dot3_stats_sqe_test_errors, dot3_stats_deferred_transmissions, dot3_stats_late_collisions, dot3_stats_excessive_collisions, dot3_stats_internal_mac_transmit_errors, dot3_stats_carrier_sense_errors, dot3_stats_frame_too_longs, dot3_stats_internal_mac_receive_errors, dot3_stats_symbol_errors, dot3_control_in_unknown_opcodes, eee_tx_event_count, eee_rx_event_count, eee_tx_duration, eee_rx_duration, prbs_error_count, if_in_fec_correctable_frames, if_in_fec_not_correctable_frames, if_in_fec_symbol_errors, if_in_fabric_data_units, if_out_fabric_data_units, if_in_fec_codeword_errors_s0, if_in_fec_codeword_errors_s1, if_in_fec_codeword_errors_s2, if_in_fec_codeword_errors_s3, if_in_fec_codeword_errors_s4, if_in_fec_codeword_errors_s5, if_in_fec_codeword_errors_s6, if_in_fec_codeword_errors_s7, if_in_fec_codeword_errors_s8, if_in_fec_codeword_errors_s9, if_in_fec_codeword_errors_s10, if_in_fec_codeword_errors_s11, if_in_fec_codeword_errors_s12, if_in_fec_codeword_errors_s13, if_in_fec_codeword_errors_s14, if_in_fec_codeword_errors_s15, if_in_fec_codeword_errors_s16, in_drop_reason_range_base, in_configured_drop_reasons_0_dropped_pkts, in_configured_drop_reasons_1_dropped_pkts, in_configured_drop_reasons_2_dropped_pkts, in_configured_drop_reasons_3_dropped_pkts, in_configured_drop_reasons_4_dropped_pkts, in_configured_drop_reasons_5_dropped_pkts, in_configured_drop_reasons_6_dropped_pkts, in_configured_drop_reasons_7_dropped_pkts, out_drop_reason_range_base, out_configured_drop_reasons_0_dropped_pkts, out_configured_drop_reasons_1_dropped_pkts, out_configured_drop_reasons_2_dropped_pkts, out_configured_drop_reasons_3_dropped_pkts, out_configured_drop_reasons_4_dropped_pkts, out_configured_drop_reasons_5_dropped_pkts, out_configured_drop_reasons_6_dropped_pkts, out_configured_drop_reasons_7_dropped_pkts, 
        // 
    // port API
    rpc sai_grpc_get_port_stats(sai_grpc_get_port_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_port_stats_ext_fn)(_In_ sai_object_id_t port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // port stats: 
    // if_in_octets, if_in_ucast_pkts, if_in_non_ucast_pkts, if_in_discards, if_in_errors, if_in_unknown_protos, if_in_broadcast_pkts, if_in_multicast_pkts, if_in_vlan_discards, if_out_octets, if_out_ucast_pkts, if_out_non_ucast_pkts, if_out_discards, if_out_errors, if_out_qlen, if_out_broadcast_pkts, if_out_multicast_pkts, ether_stats_drop_events, ether_stats_multicast_pkts, ether_stats_broadcast_pkts, ether_stats_undersize_pkts, ether_stats_fragments, ether_stats_pkts_64_octets, ether_stats_pkts_65_to_127_octets, ether_stats_pkts_128_to_255_octets, ether_stats_pkts_256_to_511_octets, ether_stats_pkts_512_to_1023_octets, ether_stats_pkts_1024_to_1518_octets, ether_stats_pkts_1519_to_2047_octets, ether_stats_pkts_2048_to_4095_octets, ether_stats_pkts_4096_to_9216_octets, ether_stats_pkts_9217_to_16383_octets, ether_stats_oversize_pkts, ether_rx_oversize_pkts, ether_tx_oversize_pkts, ether_stats_jabbers, ether_stats_octets, ether_stats_pkts, ether_stats_collisions, ether_stats_crc_align_errors, ether_stats_tx_no_errors, ether_stats_rx_no_errors, ip_in_receives, ip_in_octets, ip_in_ucast_pkts, ip_in_non_ucast_pkts, ip_in_discards, ip_out_octets, ip_out_ucast_pkts, ip_out_non_ucast_pkts, ip_out_discards, ipv6_in_receives, ipv6_in_octets, ipv6_in_ucast_pkts, ipv6_in_non_ucast_pkts, ipv6_in_mcast_pkts, ipv6_in_discards, ipv6_out_octets, ipv6_out_ucast_pkts, ipv6_out_non_ucast_pkts, ipv6_out_mcast_pkts, ipv6_out_discards, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, ecn_marked_packets, ether_in_pkts_64_octets, ether_in_pkts_65_to_127_octets, ether_in_pkts_128_to_255_octets, ether_in_pkts_256_to_511_octets, ether_in_pkts_512_to_1023_octets, ether_in_pkts_1024_to_1518_octets, ether_in_pkts_1519_to_2047_octets, ether_in_pkts_2048_to_4095_octets, ether_in_pkts_4096_to_9216_octets, ether_in_pkts_9217_to_16383_octets, ether_out_pkts_64_octets, ether_out_pkts_65_to_127_octets, ether_out_pkts_128_to_255_octets, ether_out_pkts_256_to_511_octets, ether_out_pkts_512_to_1023_octets, ether_out_pkts_1024_to_1518_octets, ether_out_pkts_1519_to_2047_octets, ether_out_pkts_2048_to_4095_octets, ether_out_pkts_4096_to_9216_octets, ether_out_pkts_9217_to_16383_octets, in_curr_occupancy_bytes, in_watermark_bytes, in_shared_curr_occupancy_bytes, in_shared_watermark_bytes, out_curr_occupancy_bytes, out_watermark_bytes, out_shared_curr_occupancy_bytes, out_shared_watermark_bytes, in_dropped_pkts, out_dropped_pkts, pause_rx_pkts, pause_tx_pkts, pfc_0_rx_pkts, pfc_0_tx_pkts, pfc_1_rx_pkts, pfc_1_tx_pkts, pfc_2_rx_pkts, pfc_2_tx_pkts, pfc_3_rx_pkts, pfc_3_tx_pkts, pfc_4_rx_pkts, pfc_4_tx_pkts, pfc_5_rx_pkts, pfc_5_tx_pkts, pfc_6_rx_pkts, pfc_6_tx_pkts, pfc_7_rx_pkts, pfc_7_tx_pkts, pfc_0_rx_pause_duration, pfc_0_tx_pause_duration, pfc_1_rx_pause_duration, pfc_1_tx_pause_duration, pfc_2_rx_pause_duration, pfc_2_tx_pause_duration, pfc_3_rx_pause_duration, pfc_3_tx_pause_duration, pfc_4_rx_pause_duration, pfc_4_tx_pause_duration, pfc_5_rx_pause_duration, pfc_5_tx_pause_duration, pfc_6_rx_pause_duration, pfc_6_tx_pause_duration, pfc_7_rx_pause_duration, pfc_7_tx_pause_duration, pfc_0_rx_pause_duration_us, pfc_0_tx_pause_duration_us, pfc_1_rx_pause_duration_us, pfc_1_tx_pause_duration_us, pfc_2_rx_pause_duration_us, pfc_2_tx_pause_duration_us, pfc_3_rx_pause_duration_us, pfc_3_tx_pause_duration_us, pfc_4_rx_pause_duration_us, pfc_4_tx_pause_duration_us, pfc_5_rx_pause_duration_us, pfc_5_tx_pause_duration_us, pfc_6_rx_pause_duration_us, pfc_6_tx_pause_duration_us, pfc_7_rx_pause_duration_us, pfc_7_tx_pause_duration_us, pfc_0_on2off_rx_pkts, pfc_1_on2off_rx_pkts, pfc_2_on2off_rx_pkts, pfc_3_on2off_rx_pkts, pfc_4_on2off_rx_pkts, pfc_5_on2off_rx_pkts, pfc_6_on2off_rx_pkts, pfc_7_on2off_rx_pkts, dot3_stats_alignment_errors, dot3_stats_fcs_errors, dot3_stats_single_collision_frames, dot3_stats_multiple_collision_frames, dot3_stats_sqe_test_errors, dot3_stats_deferred_transmissions, dot3_stats_late_collisions, dot3_stats_excessive_collisions, dot3_stats_internal_mac_transmit_errors, dot3_stats_carrier_sense_errors, dot3_stats_frame_too_longs, dot3_stats_internal_mac_receive_errors, dot3_stats_symbol_errors, dot3_control_in_unknown_opcodes, eee_tx_event_count, eee_rx_event_count, eee_tx_duration, eee_rx_duration, prbs_error_count, if_in_fec_correctable_frames, if_in_fec_not_correctable_frames, if_in_fec_symbol_errors, if_in_fabric_data_units, if_out_fabric_data_units, if_in_fec_codeword_errors_s0, if_in_fec_codeword_errors_s1, if_in_fec_codeword_errors_s2, if_in_fec_codeword_errors_s3, if_in_fec_codeword_errors_s4, if_in_fec_codeword_errors_s5, if_in_fec_codeword_errors_s6, if_in_fec_codeword_errors_s7, if_in_fec_codeword_errors_s8, if_in_fec_codeword_errors_s9, if_in_fec_codeword_errors_s10, if_in_fec_codeword_errors_s11, if_in_fec_codeword_errors_s12, if_in_fec_codeword_errors_s13, if_in_fec_codeword_errors_s14, if_in_fec_codeword_errors_s15, if_in_fec_codeword_errors_s16, in_drop_reason_range_base, in_configured_drop_reasons_0_dropped_pkts, in_configured_drop_reasons_1_dropped_pkts, in_configured_drop_reasons_2_dropped_pkts, in_configured_drop_reasons_3_dropped_pkts, in_configured_drop_reasons_4_dropped_pkts, in_configured_drop_reasons_5_dropped_pkts, in_configured_drop_reasons_6_dropped_pkts, in_configured_drop_reasons_7_dropped_pkts, out_drop_reason_range_base, out_configured_drop_reasons_0_dropped_pkts, out_configured_drop_reasons_1_dropped_pkts, out_configured_drop_reasons_2_dropped_pkts, out_configured_drop_reasons_3_dropped_pkts, out_configured_drop_reasons_4_dropped_pkts, out_configured_drop_reasons_5_dropped_pkts, out_configured_drop_reasons_6_dropped_pkts, out_configured_drop_reasons_7_dropped_pkts, 
        // 
    // port API
    rpc sai_grpc_get_port_stats_ext(sai_grpc_get_port_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_port_stats_fn)(_In_ sai_object_id_t port_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // port attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_clear_port_stats(sai_grpc_clear_port_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_clear_port_all_stats_fn)(_In_ sai_object_id_t port_id)
    // port_all attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_clear_port_all_stats(sai_grpc_clear_port_all_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_port_pool_fn)(_Out_ sai_object_id_t *port_pool_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // port_pool mandatory attrs: 
    // SAI_PORT_POOL_ATTR_PORT_ID, SAI_PORT_POOL_ATTR_BUFFER_POOL_ID, 
        // 
    // port API
    rpc sai_grpc_create_port_pool(sai_grpc_create_port_pool_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_port_pool_fn)(_In_ sai_object_id_t port_pool_id)
    // port_pool attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_remove_port_pool(sai_grpc_remove_port_pool_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_port_pool_attribute_fn)(_In_ sai_object_id_t port_pool_id, _In_ const sai_attribute_t *attr)
    // port_pool attrs: 
    //  
        // SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID, 
        // 
    // port API
    rpc sai_grpc_set_port_pool_attribute(sai_grpc_set_port_pool_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_port_pool_attribute_fn)(_In_ sai_object_id_t port_pool_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // port_pool attrs: 
    //  
        // SAI_PORT_POOL_ATTR_PORT_ID,  
        // SAI_PORT_POOL_ATTR_BUFFER_POOL_ID,  
        // SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID, 
        // 
    // port API
    rpc sai_grpc_get_port_pool_attribute(sai_grpc_get_port_pool_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_port_pool_stats_fn)(_In_ sai_object_id_t port_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // port_pool stats: 
    // if_octets, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, dropped_pkts, 
        // 
    // port API
    rpc sai_grpc_get_port_pool_stats(sai_grpc_get_port_pool_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_port_pool_stats_ext_fn)(_In_ sai_object_id_t port_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // port_pool stats: 
    // if_octets, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, dropped_pkts, 
        // 
    // port API
    rpc sai_grpc_get_port_pool_stats_ext(sai_grpc_get_port_pool_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_port_pool_stats_fn)(_In_ sai_object_id_t port_pool_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // port_pool attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_clear_port_pool_stats(sai_grpc_clear_port_pool_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_port_serdes_fn)(_Out_ sai_object_id_t *port_serdes_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // port_serdes mandatory attrs: 
    // SAI_PORT_SERDES_ATTR_PORT_ID, 
        // 
    // port API
    rpc sai_grpc_create_port_serdes(sai_grpc_create_port_serdes_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_port_serdes_fn)(_In_ sai_object_id_t port_serdes_id)
    // port_serdes attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_remove_port_serdes(sai_grpc_remove_port_serdes_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_port_serdes_attribute_fn)(_In_ sai_object_id_t port_serdes_id, _In_ const sai_attribute_t *attr)
    // port_serdes attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_set_port_serdes_attribute(sai_grpc_set_port_serdes_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_port_serdes_attribute_fn)(_In_ sai_object_id_t port_serdes_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // port_serdes attrs: 
    //  
        // SAI_PORT_SERDES_ATTR_PORT_ID,  
        // SAI_PORT_SERDES_ATTR_PREEMPHASIS,  
        // SAI_PORT_SERDES_ATTR_IDRIVER,  
        // SAI_PORT_SERDES_ATTR_IPREDRIVER,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_PRE1,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_PRE2,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_PRE3,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_MAIN,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_POST1,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_POST2,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_POST3,  
        // SAI_PORT_SERDES_ATTR_TX_FIR_ATTN, 
        // 
    // port API
    rpc sai_grpc_get_port_serdes_attribute(sai_grpc_get_port_serdes_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_port_connector_fn)(_Out_ sai_object_id_t *port_connector_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // port_connector mandatory attrs: 
    // SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID, SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID, 
        // 
    // port API
    rpc sai_grpc_create_port_connector(sai_grpc_create_port_connector_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_port_connector_fn)(_In_ sai_object_id_t port_connector_id)
    // port_connector attrs: 
    // 
        // 
    // port API
    rpc sai_grpc_remove_port_connector(sai_grpc_remove_port_connector_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_port_connector_attribute_fn)(_In_ sai_object_id_t port_connector_id, _In_ const sai_attribute_t *attr)
    // port_connector attrs: 
    //  
        // SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE, 
        // 
    // port API
    rpc sai_grpc_set_port_connector_attribute(sai_grpc_set_port_connector_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_port_connector_attribute_fn)(_In_ sai_object_id_t port_connector_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // port_connector attrs: 
    //  
        // SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID,  
        // SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID,  
        // SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID,  
        // SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID,  
        // SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE, 
        // 
    // port API
    rpc sai_grpc_get_port_connector_attribute(sai_grpc_get_port_connector_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of qos_map API
    // sai_status_t(*sai_create_qos_map_fn)(_Out_ sai_object_id_t *qos_map_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // qos_map mandatory attrs: 
    // SAI_QOS_MAP_ATTR_TYPE, SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST, 
        // 
    // qos_map API
    rpc sai_grpc_create_qos_map(sai_grpc_create_qos_map_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_qos_map_fn)(_In_ sai_object_id_t qos_map_id)
    // qos_map attrs: 
    // 
        // 
    // qos_map API
    rpc sai_grpc_remove_qos_map(sai_grpc_remove_qos_map_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_qos_map_attribute_fn)(_In_ sai_object_id_t qos_map_id, _In_ const sai_attribute_t *attr)
    // qos_map attrs: 
    //  
        // SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST, 
        // 
    // qos_map API
    rpc sai_grpc_set_qos_map_attribute(sai_grpc_set_qos_map_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_qos_map_attribute_fn)(_In_ sai_object_id_t qos_map_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // qos_map attrs: 
    //  
        // SAI_QOS_MAP_ATTR_TYPE,  
        // SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST, 
        // 
    // qos_map API
    rpc sai_grpc_get_qos_map_attribute(sai_grpc_get_qos_map_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of queue API
    // sai_status_t(*sai_create_queue_fn)(_Out_ sai_object_id_t *queue_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // queue mandatory attrs: 
    // SAI_QUEUE_ATTR_TYPE, SAI_QUEUE_ATTR_PORT, SAI_QUEUE_ATTR_INDEX, SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE, 
        // 
    // queue API
    rpc sai_grpc_create_queue(sai_grpc_create_queue_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_queue_fn)(_In_ sai_object_id_t queue_id)
    // queue attrs: 
    // 
        // 
    // queue API
    rpc sai_grpc_remove_queue(sai_grpc_remove_queue_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_queue_attribute_fn)(_In_ sai_object_id_t queue_id, _In_ const sai_attribute_t *attr)
    // queue attrs: 
    //  
        // SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE,  
        // SAI_QUEUE_ATTR_WRED_PROFILE_ID,  
        // SAI_QUEUE_ATTR_BUFFER_PROFILE_ID,  
        // SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID,  
        // SAI_QUEUE_ATTR_ENABLE_PFC_DLDR,  
        // SAI_QUEUE_ATTR_PFC_DLR_INIT,  
        // SAI_QUEUE_ATTR_TAM_OBJECT,  
        // SAI_QUEUE_ATTR_PFC_DLR_PACKET_ACTION, 
        // 
    // queue API
    rpc sai_grpc_set_queue_attribute(sai_grpc_set_queue_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_queue_attribute_fn)(_In_ sai_object_id_t queue_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // queue attrs: 
    //  
        // SAI_QUEUE_ATTR_TYPE,  
        // SAI_QUEUE_ATTR_PORT,  
        // SAI_QUEUE_ATTR_INDEX,  
        // SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE,  
        // SAI_QUEUE_ATTR_WRED_PROFILE_ID,  
        // SAI_QUEUE_ATTR_BUFFER_PROFILE_ID,  
        // SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID,  
        // SAI_QUEUE_ATTR_PAUSE_STATUS,  
        // SAI_QUEUE_ATTR_ENABLE_PFC_DLDR,  
        // SAI_QUEUE_ATTR_PFC_DLR_INIT,  
        // SAI_QUEUE_ATTR_TAM_OBJECT,  
        // SAI_QUEUE_ATTR_PFC_DLR_PACKET_ACTION,  
        // SAI_QUEUE_ATTR_PFC_CONTINUOUS_DEADLOCK_STATE, 
        // 
    // queue API
    rpc sai_grpc_get_queue_attribute(sai_grpc_get_queue_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_queue_stats_fn)(_In_ sai_object_id_t queue_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // queue stats: 
    // packets, bytes, dropped_packets, dropped_bytes, green_packets, green_bytes, green_dropped_packets, green_dropped_bytes, yellow_packets, yellow_bytes, yellow_dropped_packets, yellow_dropped_bytes, red_packets, red_bytes, red_dropped_packets, red_dropped_bytes, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, curr_occupancy_level, watermark_level, credit_wd_deleted_packets, custom_range_base, 
        // 
    // queue API
    rpc sai_grpc_get_queue_stats(sai_grpc_get_queue_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_queue_stats_ext_fn)(_In_ sai_object_id_t queue_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // queue stats: 
    // packets, bytes, dropped_packets, dropped_bytes, green_packets, green_bytes, green_dropped_packets, green_dropped_bytes, yellow_packets, yellow_bytes, yellow_dropped_packets, yellow_dropped_bytes, red_packets, red_bytes, red_dropped_packets, red_dropped_bytes, green_wred_dropped_packets, green_wred_dropped_bytes, yellow_wred_dropped_packets, yellow_wred_dropped_bytes, red_wred_dropped_packets, red_wred_dropped_bytes, wred_dropped_packets, wred_dropped_bytes, curr_occupancy_bytes, watermark_bytes, shared_curr_occupancy_bytes, shared_watermark_bytes, green_wred_ecn_marked_packets, green_wred_ecn_marked_bytes, yellow_wred_ecn_marked_packets, yellow_wred_ecn_marked_bytes, red_wred_ecn_marked_packets, red_wred_ecn_marked_bytes, wred_ecn_marked_packets, wred_ecn_marked_bytes, curr_occupancy_level, watermark_level, credit_wd_deleted_packets, custom_range_base, 
        // 
    // queue API
    rpc sai_grpc_get_queue_stats_ext(sai_grpc_get_queue_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_queue_stats_fn)(_In_ sai_object_id_t queue_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // queue attrs: 
    // 
        // 
    // queue API
    rpc sai_grpc_clear_queue_stats(sai_grpc_clear_queue_stats_msg_args)        returns (sai_grpc_response);


    // Start of route API
    // sai_status_t(*sai_create_route_entry_fn)(_In_ const sai_route_entry_t *route_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // route_entry mandatory attrs: 
    // 
        // 
    // route API
    rpc sai_grpc_create_route_entry(sai_grpc_create_route_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_route_entry_fn)(_In_ const sai_route_entry_t *route_entry)
    // route_entry attrs: 
    // 
        // 
    // route API
    rpc sai_grpc_remove_route_entry(sai_grpc_remove_route_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_route_entry_attribute_fn)(_In_ const sai_route_entry_t *route_entry, _In_ const sai_attribute_t *attr)
    // route_entry attrs: 
    //  
        // SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_META_DATA,  
        // SAI_ROUTE_ENTRY_ATTR_COUNTER_ID,  
        // SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID, 
        // 
    // route API
    rpc sai_grpc_set_route_entry_attribute(sai_grpc_set_route_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_route_entry_attribute_fn)(_In_ const sai_route_entry_t *route_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // route_entry attrs: 
    //  
        // SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_META_DATA,  
        // SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY,  
        // SAI_ROUTE_ENTRY_ATTR_COUNTER_ID,  
        // SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID, 
        // 
    // route API
    rpc sai_grpc_get_route_entry_attribute(sai_grpc_get_route_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_bulk_create_route_entry_fn)(_In_ uint32_t object_count, _In_ const sai_route_entry_t *route_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // route_entry mandatory attrs: 
    // 
        // 
    // route API
    rpc sai_grpc_bulk_create_route_entry(sai_grpc_bulk_create_route_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_route_entry_fn)(_In_ uint32_t object_count, _In_ const sai_route_entry_t *route_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // route_entry attrs: 
    // 
        // 
    // route API
    rpc sai_grpc_bulk_remove_route_entry(sai_grpc_bulk_remove_route_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_route_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_route_entry_t *route_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // route_entry attrs: 
    //  
        // SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_META_DATA,  
        // SAI_ROUTE_ENTRY_ATTR_COUNTER_ID,  
        // SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID, 
        // 
    // route API
    rpc sai_grpc_bulk_set_route_entry_attribute(sai_grpc_bulk_set_route_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_route_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_route_entry_t *route_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // route_entry attrs: 
    //  
        // SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_ROUTE_ENTRY_ATTR_META_DATA,  
        // SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY,  
        // SAI_ROUTE_ENTRY_ATTR_COUNTER_ID,  
        // SAI_ROUTE_ENTRY_ATTR_PREFIX_AGG_ID, 
        // 
    // route API
    rpc sai_grpc_bulk_get_route_entry_attribute(sai_grpc_bulk_get_route_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of router_interface API
    // sai_status_t(*sai_create_router_interface_fn)(_Out_ sai_object_id_t *router_interface_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // router_interface mandatory attrs: 
    // SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID, SAI_ROUTER_INTERFACE_ATTR_TYPE, SAI_ROUTER_INTERFACE_ATTR_PORT_ID, SAI_ROUTER_INTERFACE_ATTR_VLAN_ID, SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID, SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID, SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID, 
        // 
    // router_interface API
    rpc sai_grpc_create_router_interface(sai_grpc_create_router_interface_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_router_interface_fn)(_In_ sai_object_id_t router_interface_id)
    // router_interface attrs: 
    // 
        // 
    // router_interface API
    rpc sai_grpc_remove_router_interface(sai_grpc_remove_router_interface_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_router_interface_attribute_fn)(_In_ sai_object_id_t router_interface_id, _In_ const sai_attribute_t *attr)
    // router_interface attrs: 
    //  
        // SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE,  
        // SAI_ROUTER_INTERFACE_ATTR_MTU,  
        // SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL,  
        // SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL,  
        // SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION,  
        // SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE,  
        // SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE,  
        // SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE, 
        // 
    // router_interface API
    rpc sai_grpc_set_router_interface_attribute(sai_grpc_set_router_interface_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_router_interface_attribute_fn)(_In_ sai_object_id_t router_interface_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // router_interface attrs: 
    //  
        // SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_TYPE,  
        // SAI_ROUTER_INTERFACE_ATTR_PORT_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_VLAN_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE,  
        // SAI_ROUTER_INTERFACE_ATTR_MTU,  
        // SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL,  
        // SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL,  
        // SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION,  
        // SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE,  
        // SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE,  
        // SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL,  
        // SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID,  
        // SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL,  
        // SAI_ROUTER_INTERFACE_ATTR_ADMIN_MPLS_STATE, 
        // 
    // router_interface API
    rpc sai_grpc_get_router_interface_attribute(sai_grpc_get_router_interface_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_router_interface_stats_fn)(_In_ sai_object_id_t router_interface_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // router_interface stats: 
    // in_octets, in_packets, out_octets, out_packets, in_error_octets, in_error_packets, out_error_octets, out_error_packets, 
        // 
    // router_interface API
    rpc sai_grpc_get_router_interface_stats(sai_grpc_get_router_interface_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_router_interface_stats_ext_fn)(_In_ sai_object_id_t router_interface_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // router_interface stats: 
    // in_octets, in_packets, out_octets, out_packets, in_error_octets, in_error_packets, out_error_octets, out_error_packets, 
        // 
    // router_interface API
    rpc sai_grpc_get_router_interface_stats_ext(sai_grpc_get_router_interface_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_router_interface_stats_fn)(_In_ sai_object_id_t router_interface_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // router_interface attrs: 
    // 
        // 
    // router_interface API
    rpc sai_grpc_clear_router_interface_stats(sai_grpc_clear_router_interface_stats_msg_args)        returns (sai_grpc_response);


    // Start of rpf_group API
    // sai_status_t(*sai_create_rpf_group_fn)(_Out_ sai_object_id_t *rpf_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // rpf_group mandatory attrs: 
    // 
        // 
    // rpf_group API
    rpc sai_grpc_create_rpf_group(sai_grpc_create_rpf_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_rpf_group_fn)(_In_ sai_object_id_t rpf_group_id)
    // rpf_group attrs: 
    // 
        // 
    // rpf_group API
    rpc sai_grpc_remove_rpf_group(sai_grpc_remove_rpf_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_rpf_group_attribute_fn)(_In_ sai_object_id_t rpf_group_id, _In_ const sai_attribute_t *attr)
    // rpf_group attrs: 
    // 
        // 
    // rpf_group API
    rpc sai_grpc_set_rpf_group_attribute(sai_grpc_set_rpf_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_rpf_group_attribute_fn)(_In_ sai_object_id_t rpf_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // rpf_group attrs: 
    //  
        // SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT,  
        // SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST, 
        // 
    // rpf_group API
    rpc sai_grpc_get_rpf_group_attribute(sai_grpc_get_rpf_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_rpf_group_member_fn)(_Out_ sai_object_id_t *rpf_group_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // rpf_group_member mandatory attrs: 
    // SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID, SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID, 
        // 
    // rpf_group API
    rpc sai_grpc_create_rpf_group_member(sai_grpc_create_rpf_group_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_rpf_group_member_fn)(_In_ sai_object_id_t rpf_group_member_id)
    // rpf_group_member attrs: 
    // 
        // 
    // rpf_group API
    rpc sai_grpc_remove_rpf_group_member(sai_grpc_remove_rpf_group_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_rpf_group_member_attribute_fn)(_In_ sai_object_id_t rpf_group_member_id, _In_ const sai_attribute_t *attr)
    // rpf_group_member attrs: 
    // 
        // 
    // rpf_group API
    rpc sai_grpc_set_rpf_group_member_attribute(sai_grpc_set_rpf_group_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_rpf_group_member_attribute_fn)(_In_ sai_object_id_t rpf_group_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // rpf_group_member attrs: 
    //  
        // SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID,  
        // SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID, 
        // 
    // rpf_group API
    rpc sai_grpc_get_rpf_group_member_attribute(sai_grpc_get_rpf_group_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of samplepacket API
    // sai_status_t(*sai_create_samplepacket_fn)(_Out_ sai_object_id_t *samplepacket_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // samplepacket mandatory attrs: 
    // SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE, 
        // 
    // samplepacket API
    rpc sai_grpc_create_samplepacket(sai_grpc_create_samplepacket_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_samplepacket_fn)(_In_ sai_object_id_t samplepacket_id)
    // samplepacket attrs: 
    // 
        // 
    // samplepacket API
    rpc sai_grpc_remove_samplepacket(sai_grpc_remove_samplepacket_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_samplepacket_attribute_fn)(_In_ sai_object_id_t samplepacket_id, _In_ const sai_attribute_t *attr)
    // samplepacket attrs: 
    //  
        // SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE, 
        // 
    // samplepacket API
    rpc sai_grpc_set_samplepacket_attribute(sai_grpc_set_samplepacket_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_samplepacket_attribute_fn)(_In_ sai_object_id_t samplepacket_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // samplepacket attrs: 
    //  
        // SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE,  
        // SAI_SAMPLEPACKET_ATTR_TYPE,  
        // SAI_SAMPLEPACKET_ATTR_MODE, 
        // 
    // samplepacket API
    rpc sai_grpc_get_samplepacket_attribute(sai_grpc_get_samplepacket_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of scheduler API
    // sai_status_t(*sai_create_scheduler_fn)(_Out_ sai_object_id_t *scheduler_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // scheduler mandatory attrs: 
    // 
        // 
    // scheduler API
    rpc sai_grpc_create_scheduler(sai_grpc_create_scheduler_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_scheduler_fn)(_In_ sai_object_id_t scheduler_id)
    // scheduler attrs: 
    // 
        // 
    // scheduler API
    rpc sai_grpc_remove_scheduler(sai_grpc_remove_scheduler_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_scheduler_attribute_fn)(_In_ sai_object_id_t scheduler_id, _In_ const sai_attribute_t *attr)
    // scheduler attrs: 
    //  
        // SAI_SCHEDULER_ATTR_SCHEDULING_TYPE,  
        // SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT,  
        // SAI_SCHEDULER_ATTR_METER_TYPE,  
        // SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE,  
        // SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE,  
        // SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE,  
        // SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE, 
        // 
    // scheduler API
    rpc sai_grpc_set_scheduler_attribute(sai_grpc_set_scheduler_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_scheduler_attribute_fn)(_In_ sai_object_id_t scheduler_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // scheduler attrs: 
    //  
        // SAI_SCHEDULER_ATTR_SCHEDULING_TYPE,  
        // SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT,  
        // SAI_SCHEDULER_ATTR_METER_TYPE,  
        // SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE,  
        // SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE,  
        // SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE,  
        // SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE, 
        // 
    // scheduler API
    rpc sai_grpc_get_scheduler_attribute(sai_grpc_get_scheduler_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of scheduler_group API
    // sai_status_t(*sai_create_scheduler_group_fn)(_Out_ sai_object_id_t *scheduler_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // scheduler_group mandatory attrs: 
    // SAI_SCHEDULER_GROUP_ATTR_PORT_ID, SAI_SCHEDULER_GROUP_ATTR_LEVEL, SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS, SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE, 
        // 
    // scheduler_group API
    rpc sai_grpc_create_scheduler_group(sai_grpc_create_scheduler_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_scheduler_group_fn)(_In_ sai_object_id_t scheduler_group_id)
    // scheduler_group attrs: 
    // 
        // 
    // scheduler_group API
    rpc sai_grpc_remove_scheduler_group(sai_grpc_remove_scheduler_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_scheduler_group_attribute_fn)(_In_ sai_object_id_t scheduler_group_id, _In_ const sai_attribute_t *attr)
    // scheduler_group attrs: 
    //  
        // SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID,  
        // SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE, 
        // 
    // scheduler_group API
    rpc sai_grpc_set_scheduler_group_attribute(sai_grpc_set_scheduler_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_scheduler_group_attribute_fn)(_In_ sai_object_id_t scheduler_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // scheduler_group attrs: 
    //  
        // SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT,  
        // SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST,  
        // SAI_SCHEDULER_GROUP_ATTR_PORT_ID,  
        // SAI_SCHEDULER_GROUP_ATTR_LEVEL,  
        // SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS,  
        // SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID,  
        // SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE, 
        // 
    // scheduler_group API
    rpc sai_grpc_get_scheduler_group_attribute(sai_grpc_get_scheduler_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of srv6 API
    // sai_status_t(*sai_create_srv6_sidlist_fn)(_Out_ sai_object_id_t *srv6_sidlist_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // srv6_sidlist mandatory attrs: 
    // SAI_SRV6_SIDLIST_ATTR_TYPE, 
        // 
    // srv6 API
    rpc sai_grpc_create_srv6_sidlist(sai_grpc_create_srv6_sidlist_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_srv6_sidlist_fn)(_In_ sai_object_id_t srv6_sidlist_id)
    // srv6_sidlist attrs: 
    // 
        // 
    // srv6 API
    rpc sai_grpc_remove_srv6_sidlist(sai_grpc_remove_srv6_sidlist_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_srv6_sidlist_attribute_fn)(_In_ sai_object_id_t srv6_sidlist_id, _In_ const sai_attribute_t *attr)
    // srv6_sidlist attrs: 
    //  
        // SAI_SRV6_SIDLIST_ATTR_TLV_LIST,  
        // SAI_SRV6_SIDLIST_ATTR_SEGMENT_LIST,  
        // SAI_SRV6_SIDLIST_ATTR_NEXT_HOP_ID, 
        // 
    // srv6 API
    rpc sai_grpc_set_srv6_sidlist_attribute(sai_grpc_set_srv6_sidlist_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_srv6_sidlist_attribute_fn)(_In_ sai_object_id_t srv6_sidlist_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // srv6_sidlist attrs: 
    //  
        // SAI_SRV6_SIDLIST_ATTR_TYPE,  
        // SAI_SRV6_SIDLIST_ATTR_TLV_LIST,  
        // SAI_SRV6_SIDLIST_ATTR_SEGMENT_LIST,  
        // SAI_SRV6_SIDLIST_ATTR_NEXT_HOP_ID, 
        // 
    // srv6 API
    rpc sai_grpc_get_srv6_sidlist_attribute(sai_grpc_get_srv6_sidlist_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_srv6_sidlist_stats_fn)(_In_ sai_object_id_t srv6_sidlist_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // srv6_sidlist stats: 
    // out_packets, out_octets, 
        // 
    // srv6 API
    rpc sai_grpc_get_srv6_sidlist_stats(sai_grpc_get_srv6_sidlist_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_srv6_sidlist_stats_ext_fn)(_In_ sai_object_id_t srv6_sidlist_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // srv6_sidlist stats: 
    // out_packets, out_octets, 
        // 
    // srv6 API
    rpc sai_grpc_get_srv6_sidlist_stats_ext(sai_grpc_get_srv6_sidlist_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_srv6_sidlist_stats_fn)(_In_ sai_object_id_t srv6_sidlist_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // srv6_sidlist attrs: 
    // 
        // 
    // srv6 API
    rpc sai_grpc_clear_srv6_sidlist_stats(sai_grpc_clear_srv6_sidlist_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_my_sid_entry_fn)(_In_ const sai_my_sid_entry_t *my_sid_entry, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // my_sid_entry mandatory attrs: 
    // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR, 
        // 
    // srv6 API
    rpc sai_grpc_create_my_sid_entry(sai_grpc_create_my_sid_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_remove_my_sid_entry_fn)(_In_ const sai_my_sid_entry_t *my_sid_entry)
    // my_sid_entry attrs: 
    // 
        // 
    // srv6 API
    rpc sai_grpc_remove_my_sid_entry(sai_grpc_remove_my_sid_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_my_sid_entry_attribute_fn)(_In_ const sai_my_sid_entry_t *my_sid_entry, _In_ const sai_attribute_t *attr)
    // my_sid_entry attrs: 
    //  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR,  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR,  
        // SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID,  
        // SAI_MY_SID_ENTRY_ATTR_VRF,  
        // SAI_MY_SID_ENTRY_ATTR_COUNTER_ID, 
        // 
    // srv6 API
    rpc sai_grpc_set_my_sid_entry_attribute(sai_grpc_set_my_sid_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_my_sid_entry_attribute_fn)(_In_ const sai_my_sid_entry_t *my_sid_entry, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // my_sid_entry attrs: 
    //  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR,  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR,  
        // SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID,  
        // SAI_MY_SID_ENTRY_ATTR_VRF,  
        // SAI_MY_SID_ENTRY_ATTR_COUNTER_ID, 
        // 
    // srv6 API
    rpc sai_grpc_get_my_sid_entry_attribute(sai_grpc_get_my_sid_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_bulk_create_my_sid_entry_fn)(_In_ uint32_t object_count, _In_ const sai_my_sid_entry_t *my_sid_entry, _In_ const uint32_t *attr_count, _In_ const sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // my_sid_entry mandatory attrs: 
    // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR, 
        // 
    // srv6 API
    rpc sai_grpc_bulk_create_my_sid_entry(sai_grpc_bulk_create_my_sid_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_remove_my_sid_entry_fn)(_In_ uint32_t object_count, _In_ const sai_my_sid_entry_t *my_sid_entry, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // my_sid_entry attrs: 
    // 
        // 
    // srv6 API
    rpc sai_grpc_bulk_remove_my_sid_entry(sai_grpc_bulk_remove_my_sid_entry_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_set_my_sid_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_my_sid_entry_t *my_sid_entry, _In_ const sai_attribute_t *attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // my_sid_entry attrs: 
    //  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR,  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR,  
        // SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID,  
        // SAI_MY_SID_ENTRY_ATTR_VRF,  
        // SAI_MY_SID_ENTRY_ATTR_COUNTER_ID, 
        // 
    // srv6 API
    rpc sai_grpc_bulk_set_my_sid_entry_attribute(sai_grpc_bulk_set_my_sid_entry_attribute_msg_args)        returns (sai_grpc_status_t );
    

    // sai_status_t(*sai_bulk_get_my_sid_entry_attribute_fn)(_In_ uint32_t object_count, _In_ const sai_my_sid_entry_t *my_sid_entry, _In_ const uint32_t *attr_count, _Inout_ sai_attribute_t **attr_list, _In_ sai_bulk_op_error_mode_t mode, _Out_ sai_status_t *object_statuses)
    // my_sid_entry attrs: 
    //  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR,  
        // SAI_MY_SID_ENTRY_ATTR_ENDPOINT_BEHAVIOR_FLAVOR,  
        // SAI_MY_SID_ENTRY_ATTR_PACKET_ACTION,  
        // SAI_MY_SID_ENTRY_ATTR_TRAP_PRIORITY,  
        // SAI_MY_SID_ENTRY_ATTR_NEXT_HOP_ID,  
        // SAI_MY_SID_ENTRY_ATTR_TUNNEL_ID,  
        // SAI_MY_SID_ENTRY_ATTR_VRF,  
        // SAI_MY_SID_ENTRY_ATTR_COUNTER_ID, 
        // 
    // srv6 API
    rpc sai_grpc_bulk_get_my_sid_entry_attribute(sai_grpc_bulk_get_my_sid_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of stp API
    // sai_status_t(*sai_create_stp_fn)(_Out_ sai_object_id_t *stp_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // stp mandatory attrs: 
    // 
        // 
    // stp API
    rpc sai_grpc_create_stp(sai_grpc_create_stp_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_stp_fn)(_In_ sai_object_id_t stp_id)
    // stp attrs: 
    // 
        // 
    // stp API
    rpc sai_grpc_remove_stp(sai_grpc_remove_stp_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_stp_attribute_fn)(_In_ sai_object_id_t stp_id, _In_ const sai_attribute_t *attr)
    // stp attrs: 
    // 
        // 
    // stp API
    rpc sai_grpc_set_stp_attribute(sai_grpc_set_stp_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_stp_attribute_fn)(_In_ sai_object_id_t stp_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // stp attrs: 
    //  
        // SAI_STP_ATTR_VLAN_LIST,  
        // SAI_STP_ATTR_BRIDGE_ID,  
        // SAI_STP_ATTR_PORT_LIST, 
        // 
    // stp API
    rpc sai_grpc_get_stp_attribute(sai_grpc_get_stp_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_stp_port_fn)(_Out_ sai_object_id_t *stp_port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // stp_port mandatory attrs: 
    // SAI_STP_PORT_ATTR_STP, SAI_STP_PORT_ATTR_BRIDGE_PORT, SAI_STP_PORT_ATTR_STATE, 
        // 
    // stp API
    rpc sai_grpc_create_stp_port(sai_grpc_create_stp_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_stp_port_fn)(_In_ sai_object_id_t stp_port_id)
    // stp_port attrs: 
    // 
        // 
    // stp API
    rpc sai_grpc_remove_stp_port(sai_grpc_remove_stp_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_stp_port_attribute_fn)(_In_ sai_object_id_t stp_port_id, _In_ const sai_attribute_t *attr)
    // stp_port attrs: 
    //  
        // SAI_STP_PORT_ATTR_STATE, 
        // 
    // stp API
    rpc sai_grpc_set_stp_port_attribute(sai_grpc_set_stp_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_stp_port_attribute_fn)(_In_ sai_object_id_t stp_port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // stp_port attrs: 
    //  
        // SAI_STP_PORT_ATTR_STP,  
        // SAI_STP_PORT_ATTR_BRIDGE_PORT,  
        // SAI_STP_PORT_ATTR_STATE, 
        // 
    // stp API
    rpc sai_grpc_get_stp_port_attribute(sai_grpc_get_stp_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of switch API
    // sai_status_t(*sai_switch_register_read_fn)(_In_ uint64_t platform_context, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _Out_ uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_register_read(sai_grpc_switch_register_read_msg_args)        returns (sai_grpc_uint32_t );
    

    // sai_status_t(*sai_switch_register_write_fn)(_In_ uint64_t platform_context, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _In_ const uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_register_write(sai_grpc_switch_register_write_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_switch_mdio_read_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _Out_ uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_mdio_read(sai_grpc_switch_mdio_read_msg_args)        returns (sai_grpc_uint32_t );
    

    // sai_status_t(*sai_switch_mdio_write_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _In_ const uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_mdio_write(sai_grpc_switch_mdio_write_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_switch_mdio_cl22_read_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _Out_ uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_mdio_cl22_read(sai_grpc_switch_mdio_cl22_read_msg_args)        returns (sai_grpc_uint32_t );
    

    // sai_status_t(*sai_switch_mdio_cl22_write_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t device_addr, _In_ uint32_t start_reg_addr, _In_ uint32_t number_of_registers, _In_ const uint32_t *reg_val)
        // 
    // switch API
    rpc sai_grpc_switch_mdio_cl22_write(sai_grpc_switch_mdio_cl22_write_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_switch_fn)(_Out_ sai_object_id_t *switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // switch mandatory attrs: 
    // SAI_SWITCH_ATTR_INIT_SWITCH, SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS, SAI_SWITCH_ATTR_PLATFROM_CONTEXT, SAI_SWITCH_ATTR_REGISTER_READ, SAI_SWITCH_ATTR_REGISTER_WRITE, SAI_SWITCH_ATTR_SWITCH_ID, SAI_SWITCH_ATTR_MAX_SYSTEM_CORES, SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST, 
        // 
    // switch API
    rpc sai_grpc_create_switch(sai_grpc_create_switch_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_switch_fn)(_In_ sai_object_id_t switch_id)
    // switch attrs: 
    // 
        // 
    // switch API
    rpc sai_grpc_remove_switch(sai_grpc_remove_switch_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_switch_attribute_fn)(_In_ sai_object_id_t switch_id, _In_ const sai_attribute_t *attr)
    // switch attrs: 
    //  
        // SAI_SWITCH_ATTR_INGRESS_ACL,  
        // SAI_SWITCH_ATTR_EGRESS_ACL,  
        // SAI_SWITCH_ATTR_RESTART_WARM,  
        // SAI_SWITCH_ATTR_WARM_RECOVER,  
        // SAI_SWITCH_ATTR_SWITCHING_MODE,  
        // SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE,  
        // SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE,  
        // SAI_SWITCH_ATTR_SRC_MAC_ADDRESS,  
        // SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_SWITCH_ATTR_FDB_AGING_TIME,  
        // SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV4,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV6,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV4,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV6,  
        // SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL,  
        // SAI_SWITCH_ATTR_QOS_DEFAULT_TC,  
        // SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE,  
        // SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY,  
        // SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_FAST_API_ENABLE,  
        // SAI_SWITCH_ATTR_MIRROR_TC,  
        // SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY,  
        // SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL,  
        // SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL,  
        // SAI_SWITCH_ATTR_TPID_OUTER_VLAN,  
        // SAI_SWITCH_ATTR_TPID_INNER_VLAN,  
        // SAI_SWITCH_ATTR_CRC_CHECK_ENABLE,  
        // SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE,  
        // SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE,  
        // SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC,  
        // SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT,  
        // SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL,  
        // SAI_SWITCH_ATTR_TAM_OBJECT_ID,  
        // SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_PRE_SHUTDOWN,  
        // SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID,  
        // SAI_SWITCH_ATTR_NAT_ENABLE,  
        // SAI_SWITCH_ATTR_REGISTER_READ,  
        // SAI_SWITCH_ATTR_REGISTER_WRITE,  
        // SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE,  
        // SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP,  
        // SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH,  
        // SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,  
        // SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE,  
        // SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST,  
        // SAI_SWITCH_ATTR_PRE_INGRESS_ACL,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP,  
        // SAI_SWITCH_ATTR_IPSEC_OBJECT_ID,  
        // SAI_SWITCH_ATTR_IPSEC_SA_TAG_TPID,  
        // SAI_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_NAT_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_ECMP_MEMBER_COUNT,  
        // SAI_SWITCH_ATTR_ARS_PROFILE,  
        // SAI_SWITCH_ATTR_CREDIT_WD,  
        // SAI_SWITCH_ATTR_CREDIT_WD_TIMER,  
        // SAI_SWITCH_ATTR_SWITCH_ISOLATE,  
        // SAI_SWITCH_ATTR_HOSTIF_OPER_STATUS_UPDATE_MODE,  
        // SAI_SWITCH_ATTR_SWITCH_ASIC_SDK_HEALTH_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_REG_FATAL_SWITCH_ASIC_SDK_HEALTH_CATEGORY,  
        // SAI_SWITCH_ATTR_REG_WARNING_SWITCH_ASIC_SDK_HEALTH_CATEGORY,  
        // SAI_SWITCH_ATTR_REG_NOTICE_SWITCH_ASIC_SDK_HEALTH_CATEGORY, 
        // 
    // switch API
    rpc sai_grpc_set_switch_attribute(sai_grpc_set_switch_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_switch_attribute_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // switch attrs: 
    //  
        // SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS,  
        // SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS,  
        // SAI_SWITCH_ATTR_PORT_LIST,  
        // SAI_SWITCH_ATTR_PORT_MAX_MTU,  
        // SAI_SWITCH_ATTR_CPU_PORT,  
        // SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS,  
        // SAI_SWITCH_ATTR_FDB_TABLE_SIZE,  
        // SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE,  
        // SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE,  
        // SAI_SWITCH_ATTR_LAG_MEMBERS,  
        // SAI_SWITCH_ATTR_NUMBER_OF_LAGS,  
        // SAI_SWITCH_ATTR_ECMP_MEMBERS,  
        // SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS,  
        // SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES,  
        // SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES,  
        // SAI_SWITCH_ATTR_NUMBER_OF_QUEUES,  
        // SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES,  
        // SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED,  
        // SAI_SWITCH_ATTR_OPER_STATUS,  
        // SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS,  
        // SAI_SWITCH_ATTR_TEMP_LIST,  
        // SAI_SWITCH_ATTR_MAX_TEMP,  
        // SAI_SWITCH_ATTR_AVERAGE_TEMP,  
        // SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE,  
        // SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE,  
        // SAI_SWITCH_ATTR_DEFAULT_VLAN_ID,  
        // SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID,  
        // SAI_SWITCH_ATTR_MAX_STP_INSTANCE,  
        // SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID,  
        // SAI_SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID,  
        // SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID,  
        // SAI_SWITCH_ATTR_INGRESS_ACL,  
        // SAI_SWITCH_ATTR_EGRESS_ACL,  
        // SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES,  
        // SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS,  
        // SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL,  
        // SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP,  
        // SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE,  
        // SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM,  
        // SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE,  
        // SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP,  
        // SAI_SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY,  
        // SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP,  
        // SAI_SWITCH_ATTR_ECMP_HASH,  
        // SAI_SWITCH_ATTR_LAG_HASH,  
        // SAI_SWITCH_ATTR_RESTART_WARM,  
        // SAI_SWITCH_ATTR_WARM_RECOVER,  
        // SAI_SWITCH_ATTR_RESTART_TYPE,  
        // SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL,  
        // SAI_SWITCH_ATTR_NV_STORAGE_SIZE,  
        // SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT,  
        // SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT,  
        // SAI_SWITCH_ATTR_ACL_CAPABILITY,  
        // SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY,  
        // SAI_SWITCH_ATTR_SWITCHING_MODE,  
        // SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE,  
        // SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE,  
        // SAI_SWITCH_ATTR_SRC_MAC_ADDRESS,  
        // SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_SWITCH_ATTR_FDB_AGING_TIME,  
        // SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET,  
        // SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV4,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4,  
        // SAI_SWITCH_ATTR_ECMP_HASH_IPV6,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET,  
        // SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV4,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4,  
        // SAI_SWITCH_ATTR_LAG_HASH_IPV6,  
        // SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL,  
        // SAI_SWITCH_ATTR_QOS_DEFAULT_TC,  
        // SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE,  
        // SAI_SWITCH_ATTR_SWITCH_PROFILE_ID,  
        // SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO,  
        // SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME,  
        // SAI_SWITCH_ATTR_INIT_SWITCH,  
        // SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY,  
        // SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_FAST_API_ENABLE,  
        // SAI_SWITCH_ATTR_MIRROR_TC,  
        // SAI_SWITCH_ATTR_ACL_STAGE_INGRESS,  
        // SAI_SWITCH_ATTR_ACL_STAGE_EGRESS,  
        // SAI_SWITCH_ATTR_SRV6_MAX_SID_DEPTH,  
        // SAI_SWITCH_ATTR_SRV6_TLV_TYPE,  
        // SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES,  
        // SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY,  
        // SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION,  
        // SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE,  
        // SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL,  
        // SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE,  
        // SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL,  
        // SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE,  
        // SAI_SWITCH_ATTR_TPID_OUTER_VLAN,  
        // SAI_SWITCH_ATTR_TPID_INNER_VLAN,  
        // SAI_SWITCH_ATTR_CRC_CHECK_ENABLE,  
        // SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE,  
        // SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION,  
        // SAI_SWITCH_ATTR_MAX_BFD_SESSION,  
        // SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE,  
        // SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE,  
        // SAI_SWITCH_ATTR_MIN_BFD_RX,  
        // SAI_SWITCH_ATTR_MIN_BFD_TX,  
        // SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE,  
        // SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC,  
        // SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT,  
        // SAI_SWITCH_ATTR_MAX_MIRROR_SESSION,  
        // SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION,  
        // SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE,  
        // SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL,  
        // SAI_SWITCH_ATTR_TAM_OBJECT_ID,  
        // SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST,  
        // SAI_SWITCH_ATTR_PRE_SHUTDOWN,  
        // SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID,  
        // SAI_SWITCH_ATTR_NAT_ENABLE,  
        // SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS,  
        // SAI_SWITCH_ATTR_PLATFROM_CONTEXT,  
        // SAI_SWITCH_ATTR_REGISTER_READ,  
        // SAI_SWITCH_ATTR_REGISTER_WRITE,  
        // SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST,  
        // SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD,  
        // SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE,  
        // SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE,  
        // SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP,  
        // SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH,  
        // SAI_SWITCH_ATTR_FIRMWARE_STATUS,  
        // SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION,  
        // SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION,  
        // SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST,  
        // SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT,  
        // SAI_SWITCH_ATTR_TYPE,  
        // SAI_SWITCH_ATTR_MACSEC_OBJECT_LIST,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP,  
        // SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP,  
        // SAI_SWITCH_ATTR_SWITCH_ID,  
        // SAI_SWITCH_ATTR_MAX_SYSTEM_CORES,  
        // SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST,  
        // SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS,  
        // SAI_SWITCH_ATTR_SYSTEM_PORT_LIST,  
        // SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS,  
        // SAI_SWITCH_ATTR_FABRIC_PORT_LIST,  
        // SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE,  
        // SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE,  
        // SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE,  
        // SAI_SWITCH_ATTR_TUNNEL_OBJECTS_LIST,  
        // SAI_SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE,  
        // SAI_SWITCH_ATTR_PRE_INGRESS_ACL,  
        // SAI_SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY,  
        // SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY,  
        // SAI_SWITCH_ATTR_SLAVE_MDIO_ADDR_LIST,  
        // SAI_SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY,  
        // SAI_SWITCH_ATTR_MY_MAC_LIST,  
        // SAI_SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES,  
        // SAI_SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES,  
        // SAI_SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES,  
        // SAI_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP,  
        // SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP,  
        // SAI_SWITCH_ATTR_IPSEC_OBJECT_ID,  
        // SAI_SWITCH_ATTR_IPSEC_SA_TAG_TPID,  
        // SAI_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY,  
        // SAI_SWITCH_ATTR_NAT_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT,  
        // SAI_SWITCH_ATTR_ECMP_MEMBER_COUNT,  
        // SAI_SWITCH_ATTR_ARS_PROFILE,  
        // SAI_SWITCH_ATTR_ACL_STAGE_POST_INGRESS,  
        // SAI_SWITCH_ATTR_CREDIT_WD,  
        // SAI_SWITCH_ATTR_CREDIT_WD_TIMER,  
        // SAI_SWITCH_ATTR_SWITCH_ISOLATE,  
        // SAI_SWITCH_ATTR_HOSTIF_OPER_STATUS_UPDATE_MODE,  
        // SAI_SWITCH_ATTR_SWITCH_ASIC_SDK_HEALTH_EVENT_NOTIFY,  
        // SAI_SWITCH_ATTR_REG_FATAL_SWITCH_ASIC_SDK_HEALTH_CATEGORY,  
        // SAI_SWITCH_ATTR_REG_WARNING_SWITCH_ASIC_SDK_HEALTH_CATEGORY,  
        // SAI_SWITCH_ATTR_REG_NOTICE_SWITCH_ASIC_SDK_HEALTH_CATEGORY,  
        // SAI_SWITCH_ATTR_ACL_CHAIN_LIST, 
        // 
    // switch API
    rpc sai_grpc_get_switch_attribute(sai_grpc_get_switch_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_switch_stats_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // switch stats: 
    // in_drop_reason_range_base, in_configured_drop_reasons_0_dropped_pkts, in_configured_drop_reasons_1_dropped_pkts, in_configured_drop_reasons_2_dropped_pkts, in_configured_drop_reasons_3_dropped_pkts, in_configured_drop_reasons_4_dropped_pkts, in_configured_drop_reasons_5_dropped_pkts, in_configured_drop_reasons_6_dropped_pkts, in_configured_drop_reasons_7_dropped_pkts, out_drop_reason_range_base, out_configured_drop_reasons_0_dropped_pkts, out_configured_drop_reasons_1_dropped_pkts, out_configured_drop_reasons_2_dropped_pkts, out_configured_drop_reasons_3_dropped_pkts, out_configured_drop_reasons_4_dropped_pkts, out_configured_drop_reasons_5_dropped_pkts, out_configured_drop_reasons_6_dropped_pkts, out_configured_drop_reasons_7_dropped_pkts, fabric_drop_reason_range_base, ecc_drop, reachability_drop, highest_queue_congestion_level, global_drop, packet_integrity_drop, 
        // 
    // switch API
    rpc sai_grpc_get_switch_stats(sai_grpc_get_switch_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_switch_stats_ext_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // switch stats: 
    // in_drop_reason_range_base, in_configured_drop_reasons_0_dropped_pkts, in_configured_drop_reasons_1_dropped_pkts, in_configured_drop_reasons_2_dropped_pkts, in_configured_drop_reasons_3_dropped_pkts, in_configured_drop_reasons_4_dropped_pkts, in_configured_drop_reasons_5_dropped_pkts, in_configured_drop_reasons_6_dropped_pkts, in_configured_drop_reasons_7_dropped_pkts, out_drop_reason_range_base, out_configured_drop_reasons_0_dropped_pkts, out_configured_drop_reasons_1_dropped_pkts, out_configured_drop_reasons_2_dropped_pkts, out_configured_drop_reasons_3_dropped_pkts, out_configured_drop_reasons_4_dropped_pkts, out_configured_drop_reasons_5_dropped_pkts, out_configured_drop_reasons_6_dropped_pkts, out_configured_drop_reasons_7_dropped_pkts, fabric_drop_reason_range_base, ecc_drop, reachability_drop, highest_queue_congestion_level, global_drop, packet_integrity_drop, 
        // 
    // switch API
    rpc sai_grpc_get_switch_stats_ext(sai_grpc_get_switch_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_switch_stats_fn)(_In_ sai_object_id_t switch_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // switch attrs: 
    // 
        // 
    // switch API
    rpc sai_grpc_clear_switch_stats(sai_grpc_clear_switch_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_switch_tunnel_fn)(_Out_ sai_object_id_t *switch_tunnel_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // switch_tunnel mandatory attrs: 
    // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_TYPE, 
        // 
    // switch API
    rpc sai_grpc_create_switch_tunnel(sai_grpc_create_switch_tunnel_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_switch_tunnel_fn)(_In_ sai_object_id_t switch_tunnel_id)
    // switch_tunnel attrs: 
    // 
        // 
    // switch API
    rpc sai_grpc_remove_switch_tunnel(sai_grpc_remove_switch_tunnel_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_switch_tunnel_attribute_fn)(_In_ sai_object_id_t switch_tunnel_id, _In_ const sai_attribute_t *attr)
    // switch_tunnel attrs: 
    //  
        // SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE,  
        // SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT,  
        // SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK,  
        // SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP, 
        // 
    // switch API
    rpc sai_grpc_set_switch_tunnel_attribute(sai_grpc_set_switch_tunnel_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_switch_tunnel_attribute_fn)(_In_ sai_object_id_t switch_tunnel_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // switch_tunnel attrs: 
    //  
        // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_TYPE,  
        // SAI_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE,  
        // SAI_SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS,  
        // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE,  
        // SAI_SWITCH_TUNNEL_ATTR_DECAP_MAPPERS,  
        // SAI_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE,  
        // SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT,  
        // SAI_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK,  
        // SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP,  
        // SAI_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP, 
        // 
    // switch API
    rpc sai_grpc_get_switch_tunnel_attribute(sai_grpc_get_switch_tunnel_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of system_port API
    // sai_status_t(*sai_create_system_port_fn)(_Out_ sai_object_id_t *system_port_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // system_port mandatory attrs: 
    // SAI_SYSTEM_PORT_ATTR_CONFIG_INFO, 
        // 
    // system_port API
    rpc sai_grpc_create_system_port(sai_grpc_create_system_port_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_system_port_fn)(_In_ sai_object_id_t system_port_id)
    // system_port attrs: 
    // 
        // 
    // system_port API
    rpc sai_grpc_remove_system_port(sai_grpc_remove_system_port_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_system_port_attribute_fn)(_In_ sai_object_id_t system_port_id, _In_ const sai_attribute_t *attr)
    // system_port attrs: 
    //  
        // SAI_SYSTEM_PORT_ATTR_ADMIN_STATE,  
        // SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, 
        // 
    // system_port API
    rpc sai_grpc_set_system_port_attribute(sai_grpc_set_system_port_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_system_port_attribute_fn)(_In_ sai_object_id_t system_port_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // system_port attrs: 
    //  
        // SAI_SYSTEM_PORT_ATTR_TYPE,  
        // SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS,  
        // SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST,  
        // SAI_SYSTEM_PORT_ATTR_PORT,  
        // SAI_SYSTEM_PORT_ATTR_ADMIN_STATE,  
        // SAI_SYSTEM_PORT_ATTR_CONFIG_INFO,  
        // SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, 
        // 
    // system_port API
    rpc sai_grpc_get_system_port_attribute(sai_grpc_get_system_port_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of tam API
    // sai_status_t(*sai_create_tam_fn)(_Out_ sai_object_id_t *tam_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam mandatory attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_create_tam(sai_grpc_create_tam_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_fn)(_In_ sai_object_id_t tam_id)
    // tam attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam(sai_grpc_remove_tam_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_tam_attribute_fn)(_In_ sai_object_id_t tam_id, _In_ const sai_attribute_t *attr)
    // tam attrs: 
    //  
        // SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST,  
        // SAI_TAM_ATTR_EVENT_OBJECTS_LIST,  
        // SAI_TAM_ATTR_INT_OBJECTS_LIST, 
        // 
    // tam API
    rpc sai_grpc_set_tam_attribute(sai_grpc_set_tam_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_attribute_fn)(_In_ sai_object_id_t tam_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam attrs: 
    //  
        // SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST,  
        // SAI_TAM_ATTR_EVENT_OBJECTS_LIST,  
        // SAI_TAM_ATTR_INT_OBJECTS_LIST,  
        // SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST, 
        // 
    // tam API
    rpc sai_grpc_get_tam_attribute(sai_grpc_get_tam_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_tam_math_func_fn)(_Out_ sai_object_id_t *tam_math_func_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_math_func mandatory attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_create_tam_math_func(sai_grpc_create_tam_math_func_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_math_func_fn)(_In_ sai_object_id_t tam_math_func_id)
    // tam_math_func attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_math_func(sai_grpc_remove_tam_math_func_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_math_func_attribute_fn)(_In_ sai_object_id_t tam_math_func_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_math_func attrs: 
    //  
        // SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE, 
        // 
    // tam API
    rpc sai_grpc_get_tam_math_func_attribute(sai_grpc_get_tam_math_func_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_math_func_attribute_fn)(_In_ sai_object_id_t tam_math_func_id, _In_ const sai_attribute_t *attr)
    // tam_math_func attrs: 
    //  
        // SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE, 
        // 
    // tam API
    rpc sai_grpc_set_tam_math_func_attribute(sai_grpc_set_tam_math_func_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_event_threshold_fn)(_Out_ sai_object_id_t *tam_event_threshold_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_event_threshold mandatory attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_create_tam_event_threshold(sai_grpc_create_tam_event_threshold_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_event_threshold_fn)(_In_ sai_object_id_t tam_event_threshold_id)
    // tam_event_threshold attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_event_threshold(sai_grpc_remove_tam_event_threshold_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_event_threshold_attribute_fn)(_In_ sai_object_id_t tam_event_threshold_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_event_threshold attrs: 
    //  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_RATE,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT, 
        // 
    // tam API
    rpc sai_grpc_get_tam_event_threshold_attribute(sai_grpc_get_tam_event_threshold_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_event_threshold_attribute_fn)(_In_ sai_object_id_t tam_event_threshold_id, _In_ const sai_attribute_t *attr)
    // tam_event_threshold attrs: 
    //  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_RATE,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE,  
        // SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT, 
        // 
    // tam API
    rpc sai_grpc_set_tam_event_threshold_attribute(sai_grpc_set_tam_event_threshold_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_int_fn)(_Out_ sai_object_id_t *tam_int_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_int mandatory attrs: 
    // SAI_TAM_INT_ATTR_TYPE, SAI_TAM_INT_ATTR_DEVICE_ID, SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE, SAI_TAM_INT_ATTR_INT_PRESENCE_PB1, SAI_TAM_INT_ATTR_INT_PRESENCE_PB2, SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE, SAI_TAM_INT_ATTR_INLINE, SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL, SAI_TAM_INT_ATTR_REPORT_ID, 
        // 
    // tam API
    rpc sai_grpc_create_tam_int(sai_grpc_create_tam_int_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_int_fn)(_In_ sai_object_id_t tam_int_id)
    // tam_int attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_int(sai_grpc_remove_tam_int_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_int_attribute_fn)(_In_ sai_object_id_t tam_int_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_int attrs: 
    //  
        // SAI_TAM_INT_ATTR_TYPE,  
        // SAI_TAM_INT_ATTR_DEVICE_ID,  
        // SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE,  
        // SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE,  
        // SAI_TAM_INT_ATTR_INT_PRESENCE_PB1,  
        // SAI_TAM_INT_ATTR_INT_PRESENCE_PB2,  
        // SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE,  
        // SAI_TAM_INT_ATTR_INLINE,  
        // SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL,  
        // SAI_TAM_INT_ATTR_TRACE_VECTOR,  
        // SAI_TAM_INT_ATTR_ACTION_VECTOR,  
        // SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP,  
        // SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE,  
        // SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE,  
        // SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS,  
        // SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD,  
        // SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY,  
        // SAI_TAM_INT_ATTR_ACL_GROUP,  
        // SAI_TAM_INT_ATTR_MAX_HOP_COUNT,  
        // SAI_TAM_INT_ATTR_MAX_LENGTH,  
        // SAI_TAM_INT_ATTR_NAME_SPACE_ID,  
        // SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL,  
        // SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_TAM_INT_ATTR_COLLECTOR_LIST,  
        // SAI_TAM_INT_ATTR_MATH_FUNC,  
        // SAI_TAM_INT_ATTR_REPORT_ID, 
        // 
    // tam API
    rpc sai_grpc_get_tam_int_attribute(sai_grpc_get_tam_int_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_int_attribute_fn)(_In_ sai_object_id_t tam_int_id, _In_ const sai_attribute_t *attr)
    // tam_int attrs: 
    //  
        // SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE,  
        // SAI_TAM_INT_ATTR_TRACE_VECTOR,  
        // SAI_TAM_INT_ATTR_ACTION_VECTOR,  
        // SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP,  
        // SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE,  
        // SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE,  
        // SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS,  
        // SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD,  
        // SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY,  
        // SAI_TAM_INT_ATTR_ACL_GROUP,  
        // SAI_TAM_INT_ATTR_MAX_HOP_COUNT,  
        // SAI_TAM_INT_ATTR_MAX_LENGTH,  
        // SAI_TAM_INT_ATTR_NAME_SPACE_ID,  
        // SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL,  
        // SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE,  
        // SAI_TAM_INT_ATTR_COLLECTOR_LIST,  
        // SAI_TAM_INT_ATTR_MATH_FUNC, 
        // 
    // tam API
    rpc sai_grpc_set_tam_int_attribute(sai_grpc_set_tam_int_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_tel_type_fn)(_Out_ sai_object_id_t *tam_tel_type_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_tel_type mandatory attrs: 
    // SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE, SAI_TAM_TEL_TYPE_ATTR_REPORT_ID, 
        // 
    // tam API
    rpc sai_grpc_create_tam_tel_type(sai_grpc_create_tam_tel_type_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_tel_type_fn)(_In_ sai_object_id_t tam_tel_type_id)
    // tam_tel_type attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_tel_type(sai_grpc_remove_tam_tel_type_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_tel_type_attribute_fn)(_In_ sai_object_id_t tam_tel_type_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_tel_type attrs: 
    //  
        // SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE,  
        // SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q,  
        // SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE,  
        // SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE,  
        // SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC,  
        // SAI_TAM_TEL_TYPE_ATTR_REPORT_ID, 
        // 
    // tam API
    rpc sai_grpc_get_tam_tel_type_attribute(sai_grpc_get_tam_tel_type_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_tel_type_attribute_fn)(_In_ sai_object_id_t tam_tel_type_id, _In_ const sai_attribute_t *attr)
    // tam_tel_type attrs: 
    //  
        // SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS,  
        // SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q,  
        // SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE,  
        // SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE,  
        // SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC, 
        // 
    // tam API
    rpc sai_grpc_set_tam_tel_type_attribute(sai_grpc_set_tam_tel_type_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_report_fn)(_Out_ sai_object_id_t *tam_report_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_report mandatory attrs: 
    // SAI_TAM_REPORT_ATTR_TYPE, 
        // 
    // tam API
    rpc sai_grpc_create_tam_report(sai_grpc_create_tam_report_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_report_fn)(_In_ sai_object_id_t tam_report_id)
    // tam_report attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_report(sai_grpc_remove_tam_report_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_report_attribute_fn)(_In_ sai_object_id_t tam_report_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_report attrs: 
    //  
        // SAI_TAM_REPORT_ATTR_TYPE,  
        // SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS,  
        // SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY,  
        // SAI_TAM_REPORT_ATTR_QUOTA,  
        // SAI_TAM_REPORT_ATTR_REPORT_MODE,  
        // SAI_TAM_REPORT_ATTR_REPORT_INTERVAL,  
        // SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER,  
        // SAI_TAM_REPORT_ATTR_TEMPLATE_REPORT_INTERVAL, 
        // 
    // tam API
    rpc sai_grpc_get_tam_report_attribute(sai_grpc_get_tam_report_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_report_attribute_fn)(_In_ sai_object_id_t tam_report_id, _In_ const sai_attribute_t *attr)
    // tam_report attrs: 
    //  
        // SAI_TAM_REPORT_ATTR_TYPE,  
        // SAI_TAM_REPORT_ATTR_QUOTA,  
        // SAI_TAM_REPORT_ATTR_REPORT_INTERVAL,  
        // SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER,  
        // SAI_TAM_REPORT_ATTR_TEMPLATE_REPORT_INTERVAL, 
        // 
    // tam API
    rpc sai_grpc_set_tam_report_attribute(sai_grpc_set_tam_report_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_telemetry_fn)(_Out_ sai_object_id_t *tam_telemetry_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_telemetry mandatory attrs: 
    // SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST, 
        // 
    // tam API
    rpc sai_grpc_create_tam_telemetry(sai_grpc_create_tam_telemetry_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_telemetry_fn)(_In_ sai_object_id_t tam_telemetry_id)
    // tam_telemetry attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_telemetry(sai_grpc_remove_tam_telemetry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_telemetry_attribute_fn)(_In_ sai_object_id_t tam_telemetry_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_telemetry attrs: 
    //  
        // SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST,  
        // SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST,  
        // SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT,  
        // SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL, 
        // 
    // tam API
    rpc sai_grpc_get_tam_telemetry_attribute(sai_grpc_get_tam_telemetry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_telemetry_attribute_fn)(_In_ sai_object_id_t tam_telemetry_id, _In_ const sai_attribute_t *attr)
    // tam_telemetry attrs: 
    //  
        // SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST,  
        // SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT,  
        // SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL, 
        // 
    // tam API
    rpc sai_grpc_set_tam_telemetry_attribute(sai_grpc_set_tam_telemetry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_transport_fn)(_Out_ sai_object_id_t *tam_transport_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_transport mandatory attrs: 
    // SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE, 
        // 
    // tam API
    rpc sai_grpc_create_tam_transport(sai_grpc_create_tam_transport_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_transport_fn)(_In_ sai_object_id_t tam_transport_id)
    // tam_transport attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_transport(sai_grpc_remove_tam_transport_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_transport_attribute_fn)(_In_ sai_object_id_t tam_transport_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_transport attrs: 
    //  
        // SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE,  
        // SAI_TAM_TRANSPORT_ATTR_SRC_PORT,  
        // SAI_TAM_TRANSPORT_ATTR_DST_PORT,  
        // SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE,  
        // SAI_TAM_TRANSPORT_ATTR_MTU, 
        // 
    // tam API
    rpc sai_grpc_get_tam_transport_attribute(sai_grpc_get_tam_transport_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_transport_attribute_fn)(_In_ sai_object_id_t tam_transport_id, _In_ const sai_attribute_t *attr)
    // tam_transport attrs: 
    //  
        // SAI_TAM_TRANSPORT_ATTR_SRC_PORT,  
        // SAI_TAM_TRANSPORT_ATTR_DST_PORT,  
        // SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE,  
        // SAI_TAM_TRANSPORT_ATTR_MTU, 
        // 
    // tam API
    rpc sai_grpc_set_tam_transport_attribute(sai_grpc_set_tam_transport_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_collector_fn)(_Out_ sai_object_id_t *tam_collector_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_collector mandatory attrs: 
    // SAI_TAM_COLLECTOR_ATTR_SRC_IP, SAI_TAM_COLLECTOR_ATTR_DST_IP, SAI_TAM_COLLECTOR_ATTR_TRANSPORT, SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE, 
        // 
    // tam API
    rpc sai_grpc_create_tam_collector(sai_grpc_create_tam_collector_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_collector_fn)(_In_ sai_object_id_t tam_collector_id)
    // tam_collector attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_collector(sai_grpc_remove_tam_collector_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_collector_attribute_fn)(_In_ sai_object_id_t tam_collector_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_collector attrs: 
    //  
        // SAI_TAM_COLLECTOR_ATTR_SRC_IP,  
        // SAI_TAM_COLLECTOR_ATTR_DST_IP,  
        // SAI_TAM_COLLECTOR_ATTR_LOCALHOST,  
        // SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID,  
        // SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE,  
        // SAI_TAM_COLLECTOR_ATTR_TRANSPORT,  
        // SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE, 
        // 
    // tam API
    rpc sai_grpc_get_tam_collector_attribute(sai_grpc_get_tam_collector_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_collector_attribute_fn)(_In_ sai_object_id_t tam_collector_id, _In_ const sai_attribute_t *attr)
    // tam_collector attrs: 
    //  
        // SAI_TAM_COLLECTOR_ATTR_SRC_IP,  
        // SAI_TAM_COLLECTOR_ATTR_DST_IP,  
        // SAI_TAM_COLLECTOR_ATTR_LOCALHOST,  
        // SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID,  
        // SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE,  
        // SAI_TAM_COLLECTOR_ATTR_TRANSPORT,  
        // SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE, 
        // 
    // tam API
    rpc sai_grpc_set_tam_collector_attribute(sai_grpc_set_tam_collector_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_event_action_fn)(_Out_ sai_object_id_t *tam_event_action_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_event_action mandatory attrs: 
    // SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE, 
        // 
    // tam API
    rpc sai_grpc_create_tam_event_action(sai_grpc_create_tam_event_action_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_event_action_fn)(_In_ sai_object_id_t tam_event_action_id)
    // tam_event_action attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_event_action(sai_grpc_remove_tam_event_action_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_event_action_attribute_fn)(_In_ sai_object_id_t tam_event_action_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_event_action attrs: 
    //  
        // SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE,  
        // SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE, 
        // 
    // tam API
    rpc sai_grpc_get_tam_event_action_attribute(sai_grpc_get_tam_event_action_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_event_action_attribute_fn)(_In_ sai_object_id_t tam_event_action_id, _In_ const sai_attribute_t *attr)
    // tam_event_action attrs: 
    //  
        // SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE,  
        // SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE, 
        // 
    // tam API
    rpc sai_grpc_set_tam_event_action_attribute(sai_grpc_set_tam_event_action_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tam_event_fn)(_Out_ sai_object_id_t *tam_event_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tam_event mandatory attrs: 
    // SAI_TAM_EVENT_ATTR_TYPE, SAI_TAM_EVENT_ATTR_ACTION_LIST, SAI_TAM_EVENT_ATTR_COLLECTOR_LIST, 
        // 
    // tam API
    rpc sai_grpc_create_tam_event(sai_grpc_create_tam_event_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tam_event_fn)(_In_ sai_object_id_t tam_event_id)
    // tam_event attrs: 
    // 
        // 
    // tam API
    rpc sai_grpc_remove_tam_event(sai_grpc_remove_tam_event_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tam_event_attribute_fn)(_In_ sai_object_id_t tam_event_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tam_event attrs: 
    //  
        // SAI_TAM_EVENT_ATTR_TYPE,  
        // SAI_TAM_EVENT_ATTR_ACTION_LIST,  
        // SAI_TAM_EVENT_ATTR_COLLECTOR_LIST,  
        // SAI_TAM_EVENT_ATTR_THRESHOLD,  
        // SAI_TAM_EVENT_ATTR_DSCP_VALUE, 
        // 
    // tam API
    rpc sai_grpc_get_tam_event_attribute(sai_grpc_get_tam_event_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_set_tam_event_attribute_fn)(_In_ sai_object_id_t tam_event_id, _In_ const sai_attribute_t *attr)
    // tam_event attrs: 
    //  
        // SAI_TAM_EVENT_ATTR_THRESHOLD,  
        // SAI_TAM_EVENT_ATTR_DSCP_VALUE, 
        // 
    // tam API
    rpc sai_grpc_set_tam_event_attribute(sai_grpc_set_tam_event_attribute_msg_args)        returns (sai_grpc_response);


    // Start of tunnel API
    // sai_status_t(*sai_create_tunnel_map_fn)(_Out_ sai_object_id_t *tunnel_map_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tunnel_map mandatory attrs: 
    // SAI_TUNNEL_MAP_ATTR_TYPE, 
        // 
    // tunnel API
    rpc sai_grpc_create_tunnel_map(sai_grpc_create_tunnel_map_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tunnel_map_fn)(_In_ sai_object_id_t tunnel_map_id)
    // tunnel_map attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_remove_tunnel_map(sai_grpc_remove_tunnel_map_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_tunnel_map_attribute_fn)(_In_ sai_object_id_t tunnel_map_id, _In_ const sai_attribute_t *attr)
    // tunnel_map attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_set_tunnel_map_attribute(sai_grpc_set_tunnel_map_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tunnel_map_attribute_fn)(_In_ sai_object_id_t tunnel_map_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tunnel_map attrs: 
    //  
        // SAI_TUNNEL_MAP_ATTR_TYPE,  
        // SAI_TUNNEL_MAP_ATTR_ENTRY_LIST, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_map_attribute(sai_grpc_get_tunnel_map_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_tunnel_fn)(_Out_ sai_object_id_t *tunnel_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tunnel mandatory attrs: 
    // SAI_TUNNEL_ATTR_TYPE, SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE, SAI_TUNNEL_ATTR_OVERLAY_INTERFACE, 
        // 
    // tunnel API
    rpc sai_grpc_create_tunnel(sai_grpc_create_tunnel_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tunnel_fn)(_In_ sai_object_id_t tunnel_id)
    // tunnel attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_remove_tunnel(sai_grpc_remove_tunnel_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_tunnel_attribute_fn)(_In_ sai_object_id_t tunnel_id, _In_ const sai_attribute_t *attr)
    // tunnel attrs: 
    //  
        // SAI_TUNNEL_ATTR_ENCAP_TTL_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_TTL_VAL,  
        // SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL,  
        // SAI_TUNNEL_ATTR_ENCAP_GRE_KEY,  
        // SAI_TUNNEL_ATTR_DECAP_TTL_MODE,  
        // SAI_TUNNEL_ATTR_DECAP_DSCP_MODE,  
        // SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK,  
        // SAI_TUNNEL_ATTR_SA_INDEX,  
        // SAI_TUNNEL_ATTR_IPSEC_SA_PORT_LIST,  
        // SAI_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP,  
        // SAI_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP,  
        // SAI_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY, 
        // 
    // tunnel API
    rpc sai_grpc_set_tunnel_attribute(sai_grpc_set_tunnel_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tunnel_attribute_fn)(_In_ sai_object_id_t tunnel_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tunnel attrs: 
    //  
        // SAI_TUNNEL_ATTR_TYPE,  
        // SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE,  
        // SAI_TUNNEL_ATTR_OVERLAY_INTERFACE,  
        // SAI_TUNNEL_ATTR_PEER_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_SRC_IP,  
        // SAI_TUNNEL_ATTR_ENCAP_DST_IP,  
        // SAI_TUNNEL_ATTR_ENCAP_TTL_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_TTL_VAL,  
        // SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL,  
        // SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID,  
        // SAI_TUNNEL_ATTR_ENCAP_GRE_KEY,  
        // SAI_TUNNEL_ATTR_ENCAP_ECN_MODE,  
        // SAI_TUNNEL_ATTR_ENCAP_MAPPERS,  
        // SAI_TUNNEL_ATTR_DECAP_ECN_MODE,  
        // SAI_TUNNEL_ATTR_DECAP_MAPPERS,  
        // SAI_TUNNEL_ATTR_DECAP_TTL_MODE,  
        // SAI_TUNNEL_ATTR_DECAP_DSCP_MODE,  
        // SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST,  
        // SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK,  
        // SAI_TUNNEL_ATTR_SA_INDEX,  
        // SAI_TUNNEL_ATTR_IPSEC_SA_PORT_LIST,  
        // SAI_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP,  
        // SAI_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP,  
        // SAI_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP,  
        // SAI_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP,  
        // SAI_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_attribute(sai_grpc_get_tunnel_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_tunnel_stats_fn)(_In_ sai_object_id_t tunnel_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // tunnel stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_stats(sai_grpc_get_tunnel_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_tunnel_stats_ext_fn)(_In_ sai_object_id_t tunnel_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // tunnel stats: 
    // in_octets, in_packets, out_octets, out_packets, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_stats_ext(sai_grpc_get_tunnel_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_tunnel_stats_fn)(_In_ sai_object_id_t tunnel_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // tunnel attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_clear_tunnel_stats(sai_grpc_clear_tunnel_stats_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_create_tunnel_term_table_entry_fn)(_Out_ sai_object_id_t *tunnel_term_table_entry_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tunnel_term_table_entry mandatory attrs: 
    // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID, SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE, SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP, SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP, SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE, SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID, 
        // 
    // tunnel API
    rpc sai_grpc_create_tunnel_term_table_entry(sai_grpc_create_tunnel_term_table_entry_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tunnel_term_table_entry_fn)(_In_ sai_object_id_t tunnel_term_table_entry_id)
    // tunnel_term_table_entry attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_remove_tunnel_term_table_entry(sai_grpc_remove_tunnel_term_table_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_tunnel_term_table_entry_attribute_fn)(_In_ sai_object_id_t tunnel_term_table_entry_id, _In_ const sai_attribute_t *attr)
    // tunnel_term_table_entry attrs: 
    //  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED, 
        // 
    // tunnel API
    rpc sai_grpc_set_tunnel_term_table_entry_attribute(sai_grpc_set_tunnel_term_table_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tunnel_term_table_entry_attribute_fn)(_In_ sai_object_id_t tunnel_term_table_entry_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tunnel_term_table_entry attrs: 
    //  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY,  
        // SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_term_table_entry_attribute(sai_grpc_get_tunnel_term_table_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_tunnel_map_entry_fn)(_Out_ sai_object_id_t *tunnel_map_entry_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // tunnel_map_entry mandatory attrs: 
    // SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE, SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP, SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE, SAI_TUNNEL_MAP_ENTRY_ATTR_PREFIX_AGG_ID_KEY, SAI_TUNNEL_MAP_ENTRY_ATTR_SRV6_VPN_SID_VALUE, 
        // 
    // tunnel API
    rpc sai_grpc_create_tunnel_map_entry(sai_grpc_create_tunnel_map_entry_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_tunnel_map_entry_fn)(_In_ sai_object_id_t tunnel_map_entry_id)
    // tunnel_map_entry attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_remove_tunnel_map_entry(sai_grpc_remove_tunnel_map_entry_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_tunnel_map_entry_attribute_fn)(_In_ sai_object_id_t tunnel_map_entry_id, _In_ const sai_attribute_t *attr)
    // tunnel_map_entry attrs: 
    // 
        // 
    // tunnel API
    rpc sai_grpc_set_tunnel_map_entry_attribute(sai_grpc_set_tunnel_map_entry_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_tunnel_map_entry_attribute_fn)(_In_ sai_object_id_t tunnel_map_entry_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // tunnel_map_entry attrs: 
    //  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_PREFIX_AGG_ID_KEY,  
        // SAI_TUNNEL_MAP_ENTRY_ATTR_SRV6_VPN_SID_VALUE, 
        // 
    // tunnel API
    rpc sai_grpc_get_tunnel_map_entry_attribute(sai_grpc_get_tunnel_map_entry_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of udf API
    // sai_status_t(*sai_create_udf_fn)(_Out_ sai_object_id_t *udf_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // udf mandatory attrs: 
    // SAI_UDF_ATTR_MATCH_ID, SAI_UDF_ATTR_GROUP_ID, SAI_UDF_ATTR_OFFSET, 
        // 
    // udf API
    rpc sai_grpc_create_udf(sai_grpc_create_udf_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_udf_fn)(_In_ sai_object_id_t udf_id)
    // udf attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_remove_udf(sai_grpc_remove_udf_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_udf_attribute_fn)(_In_ sai_object_id_t udf_id, _In_ const sai_attribute_t *attr)
    // udf attrs: 
    //  
        // SAI_UDF_ATTR_BASE,  
        // SAI_UDF_ATTR_HASH_MASK, 
        // 
    // udf API
    rpc sai_grpc_set_udf_attribute(sai_grpc_set_udf_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_udf_attribute_fn)(_In_ sai_object_id_t udf_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // udf attrs: 
    //  
        // SAI_UDF_ATTR_MATCH_ID,  
        // SAI_UDF_ATTR_GROUP_ID,  
        // SAI_UDF_ATTR_BASE,  
        // SAI_UDF_ATTR_OFFSET,  
        // SAI_UDF_ATTR_HASH_MASK, 
        // 
    // udf API
    rpc sai_grpc_get_udf_attribute(sai_grpc_get_udf_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_udf_match_fn)(_Out_ sai_object_id_t *udf_match_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // udf_match mandatory attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_create_udf_match(sai_grpc_create_udf_match_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_udf_match_fn)(_In_ sai_object_id_t udf_match_id)
    // udf_match attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_remove_udf_match(sai_grpc_remove_udf_match_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_udf_match_attribute_fn)(_In_ sai_object_id_t udf_match_id, _In_ const sai_attribute_t *attr)
    // udf_match attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_set_udf_match_attribute(sai_grpc_set_udf_match_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_udf_match_attribute_fn)(_In_ sai_object_id_t udf_match_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // udf_match attrs: 
    //  
        // SAI_UDF_MATCH_ATTR_L2_TYPE,  
        // SAI_UDF_MATCH_ATTR_L3_TYPE,  
        // SAI_UDF_MATCH_ATTR_GRE_TYPE,  
        // SAI_UDF_MATCH_ATTR_PRIORITY,  
        // SAI_UDF_MATCH_ATTR_L4_DST_PORT_TYPE, 
        // 
    // udf API
    rpc sai_grpc_get_udf_match_attribute(sai_grpc_get_udf_match_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_udf_group_fn)(_Out_ sai_object_id_t *udf_group_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // udf_group mandatory attrs: 
    // SAI_UDF_GROUP_ATTR_LENGTH, 
        // 
    // udf API
    rpc sai_grpc_create_udf_group(sai_grpc_create_udf_group_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_udf_group_fn)(_In_ sai_object_id_t udf_group_id)
    // udf_group attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_remove_udf_group(sai_grpc_remove_udf_group_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_udf_group_attribute_fn)(_In_ sai_object_id_t udf_group_id, _In_ const sai_attribute_t *attr)
    // udf_group attrs: 
    // 
        // 
    // udf API
    rpc sai_grpc_set_udf_group_attribute(sai_grpc_set_udf_group_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_udf_group_attribute_fn)(_In_ sai_object_id_t udf_group_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // udf_group attrs: 
    //  
        // SAI_UDF_GROUP_ATTR_UDF_LIST,  
        // SAI_UDF_GROUP_ATTR_TYPE,  
        // SAI_UDF_GROUP_ATTR_LENGTH, 
        // 
    // udf API
    rpc sai_grpc_get_udf_group_attribute(sai_grpc_get_udf_group_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of virtual_router API
    // sai_status_t(*sai_create_virtual_router_fn)(_Out_ sai_object_id_t *virtual_router_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // virtual_router mandatory attrs: 
    // 
        // 
    // virtual_router API
    rpc sai_grpc_create_virtual_router(sai_grpc_create_virtual_router_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_virtual_router_fn)(_In_ sai_object_id_t virtual_router_id)
    // virtual_router attrs: 
    // 
        // 
    // virtual_router API
    rpc sai_grpc_remove_virtual_router(sai_grpc_remove_virtual_router_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_virtual_router_attribute_fn)(_In_ sai_object_id_t virtual_router_id, _In_ const sai_attribute_t *attr)
    // virtual_router attrs: 
    //  
        // SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE,  
        // SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE,  
        // SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS,  
        // SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_LABEL, 
        // 
    // virtual_router API
    rpc sai_grpc_set_virtual_router_attribute(sai_grpc_set_virtual_router_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_virtual_router_attribute_fn)(_In_ sai_object_id_t virtual_router_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // virtual_router attrs: 
    //  
        // SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE,  
        // SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE,  
        // SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS,  
        // SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION,  
        // SAI_VIRTUAL_ROUTER_ATTR_LABEL, 
        // 
    // virtual_router API
    rpc sai_grpc_get_virtual_router_attribute(sai_grpc_get_virtual_router_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // Start of vlan API
    // sai_status_t(*sai_create_vlan_fn)(_Out_ sai_object_id_t *vlan_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // vlan mandatory attrs: 
    // SAI_VLAN_ATTR_VLAN_ID, 
        // 
    // vlan API
    rpc sai_grpc_create_vlan(sai_grpc_create_vlan_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_vlan_fn)(_In_ sai_object_id_t vlan_id)
    // vlan attrs: 
    // 
        // 
    // vlan API
    rpc sai_grpc_remove_vlan(sai_grpc_remove_vlan_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_vlan_attribute_fn)(_In_ sai_object_id_t vlan_id, _In_ const sai_attribute_t *attr)
    // vlan attrs: 
    //  
        // SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_VLAN_ATTR_STP_INSTANCE,  
        // SAI_VLAN_ATTR_LEARN_DISABLE,  
        // SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE,  
        // SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_INGRESS_ACL,  
        // SAI_VLAN_ATTR_EGRESS_ACL,  
        // SAI_VLAN_ATTR_META_DATA,  
        // SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE,  
        // SAI_VLAN_ATTR_TAM_OBJECT, 
        // 
    // vlan API
    rpc sai_grpc_set_vlan_attribute(sai_grpc_set_vlan_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_vlan_attribute_fn)(_In_ sai_object_id_t vlan_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // vlan attrs: 
    //  
        // SAI_VLAN_ATTR_VLAN_ID,  
        // SAI_VLAN_ATTR_MEMBER_LIST,  
        // SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES,  
        // SAI_VLAN_ATTR_STP_INSTANCE,  
        // SAI_VLAN_ATTR_LEARN_DISABLE,  
        // SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE,  
        // SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID,  
        // SAI_VLAN_ATTR_INGRESS_ACL,  
        // SAI_VLAN_ATTR_EGRESS_ACL,  
        // SAI_VLAN_ATTR_META_DATA,  
        // SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE,  
        // SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP,  
        // SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE,  
        // SAI_VLAN_ATTR_TAM_OBJECT, 
        // 
    // vlan API
    rpc sai_grpc_get_vlan_attribute(sai_grpc_get_vlan_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_create_vlan_member_fn)(_Out_ sai_object_id_t *vlan_member_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // vlan_member mandatory attrs: 
    // SAI_VLAN_MEMBER_ATTR_VLAN_ID, SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID, 
        // 
    // vlan API
    rpc sai_grpc_create_vlan_member(sai_grpc_create_vlan_member_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_vlan_member_fn)(_In_ sai_object_id_t vlan_member_id)
    // vlan_member attrs: 
    // 
        // 
    // vlan API
    rpc sai_grpc_remove_vlan_member(sai_grpc_remove_vlan_member_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_vlan_member_attribute_fn)(_In_ sai_object_id_t vlan_member_id, _In_ const sai_attribute_t *attr)
    // vlan_member attrs: 
    //  
        // SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE, 
        // 
    // vlan API
    rpc sai_grpc_set_vlan_member_attribute(sai_grpc_set_vlan_member_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_vlan_member_attribute_fn)(_In_ sai_object_id_t vlan_member_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // vlan_member attrs: 
    //  
        // SAI_VLAN_MEMBER_ATTR_VLAN_ID,  
        // SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID,  
        // SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE, 
        // 
    // vlan API
    rpc sai_grpc_get_vlan_member_attribute(sai_grpc_get_vlan_member_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // sai_status_t(*sai_get_vlan_stats_fn)(_In_ sai_object_id_t vlan_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _Out_ uint64_t *counters)
    // vlan stats: 
    // in_octets, in_packets, in_ucast_pkts, in_non_ucast_pkts, in_discards, in_errors, in_unknown_protos, out_octets, out_packets, out_ucast_pkts, out_non_ucast_pkts, out_discards, out_errors, out_qlen, 
        // 
    // vlan API
    rpc sai_grpc_get_vlan_stats(sai_grpc_get_vlan_stats_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_get_vlan_stats_ext_fn)(_In_ sai_object_id_t vlan_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids, _In_ sai_stats_mode_t mode, _Out_ uint64_t *counters)
    // vlan stats: 
    // in_octets, in_packets, in_ucast_pkts, in_non_ucast_pkts, in_discards, in_errors, in_unknown_protos, out_octets, out_packets, out_ucast_pkts, out_non_ucast_pkts, out_discards, out_errors, out_qlen, 
        // 
    // vlan API
    rpc sai_grpc_get_vlan_stats_ext(sai_grpc_get_vlan_stats_ext_msg_args)        returns (sai_grpc_u64_list_t);


    // sai_status_t(*sai_clear_vlan_stats_fn)(_In_ sai_object_id_t vlan_id, _In_ uint32_t number_of_counters, _In_ const sai_stat_id_t *counter_ids)
    // vlan attrs: 
    // 
        // 
    // vlan API
    rpc sai_grpc_clear_vlan_stats(sai_grpc_clear_vlan_stats_msg_args)        returns (sai_grpc_response);


    // Start of wred API
    // sai_status_t(*sai_create_wred_fn)(_Out_ sai_object_id_t *wred_id, _In_ sai_object_id_t switch_id, _In_ uint32_t attr_count, _In_ const sai_attribute_t *attr_list)
    // wred mandatory attrs: 
    // 
        // 
    // wred API
    rpc sai_grpc_create_wred(sai_grpc_create_wred_msg_args)        returns (sai_grpc_object_id_t);
    

    // sai_status_t(*sai_remove_wred_fn)(_In_ sai_object_id_t wred_id)
    // wred attrs: 
    // 
        // 
    // wred API
    rpc sai_grpc_remove_wred(sai_grpc_remove_wred_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_set_wred_attribute_fn)(_In_ sai_object_id_t wred_id, _In_ const sai_attribute_t *attr)
    // wred attrs: 
    //  
        // SAI_WRED_ATTR_GREEN_ENABLE,  
        // SAI_WRED_ATTR_GREEN_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_GREEN_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_GREEN_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_YELLOW_ENABLE,  
        // SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_RED_ENABLE,  
        // SAI_WRED_ATTR_RED_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_RED_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_RED_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_WEIGHT,  
        // SAI_WRED_ATTR_ECN_MARK_MODE,  
        // SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_GREEN_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_GREEN_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_RED_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_RED_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD_64, 
        // 
    // wred API
    rpc sai_grpc_set_wred_attribute(sai_grpc_set_wred_attribute_msg_args)        returns (sai_grpc_response);


    // sai_status_t(*sai_get_wred_attribute_fn)(_In_ sai_object_id_t wred_id, _In_ uint32_t attr_count, _Inout_ sai_attribute_t *attr_list)
    // wred attrs: 
    //  
        // SAI_WRED_ATTR_GREEN_ENABLE,  
        // SAI_WRED_ATTR_GREEN_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_GREEN_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_GREEN_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_YELLOW_ENABLE,  
        // SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_RED_ENABLE,  
        // SAI_WRED_ATTR_RED_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_RED_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_RED_DROP_PROBABILITY,  
        // SAI_WRED_ATTR_WEIGHT,  
        // SAI_WRED_ATTR_ECN_MARK_MODE,  
        // SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY,  
        // SAI_WRED_ATTR_GREEN_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_GREEN_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_RED_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_RED_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD_64,  
        // SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD_64, 
        // 
    // wred API
    rpc sai_grpc_get_wred_attribute(sai_grpc_get_wred_attribute_msg_args)        returns (sai_grpc_attribute_list_t);
    

    // SAI utils

    // sai objects API
    rpc sai_grpc_query_attribute_enum_values_capability(sai_grpc_query_attribute_enum_values_capability_msg_arg) returns (sai_grpc_attribute_list_t);
    rpc sai_grpc_object_type_get_availability(sai_grpc_object_type_get_availability_msg_arg) returns (sai_grpc_uint64_t);
    rpc sai_grpc_switch_id_query(sai_grpc_object_id_t) returns (sai_grpc_object_id_t); 
    rpc sai_grpc_object_type_query(sai_grpc_object_id_t) returns (sai_grpc_object_type_t);
    rpc sai_grpc_api_uninitialize(sai_grpc_object_id_t) returns (sai_grpc_status_t);
}

