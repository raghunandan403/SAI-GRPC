/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sai_rpc_H
#define sai_rpc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "sai_types.h"

namespace sai {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class sai_rpcIf {
 public:
  virtual ~sai_rpcIf() {}
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid) = 0;
  virtual void sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid) = 0;
  virtual void sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid) = 0;
  virtual void sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid) = 0;
  virtual void sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid) = 0;
  virtual void sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid) = 0;
  virtual void sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid) = 0;
  virtual void sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid) = 0;
  virtual void sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid) = 0;
  virtual void sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid) = 0;
  virtual void sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid) = 0;
  virtual void sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid) = 0;
  virtual void sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid) = 0;
  virtual void sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid) = 0;
  virtual void sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid) = 0;
  virtual void sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid) = 0;
  virtual void sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid) = 0;
  virtual void sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid) = 0;
  virtual void sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid) = 0;
  virtual void sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid) = 0;
  virtual void sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid) = 0;
  virtual void sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry) = 0;
  virtual void sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry) = 0;
  virtual void sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid) = 0;
  virtual void sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry) = 0;
  virtual void sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid) = 0;
  virtual void sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid) = 0;
  virtual void sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid) = 0;
  virtual void sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry) = 0;
  virtual void sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry) = 0;
  virtual void sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry) = 0;
  virtual void sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry) = 0;
  virtual void sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry) = 0;
  virtual void sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry) = 0;
  virtual void sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid) = 0;
  virtual void sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid) = 0;
  virtual void sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid) = 0;
  virtual void sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid) = 0;
  virtual void sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid) = 0;
  virtual void sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid) = 0;
  virtual void sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid) = 0;
  virtual void sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry) = 0;
  virtual void sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid) = 0;
  virtual void sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid) = 0;
  virtual void sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid) = 0;
  virtual void sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid) = 0;
  virtual void sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid) = 0;
  virtual void sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid) = 0;
  virtual void sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid) = 0;
  virtual void sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid) = 0;
  virtual void sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_size_t sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_allocate_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_free_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const std::string& buffer) = 0;
  virtual void sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry) = 0;
  virtual void sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid) = 0;
  virtual void sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid) = 0;
  virtual void sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid) = 0;
  virtual void sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid) = 0;
  virtual void sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid) = 0;
  virtual void sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid) = 0;
  virtual void sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid) = 0;
  virtual void sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry) = 0;
  virtual void sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid) = 0;
  virtual void sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid) = 0;
  virtual void sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid) = 0;
  virtual void sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid) = 0;
  virtual void sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid) = 0;
  virtual void sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid) = 0;
  virtual void sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid) = 0;
  virtual void sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid) = 0;
  virtual void sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid) = 0;
  virtual void sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry) = 0;
  virtual void sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid) = 0;
  virtual void sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry) = 0;
  virtual void sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid) = 0;
  virtual void sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry) = 0;
  virtual void sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid) = 0;
  virtual void sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry) = 0;
  virtual void sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_remove_all_neighbor_entries() = 0;
  virtual void sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid) = 0;
  virtual void sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid) = 0;
  virtual void sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid) = 0;
  virtual void sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid) = 0;
  virtual void sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid) = 0;
  virtual void sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_port(const sai_thrift_object_id_t port_oid) = 0;
  virtual void sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid) = 0;
  virtual void sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid) = 0;
  virtual void sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid) = 0;
  virtual void sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid) = 0;
  virtual void sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid) = 0;
  virtual void sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry) = 0;
  virtual void sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid) = 0;
  virtual void sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid) = 0;
  virtual void sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid) = 0;
  virtual void sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid) = 0;
  virtual void sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid) = 0;
  virtual void sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid) = 0;
  virtual void sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid) = 0;
  virtual void sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry) = 0;
  virtual void sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) = 0;
  virtual void sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid) = 0;
  virtual void sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid) = 0;
  virtual void sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) = 0;
  virtual void sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) = 0;
  virtual void sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) = 0;
  virtual void sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) = 0;
  virtual void sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) = 0;
  virtual void sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_switch() = 0;
  virtual void sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid) = 0;
  virtual void sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid) = 0;
  virtual void sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid) = 0;
  virtual void sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid) = 0;
  virtual void sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid) = 0;
  virtual void sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid) = 0;
  virtual void sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid) = 0;
  virtual void sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid) = 0;
  virtual void sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid) = 0;
  virtual void sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid) = 0;
  virtual void sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid) = 0;
  virtual void sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid) = 0;
  virtual void sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid) = 0;
  virtual void sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid) = 0;
  virtual void sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid) = 0;
  virtual void sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid) = 0;
  virtual void sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid) = 0;
  virtual void sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid) = 0;
  virtual void sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid) = 0;
  virtual void sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid) = 0;
  virtual void sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid) = 0;
  virtual void sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) = 0;
  virtual void sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid) = 0;
  virtual void sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual void sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) = 0;
  virtual void sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list) = 0;
  virtual void sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid) = 0;
  virtual void sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr) = 0;
  virtual void sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list) = 0;
  virtual void sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return, const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count) = 0;
  virtual int64_t sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type) = 0;
  virtual sai_thrift_object_id_t sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id) = 0;
  virtual sai_thrift_object_type_t sai_thrift_object_type_query(const sai_thrift_object_id_t object_id) = 0;
  virtual sai_thrift_status_t sai_thrift_api_uninitialize() = 0;
};

class sai_rpcIfFactory {
 public:
  typedef sai_rpcIf Handler;

  virtual ~sai_rpcIfFactory() {}

  virtual sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(sai_rpcIf* /* handler */) = 0;
};

class sai_rpcIfSingletonFactory : virtual public sai_rpcIfFactory {
 public:
  sai_rpcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<sai_rpcIf>& iface) : iface_(iface) {}
  virtual ~sai_rpcIfSingletonFactory() {}

  virtual sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(sai_rpcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<sai_rpcIf> iface_;
};

class sai_rpcNull : virtual public sai_rpcIf {
 public:
  virtual ~sai_rpcNull() {}
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_table(const sai_thrift_object_id_t /* acl_table_oid */) {
    return;
  }
  void sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t /* acl_table_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_entry(const sai_thrift_object_id_t /* acl_entry_oid */) {
    return;
  }
  void sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t /* acl_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_counter(const sai_thrift_object_id_t /* acl_counter_oid */) {
    return;
  }
  void sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t /* acl_counter_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_counter_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_range(const sai_thrift_object_id_t /* acl_range_oid */) {
    return;
  }
  void sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t /* acl_range_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_range_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t /* acl_table_group_oid */) {
    return;
  }
  void sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t /* acl_table_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t /* acl_table_group_member_oid */) {
    return;
  }
  void sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t /* acl_table_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t /* acl_table_chain_group_oid */) {
    return;
  }
  void sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t /* acl_table_chain_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_chain_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ars(const sai_thrift_object_id_t /* ars_oid */) {
    return;
  }
  void sai_thrift_set_ars_attribute(const sai_thrift_object_id_t /* ars_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ars_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ars_profile(const sai_thrift_object_id_t /* ars_profile_oid */) {
    return;
  }
  void sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t /* ars_profile_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ars_profile_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_bfd_session(const sai_thrift_object_id_t /* bfd_session_oid */) {
    return;
  }
  void sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t /* bfd_session_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bfd_session_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bfd_session_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bfd_session_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t /* bfd_session_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */) {
    return;
  }
  void sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t /* table_bitmap_classification_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */) {
    return;
  }
  void sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t /* table_bitmap_router_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */) {
    return;
  }
  void sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t /* table_meta_tunnel_entry_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_bridge_port(const sai_thrift_object_id_t /* bridge_port_oid */) {
    return;
  }
  void sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t /* bridge_port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t /* bridge_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_bridge(const sai_thrift_object_id_t /* bridge_oid */) {
    return;
  }
  void sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t /* bridge_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* bridge_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t /* bridge_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t /* ingress_priority_group_oid */) {
    return;
  }
  void sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t /* ingress_priority_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ingress_priority_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ingress_priority_group_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ingress_priority_group_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t /* ingress_priority_group_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t /* buffer_pool_oid */) {
    return;
  }
  void sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t /* buffer_pool_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* buffer_pool_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* buffer_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* buffer_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t /* buffer_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t /* buffer_profile_oid */) {
    return;
  }
  void sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t /* buffer_profile_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* buffer_profile_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_counter(const sai_thrift_object_id_t /* counter_oid */) {
    return;
  }
  void sai_thrift_set_counter_attribute(const sai_thrift_object_id_t /* counter_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* counter_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* counter_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* counter_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_counter_stats(const sai_thrift_object_id_t /* counter_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t /* dash_acl_group_oid */) {
    return;
  }
  void sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t /* dash_acl_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dash_acl_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t /* dash_acl_rule_oid */) {
    return;
  }
  void sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t /* dash_acl_rule_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dash_acl_rule_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& /* direction_lookup_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& /* direction_lookup_entry */) {
    return;
  }
  void sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& /* direction_lookup_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_direction_lookup_entry_t& /* direction_lookup_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_direction_lookup_entry_t> & /* direction_lookup_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_direction_lookup_entry_t> & /* direction_lookup_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& /* eni_ether_address_map_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& /* eni_ether_address_map_entry */) {
    return;
  }
  void sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& /* eni_ether_address_map_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_eni_ether_address_map_entry_t& /* eni_ether_address_map_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & /* eni_ether_address_map_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & /* eni_ether_address_map_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_eni(const sai_thrift_object_id_t /* eni_oid */) {
    return;
  }
  void sai_thrift_set_eni_attribute(const sai_thrift_object_id_t /* eni_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* eni_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& /* inbound_routing_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& /* inbound_routing_entry */) {
    return;
  }
  void sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& /* inbound_routing_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_inbound_routing_entry_t& /* inbound_routing_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_inbound_routing_entry_t> & /* inbound_routing_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_inbound_routing_entry_t> & /* inbound_routing_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t /* meter_bucket_oid */) {
    return;
  }
  void sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t /* meter_bucket_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* meter_bucket_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_meter_policy(const sai_thrift_object_id_t /* meter_policy_oid */) {
    return;
  }
  void sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t /* meter_policy_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* meter_policy_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_meter_rule(const sai_thrift_object_id_t /* meter_rule_oid */) {
    return;
  }
  void sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t /* meter_rule_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* meter_rule_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& /* outbound_ca_to_pa_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& /* outbound_ca_to_pa_entry */) {
    return;
  }
  void sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& /* outbound_ca_to_pa_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_outbound_ca_to_pa_entry_t& /* outbound_ca_to_pa_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & /* outbound_ca_to_pa_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & /* outbound_ca_to_pa_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& /* outbound_routing_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& /* outbound_routing_entry */) {
    return;
  }
  void sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& /* outbound_routing_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_outbound_routing_entry_t& /* outbound_routing_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_outbound_routing_entry_t> & /* outbound_routing_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_outbound_routing_entry_t> & /* outbound_routing_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& /* pa_validation_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& /* pa_validation_entry */) {
    return;
  }
  void sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& /* pa_validation_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_pa_validation_entry_t& /* pa_validation_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_pa_validation_entry_t> & /* pa_validation_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_pa_validation_entry_t> & /* pa_validation_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& /* dst_tag_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& /* dst_tag_entry */) {
    return;
  }
  void sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& /* dst_tag_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_dst_tag_entry_t& /* dst_tag_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_dst_tag_entry_t> & /* dst_tag_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_dst_tag_entry_t> & /* dst_tag_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& /* src_tag_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& /* src_tag_entry */) {
    return;
  }
  void sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& /* src_tag_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_src_tag_entry_t& /* src_tag_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_src_tag_entry_t> & /* src_tag_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_src_tag_entry_t> & /* src_tag_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& /* vip_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& /* vip_entry */) {
    return;
  }
  void sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& /* vip_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_vip_entry_t& /* vip_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_vip_entry_t> & /* vip_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_vip_entry_t> & /* vip_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_vnet(const sai_thrift_object_id_t /* vnet_oid */) {
    return;
  }
  void sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t /* vnet_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vnet_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_debug_counter(const sai_thrift_object_id_t /* debug_counter_oid */) {
    return;
  }
  void sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t /* debug_counter_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* debug_counter_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dtel(const sai_thrift_object_id_t /* dtel_oid */) {
    return;
  }
  void sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t /* dtel_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dtel_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t /* dtel_queue_report_oid */) {
    return;
  }
  void sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t /* dtel_queue_report_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dtel_queue_report_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t /* dtel_int_session_oid */) {
    return;
  }
  void sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t /* dtel_int_session_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dtel_int_session_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t /* dtel_report_session_oid */) {
    return;
  }
  void sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t /* dtel_report_session_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dtel_report_session_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_dtel_event(const sai_thrift_object_id_t /* dtel_event_oid */) {
    return;
  }
  void sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t /* dtel_event_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* dtel_event_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& /* fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& /* fdb_entry */) {
    return;
  }
  void sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& /* fdb_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_fdb_entry_t& /* fdb_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_fdb_entry_t> & /* fdb_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_fdb_entry_t> & /* fdb_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_fdb_entry_t> & /* fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_fdb_entry_t> & /* fdb_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t /* generic_programmable_oid */) {
    return;
  }
  void sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t /* generic_programmable_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* generic_programmable_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t /* fine_grained_hash_field_oid */) {
    return;
  }
  void sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t /* fine_grained_hash_field_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* fine_grained_hash_field_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hash(const sai_thrift_object_id_t /* hash_oid */) {
    return;
  }
  void sai_thrift_set_hash_attribute(const sai_thrift_object_id_t /* hash_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hash_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t /* hostif_trap_group_oid */) {
    return;
  }
  void sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t /* hostif_trap_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hostif_trap_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t /* hostif_trap_oid */) {
    return;
  }
  void sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t /* hostif_trap_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hostif_trap_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t /* hostif_user_defined_trap_oid */) {
    return;
  }
  void sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t /* hostif_user_defined_trap_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hostif_user_defined_trap_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hostif(const sai_thrift_object_id_t /* hostif_oid */) {
    return;
  }
  void sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t /* hostif_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hostif_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t /* hostif_table_entry_oid */) {
    return;
  }
  void sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t /* hostif_table_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* hostif_table_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_size_t sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t /* hostif_oid */, const sai_thrift_size_t /* buffer_size */, const std::string& /* buffer */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_size_t _return = 0;
    return _return;
  }
  void sai_thrift_send_hostif_packet(const sai_thrift_object_id_t /* hostif_oid */, const sai_thrift_size_t /* buffer_size */, const std::string& /* buffer */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_allocate_hostif_packet(std::string& /* _return */, const sai_thrift_object_id_t /* hostif_oid */, const sai_thrift_size_t /* buffer_size */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_free_hostif_packet(std::string& /* _return */, const sai_thrift_object_id_t /* hostif_oid */, const std::string& /* buffer */) {
    return;
  }
  void sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& /* ipmc_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& /* ipmc_entry */) {
    return;
  }
  void sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& /* ipmc_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_ipmc_entry_t& /* ipmc_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t /* ipmc_group_oid */) {
    return;
  }
  void sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t /* ipmc_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ipmc_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t /* ipmc_group_member_oid */) {
    return;
  }
  void sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t /* ipmc_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ipmc_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ipsec(const sai_thrift_object_id_t /* ipsec_oid */) {
    return;
  }
  void sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t /* ipsec_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ipsec_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t /* ipsec_port_oid */) {
    return;
  }
  void sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t /* ipsec_port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ipsec_port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ipsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ipsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t /* ipsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t /* ipsec_sa_oid */) {
    return;
  }
  void sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t /* ipsec_sa_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* ipsec_sa_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ipsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* ipsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t /* ipsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_isolation_group(const sai_thrift_object_id_t /* isolation_group_oid */) {
    return;
  }
  void sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t /* isolation_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* isolation_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t /* isolation_group_member_oid */) {
    return;
  }
  void sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t /* isolation_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* isolation_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& /* l2mc_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& /* l2mc_entry */) {
    return;
  }
  void sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& /* l2mc_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_l2mc_entry_t& /* l2mc_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t /* l2mc_group_oid */) {
    return;
  }
  void sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t /* l2mc_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* l2mc_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t /* l2mc_group_member_oid */) {
    return;
  }
  void sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t /* l2mc_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* l2mc_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_lag(const sai_thrift_object_id_t /* lag_oid */) {
    return;
  }
  void sai_thrift_set_lag_attribute(const sai_thrift_object_id_t /* lag_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_lag_member(const sai_thrift_object_id_t /* lag_member_oid */) {
    return;
  }
  void sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t /* lag_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_macsec(const sai_thrift_object_id_t /* macsec_oid */) {
    return;
  }
  void sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t /* macsec_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* macsec_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_macsec_port(const sai_thrift_object_id_t /* macsec_port_oid */) {
    return;
  }
  void sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t /* macsec_port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* macsec_port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t /* macsec_port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t /* macsec_flow_oid */) {
    return;
  }
  void sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t /* macsec_flow_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* macsec_flow_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_flow_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_flow_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t /* macsec_flow_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t /* macsec_sc_oid */) {
    return;
  }
  void sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t /* macsec_sc_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* macsec_sc_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_sc_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_sc_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t /* macsec_sc_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t /* macsec_sa_oid */) {
    return;
  }
  void sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t /* macsec_sa_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* macsec_sa_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* macsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t /* macsec_sa_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* mcast_fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* mcast_fdb_entry */) {
    return;
  }
  void sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& /* mcast_fdb_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_mcast_fdb_entry_t& /* mcast_fdb_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_mirror_session(const sai_thrift_object_id_t /* mirror_session_oid */) {
    return;
  }
  void sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t /* mirror_session_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* mirror_session_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& /* inseg_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& /* inseg_entry */) {
    return;
  }
  void sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& /* inseg_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_inseg_entry_t& /* inseg_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_inseg_entry_t> & /* inseg_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_inseg_entry_t> & /* inseg_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_inseg_entry_t> & /* inseg_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_inseg_entry_t> & /* inseg_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_my_mac(const sai_thrift_object_id_t /* my_mac_oid */) {
    return;
  }
  void sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t /* my_mac_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* my_mac_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& /* nat_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& /* nat_entry */) {
    return;
  }
  void sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& /* nat_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_nat_entry_t& /* nat_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_nat_entry_t> & /* nat_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_nat_entry_t> & /* nat_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_nat_entry_t> & /* nat_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_nat_entry_t> & /* nat_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t /* nat_zone_counter_oid */) {
    return;
  }
  void sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t /* nat_zone_counter_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* nat_zone_counter_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& /* neighbor_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& /* neighbor_entry */) {
    return;
  }
  void sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& /* neighbor_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_neighbor_entry_t& /* neighbor_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_remove_all_neighbor_entries() {
    return;
  }
  void sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_neighbor_entry_t> & /* neighbor_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_neighbor_entry_t> & /* neighbor_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_neighbor_entry_t> & /* neighbor_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_neighbor_entry_t> & /* neighbor_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_next_hop(const sai_thrift_object_id_t /* next_hop_oid */) {
    return;
  }
  void sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t /* next_hop_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t /* next_hop_group_oid */) {
    return;
  }
  void sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t /* next_hop_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t /* next_hop_group_member_oid */) {
    return;
  }
  void sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t /* next_hop_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t /* next_hop_group_map_oid */) {
    return;
  }
  void sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t /* next_hop_group_map_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_group_map_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_policer(const sai_thrift_object_id_t /* policer_oid */) {
    return;
  }
  void sai_thrift_set_policer_attribute(const sai_thrift_object_id_t /* policer_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* policer_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* policer_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* policer_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_policer_stats(const sai_thrift_object_id_t /* policer_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_port(const sai_thrift_object_id_t /* port_oid */) {
    return;
  }
  void sai_thrift_set_port_attribute(const sai_thrift_object_id_t /* port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_port_stats(const sai_thrift_object_id_t /* port_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t /* port_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_port_pool(const sai_thrift_object_id_t /* port_pool_oid */) {
    return;
  }
  void sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t /* port_pool_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_pool_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* port_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* port_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t /* port_pool_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_port_serdes(const sai_thrift_object_id_t /* port_serdes_oid */) {
    return;
  }
  void sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t /* port_serdes_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_serdes_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_port_connector(const sai_thrift_object_id_t /* port_connector_oid */) {
    return;
  }
  void sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t /* port_connector_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_connector_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_qos_map(const sai_thrift_object_id_t /* qos_map_oid */) {
    return;
  }
  void sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t /* qos_map_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* qos_map_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_queue(const sai_thrift_object_id_t /* queue_oid */) {
    return;
  }
  void sai_thrift_set_queue_attribute(const sai_thrift_object_id_t /* queue_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* queue_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* queue_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* queue_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_queue_stats(const sai_thrift_object_id_t /* queue_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_create_route_entry(const sai_thrift_route_entry_t& /* route_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& /* route_entry */) {
    return;
  }
  void sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& /* route_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_route_entry_t& /* route_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_route_entry_t> & /* route_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_route_entry_t> & /* route_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_route_entry_t> & /* route_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_route_entry_t> & /* route_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_router_interface(const sai_thrift_object_id_t /* router_interface_oid */) {
    return;
  }
  void sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t /* router_interface_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* router_interface_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* router_interface_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* router_interface_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t /* router_interface_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_rpf_group(const sai_thrift_object_id_t /* rpf_group_oid */) {
    return;
  }
  void sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t /* rpf_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* rpf_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t /* rpf_group_member_oid */) {
    return;
  }
  void sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t /* rpf_group_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* rpf_group_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_samplepacket(const sai_thrift_object_id_t /* samplepacket_oid */) {
    return;
  }
  void sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t /* samplepacket_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* samplepacket_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_scheduler(const sai_thrift_object_id_t /* scheduler_oid */) {
    return;
  }
  void sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t /* scheduler_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* scheduler_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t /* scheduler_group_oid */) {
    return;
  }
  void sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t /* scheduler_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* scheduler_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t /* srv6_sidlist_oid */) {
    return;
  }
  void sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t /* srv6_sidlist_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* srv6_sidlist_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* srv6_sidlist_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* srv6_sidlist_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t /* srv6_sidlist_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& /* my_sid_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    return;
  }
  void sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& /* my_sid_entry */) {
    return;
  }
  void sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& /* my_sid_entry */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_my_sid_entry_t& /* my_sid_entry */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_my_sid_entry_t> & /* my_sid_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_my_sid_entry_t> & /* my_sid_entry */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & /* _return */, const std::vector<sai_thrift_my_sid_entry_t> & /* my_sid_entry */, const std::vector<sai_thrift_attribute_t> & /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */) {
    return;
  }
  void sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<sai_thrift_my_sid_entry_t> & /* my_sid_entry */, const std::vector<sai_thrift_uint32_t> & /* attr_count */, const sai_thrift_attribute_list_t& /* attr_list */, const sai_thrift_bulk_op_error_mode_t /* mode */, const std::vector<sai_thrift_status_t> & /* object_statuses */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_stp(const sai_thrift_object_id_t /* stp_oid */) {
    return;
  }
  void sai_thrift_set_stp_attribute(const sai_thrift_object_id_t /* stp_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* stp_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_stp_port(const sai_thrift_object_id_t /* stp_port_oid */) {
    return;
  }
  void sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t /* stp_port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* stp_port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & /* _return */, const sai_thrift_uint64_t /* platform_context */, const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */) {
    return;
  }
  void sai_thrift_switch_register_write(const sai_thrift_uint64_t /* platform_context */, const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */, const std::vector<sai_thrift_uint32_t> & /* reg_val */) {
    return;
  }
  void sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & /* _return */, const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */) {
    return;
  }
  void sai_thrift_switch_mdio_write(const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */, const std::vector<sai_thrift_uint32_t> & /* reg_val */) {
    return;
  }
  void sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & /* _return */, const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */) {
    return;
  }
  void sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t /* device_addr */, const sai_thrift_uint32_t /* start_reg_addr */, const std::vector<sai_thrift_uint32_t> & /* reg_val */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_switch() {
    return;
  }
  void sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t /* switch_tunnel_oid */) {
    return;
  }
  void sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t /* switch_tunnel_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* switch_tunnel_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_system_port(const sai_thrift_object_id_t /* system_port_oid */) {
    return;
  }
  void sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t /* system_port_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* system_port_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam(const sai_thrift_object_id_t /* tam_oid */) {
    return;
  }
  void sai_thrift_set_tam_attribute(const sai_thrift_object_id_t /* tam_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t /* tam_math_func_oid */) {
    return;
  }
  void sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_math_func_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t /* tam_math_func_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t /* tam_event_threshold_oid */) {
    return;
  }
  void sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_event_threshold_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t /* tam_event_threshold_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_int(const sai_thrift_object_id_t /* tam_int_oid */) {
    return;
  }
  void sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_int_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t /* tam_int_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t /* tam_tel_type_oid */) {
    return;
  }
  void sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_tel_type_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t /* tam_tel_type_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_report(const sai_thrift_object_id_t /* tam_report_oid */) {
    return;
  }
  void sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_report_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t /* tam_report_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t /* tam_telemetry_oid */) {
    return;
  }
  void sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_telemetry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t /* tam_telemetry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_transport(const sai_thrift_object_id_t /* tam_transport_oid */) {
    return;
  }
  void sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_transport_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t /* tam_transport_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_collector(const sai_thrift_object_id_t /* tam_collector_oid */) {
    return;
  }
  void sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_collector_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t /* tam_collector_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t /* tam_event_action_oid */) {
    return;
  }
  void sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_event_action_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t /* tam_event_action_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tam_event(const sai_thrift_object_id_t /* tam_event_oid */) {
    return;
  }
  void sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tam_event_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t /* tam_event_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t /* tunnel_map_oid */) {
    return;
  }
  void sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t /* tunnel_map_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tunnel(const sai_thrift_object_id_t /* tunnel_oid */) {
    return;
  }
  void sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t /* tunnel_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* tunnel_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* tunnel_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t /* tunnel_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t /* tunnel_term_table_entry_oid */) {
    return;
  }
  void sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t /* tunnel_term_table_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_term_table_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t /* tunnel_map_entry_oid */) {
    return;
  }
  void sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t /* tunnel_map_entry_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_entry_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_udf(const sai_thrift_object_id_t /* udf_oid */) {
    return;
  }
  void sai_thrift_set_udf_attribute(const sai_thrift_object_id_t /* udf_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* udf_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_udf_match(const sai_thrift_object_id_t /* udf_match_oid */) {
    return;
  }
  void sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t /* udf_match_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* udf_match_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_udf_group(const sai_thrift_object_id_t /* udf_group_oid */) {
    return;
  }
  void sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t /* udf_group_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* udf_group_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_virtual_router(const sai_thrift_object_id_t /* virtual_router_oid */) {
    return;
  }
  void sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t /* virtual_router_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* virtual_router_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_vlan(const sai_thrift_object_id_t /* vlan_oid */) {
    return;
  }
  void sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t /* vlan_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_vlan_member(const sai_thrift_object_id_t /* vlan_member_oid */) {
    return;
  }
  void sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t /* vlan_member_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_member_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* vlan_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  void sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* vlan_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */, const sai_thrift_stats_mode_t /* mode */) {
    return;
  }
  void sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t /* vlan_oid */, const std::vector<sai_thrift_stat_id_t> & /* counter_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & /* attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_remove_wred(const sai_thrift_object_id_t /* wred_oid */) {
    return;
  }
  void sai_thrift_set_wred_attribute(const sai_thrift_object_id_t /* wred_oid */, const sai_thrift_attribute_t& /* attr */) {
    return;
  }
  void sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* wred_oid */, const sai_thrift_attribute_list_t& /* attr_list */) {
    return;
  }
  void sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & /* _return */, const sai_thrift_object_type_t /* object_type */, const sai_thrift_attr_id_t /* attr_id */, const int32_t /* caps_count */) {
    return;
  }
  int64_t sai_thrift_object_type_get_availability(const sai_thrift_object_type_t /* object_type */, const sai_thrift_attr_id_t /* attr_id */, const int32_t /* attr_type */) {
    int64_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_switch_id_query(const sai_thrift_object_id_t /* object_id */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_type_t sai_thrift_object_type_query(const sai_thrift_object_id_t /* object_id */) {
    sai_thrift_object_type_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_api_uninitialize() {
    sai_thrift_status_t _return = 0;
    return _return;
  }
};

typedef struct _sai_rpc_sai_thrift_create_acl_table_args__isset {
  _sai_rpc_sai_thrift_create_acl_table_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_table_args__isset;

class sai_rpc_sai_thrift_create_acl_table_args {
 public:

  sai_rpc_sai_thrift_create_acl_table_args(const sai_rpc_sai_thrift_create_acl_table_args&);
  sai_rpc_sai_thrift_create_acl_table_args& operator=(const sai_rpc_sai_thrift_create_acl_table_args&);
  sai_rpc_sai_thrift_create_acl_table_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_table_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_table_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_result__isset {
  _sai_rpc_sai_thrift_create_acl_table_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_result__isset;

class sai_rpc_sai_thrift_create_acl_table_result {
 public:

  sai_rpc_sai_thrift_create_acl_table_result(const sai_rpc_sai_thrift_create_acl_table_result&);
  sai_rpc_sai_thrift_create_acl_table_result& operator=(const sai_rpc_sai_thrift_create_acl_table_result&);
  sai_rpc_sai_thrift_create_acl_table_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_presult__isset {
  _sai_rpc_sai_thrift_create_acl_table_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_presult__isset;

class sai_rpc_sai_thrift_create_acl_table_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_args__isset {
  _sai_rpc_sai_thrift_remove_acl_table_args__isset() : acl_table_oid(false) {}
  bool acl_table_oid :1;
} _sai_rpc_sai_thrift_remove_acl_table_args__isset;

class sai_rpc_sai_thrift_remove_acl_table_args {
 public:

  sai_rpc_sai_thrift_remove_acl_table_args(const sai_rpc_sai_thrift_remove_acl_table_args&);
  sai_rpc_sai_thrift_remove_acl_table_args& operator=(const sai_rpc_sai_thrift_remove_acl_table_args&);
  sai_rpc_sai_thrift_remove_acl_table_args() : acl_table_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_args() throw();
  sai_thrift_object_id_t acl_table_oid;

  _sai_rpc_sai_thrift_remove_acl_table_args__isset __isset;

  void __set_acl_table_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_args & rhs) const
  {
    if (!(acl_table_oid == rhs.acl_table_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_table_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_pargs() throw();
  const sai_thrift_object_id_t* acl_table_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_result__isset {
  _sai_rpc_sai_thrift_remove_acl_table_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_result__isset;

class sai_rpc_sai_thrift_remove_acl_table_result {
 public:

  sai_rpc_sai_thrift_remove_acl_table_result(const sai_rpc_sai_thrift_remove_acl_table_result&);
  sai_rpc_sai_thrift_remove_acl_table_result& operator=(const sai_rpc_sai_thrift_remove_acl_table_result&);
  sai_rpc_sai_thrift_remove_acl_table_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_table_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_presult__isset;

class sai_rpc_sai_thrift_remove_acl_table_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_table_attribute_args__isset() : acl_table_oid(false), attr(false) {}
  bool acl_table_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_table_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_table_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_table_attribute_args(const sai_rpc_sai_thrift_set_acl_table_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_table_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_attribute_args() : acl_table_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_attribute_args() throw();
  sai_thrift_object_id_t acl_table_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_table_attribute_args__isset __isset;

  void __set_acl_table_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_attribute_args & rhs) const
  {
    if (!(acl_table_oid == rhs.acl_table_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_table_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_table_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_table_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_table_attribute_result(const sai_rpc_sai_thrift_set_acl_table_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_table_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_table_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_table_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_table_attribute_args__isset() : acl_table_oid(false), attr_list(false) {}
  bool acl_table_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_table_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_table_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_table_attribute_args(const sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_attribute_args() : acl_table_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_attribute_args() throw();
  sai_thrift_object_id_t acl_table_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_table_attribute_args__isset __isset;

  void __set_acl_table_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_attribute_args & rhs) const
  {
    if (!(acl_table_oid == rhs.acl_table_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_table_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_table_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_table_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_table_attribute_result(const sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_table_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_entry_args__isset {
  _sai_rpc_sai_thrift_create_acl_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_entry_args__isset;

class sai_rpc_sai_thrift_create_acl_entry_args {
 public:

  sai_rpc_sai_thrift_create_acl_entry_args(const sai_rpc_sai_thrift_create_acl_entry_args&);
  sai_rpc_sai_thrift_create_acl_entry_args& operator=(const sai_rpc_sai_thrift_create_acl_entry_args&);
  sai_rpc_sai_thrift_create_acl_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_entry_result__isset {
  _sai_rpc_sai_thrift_create_acl_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_entry_result__isset;

class sai_rpc_sai_thrift_create_acl_entry_result {
 public:

  sai_rpc_sai_thrift_create_acl_entry_result(const sai_rpc_sai_thrift_create_acl_entry_result&);
  sai_rpc_sai_thrift_create_acl_entry_result& operator=(const sai_rpc_sai_thrift_create_acl_entry_result&);
  sai_rpc_sai_thrift_create_acl_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_entry_presult__isset {
  _sai_rpc_sai_thrift_create_acl_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_entry_presult__isset;

class sai_rpc_sai_thrift_create_acl_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_entry_args__isset {
  _sai_rpc_sai_thrift_remove_acl_entry_args__isset() : acl_entry_oid(false) {}
  bool acl_entry_oid :1;
} _sai_rpc_sai_thrift_remove_acl_entry_args__isset;

class sai_rpc_sai_thrift_remove_acl_entry_args {
 public:

  sai_rpc_sai_thrift_remove_acl_entry_args(const sai_rpc_sai_thrift_remove_acl_entry_args&);
  sai_rpc_sai_thrift_remove_acl_entry_args& operator=(const sai_rpc_sai_thrift_remove_acl_entry_args&);
  sai_rpc_sai_thrift_remove_acl_entry_args() : acl_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_entry_args() throw();
  sai_thrift_object_id_t acl_entry_oid;

  _sai_rpc_sai_thrift_remove_acl_entry_args__isset __isset;

  void __set_acl_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_entry_args & rhs) const
  {
    if (!(acl_entry_oid == rhs.acl_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_entry_pargs() throw();
  const sai_thrift_object_id_t* acl_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_entry_result__isset {
  _sai_rpc_sai_thrift_remove_acl_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_entry_result__isset;

class sai_rpc_sai_thrift_remove_acl_entry_result {
 public:

  sai_rpc_sai_thrift_remove_acl_entry_result(const sai_rpc_sai_thrift_remove_acl_entry_result&);
  sai_rpc_sai_thrift_remove_acl_entry_result& operator=(const sai_rpc_sai_thrift_remove_acl_entry_result&);
  sai_rpc_sai_thrift_remove_acl_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_entry_presult__isset;

class sai_rpc_sai_thrift_remove_acl_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset() : acl_entry_oid(false), attr(false) {}
  bool acl_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_entry_attribute_args(const sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  sai_rpc_sai_thrift_set_acl_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  sai_rpc_sai_thrift_set_acl_entry_attribute_args() : acl_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_entry_attribute_args() throw();
  sai_thrift_object_id_t acl_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_oid == rhs.acl_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_entry_attribute_result(const sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  sai_rpc_sai_thrift_set_acl_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  sai_rpc_sai_thrift_set_acl_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset() : acl_entry_oid(false), attr_list(false) {}
  bool acl_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_entry_attribute_args(const sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  sai_rpc_sai_thrift_get_acl_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  sai_rpc_sai_thrift_get_acl_entry_attribute_args() : acl_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_entry_attribute_args() throw();
  sai_thrift_object_id_t acl_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_oid == rhs.acl_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_entry_attribute_result(const sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  sai_rpc_sai_thrift_get_acl_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  sai_rpc_sai_thrift_get_acl_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_counter_args__isset {
  _sai_rpc_sai_thrift_create_acl_counter_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_counter_args__isset;

class sai_rpc_sai_thrift_create_acl_counter_args {
 public:

  sai_rpc_sai_thrift_create_acl_counter_args(const sai_rpc_sai_thrift_create_acl_counter_args&);
  sai_rpc_sai_thrift_create_acl_counter_args& operator=(const sai_rpc_sai_thrift_create_acl_counter_args&);
  sai_rpc_sai_thrift_create_acl_counter_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_counter_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_counter_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_counter_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_counter_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_counter_result__isset {
  _sai_rpc_sai_thrift_create_acl_counter_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_counter_result__isset;

class sai_rpc_sai_thrift_create_acl_counter_result {
 public:

  sai_rpc_sai_thrift_create_acl_counter_result(const sai_rpc_sai_thrift_create_acl_counter_result&);
  sai_rpc_sai_thrift_create_acl_counter_result& operator=(const sai_rpc_sai_thrift_create_acl_counter_result&);
  sai_rpc_sai_thrift_create_acl_counter_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_counter_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_counter_presult__isset {
  _sai_rpc_sai_thrift_create_acl_counter_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_counter_presult__isset;

class sai_rpc_sai_thrift_create_acl_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_counter_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_counter_args__isset {
  _sai_rpc_sai_thrift_remove_acl_counter_args__isset() : acl_counter_oid(false) {}
  bool acl_counter_oid :1;
} _sai_rpc_sai_thrift_remove_acl_counter_args__isset;

class sai_rpc_sai_thrift_remove_acl_counter_args {
 public:

  sai_rpc_sai_thrift_remove_acl_counter_args(const sai_rpc_sai_thrift_remove_acl_counter_args&);
  sai_rpc_sai_thrift_remove_acl_counter_args& operator=(const sai_rpc_sai_thrift_remove_acl_counter_args&);
  sai_rpc_sai_thrift_remove_acl_counter_args() : acl_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_counter_args() throw();
  sai_thrift_object_id_t acl_counter_oid;

  _sai_rpc_sai_thrift_remove_acl_counter_args__isset __isset;

  void __set_acl_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_counter_args & rhs) const
  {
    if (!(acl_counter_oid == rhs.acl_counter_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_counter_pargs() throw();
  const sai_thrift_object_id_t* acl_counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_counter_result__isset {
  _sai_rpc_sai_thrift_remove_acl_counter_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_counter_result__isset;

class sai_rpc_sai_thrift_remove_acl_counter_result {
 public:

  sai_rpc_sai_thrift_remove_acl_counter_result(const sai_rpc_sai_thrift_remove_acl_counter_result&);
  sai_rpc_sai_thrift_remove_acl_counter_result& operator=(const sai_rpc_sai_thrift_remove_acl_counter_result&);
  sai_rpc_sai_thrift_remove_acl_counter_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_counter_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_counter_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_counter_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_counter_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_counter_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_counter_presult__isset;

class sai_rpc_sai_thrift_remove_acl_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_counter_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_counter_attribute_args__isset() : acl_counter_oid(false), attr(false) {}
  bool acl_counter_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_counter_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_counter_attribute_args(const sai_rpc_sai_thrift_set_acl_counter_attribute_args&);
  sai_rpc_sai_thrift_set_acl_counter_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_counter_attribute_args&);
  sai_rpc_sai_thrift_set_acl_counter_attribute_args() : acl_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_counter_attribute_args() throw();
  sai_thrift_object_id_t acl_counter_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_counter_attribute_args__isset __isset;

  void __set_acl_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_counter_attribute_args & rhs) const
  {
    if (!(acl_counter_oid == rhs.acl_counter_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_counter_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_counter_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_counter_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_counter_attribute_result(const sai_rpc_sai_thrift_set_acl_counter_attribute_result&);
  sai_rpc_sai_thrift_set_acl_counter_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_counter_attribute_result&);
  sai_rpc_sai_thrift_set_acl_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_counter_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_counter_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_counter_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_counter_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_counter_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset() : acl_counter_oid(false), attr_list(false) {}
  bool acl_counter_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_counter_attribute_args(const sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  sai_rpc_sai_thrift_get_acl_counter_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  sai_rpc_sai_thrift_get_acl_counter_attribute_args() : acl_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_counter_attribute_args() throw();
  sai_thrift_object_id_t acl_counter_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset __isset;

  void __set_acl_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_counter_attribute_args & rhs) const
  {
    if (!(acl_counter_oid == rhs.acl_counter_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_counter_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_counter_attribute_result(const sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  sai_rpc_sai_thrift_get_acl_counter_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  sai_rpc_sai_thrift_get_acl_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_counter_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_counter_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_range_args__isset {
  _sai_rpc_sai_thrift_create_acl_range_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_range_args__isset;

class sai_rpc_sai_thrift_create_acl_range_args {
 public:

  sai_rpc_sai_thrift_create_acl_range_args(const sai_rpc_sai_thrift_create_acl_range_args&);
  sai_rpc_sai_thrift_create_acl_range_args& operator=(const sai_rpc_sai_thrift_create_acl_range_args&);
  sai_rpc_sai_thrift_create_acl_range_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_range_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_range_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_range_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_range_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_range_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_range_result__isset {
  _sai_rpc_sai_thrift_create_acl_range_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_range_result__isset;

class sai_rpc_sai_thrift_create_acl_range_result {
 public:

  sai_rpc_sai_thrift_create_acl_range_result(const sai_rpc_sai_thrift_create_acl_range_result&);
  sai_rpc_sai_thrift_create_acl_range_result& operator=(const sai_rpc_sai_thrift_create_acl_range_result&);
  sai_rpc_sai_thrift_create_acl_range_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_range_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_range_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_range_presult__isset {
  _sai_rpc_sai_thrift_create_acl_range_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_range_presult__isset;

class sai_rpc_sai_thrift_create_acl_range_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_range_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_range_args__isset {
  _sai_rpc_sai_thrift_remove_acl_range_args__isset() : acl_range_oid(false) {}
  bool acl_range_oid :1;
} _sai_rpc_sai_thrift_remove_acl_range_args__isset;

class sai_rpc_sai_thrift_remove_acl_range_args {
 public:

  sai_rpc_sai_thrift_remove_acl_range_args(const sai_rpc_sai_thrift_remove_acl_range_args&);
  sai_rpc_sai_thrift_remove_acl_range_args& operator=(const sai_rpc_sai_thrift_remove_acl_range_args&);
  sai_rpc_sai_thrift_remove_acl_range_args() : acl_range_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_range_args() throw();
  sai_thrift_object_id_t acl_range_oid;

  _sai_rpc_sai_thrift_remove_acl_range_args__isset __isset;

  void __set_acl_range_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_range_args & rhs) const
  {
    if (!(acl_range_oid == rhs.acl_range_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_range_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_range_pargs() throw();
  const sai_thrift_object_id_t* acl_range_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_range_result__isset {
  _sai_rpc_sai_thrift_remove_acl_range_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_range_result__isset;

class sai_rpc_sai_thrift_remove_acl_range_result {
 public:

  sai_rpc_sai_thrift_remove_acl_range_result(const sai_rpc_sai_thrift_remove_acl_range_result&);
  sai_rpc_sai_thrift_remove_acl_range_result& operator=(const sai_rpc_sai_thrift_remove_acl_range_result&);
  sai_rpc_sai_thrift_remove_acl_range_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_range_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_range_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_range_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_range_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_range_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_range_presult__isset;

class sai_rpc_sai_thrift_remove_acl_range_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_range_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_range_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_range_attribute_args__isset() : acl_range_oid(false), attr(false) {}
  bool acl_range_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_range_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_range_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_range_attribute_args(const sai_rpc_sai_thrift_set_acl_range_attribute_args&);
  sai_rpc_sai_thrift_set_acl_range_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_range_attribute_args&);
  sai_rpc_sai_thrift_set_acl_range_attribute_args() : acl_range_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_range_attribute_args() throw();
  sai_thrift_object_id_t acl_range_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_range_attribute_args__isset __isset;

  void __set_acl_range_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_range_attribute_args & rhs) const
  {
    if (!(acl_range_oid == rhs.acl_range_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_range_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_range_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_range_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_range_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_range_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_range_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_range_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_range_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_range_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_range_attribute_result(const sai_rpc_sai_thrift_set_acl_range_attribute_result&);
  sai_rpc_sai_thrift_set_acl_range_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_range_attribute_result&);
  sai_rpc_sai_thrift_set_acl_range_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_range_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_range_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_range_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_range_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_range_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_range_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_range_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_range_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_range_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_range_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_range_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_range_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_range_attribute_args__isset() : acl_range_oid(false), attr_list(false) {}
  bool acl_range_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_range_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_range_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_range_attribute_args(const sai_rpc_sai_thrift_get_acl_range_attribute_args&);
  sai_rpc_sai_thrift_get_acl_range_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_range_attribute_args&);
  sai_rpc_sai_thrift_get_acl_range_attribute_args() : acl_range_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_range_attribute_args() throw();
  sai_thrift_object_id_t acl_range_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_range_attribute_args__isset __isset;

  void __set_acl_range_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_range_attribute_args & rhs) const
  {
    if (!(acl_range_oid == rhs.acl_range_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_range_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_range_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_range_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_range_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_range_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_range_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_range_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_range_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_range_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_range_attribute_result(const sai_rpc_sai_thrift_get_acl_range_attribute_result&);
  sai_rpc_sai_thrift_get_acl_range_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_range_attribute_result&);
  sai_rpc_sai_thrift_get_acl_range_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_range_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_range_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_range_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_range_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_range_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_range_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_range_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_range_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_range_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_range_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_range_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_args__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_table_group_args__isset;

class sai_rpc_sai_thrift_create_acl_table_group_args {
 public:

  sai_rpc_sai_thrift_create_acl_table_group_args(const sai_rpc_sai_thrift_create_acl_table_group_args&);
  sai_rpc_sai_thrift_create_acl_table_group_args& operator=(const sai_rpc_sai_thrift_create_acl_table_group_args&);
  sai_rpc_sai_thrift_create_acl_table_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_table_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_table_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_result__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_group_result__isset;

class sai_rpc_sai_thrift_create_acl_table_group_result {
 public:

  sai_rpc_sai_thrift_create_acl_table_group_result(const sai_rpc_sai_thrift_create_acl_table_group_result&);
  sai_rpc_sai_thrift_create_acl_table_group_result& operator=(const sai_rpc_sai_thrift_create_acl_table_group_result&);
  sai_rpc_sai_thrift_create_acl_table_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_presult__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_group_presult__isset;

class sai_rpc_sai_thrift_create_acl_table_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_args__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_args__isset() : acl_table_group_oid(false) {}
  bool acl_table_group_oid :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_args__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_args {
 public:

  sai_rpc_sai_thrift_remove_acl_table_group_args(const sai_rpc_sai_thrift_remove_acl_table_group_args&);
  sai_rpc_sai_thrift_remove_acl_table_group_args& operator=(const sai_rpc_sai_thrift_remove_acl_table_group_args&);
  sai_rpc_sai_thrift_remove_acl_table_group_args() : acl_table_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_args() throw();
  sai_thrift_object_id_t acl_table_group_oid;

  _sai_rpc_sai_thrift_remove_acl_table_group_args__isset __isset;

  void __set_acl_table_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_group_args & rhs) const
  {
    if (!(acl_table_group_oid == rhs.acl_table_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_table_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_result__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_result__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_result {
 public:

  sai_rpc_sai_thrift_remove_acl_table_group_result(const sai_rpc_sai_thrift_remove_acl_table_group_result&);
  sai_rpc_sai_thrift_remove_acl_table_group_result& operator=(const sai_rpc_sai_thrift_remove_acl_table_group_result&);
  sai_rpc_sai_thrift_remove_acl_table_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_presult__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_attribute_args__isset() : acl_table_group_oid(false), attr(false) {}
  bool acl_table_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_table_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_table_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_table_group_attribute_args(const sai_rpc_sai_thrift_set_acl_table_group_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_table_group_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_group_attribute_args() : acl_table_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_group_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_table_group_attribute_args__isset __isset;

  void __set_acl_table_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_group_attribute_args & rhs) const
  {
    if (!(acl_table_group_oid == rhs.acl_table_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_table_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_table_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_table_group_attribute_result(const sai_rpc_sai_thrift_set_acl_table_group_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_table_group_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_table_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset() : acl_table_group_oid(false), attr_list(false) {}
  bool acl_table_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_table_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_table_group_attribute_args(const sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_group_attribute_args() : acl_table_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_group_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset __isset;

  void __set_acl_table_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_group_attribute_args & rhs) const
  {
    if (!(acl_table_group_oid == rhs.acl_table_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_table_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_table_group_attribute_result(const sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_table_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_member_args__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_table_group_member_args__isset;

class sai_rpc_sai_thrift_create_acl_table_group_member_args {
 public:

  sai_rpc_sai_thrift_create_acl_table_group_member_args(const sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  sai_rpc_sai_thrift_create_acl_table_group_member_args& operator=(const sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  sai_rpc_sai_thrift_create_acl_table_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_table_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_table_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_member_result__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_group_member_result__isset;

class sai_rpc_sai_thrift_create_acl_table_group_member_result {
 public:

  sai_rpc_sai_thrift_create_acl_table_group_member_result(const sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  sai_rpc_sai_thrift_create_acl_table_group_member_result& operator=(const sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  sai_rpc_sai_thrift_create_acl_table_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset;

class sai_rpc_sai_thrift_create_acl_table_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset() : acl_table_group_member_oid(false) {}
  bool acl_table_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_acl_table_group_member_args(const sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  sai_rpc_sai_thrift_remove_acl_table_group_member_args& operator=(const sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  sai_rpc_sai_thrift_remove_acl_table_group_member_args() : acl_table_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_member_args() throw();
  sai_thrift_object_id_t acl_table_group_member_oid;

  _sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset __isset;

  void __set_acl_table_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_group_member_args & rhs) const
  {
    if (!(acl_table_group_member_oid == rhs.acl_table_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_table_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_member_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_acl_table_group_member_result(const sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  sai_rpc_sai_thrift_remove_acl_table_group_member_result& operator=(const sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  sai_rpc_sai_thrift_remove_acl_table_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_acl_table_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args__isset() : acl_table_group_member_oid(false), attr(false) {}
  bool acl_table_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args(const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args() : acl_table_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args__isset __isset;

  void __set_acl_table_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args & rhs) const
  {
    if (!(acl_table_group_member_oid == rhs.acl_table_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_table_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result(const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset() : acl_table_group_member_oid(false), attr_list(false) {}
  bool acl_table_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args(const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() : acl_table_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset __isset;

  void __set_acl_table_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & rhs) const
  {
    if (!(acl_table_group_member_oid == rhs.acl_table_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result(const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_chain_group_args__isset {
  _sai_rpc_sai_thrift_create_acl_table_chain_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_acl_table_chain_group_args__isset;

class sai_rpc_sai_thrift_create_acl_table_chain_group_args {
 public:

  sai_rpc_sai_thrift_create_acl_table_chain_group_args(const sai_rpc_sai_thrift_create_acl_table_chain_group_args&);
  sai_rpc_sai_thrift_create_acl_table_chain_group_args& operator=(const sai_rpc_sai_thrift_create_acl_table_chain_group_args&);
  sai_rpc_sai_thrift_create_acl_table_chain_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_chain_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_acl_table_chain_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_chain_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_chain_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_chain_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_acl_table_chain_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_chain_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_chain_group_result__isset {
  _sai_rpc_sai_thrift_create_acl_table_chain_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_chain_group_result__isset;

class sai_rpc_sai_thrift_create_acl_table_chain_group_result {
 public:

  sai_rpc_sai_thrift_create_acl_table_chain_group_result(const sai_rpc_sai_thrift_create_acl_table_chain_group_result&);
  sai_rpc_sai_thrift_create_acl_table_chain_group_result& operator=(const sai_rpc_sai_thrift_create_acl_table_chain_group_result&);
  sai_rpc_sai_thrift_create_acl_table_chain_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_acl_table_chain_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_chain_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_acl_table_chain_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_acl_table_chain_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_acl_table_chain_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_acl_table_chain_group_presult__isset {
  _sai_rpc_sai_thrift_create_acl_table_chain_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_acl_table_chain_group_presult__isset;

class sai_rpc_sai_thrift_create_acl_table_chain_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_acl_table_chain_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_acl_table_chain_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_chain_group_args__isset {
  _sai_rpc_sai_thrift_remove_acl_table_chain_group_args__isset() : acl_table_chain_group_oid(false) {}
  bool acl_table_chain_group_oid :1;
} _sai_rpc_sai_thrift_remove_acl_table_chain_group_args__isset;

class sai_rpc_sai_thrift_remove_acl_table_chain_group_args {
 public:

  sai_rpc_sai_thrift_remove_acl_table_chain_group_args(const sai_rpc_sai_thrift_remove_acl_table_chain_group_args&);
  sai_rpc_sai_thrift_remove_acl_table_chain_group_args& operator=(const sai_rpc_sai_thrift_remove_acl_table_chain_group_args&);
  sai_rpc_sai_thrift_remove_acl_table_chain_group_args() : acl_table_chain_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_chain_group_args() throw();
  sai_thrift_object_id_t acl_table_chain_group_oid;

  _sai_rpc_sai_thrift_remove_acl_table_chain_group_args__isset __isset;

  void __set_acl_table_chain_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_chain_group_args & rhs) const
  {
    if (!(acl_table_chain_group_oid == rhs.acl_table_chain_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_chain_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_chain_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_acl_table_chain_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_chain_group_pargs() throw();
  const sai_thrift_object_id_t* acl_table_chain_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_chain_group_result__isset {
  _sai_rpc_sai_thrift_remove_acl_table_chain_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_chain_group_result__isset;

class sai_rpc_sai_thrift_remove_acl_table_chain_group_result {
 public:

  sai_rpc_sai_thrift_remove_acl_table_chain_group_result(const sai_rpc_sai_thrift_remove_acl_table_chain_group_result&);
  sai_rpc_sai_thrift_remove_acl_table_chain_group_result& operator=(const sai_rpc_sai_thrift_remove_acl_table_chain_group_result&);
  sai_rpc_sai_thrift_remove_acl_table_chain_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_acl_table_chain_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_chain_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_acl_table_chain_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_acl_table_chain_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_acl_table_chain_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_acl_table_chain_group_presult__isset {
  _sai_rpc_sai_thrift_remove_acl_table_chain_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_acl_table_chain_group_presult__isset;

class sai_rpc_sai_thrift_remove_acl_table_chain_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_acl_table_chain_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_acl_table_chain_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args__isset() : acl_table_chain_group_oid(false), attr(false) {}
  bool acl_table_chain_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args(const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args&);
  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args() : acl_table_chain_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args() throw();
  sai_thrift_object_id_t acl_table_chain_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args__isset __isset;

  void __set_acl_table_chain_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args & rhs) const
  {
    if (!(acl_table_chain_group_oid == rhs.acl_table_chain_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_chain_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result(const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result&);
  sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_acl_table_chain_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args__isset() : acl_table_chain_group_oid(false), attr_list(false) {}
  bool acl_table_chain_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args(const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args&);
  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args() : acl_table_chain_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args() throw();
  sai_thrift_object_id_t acl_table_chain_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args__isset __isset;

  void __set_acl_table_chain_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args & rhs) const
  {
    if (!(acl_table_chain_group_oid == rhs.acl_table_chain_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_chain_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result(const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result&);
  sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_acl_table_chain_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ars_args__isset {
  _sai_rpc_sai_thrift_create_ars_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ars_args__isset;

class sai_rpc_sai_thrift_create_ars_args {
 public:

  sai_rpc_sai_thrift_create_ars_args(const sai_rpc_sai_thrift_create_ars_args&);
  sai_rpc_sai_thrift_create_ars_args& operator=(const sai_rpc_sai_thrift_create_ars_args&);
  sai_rpc_sai_thrift_create_ars_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ars_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ars_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ars_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ars_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ars_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ars_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ars_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ars_result__isset {
  _sai_rpc_sai_thrift_create_ars_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ars_result__isset;

class sai_rpc_sai_thrift_create_ars_result {
 public:

  sai_rpc_sai_thrift_create_ars_result(const sai_rpc_sai_thrift_create_ars_result&);
  sai_rpc_sai_thrift_create_ars_result& operator=(const sai_rpc_sai_thrift_create_ars_result&);
  sai_rpc_sai_thrift_create_ars_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ars_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ars_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ars_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ars_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ars_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ars_presult__isset {
  _sai_rpc_sai_thrift_create_ars_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ars_presult__isset;

class sai_rpc_sai_thrift_create_ars_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ars_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ars_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ars_args__isset {
  _sai_rpc_sai_thrift_remove_ars_args__isset() : ars_oid(false) {}
  bool ars_oid :1;
} _sai_rpc_sai_thrift_remove_ars_args__isset;

class sai_rpc_sai_thrift_remove_ars_args {
 public:

  sai_rpc_sai_thrift_remove_ars_args(const sai_rpc_sai_thrift_remove_ars_args&);
  sai_rpc_sai_thrift_remove_ars_args& operator=(const sai_rpc_sai_thrift_remove_ars_args&);
  sai_rpc_sai_thrift_remove_ars_args() : ars_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ars_args() throw();
  sai_thrift_object_id_t ars_oid;

  _sai_rpc_sai_thrift_remove_ars_args__isset __isset;

  void __set_ars_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ars_args & rhs) const
  {
    if (!(ars_oid == rhs.ars_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ars_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ars_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ars_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ars_pargs() throw();
  const sai_thrift_object_id_t* ars_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ars_result__isset {
  _sai_rpc_sai_thrift_remove_ars_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ars_result__isset;

class sai_rpc_sai_thrift_remove_ars_result {
 public:

  sai_rpc_sai_thrift_remove_ars_result(const sai_rpc_sai_thrift_remove_ars_result&);
  sai_rpc_sai_thrift_remove_ars_result& operator=(const sai_rpc_sai_thrift_remove_ars_result&);
  sai_rpc_sai_thrift_remove_ars_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ars_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ars_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ars_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ars_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ars_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ars_presult__isset {
  _sai_rpc_sai_thrift_remove_ars_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ars_presult__isset;

class sai_rpc_sai_thrift_remove_ars_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ars_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ars_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ars_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ars_attribute_args__isset() : ars_oid(false), attr(false) {}
  bool ars_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ars_attribute_args__isset;

class sai_rpc_sai_thrift_set_ars_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ars_attribute_args(const sai_rpc_sai_thrift_set_ars_attribute_args&);
  sai_rpc_sai_thrift_set_ars_attribute_args& operator=(const sai_rpc_sai_thrift_set_ars_attribute_args&);
  sai_rpc_sai_thrift_set_ars_attribute_args() : ars_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ars_attribute_args() throw();
  sai_thrift_object_id_t ars_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ars_attribute_args__isset __isset;

  void __set_ars_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ars_attribute_args & rhs) const
  {
    if (!(ars_oid == rhs.ars_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ars_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ars_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ars_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ars_attribute_pargs() throw();
  const sai_thrift_object_id_t* ars_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ars_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ars_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ars_attribute_result__isset;

class sai_rpc_sai_thrift_set_ars_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ars_attribute_result(const sai_rpc_sai_thrift_set_ars_attribute_result&);
  sai_rpc_sai_thrift_set_ars_attribute_result& operator=(const sai_rpc_sai_thrift_set_ars_attribute_result&);
  sai_rpc_sai_thrift_set_ars_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ars_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ars_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ars_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ars_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ars_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ars_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ars_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ars_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ars_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ars_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ars_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ars_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ars_attribute_args__isset() : ars_oid(false), attr_list(false) {}
  bool ars_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ars_attribute_args__isset;

class sai_rpc_sai_thrift_get_ars_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ars_attribute_args(const sai_rpc_sai_thrift_get_ars_attribute_args&);
  sai_rpc_sai_thrift_get_ars_attribute_args& operator=(const sai_rpc_sai_thrift_get_ars_attribute_args&);
  sai_rpc_sai_thrift_get_ars_attribute_args() : ars_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ars_attribute_args() throw();
  sai_thrift_object_id_t ars_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ars_attribute_args__isset __isset;

  void __set_ars_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ars_attribute_args & rhs) const
  {
    if (!(ars_oid == rhs.ars_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ars_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ars_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ars_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ars_attribute_pargs() throw();
  const sai_thrift_object_id_t* ars_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ars_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ars_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ars_attribute_result__isset;

class sai_rpc_sai_thrift_get_ars_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ars_attribute_result(const sai_rpc_sai_thrift_get_ars_attribute_result&);
  sai_rpc_sai_thrift_get_ars_attribute_result& operator=(const sai_rpc_sai_thrift_get_ars_attribute_result&);
  sai_rpc_sai_thrift_get_ars_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ars_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ars_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ars_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ars_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ars_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ars_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ars_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ars_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ars_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ars_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ars_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ars_profile_args__isset {
  _sai_rpc_sai_thrift_create_ars_profile_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ars_profile_args__isset;

class sai_rpc_sai_thrift_create_ars_profile_args {
 public:

  sai_rpc_sai_thrift_create_ars_profile_args(const sai_rpc_sai_thrift_create_ars_profile_args&);
  sai_rpc_sai_thrift_create_ars_profile_args& operator=(const sai_rpc_sai_thrift_create_ars_profile_args&);
  sai_rpc_sai_thrift_create_ars_profile_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ars_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ars_profile_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ars_profile_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ars_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ars_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ars_profile_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ars_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ars_profile_result__isset {
  _sai_rpc_sai_thrift_create_ars_profile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ars_profile_result__isset;

class sai_rpc_sai_thrift_create_ars_profile_result {
 public:

  sai_rpc_sai_thrift_create_ars_profile_result(const sai_rpc_sai_thrift_create_ars_profile_result&);
  sai_rpc_sai_thrift_create_ars_profile_result& operator=(const sai_rpc_sai_thrift_create_ars_profile_result&);
  sai_rpc_sai_thrift_create_ars_profile_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ars_profile_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ars_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ars_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ars_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ars_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ars_profile_presult__isset {
  _sai_rpc_sai_thrift_create_ars_profile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ars_profile_presult__isset;

class sai_rpc_sai_thrift_create_ars_profile_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ars_profile_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ars_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ars_profile_args__isset {
  _sai_rpc_sai_thrift_remove_ars_profile_args__isset() : ars_profile_oid(false) {}
  bool ars_profile_oid :1;
} _sai_rpc_sai_thrift_remove_ars_profile_args__isset;

class sai_rpc_sai_thrift_remove_ars_profile_args {
 public:

  sai_rpc_sai_thrift_remove_ars_profile_args(const sai_rpc_sai_thrift_remove_ars_profile_args&);
  sai_rpc_sai_thrift_remove_ars_profile_args& operator=(const sai_rpc_sai_thrift_remove_ars_profile_args&);
  sai_rpc_sai_thrift_remove_ars_profile_args() : ars_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ars_profile_args() throw();
  sai_thrift_object_id_t ars_profile_oid;

  _sai_rpc_sai_thrift_remove_ars_profile_args__isset __isset;

  void __set_ars_profile_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ars_profile_args & rhs) const
  {
    if (!(ars_profile_oid == rhs.ars_profile_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ars_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ars_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ars_profile_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ars_profile_pargs() throw();
  const sai_thrift_object_id_t* ars_profile_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ars_profile_result__isset {
  _sai_rpc_sai_thrift_remove_ars_profile_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ars_profile_result__isset;

class sai_rpc_sai_thrift_remove_ars_profile_result {
 public:

  sai_rpc_sai_thrift_remove_ars_profile_result(const sai_rpc_sai_thrift_remove_ars_profile_result&);
  sai_rpc_sai_thrift_remove_ars_profile_result& operator=(const sai_rpc_sai_thrift_remove_ars_profile_result&);
  sai_rpc_sai_thrift_remove_ars_profile_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ars_profile_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ars_profile_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ars_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ars_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ars_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ars_profile_presult__isset {
  _sai_rpc_sai_thrift_remove_ars_profile_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ars_profile_presult__isset;

class sai_rpc_sai_thrift_remove_ars_profile_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ars_profile_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ars_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ars_profile_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ars_profile_attribute_args__isset() : ars_profile_oid(false), attr(false) {}
  bool ars_profile_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ars_profile_attribute_args__isset;

class sai_rpc_sai_thrift_set_ars_profile_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ars_profile_attribute_args(const sai_rpc_sai_thrift_set_ars_profile_attribute_args&);
  sai_rpc_sai_thrift_set_ars_profile_attribute_args& operator=(const sai_rpc_sai_thrift_set_ars_profile_attribute_args&);
  sai_rpc_sai_thrift_set_ars_profile_attribute_args() : ars_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ars_profile_attribute_args() throw();
  sai_thrift_object_id_t ars_profile_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ars_profile_attribute_args__isset __isset;

  void __set_ars_profile_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ars_profile_attribute_args & rhs) const
  {
    if (!(ars_profile_oid == rhs.ars_profile_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ars_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ars_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ars_profile_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ars_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* ars_profile_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ars_profile_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ars_profile_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ars_profile_attribute_result__isset;

class sai_rpc_sai_thrift_set_ars_profile_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ars_profile_attribute_result(const sai_rpc_sai_thrift_set_ars_profile_attribute_result&);
  sai_rpc_sai_thrift_set_ars_profile_attribute_result& operator=(const sai_rpc_sai_thrift_set_ars_profile_attribute_result&);
  sai_rpc_sai_thrift_set_ars_profile_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ars_profile_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ars_profile_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ars_profile_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ars_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ars_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ars_profile_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ars_profile_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ars_profile_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ars_profile_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ars_profile_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ars_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ars_profile_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ars_profile_attribute_args__isset() : ars_profile_oid(false), attr_list(false) {}
  bool ars_profile_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ars_profile_attribute_args__isset;

class sai_rpc_sai_thrift_get_ars_profile_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ars_profile_attribute_args(const sai_rpc_sai_thrift_get_ars_profile_attribute_args&);
  sai_rpc_sai_thrift_get_ars_profile_attribute_args& operator=(const sai_rpc_sai_thrift_get_ars_profile_attribute_args&);
  sai_rpc_sai_thrift_get_ars_profile_attribute_args() : ars_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ars_profile_attribute_args() throw();
  sai_thrift_object_id_t ars_profile_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ars_profile_attribute_args__isset __isset;

  void __set_ars_profile_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ars_profile_attribute_args & rhs) const
  {
    if (!(ars_profile_oid == rhs.ars_profile_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ars_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ars_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ars_profile_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ars_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* ars_profile_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ars_profile_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ars_profile_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ars_profile_attribute_result__isset;

class sai_rpc_sai_thrift_get_ars_profile_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ars_profile_attribute_result(const sai_rpc_sai_thrift_get_ars_profile_attribute_result&);
  sai_rpc_sai_thrift_get_ars_profile_attribute_result& operator=(const sai_rpc_sai_thrift_get_ars_profile_attribute_result&);
  sai_rpc_sai_thrift_get_ars_profile_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ars_profile_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ars_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ars_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ars_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ars_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ars_profile_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ars_profile_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ars_profile_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ars_profile_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ars_profile_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ars_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_bfd_session_args__isset {
  _sai_rpc_sai_thrift_create_bfd_session_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_bfd_session_args__isset;

class sai_rpc_sai_thrift_create_bfd_session_args {
 public:

  sai_rpc_sai_thrift_create_bfd_session_args(const sai_rpc_sai_thrift_create_bfd_session_args&);
  sai_rpc_sai_thrift_create_bfd_session_args& operator=(const sai_rpc_sai_thrift_create_bfd_session_args&);
  sai_rpc_sai_thrift_create_bfd_session_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_bfd_session_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_bfd_session_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_bfd_session_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bfd_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bfd_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_bfd_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_bfd_session_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bfd_session_result__isset {
  _sai_rpc_sai_thrift_create_bfd_session_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bfd_session_result__isset;

class sai_rpc_sai_thrift_create_bfd_session_result {
 public:

  sai_rpc_sai_thrift_create_bfd_session_result(const sai_rpc_sai_thrift_create_bfd_session_result&);
  sai_rpc_sai_thrift_create_bfd_session_result& operator=(const sai_rpc_sai_thrift_create_bfd_session_result&);
  sai_rpc_sai_thrift_create_bfd_session_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_bfd_session_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bfd_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_bfd_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bfd_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bfd_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bfd_session_presult__isset {
  _sai_rpc_sai_thrift_create_bfd_session_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bfd_session_presult__isset;

class sai_rpc_sai_thrift_create_bfd_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_bfd_session_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bfd_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_bfd_session_args__isset {
  _sai_rpc_sai_thrift_remove_bfd_session_args__isset() : bfd_session_oid(false) {}
  bool bfd_session_oid :1;
} _sai_rpc_sai_thrift_remove_bfd_session_args__isset;

class sai_rpc_sai_thrift_remove_bfd_session_args {
 public:

  sai_rpc_sai_thrift_remove_bfd_session_args(const sai_rpc_sai_thrift_remove_bfd_session_args&);
  sai_rpc_sai_thrift_remove_bfd_session_args& operator=(const sai_rpc_sai_thrift_remove_bfd_session_args&);
  sai_rpc_sai_thrift_remove_bfd_session_args() : bfd_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_bfd_session_args() throw();
  sai_thrift_object_id_t bfd_session_oid;

  _sai_rpc_sai_thrift_remove_bfd_session_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_bfd_session_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bfd_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bfd_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_bfd_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bfd_session_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bfd_session_result__isset {
  _sai_rpc_sai_thrift_remove_bfd_session_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bfd_session_result__isset;

class sai_rpc_sai_thrift_remove_bfd_session_result {
 public:

  sai_rpc_sai_thrift_remove_bfd_session_result(const sai_rpc_sai_thrift_remove_bfd_session_result&);
  sai_rpc_sai_thrift_remove_bfd_session_result& operator=(const sai_rpc_sai_thrift_remove_bfd_session_result&);
  sai_rpc_sai_thrift_remove_bfd_session_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_bfd_session_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bfd_session_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_bfd_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bfd_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bfd_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bfd_session_presult__isset {
  _sai_rpc_sai_thrift_remove_bfd_session_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bfd_session_presult__isset;

class sai_rpc_sai_thrift_remove_bfd_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bfd_session_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bfd_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_bfd_session_attribute_args__isset {
  _sai_rpc_sai_thrift_set_bfd_session_attribute_args__isset() : bfd_session_oid(false), attr(false) {}
  bool bfd_session_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_bfd_session_attribute_args__isset;

class sai_rpc_sai_thrift_set_bfd_session_attribute_args {
 public:

  sai_rpc_sai_thrift_set_bfd_session_attribute_args(const sai_rpc_sai_thrift_set_bfd_session_attribute_args&);
  sai_rpc_sai_thrift_set_bfd_session_attribute_args& operator=(const sai_rpc_sai_thrift_set_bfd_session_attribute_args&);
  sai_rpc_sai_thrift_set_bfd_session_attribute_args() : bfd_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_bfd_session_attribute_args() throw();
  sai_thrift_object_id_t bfd_session_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_bfd_session_attribute_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_bfd_session_attribute_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bfd_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bfd_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_bfd_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_bfd_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bfd_session_attribute_result__isset {
  _sai_rpc_sai_thrift_set_bfd_session_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bfd_session_attribute_result__isset;

class sai_rpc_sai_thrift_set_bfd_session_attribute_result {
 public:

  sai_rpc_sai_thrift_set_bfd_session_attribute_result(const sai_rpc_sai_thrift_set_bfd_session_attribute_result&);
  sai_rpc_sai_thrift_set_bfd_session_attribute_result& operator=(const sai_rpc_sai_thrift_set_bfd_session_attribute_result&);
  sai_rpc_sai_thrift_set_bfd_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_bfd_session_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bfd_session_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_bfd_session_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bfd_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bfd_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bfd_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_bfd_session_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bfd_session_attribute_presult__isset;

class sai_rpc_sai_thrift_set_bfd_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_bfd_session_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bfd_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_attribute_args__isset {
  _sai_rpc_sai_thrift_get_bfd_session_attribute_args__isset() : bfd_session_oid(false), attr_list(false) {}
  bool bfd_session_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_bfd_session_attribute_args__isset;

class sai_rpc_sai_thrift_get_bfd_session_attribute_args {
 public:

  sai_rpc_sai_thrift_get_bfd_session_attribute_args(const sai_rpc_sai_thrift_get_bfd_session_attribute_args&);
  sai_rpc_sai_thrift_get_bfd_session_attribute_args& operator=(const sai_rpc_sai_thrift_get_bfd_session_attribute_args&);
  sai_rpc_sai_thrift_get_bfd_session_attribute_args() : bfd_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_attribute_args() throw();
  sai_thrift_object_id_t bfd_session_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_bfd_session_attribute_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_attribute_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bfd_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_attribute_result__isset {
  _sai_rpc_sai_thrift_get_bfd_session_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_attribute_result__isset;

class sai_rpc_sai_thrift_get_bfd_session_attribute_result {
 public:

  sai_rpc_sai_thrift_get_bfd_session_attribute_result(const sai_rpc_sai_thrift_get_bfd_session_attribute_result&);
  sai_rpc_sai_thrift_get_bfd_session_attribute_result& operator=(const sai_rpc_sai_thrift_get_bfd_session_attribute_result&);
  sai_rpc_sai_thrift_get_bfd_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_bfd_session_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_attribute_presult__isset;

class sai_rpc_sai_thrift_get_bfd_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_args__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_args__isset() : bfd_session_oid(false), counter_ids(false) {}
  bool bfd_session_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_args__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_args {
 public:

  sai_rpc_sai_thrift_get_bfd_session_stats_args(const sai_rpc_sai_thrift_get_bfd_session_stats_args&);
  sai_rpc_sai_thrift_get_bfd_session_stats_args& operator=(const sai_rpc_sai_thrift_get_bfd_session_stats_args&);
  sai_rpc_sai_thrift_get_bfd_session_stats_args() : bfd_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_args() throw();
  sai_thrift_object_id_t bfd_session_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_bfd_session_stats_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_stats_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bfd_session_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_result__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_result__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_result {
 public:

  sai_rpc_sai_thrift_get_bfd_session_stats_result(const sai_rpc_sai_thrift_get_bfd_session_stats_result&);
  sai_rpc_sai_thrift_get_bfd_session_stats_result& operator=(const sai_rpc_sai_thrift_get_bfd_session_stats_result&);
  sai_rpc_sai_thrift_get_bfd_session_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_presult__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_presult__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_args__isset() : bfd_session_oid(false), counter_ids(false), mode(false) {}
  bool bfd_session_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_bfd_session_stats_ext_args(const sai_rpc_sai_thrift_get_bfd_session_stats_ext_args&);
  sai_rpc_sai_thrift_get_bfd_session_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_bfd_session_stats_ext_args&);
  sai_rpc_sai_thrift_get_bfd_session_stats_ext_args() : bfd_session_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_ext_args() throw();
  sai_thrift_object_id_t bfd_session_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bfd_session_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_bfd_session_stats_ext_result(const sai_rpc_sai_thrift_get_bfd_session_stats_ext_result&);
  sai_rpc_sai_thrift_get_bfd_session_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_bfd_session_stats_ext_result&);
  sai_rpc_sai_thrift_get_bfd_session_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bfd_session_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bfd_session_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_bfd_session_stats_args__isset {
  _sai_rpc_sai_thrift_clear_bfd_session_stats_args__isset() : bfd_session_oid(false), counter_ids(false) {}
  bool bfd_session_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_bfd_session_stats_args__isset;

class sai_rpc_sai_thrift_clear_bfd_session_stats_args {
 public:

  sai_rpc_sai_thrift_clear_bfd_session_stats_args(const sai_rpc_sai_thrift_clear_bfd_session_stats_args&);
  sai_rpc_sai_thrift_clear_bfd_session_stats_args& operator=(const sai_rpc_sai_thrift_clear_bfd_session_stats_args&);
  sai_rpc_sai_thrift_clear_bfd_session_stats_args() : bfd_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_bfd_session_stats_args() throw();
  sai_thrift_object_id_t bfd_session_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_bfd_session_stats_args__isset __isset;

  void __set_bfd_session_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_bfd_session_stats_args & rhs) const
  {
    if (!(bfd_session_oid == rhs.bfd_session_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bfd_session_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bfd_session_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_bfd_session_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bfd_session_stats_pargs() throw();
  const sai_thrift_object_id_t* bfd_session_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bfd_session_stats_result__isset {
  _sai_rpc_sai_thrift_clear_bfd_session_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bfd_session_stats_result__isset;

class sai_rpc_sai_thrift_clear_bfd_session_stats_result {
 public:

  sai_rpc_sai_thrift_clear_bfd_session_stats_result(const sai_rpc_sai_thrift_clear_bfd_session_stats_result&);
  sai_rpc_sai_thrift_clear_bfd_session_stats_result& operator=(const sai_rpc_sai_thrift_clear_bfd_session_stats_result&);
  sai_rpc_sai_thrift_clear_bfd_session_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_bfd_session_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bfd_session_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_bfd_session_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bfd_session_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bfd_session_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bfd_session_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_bfd_session_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bfd_session_stats_presult__isset;

class sai_rpc_sai_thrift_clear_bfd_session_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bfd_session_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bfd_session_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args__isset;

class sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args {
 public:

  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args(const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args&);
  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args& operator=(const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args&);
  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_table_bitmap_classification_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_bitmap_classification_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result__isset;

class sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result {
 public:

  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result(const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result&);
  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result& operator=(const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result&);
  sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_bitmap_classification_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult__isset;

class sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_bitmap_classification_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args__isset() : table_bitmap_classification_entry_oid(false) {}
  bool table_bitmap_classification_entry_oid :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args {
 public:

  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args(const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args&);
  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args& operator=(const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args&);
  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args() : table_bitmap_classification_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;

  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result {
 public:

  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result(const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result&);
  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result& operator=(const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result&);
  sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_bitmap_classification_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args__isset() : table_bitmap_classification_entry_oid(false), attr(false) {}
  bool table_bitmap_classification_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args(const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args() : table_bitmap_classification_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result(const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_bitmap_classification_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args__isset() : table_bitmap_classification_entry_oid(false), attr_list(false) {}
  bool table_bitmap_classification_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args() : table_bitmap_classification_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args__isset() : table_bitmap_classification_entry_oid(false), counter_ids(false) {}
  bool table_bitmap_classification_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args() : table_bitmap_classification_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args__isset() : table_bitmap_classification_entry_oid(false), counter_ids(false), mode(false) {}
  bool table_bitmap_classification_entry_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args() : table_bitmap_classification_entry_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_classification_entry_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args__isset() : table_bitmap_classification_entry_oid(false), counter_ids(false) {}
  bool table_bitmap_classification_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args {
 public:

  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args(const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args& operator=(const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args() : table_bitmap_classification_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args() throw();
  sai_thrift_object_id_t table_bitmap_classification_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args__isset __isset;

  void __set_table_bitmap_classification_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args & rhs) const
  {
    if (!(table_bitmap_classification_entry_oid == rhs.table_bitmap_classification_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_classification_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result {
 public:

  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result(const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result& operator=(const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_bitmap_classification_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_router_entry_args__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_table_bitmap_router_entry_args__isset;

class sai_rpc_sai_thrift_create_table_bitmap_router_entry_args {
 public:

  sai_rpc_sai_thrift_create_table_bitmap_router_entry_args(const sai_rpc_sai_thrift_create_table_bitmap_router_entry_args&);
  sai_rpc_sai_thrift_create_table_bitmap_router_entry_args& operator=(const sai_rpc_sai_thrift_create_table_bitmap_router_entry_args&);
  sai_rpc_sai_thrift_create_table_bitmap_router_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_table_bitmap_router_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_table_bitmap_router_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_bitmap_router_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_router_entry_result__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_bitmap_router_entry_result__isset;

class sai_rpc_sai_thrift_create_table_bitmap_router_entry_result {
 public:

  sai_rpc_sai_thrift_create_table_bitmap_router_entry_result(const sai_rpc_sai_thrift_create_table_bitmap_router_entry_result&);
  sai_rpc_sai_thrift_create_table_bitmap_router_entry_result& operator=(const sai_rpc_sai_thrift_create_table_bitmap_router_entry_result&);
  sai_rpc_sai_thrift_create_table_bitmap_router_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_table_bitmap_router_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_bitmap_router_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult__isset {
  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult__isset;

class sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_bitmap_router_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args__isset() : table_bitmap_router_entry_oid(false) {}
  bool table_bitmap_router_entry_oid :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args {
 public:

  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args(const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args&);
  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args& operator=(const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args&);
  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args() : table_bitmap_router_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;

  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_table_bitmap_router_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_router_entry_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result {
 public:

  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result(const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result&);
  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result& operator=(const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result&);
  sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_bitmap_router_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult__isset;

class sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_bitmap_router_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args__isset() : table_bitmap_router_entry_oid(false), attr(false) {}
  bool table_bitmap_router_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args(const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args() : table_bitmap_router_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result(const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_bitmap_router_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args__isset() : table_bitmap_router_entry_oid(false), attr_list(false) {}
  bool table_bitmap_router_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args() : table_bitmap_router_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args__isset() : table_bitmap_router_entry_oid(false), counter_ids(false) {}
  bool table_bitmap_router_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args() : table_bitmap_router_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args__isset() : table_bitmap_router_entry_oid(false), counter_ids(false), mode(false) {}
  bool table_bitmap_router_entry_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args() : table_bitmap_router_entry_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_bitmap_router_entry_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args__isset() : table_bitmap_router_entry_oid(false), counter_ids(false) {}
  bool table_bitmap_router_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args {
 public:

  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args(const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args& operator=(const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args() : table_bitmap_router_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args() throw();
  sai_thrift_object_id_t table_bitmap_router_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args__isset __isset;

  void __set_table_bitmap_router_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args & rhs) const
  {
    if (!(table_bitmap_router_entry_oid == rhs.table_bitmap_router_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_bitmap_router_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result {
 public:

  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result(const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result& operator=(const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult__isset;

class sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_bitmap_router_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args__isset {
  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args__isset;

class sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args {
 public:

  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args(const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args&);
  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args& operator=(const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args&);
  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_table_meta_tunnel_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_meta_tunnel_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result__isset {
  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result__isset;

class sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result {
 public:

  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result(const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result&);
  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result& operator=(const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result&);
  sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_table_meta_tunnel_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult__isset {
  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult__isset;

class sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_table_meta_tunnel_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args__isset {
  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args__isset() : table_meta_tunnel_entry_oid(false) {}
  bool table_meta_tunnel_entry_oid :1;
} _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args__isset;

class sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args {
 public:

  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args(const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args&);
  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args& operator=(const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args&);
  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args() : table_meta_tunnel_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;

  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result__isset {
  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result__isset;

class sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result {
 public:

  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result(const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result&);
  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result& operator=(const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result&);
  sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult__isset;

class sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_table_meta_tunnel_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args__isset() : table_meta_tunnel_entry_oid(false), attr(false) {}
  bool table_meta_tunnel_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args(const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args&);
  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args() : table_meta_tunnel_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result(const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result&);
  sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_table_meta_tunnel_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args__isset() : table_meta_tunnel_entry_oid(false), attr_list(false) {}
  bool table_meta_tunnel_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args() : table_meta_tunnel_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args__isset() : table_meta_tunnel_entry_oid(false), counter_ids(false) {}
  bool table_meta_tunnel_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args() : table_meta_tunnel_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args__isset() : table_meta_tunnel_entry_oid(false), counter_ids(false), mode(false) {}
  bool table_meta_tunnel_entry_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args() : table_meta_tunnel_entry_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result&);
  sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_table_meta_tunnel_entry_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args__isset {
  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args__isset() : table_meta_tunnel_entry_oid(false), counter_ids(false) {}
  bool table_meta_tunnel_entry_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args__isset;

class sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args {
 public:

  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args(const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args& operator=(const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args&);
  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args() : table_meta_tunnel_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args() throw();
  sai_thrift_object_id_t table_meta_tunnel_entry_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args__isset __isset;

  void __set_table_meta_tunnel_entry_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args & rhs) const
  {
    if (!(table_meta_tunnel_entry_oid == rhs.table_meta_tunnel_entry_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_pargs() throw();
  const sai_thrift_object_id_t* table_meta_tunnel_entry_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result__isset {
  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result__isset;

class sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result {
 public:

  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result(const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result& operator=(const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result&);
  sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult__isset;

class sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_table_meta_tunnel_entry_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_bridge_port_args__isset {
  _sai_rpc_sai_thrift_create_bridge_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_bridge_port_args__isset;

class sai_rpc_sai_thrift_create_bridge_port_args {
 public:

  sai_rpc_sai_thrift_create_bridge_port_args(const sai_rpc_sai_thrift_create_bridge_port_args&);
  sai_rpc_sai_thrift_create_bridge_port_args& operator=(const sai_rpc_sai_thrift_create_bridge_port_args&);
  sai_rpc_sai_thrift_create_bridge_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_bridge_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_bridge_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_bridge_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_bridge_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_bridge_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bridge_port_result__isset {
  _sai_rpc_sai_thrift_create_bridge_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bridge_port_result__isset;

class sai_rpc_sai_thrift_create_bridge_port_result {
 public:

  sai_rpc_sai_thrift_create_bridge_port_result(const sai_rpc_sai_thrift_create_bridge_port_result&);
  sai_rpc_sai_thrift_create_bridge_port_result& operator=(const sai_rpc_sai_thrift_create_bridge_port_result&);
  sai_rpc_sai_thrift_create_bridge_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_bridge_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bridge_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_bridge_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bridge_port_presult__isset {
  _sai_rpc_sai_thrift_create_bridge_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bridge_port_presult__isset;

class sai_rpc_sai_thrift_create_bridge_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_bridge_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_port_args__isset {
  _sai_rpc_sai_thrift_remove_bridge_port_args__isset() : bridge_port_oid(false) {}
  bool bridge_port_oid :1;
} _sai_rpc_sai_thrift_remove_bridge_port_args__isset;

class sai_rpc_sai_thrift_remove_bridge_port_args {
 public:

  sai_rpc_sai_thrift_remove_bridge_port_args(const sai_rpc_sai_thrift_remove_bridge_port_args&);
  sai_rpc_sai_thrift_remove_bridge_port_args& operator=(const sai_rpc_sai_thrift_remove_bridge_port_args&);
  sai_rpc_sai_thrift_remove_bridge_port_args() : bridge_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_bridge_port_args() throw();
  sai_thrift_object_id_t bridge_port_oid;

  _sai_rpc_sai_thrift_remove_bridge_port_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_bridge_port_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_bridge_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bridge_port_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_port_result__isset {
  _sai_rpc_sai_thrift_remove_bridge_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bridge_port_result__isset;

class sai_rpc_sai_thrift_remove_bridge_port_result {
 public:

  sai_rpc_sai_thrift_remove_bridge_port_result(const sai_rpc_sai_thrift_remove_bridge_port_result&);
  sai_rpc_sai_thrift_remove_bridge_port_result& operator=(const sai_rpc_sai_thrift_remove_bridge_port_result&);
  sai_rpc_sai_thrift_remove_bridge_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_bridge_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bridge_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_bridge_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_port_presult__isset {
  _sai_rpc_sai_thrift_remove_bridge_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bridge_port_presult__isset;

class sai_rpc_sai_thrift_remove_bridge_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bridge_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset() : bridge_port_oid(false), attr(false) {}
  bool bridge_port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_bridge_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_bridge_port_attribute_args(const sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  sai_rpc_sai_thrift_set_bridge_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  sai_rpc_sai_thrift_set_bridge_port_attribute_args() : bridge_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_bridge_port_attribute_args() throw();
  sai_thrift_object_id_t bridge_port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_bridge_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_bridge_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_bridge_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_bridge_port_attribute_result(const sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  sai_rpc_sai_thrift_set_bridge_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  sai_rpc_sai_thrift_set_bridge_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_bridge_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_bridge_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_bridge_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_bridge_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset() : bridge_port_oid(false), attr_list(false) {}
  bool bridge_port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_bridge_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_bridge_port_attribute_args(const sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  sai_rpc_sai_thrift_get_bridge_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  sai_rpc_sai_thrift_get_bridge_port_attribute_args() : bridge_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_attribute_args() throw();
  sai_thrift_object_id_t bridge_port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_bridge_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_bridge_port_attribute_result(const sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  sai_rpc_sai_thrift_get_bridge_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  sai_rpc_sai_thrift_get_bridge_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_bridge_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_args__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_args__isset() : bridge_port_oid(false), counter_ids(false) {}
  bool bridge_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_args__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_args {
 public:

  sai_rpc_sai_thrift_get_bridge_port_stats_args(const sai_rpc_sai_thrift_get_bridge_port_stats_args&);
  sai_rpc_sai_thrift_get_bridge_port_stats_args& operator=(const sai_rpc_sai_thrift_get_bridge_port_stats_args&);
  sai_rpc_sai_thrift_get_bridge_port_stats_args() : bridge_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_args() throw();
  sai_thrift_object_id_t bridge_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_bridge_port_stats_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_stats_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_result__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_result__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_result {
 public:

  sai_rpc_sai_thrift_get_bridge_port_stats_result(const sai_rpc_sai_thrift_get_bridge_port_stats_result&);
  sai_rpc_sai_thrift_get_bridge_port_stats_result& operator=(const sai_rpc_sai_thrift_get_bridge_port_stats_result&);
  sai_rpc_sai_thrift_get_bridge_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset() : bridge_port_oid(false), counter_ids(false), mode(false) {}
  bool bridge_port_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_bridge_port_stats_ext_args(const sai_rpc_sai_thrift_get_bridge_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_bridge_port_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_bridge_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_bridge_port_stats_ext_args() : bridge_port_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_ext_args() throw();
  sai_thrift_object_id_t bridge_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_port_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_bridge_port_stats_ext_result(const sai_rpc_sai_thrift_get_bridge_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_bridge_port_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_bridge_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_bridge_port_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset {
  _sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset() : bridge_port_oid(false), counter_ids(false) {}
  bool bridge_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset;

class sai_rpc_sai_thrift_clear_bridge_port_stats_args {
 public:

  sai_rpc_sai_thrift_clear_bridge_port_stats_args(const sai_rpc_sai_thrift_clear_bridge_port_stats_args&);
  sai_rpc_sai_thrift_clear_bridge_port_stats_args& operator=(const sai_rpc_sai_thrift_clear_bridge_port_stats_args&);
  sai_rpc_sai_thrift_clear_bridge_port_stats_args() : bridge_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_bridge_port_stats_args() throw();
  sai_thrift_object_id_t bridge_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_bridge_port_stats_args__isset __isset;

  void __set_bridge_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_bridge_port_stats_args & rhs) const
  {
    if (!(bridge_port_oid == rhs.bridge_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bridge_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bridge_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_bridge_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bridge_port_stats_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset {
  _sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset;

class sai_rpc_sai_thrift_clear_bridge_port_stats_result {
 public:

  sai_rpc_sai_thrift_clear_bridge_port_stats_result(const sai_rpc_sai_thrift_clear_bridge_port_stats_result&);
  sai_rpc_sai_thrift_clear_bridge_port_stats_result& operator=(const sai_rpc_sai_thrift_clear_bridge_port_stats_result&);
  sai_rpc_sai_thrift_clear_bridge_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_bridge_port_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bridge_port_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_bridge_port_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bridge_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bridge_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset;

class sai_rpc_sai_thrift_clear_bridge_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bridge_port_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bridge_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_bridge_args__isset {
  _sai_rpc_sai_thrift_create_bridge_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_bridge_args__isset;

class sai_rpc_sai_thrift_create_bridge_args {
 public:

  sai_rpc_sai_thrift_create_bridge_args(const sai_rpc_sai_thrift_create_bridge_args&);
  sai_rpc_sai_thrift_create_bridge_args& operator=(const sai_rpc_sai_thrift_create_bridge_args&);
  sai_rpc_sai_thrift_create_bridge_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_bridge_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_bridge_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_bridge_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_bridge_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_bridge_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bridge_result__isset {
  _sai_rpc_sai_thrift_create_bridge_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bridge_result__isset;

class sai_rpc_sai_thrift_create_bridge_result {
 public:

  sai_rpc_sai_thrift_create_bridge_result(const sai_rpc_sai_thrift_create_bridge_result&);
  sai_rpc_sai_thrift_create_bridge_result& operator=(const sai_rpc_sai_thrift_create_bridge_result&);
  sai_rpc_sai_thrift_create_bridge_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_bridge_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bridge_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_bridge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_bridge_presult__isset {
  _sai_rpc_sai_thrift_create_bridge_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_bridge_presult__isset;

class sai_rpc_sai_thrift_create_bridge_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_bridge_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_args__isset {
  _sai_rpc_sai_thrift_remove_bridge_args__isset() : bridge_oid(false) {}
  bool bridge_oid :1;
} _sai_rpc_sai_thrift_remove_bridge_args__isset;

class sai_rpc_sai_thrift_remove_bridge_args {
 public:

  sai_rpc_sai_thrift_remove_bridge_args(const sai_rpc_sai_thrift_remove_bridge_args&);
  sai_rpc_sai_thrift_remove_bridge_args& operator=(const sai_rpc_sai_thrift_remove_bridge_args&);
  sai_rpc_sai_thrift_remove_bridge_args() : bridge_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_bridge_args() throw();
  sai_thrift_object_id_t bridge_oid;

  _sai_rpc_sai_thrift_remove_bridge_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_bridge_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_bridge_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bridge_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_result__isset {
  _sai_rpc_sai_thrift_remove_bridge_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bridge_result__isset;

class sai_rpc_sai_thrift_remove_bridge_result {
 public:

  sai_rpc_sai_thrift_remove_bridge_result(const sai_rpc_sai_thrift_remove_bridge_result&);
  sai_rpc_sai_thrift_remove_bridge_result& operator=(const sai_rpc_sai_thrift_remove_bridge_result&);
  sai_rpc_sai_thrift_remove_bridge_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_bridge_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bridge_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_bridge_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_bridge_presult__isset {
  _sai_rpc_sai_thrift_remove_bridge_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_bridge_presult__isset;

class sai_rpc_sai_thrift_remove_bridge_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_bridge_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_bridge_attribute_args__isset {
  _sai_rpc_sai_thrift_set_bridge_attribute_args__isset() : bridge_oid(false), attr(false) {}
  bool bridge_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_bridge_attribute_args__isset;

class sai_rpc_sai_thrift_set_bridge_attribute_args {
 public:

  sai_rpc_sai_thrift_set_bridge_attribute_args(const sai_rpc_sai_thrift_set_bridge_attribute_args&);
  sai_rpc_sai_thrift_set_bridge_attribute_args& operator=(const sai_rpc_sai_thrift_set_bridge_attribute_args&);
  sai_rpc_sai_thrift_set_bridge_attribute_args() : bridge_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_bridge_attribute_args() throw();
  sai_thrift_object_id_t bridge_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_bridge_attribute_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_bridge_attribute_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_bridge_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_bridge_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bridge_attribute_result__isset {
  _sai_rpc_sai_thrift_set_bridge_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bridge_attribute_result__isset;

class sai_rpc_sai_thrift_set_bridge_attribute_result {
 public:

  sai_rpc_sai_thrift_set_bridge_attribute_result(const sai_rpc_sai_thrift_set_bridge_attribute_result&);
  sai_rpc_sai_thrift_set_bridge_attribute_result& operator=(const sai_rpc_sai_thrift_set_bridge_attribute_result&);
  sai_rpc_sai_thrift_set_bridge_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_bridge_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bridge_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_bridge_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_bridge_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_bridge_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_bridge_attribute_presult__isset;

class sai_rpc_sai_thrift_set_bridge_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_bridge_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_attribute_args__isset {
  _sai_rpc_sai_thrift_get_bridge_attribute_args__isset() : bridge_oid(false), attr_list(false) {}
  bool bridge_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_bridge_attribute_args__isset;

class sai_rpc_sai_thrift_get_bridge_attribute_args {
 public:

  sai_rpc_sai_thrift_get_bridge_attribute_args(const sai_rpc_sai_thrift_get_bridge_attribute_args&);
  sai_rpc_sai_thrift_get_bridge_attribute_args& operator=(const sai_rpc_sai_thrift_get_bridge_attribute_args&);
  sai_rpc_sai_thrift_get_bridge_attribute_args() : bridge_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_attribute_args() throw();
  sai_thrift_object_id_t bridge_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_bridge_attribute_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_attribute_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_attribute_result__isset {
  _sai_rpc_sai_thrift_get_bridge_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_attribute_result__isset;

class sai_rpc_sai_thrift_get_bridge_attribute_result {
 public:

  sai_rpc_sai_thrift_get_bridge_attribute_result(const sai_rpc_sai_thrift_get_bridge_attribute_result&);
  sai_rpc_sai_thrift_get_bridge_attribute_result& operator=(const sai_rpc_sai_thrift_get_bridge_attribute_result&);
  sai_rpc_sai_thrift_get_bridge_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_attribute_presult__isset;

class sai_rpc_sai_thrift_get_bridge_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_args__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_args__isset() : bridge_oid(false), counter_ids(false) {}
  bool bridge_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_bridge_stats_args__isset;

class sai_rpc_sai_thrift_get_bridge_stats_args {
 public:

  sai_rpc_sai_thrift_get_bridge_stats_args(const sai_rpc_sai_thrift_get_bridge_stats_args&);
  sai_rpc_sai_thrift_get_bridge_stats_args& operator=(const sai_rpc_sai_thrift_get_bridge_stats_args&);
  sai_rpc_sai_thrift_get_bridge_stats_args() : bridge_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_stats_args() throw();
  sai_thrift_object_id_t bridge_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_bridge_stats_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_stats_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_stats_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_result__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_stats_result__isset;

class sai_rpc_sai_thrift_get_bridge_stats_result {
 public:

  sai_rpc_sai_thrift_get_bridge_stats_result(const sai_rpc_sai_thrift_get_bridge_stats_result&);
  sai_rpc_sai_thrift_get_bridge_stats_result& operator=(const sai_rpc_sai_thrift_get_bridge_stats_result&);
  sai_rpc_sai_thrift_get_bridge_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_stats_presult__isset;

class sai_rpc_sai_thrift_get_bridge_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_ext_args__isset() : bridge_oid(false), counter_ids(false), mode(false) {}
  bool bridge_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_bridge_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_bridge_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_bridge_stats_ext_args(const sai_rpc_sai_thrift_get_bridge_stats_ext_args&);
  sai_rpc_sai_thrift_get_bridge_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_bridge_stats_ext_args&);
  sai_rpc_sai_thrift_get_bridge_stats_ext_args() : bridge_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_stats_ext_args() throw();
  sai_thrift_object_id_t bridge_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_bridge_stats_ext_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_stats_ext_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_bridge_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_bridge_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_bridge_stats_ext_result(const sai_rpc_sai_thrift_get_bridge_stats_ext_result&);
  sai_rpc_sai_thrift_get_bridge_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_bridge_stats_ext_result&);
  sai_rpc_sai_thrift_get_bridge_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_bridge_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_bridge_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_bridge_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_bridge_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_bridge_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_bridge_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_bridge_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_bridge_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_bridge_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_bridge_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_stats_args__isset {
  _sai_rpc_sai_thrift_clear_bridge_stats_args__isset() : bridge_oid(false), counter_ids(false) {}
  bool bridge_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_bridge_stats_args__isset;

class sai_rpc_sai_thrift_clear_bridge_stats_args {
 public:

  sai_rpc_sai_thrift_clear_bridge_stats_args(const sai_rpc_sai_thrift_clear_bridge_stats_args&);
  sai_rpc_sai_thrift_clear_bridge_stats_args& operator=(const sai_rpc_sai_thrift_clear_bridge_stats_args&);
  sai_rpc_sai_thrift_clear_bridge_stats_args() : bridge_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_bridge_stats_args() throw();
  sai_thrift_object_id_t bridge_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_bridge_stats_args__isset __isset;

  void __set_bridge_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_bridge_stats_args & rhs) const
  {
    if (!(bridge_oid == rhs.bridge_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bridge_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bridge_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_bridge_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bridge_stats_pargs() throw();
  const sai_thrift_object_id_t* bridge_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_stats_result__isset {
  _sai_rpc_sai_thrift_clear_bridge_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bridge_stats_result__isset;

class sai_rpc_sai_thrift_clear_bridge_stats_result {
 public:

  sai_rpc_sai_thrift_clear_bridge_stats_result(const sai_rpc_sai_thrift_clear_bridge_stats_result&);
  sai_rpc_sai_thrift_clear_bridge_stats_result& operator=(const sai_rpc_sai_thrift_clear_bridge_stats_result&);
  sai_rpc_sai_thrift_clear_bridge_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_bridge_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bridge_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_bridge_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_bridge_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_bridge_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_bridge_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_bridge_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_bridge_stats_presult__isset;

class sai_rpc_sai_thrift_clear_bridge_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_bridge_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_bridge_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ingress_priority_group_args__isset {
  _sai_rpc_sai_thrift_create_ingress_priority_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ingress_priority_group_args__isset;

class sai_rpc_sai_thrift_create_ingress_priority_group_args {
 public:

  sai_rpc_sai_thrift_create_ingress_priority_group_args(const sai_rpc_sai_thrift_create_ingress_priority_group_args&);
  sai_rpc_sai_thrift_create_ingress_priority_group_args& operator=(const sai_rpc_sai_thrift_create_ingress_priority_group_args&);
  sai_rpc_sai_thrift_create_ingress_priority_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ingress_priority_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ingress_priority_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ingress_priority_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ingress_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ingress_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ingress_priority_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ingress_priority_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ingress_priority_group_result__isset {
  _sai_rpc_sai_thrift_create_ingress_priority_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ingress_priority_group_result__isset;

class sai_rpc_sai_thrift_create_ingress_priority_group_result {
 public:

  sai_rpc_sai_thrift_create_ingress_priority_group_result(const sai_rpc_sai_thrift_create_ingress_priority_group_result&);
  sai_rpc_sai_thrift_create_ingress_priority_group_result& operator=(const sai_rpc_sai_thrift_create_ingress_priority_group_result&);
  sai_rpc_sai_thrift_create_ingress_priority_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ingress_priority_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ingress_priority_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ingress_priority_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ingress_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ingress_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ingress_priority_group_presult__isset {
  _sai_rpc_sai_thrift_create_ingress_priority_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ingress_priority_group_presult__isset;

class sai_rpc_sai_thrift_create_ingress_priority_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ingress_priority_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ingress_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ingress_priority_group_args__isset {
  _sai_rpc_sai_thrift_remove_ingress_priority_group_args__isset() : ingress_priority_group_oid(false) {}
  bool ingress_priority_group_oid :1;
} _sai_rpc_sai_thrift_remove_ingress_priority_group_args__isset;

class sai_rpc_sai_thrift_remove_ingress_priority_group_args {
 public:

  sai_rpc_sai_thrift_remove_ingress_priority_group_args(const sai_rpc_sai_thrift_remove_ingress_priority_group_args&);
  sai_rpc_sai_thrift_remove_ingress_priority_group_args& operator=(const sai_rpc_sai_thrift_remove_ingress_priority_group_args&);
  sai_rpc_sai_thrift_remove_ingress_priority_group_args() : ingress_priority_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ingress_priority_group_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;

  _sai_rpc_sai_thrift_remove_ingress_priority_group_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ingress_priority_group_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ingress_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ingress_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ingress_priority_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ingress_priority_group_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ingress_priority_group_result__isset {
  _sai_rpc_sai_thrift_remove_ingress_priority_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ingress_priority_group_result__isset;

class sai_rpc_sai_thrift_remove_ingress_priority_group_result {
 public:

  sai_rpc_sai_thrift_remove_ingress_priority_group_result(const sai_rpc_sai_thrift_remove_ingress_priority_group_result&);
  sai_rpc_sai_thrift_remove_ingress_priority_group_result& operator=(const sai_rpc_sai_thrift_remove_ingress_priority_group_result&);
  sai_rpc_sai_thrift_remove_ingress_priority_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ingress_priority_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ingress_priority_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ingress_priority_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ingress_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ingress_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ingress_priority_group_presult__isset {
  _sai_rpc_sai_thrift_remove_ingress_priority_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ingress_priority_group_presult__isset;

class sai_rpc_sai_thrift_remove_ingress_priority_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ingress_priority_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ingress_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args__isset() : ingress_priority_group_oid(false), attr(false) {}
  bool ingress_priority_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args(const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args&);
  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args&);
  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args() : ingress_priority_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ingress_priority_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ingress_priority_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result(const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result&);
  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result&);
  sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ingress_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ingress_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args__isset() : ingress_priority_group_oid(false), attr_list(false) {}
  bool ingress_priority_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args(const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args() : ingress_priority_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ingress_priority_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result(const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_args__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_args__isset() : ingress_priority_group_oid(false), counter_ids(false) {}
  bool ingress_priority_group_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_args__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_args {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_stats_args(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_args& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_args() : ingress_priority_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ingress_priority_group_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_result__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_result__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_result {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_stats_result(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_result& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args__isset() : ingress_priority_group_oid(false), counter_ids(false), mode(false) {}
  bool ingress_priority_group_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args() : ingress_priority_group_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result&);
  sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ingress_priority_group_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args__isset {
  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args__isset() : ingress_priority_group_oid(false), counter_ids(false) {}
  bool ingress_priority_group_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args__isset;

class sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args {
 public:

  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args(const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args&);
  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args& operator=(const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args&);
  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args() : ingress_priority_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args() throw();
  sai_thrift_object_id_t ingress_priority_group_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args__isset __isset;

  void __set_ingress_priority_group_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args & rhs) const
  {
    if (!(ingress_priority_group_oid == rhs.ingress_priority_group_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_ingress_priority_group_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ingress_priority_group_stats_pargs() throw();
  const sai_thrift_object_id_t* ingress_priority_group_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result__isset {
  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result__isset;

class sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result {
 public:

  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result(const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result&);
  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result& operator=(const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result&);
  sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ingress_priority_group_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult__isset;

class sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ingress_priority_group_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_buffer_pool_args__isset {
  _sai_rpc_sai_thrift_create_buffer_pool_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_buffer_pool_args__isset;

class sai_rpc_sai_thrift_create_buffer_pool_args {
 public:

  sai_rpc_sai_thrift_create_buffer_pool_args(const sai_rpc_sai_thrift_create_buffer_pool_args&);
  sai_rpc_sai_thrift_create_buffer_pool_args& operator=(const sai_rpc_sai_thrift_create_buffer_pool_args&);
  sai_rpc_sai_thrift_create_buffer_pool_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_buffer_pool_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_buffer_pool_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_buffer_pool_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_buffer_pool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_buffer_pool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_buffer_pool_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_buffer_pool_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_buffer_pool_result__isset {
  _sai_rpc_sai_thrift_create_buffer_pool_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_buffer_pool_result__isset;

class sai_rpc_sai_thrift_create_buffer_pool_result {
 public:

  sai_rpc_sai_thrift_create_buffer_pool_result(const sai_rpc_sai_thrift_create_buffer_pool_result&);
  sai_rpc_sai_thrift_create_buffer_pool_result& operator=(const sai_rpc_sai_thrift_create_buffer_pool_result&);
  sai_rpc_sai_thrift_create_buffer_pool_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_buffer_pool_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_buffer_pool_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_buffer_pool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_buffer_pool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_buffer_pool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_buffer_pool_presult__isset {
  _sai_rpc_sai_thrift_create_buffer_pool_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_buffer_pool_presult__isset;

class sai_rpc_sai_thrift_create_buffer_pool_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_buffer_pool_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_buffer_pool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_pool_args__isset {
  _sai_rpc_sai_thrift_remove_buffer_pool_args__isset() : buffer_pool_oid(false) {}
  bool buffer_pool_oid :1;
} _sai_rpc_sai_thrift_remove_buffer_pool_args__isset;

class sai_rpc_sai_thrift_remove_buffer_pool_args {
 public:

  sai_rpc_sai_thrift_remove_buffer_pool_args(const sai_rpc_sai_thrift_remove_buffer_pool_args&);
  sai_rpc_sai_thrift_remove_buffer_pool_args& operator=(const sai_rpc_sai_thrift_remove_buffer_pool_args&);
  sai_rpc_sai_thrift_remove_buffer_pool_args() : buffer_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_buffer_pool_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;

  _sai_rpc_sai_thrift_remove_buffer_pool_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_buffer_pool_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_buffer_pool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_buffer_pool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_buffer_pool_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_buffer_pool_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_pool_result__isset {
  _sai_rpc_sai_thrift_remove_buffer_pool_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_buffer_pool_result__isset;

class sai_rpc_sai_thrift_remove_buffer_pool_result {
 public:

  sai_rpc_sai_thrift_remove_buffer_pool_result(const sai_rpc_sai_thrift_remove_buffer_pool_result&);
  sai_rpc_sai_thrift_remove_buffer_pool_result& operator=(const sai_rpc_sai_thrift_remove_buffer_pool_result&);
  sai_rpc_sai_thrift_remove_buffer_pool_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_buffer_pool_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_buffer_pool_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_buffer_pool_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_buffer_pool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_buffer_pool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_pool_presult__isset {
  _sai_rpc_sai_thrift_remove_buffer_pool_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_buffer_pool_presult__isset;

class sai_rpc_sai_thrift_remove_buffer_pool_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_buffer_pool_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_buffer_pool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_buffer_pool_attribute_args__isset {
  _sai_rpc_sai_thrift_set_buffer_pool_attribute_args__isset() : buffer_pool_oid(false), attr(false) {}
  bool buffer_pool_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_buffer_pool_attribute_args__isset;

class sai_rpc_sai_thrift_set_buffer_pool_attribute_args {
 public:

  sai_rpc_sai_thrift_set_buffer_pool_attribute_args(const sai_rpc_sai_thrift_set_buffer_pool_attribute_args&);
  sai_rpc_sai_thrift_set_buffer_pool_attribute_args& operator=(const sai_rpc_sai_thrift_set_buffer_pool_attribute_args&);
  sai_rpc_sai_thrift_set_buffer_pool_attribute_args() : buffer_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_buffer_pool_attribute_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_buffer_pool_attribute_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_buffer_pool_attribute_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_buffer_pool_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_buffer_pool_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_buffer_pool_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_buffer_pool_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_buffer_pool_attribute_result__isset {
  _sai_rpc_sai_thrift_set_buffer_pool_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_buffer_pool_attribute_result__isset;

class sai_rpc_sai_thrift_set_buffer_pool_attribute_result {
 public:

  sai_rpc_sai_thrift_set_buffer_pool_attribute_result(const sai_rpc_sai_thrift_set_buffer_pool_attribute_result&);
  sai_rpc_sai_thrift_set_buffer_pool_attribute_result& operator=(const sai_rpc_sai_thrift_set_buffer_pool_attribute_result&);
  sai_rpc_sai_thrift_set_buffer_pool_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_buffer_pool_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_buffer_pool_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_buffer_pool_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_buffer_pool_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_buffer_pool_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_buffer_pool_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_buffer_pool_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_buffer_pool_attribute_presult__isset;

class sai_rpc_sai_thrift_set_buffer_pool_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_buffer_pool_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_buffer_pool_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_attribute_args__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_attribute_args__isset() : buffer_pool_oid(false), attr_list(false) {}
  bool buffer_pool_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_buffer_pool_attribute_args__isset;

class sai_rpc_sai_thrift_get_buffer_pool_attribute_args {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_attribute_args(const sai_rpc_sai_thrift_get_buffer_pool_attribute_args&);
  sai_rpc_sai_thrift_get_buffer_pool_attribute_args& operator=(const sai_rpc_sai_thrift_get_buffer_pool_attribute_args&);
  sai_rpc_sai_thrift_get_buffer_pool_attribute_args() : buffer_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_attribute_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_buffer_pool_attribute_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_attribute_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_buffer_pool_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_attribute_result__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_attribute_result__isset;

class sai_rpc_sai_thrift_get_buffer_pool_attribute_result {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_attribute_result(const sai_rpc_sai_thrift_get_buffer_pool_attribute_result&);
  sai_rpc_sai_thrift_get_buffer_pool_attribute_result& operator=(const sai_rpc_sai_thrift_get_buffer_pool_attribute_result&);
  sai_rpc_sai_thrift_get_buffer_pool_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_attribute_presult__isset;

class sai_rpc_sai_thrift_get_buffer_pool_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_args__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_args__isset() : buffer_pool_oid(false), counter_ids(false) {}
  bool buffer_pool_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_args__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_args {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_stats_args(const sai_rpc_sai_thrift_get_buffer_pool_stats_args&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_args& operator=(const sai_rpc_sai_thrift_get_buffer_pool_stats_args&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_args() : buffer_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_stats_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_buffer_pool_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_result__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_result__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_result {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_stats_result(const sai_rpc_sai_thrift_get_buffer_pool_stats_result&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_result& operator=(const sai_rpc_sai_thrift_get_buffer_pool_stats_result&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_presult__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_presult__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args__isset() : buffer_pool_oid(false), counter_ids(false), mode(false) {}
  bool buffer_pool_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args(const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args() : buffer_pool_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_buffer_pool_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result(const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result&);
  sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_pool_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_pool_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_buffer_pool_stats_args__isset {
  _sai_rpc_sai_thrift_clear_buffer_pool_stats_args__isset() : buffer_pool_oid(false), counter_ids(false) {}
  bool buffer_pool_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_buffer_pool_stats_args__isset;

class sai_rpc_sai_thrift_clear_buffer_pool_stats_args {
 public:

  sai_rpc_sai_thrift_clear_buffer_pool_stats_args(const sai_rpc_sai_thrift_clear_buffer_pool_stats_args&);
  sai_rpc_sai_thrift_clear_buffer_pool_stats_args& operator=(const sai_rpc_sai_thrift_clear_buffer_pool_stats_args&);
  sai_rpc_sai_thrift_clear_buffer_pool_stats_args() : buffer_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_buffer_pool_stats_args() throw();
  sai_thrift_object_id_t buffer_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_buffer_pool_stats_args__isset __isset;

  void __set_buffer_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_buffer_pool_stats_args & rhs) const
  {
    if (!(buffer_pool_oid == rhs.buffer_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_buffer_pool_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_buffer_pool_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_buffer_pool_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_buffer_pool_stats_pargs() throw();
  const sai_thrift_object_id_t* buffer_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_buffer_pool_stats_result__isset {
  _sai_rpc_sai_thrift_clear_buffer_pool_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_buffer_pool_stats_result__isset;

class sai_rpc_sai_thrift_clear_buffer_pool_stats_result {
 public:

  sai_rpc_sai_thrift_clear_buffer_pool_stats_result(const sai_rpc_sai_thrift_clear_buffer_pool_stats_result&);
  sai_rpc_sai_thrift_clear_buffer_pool_stats_result& operator=(const sai_rpc_sai_thrift_clear_buffer_pool_stats_result&);
  sai_rpc_sai_thrift_clear_buffer_pool_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_buffer_pool_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_buffer_pool_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_buffer_pool_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_buffer_pool_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_buffer_pool_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_buffer_pool_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_buffer_pool_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_buffer_pool_stats_presult__isset;

class sai_rpc_sai_thrift_clear_buffer_pool_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_buffer_pool_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_buffer_pool_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_buffer_profile_args__isset {
  _sai_rpc_sai_thrift_create_buffer_profile_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_buffer_profile_args__isset;

class sai_rpc_sai_thrift_create_buffer_profile_args {
 public:

  sai_rpc_sai_thrift_create_buffer_profile_args(const sai_rpc_sai_thrift_create_buffer_profile_args&);
  sai_rpc_sai_thrift_create_buffer_profile_args& operator=(const sai_rpc_sai_thrift_create_buffer_profile_args&);
  sai_rpc_sai_thrift_create_buffer_profile_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_buffer_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_buffer_profile_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_buffer_profile_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_buffer_profile_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_buffer_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_buffer_profile_result__isset {
  _sai_rpc_sai_thrift_create_buffer_profile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_buffer_profile_result__isset;

class sai_rpc_sai_thrift_create_buffer_profile_result {
 public:

  sai_rpc_sai_thrift_create_buffer_profile_result(const sai_rpc_sai_thrift_create_buffer_profile_result&);
  sai_rpc_sai_thrift_create_buffer_profile_result& operator=(const sai_rpc_sai_thrift_create_buffer_profile_result&);
  sai_rpc_sai_thrift_create_buffer_profile_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_buffer_profile_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_buffer_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_buffer_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_buffer_profile_presult__isset {
  _sai_rpc_sai_thrift_create_buffer_profile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_buffer_profile_presult__isset;

class sai_rpc_sai_thrift_create_buffer_profile_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_buffer_profile_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_profile_args__isset {
  _sai_rpc_sai_thrift_remove_buffer_profile_args__isset() : buffer_profile_oid(false) {}
  bool buffer_profile_oid :1;
} _sai_rpc_sai_thrift_remove_buffer_profile_args__isset;

class sai_rpc_sai_thrift_remove_buffer_profile_args {
 public:

  sai_rpc_sai_thrift_remove_buffer_profile_args(const sai_rpc_sai_thrift_remove_buffer_profile_args&);
  sai_rpc_sai_thrift_remove_buffer_profile_args& operator=(const sai_rpc_sai_thrift_remove_buffer_profile_args&);
  sai_rpc_sai_thrift_remove_buffer_profile_args() : buffer_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_buffer_profile_args() throw();
  sai_thrift_object_id_t buffer_profile_oid;

  _sai_rpc_sai_thrift_remove_buffer_profile_args__isset __isset;

  void __set_buffer_profile_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_buffer_profile_args & rhs) const
  {
    if (!(buffer_profile_oid == rhs.buffer_profile_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_buffer_profile_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_buffer_profile_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_profile_result__isset {
  _sai_rpc_sai_thrift_remove_buffer_profile_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_buffer_profile_result__isset;

class sai_rpc_sai_thrift_remove_buffer_profile_result {
 public:

  sai_rpc_sai_thrift_remove_buffer_profile_result(const sai_rpc_sai_thrift_remove_buffer_profile_result&);
  sai_rpc_sai_thrift_remove_buffer_profile_result& operator=(const sai_rpc_sai_thrift_remove_buffer_profile_result&);
  sai_rpc_sai_thrift_remove_buffer_profile_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_buffer_profile_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_buffer_profile_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_buffer_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_buffer_profile_presult__isset {
  _sai_rpc_sai_thrift_remove_buffer_profile_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_buffer_profile_presult__isset;

class sai_rpc_sai_thrift_remove_buffer_profile_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_buffer_profile_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset {
  _sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset() : buffer_profile_oid(false), attr(false) {}
  bool buffer_profile_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset;

class sai_rpc_sai_thrift_set_buffer_profile_attribute_args {
 public:

  sai_rpc_sai_thrift_set_buffer_profile_attribute_args(const sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  sai_rpc_sai_thrift_set_buffer_profile_attribute_args& operator=(const sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  sai_rpc_sai_thrift_set_buffer_profile_attribute_args() : buffer_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_buffer_profile_attribute_args() throw();
  sai_thrift_object_id_t buffer_profile_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_oid == rhs.buffer_profile_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset {
  _sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset;

class sai_rpc_sai_thrift_set_buffer_profile_attribute_result {
 public:

  sai_rpc_sai_thrift_set_buffer_profile_attribute_result(const sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  sai_rpc_sai_thrift_set_buffer_profile_attribute_result& operator=(const sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  sai_rpc_sai_thrift_set_buffer_profile_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_buffer_profile_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_buffer_profile_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset;

class sai_rpc_sai_thrift_set_buffer_profile_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_buffer_profile_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset {
  _sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset() : buffer_profile_oid(false), attr_list(false) {}
  bool buffer_profile_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset;

class sai_rpc_sai_thrift_get_buffer_profile_attribute_args {
 public:

  sai_rpc_sai_thrift_get_buffer_profile_attribute_args(const sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  sai_rpc_sai_thrift_get_buffer_profile_attribute_args& operator=(const sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  sai_rpc_sai_thrift_get_buffer_profile_attribute_args() : buffer_profile_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_profile_attribute_args() throw();
  sai_thrift_object_id_t buffer_profile_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_oid == rhs.buffer_profile_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset {
  _sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset;

class sai_rpc_sai_thrift_get_buffer_profile_attribute_result {
 public:

  sai_rpc_sai_thrift_get_buffer_profile_attribute_result(const sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  sai_rpc_sai_thrift_get_buffer_profile_attribute_result& operator=(const sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  sai_rpc_sai_thrift_get_buffer_profile_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_buffer_profile_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_buffer_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset;

class sai_rpc_sai_thrift_get_buffer_profile_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_buffer_profile_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_counter_args__isset {
  _sai_rpc_sai_thrift_create_counter_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_counter_args__isset;

class sai_rpc_sai_thrift_create_counter_args {
 public:

  sai_rpc_sai_thrift_create_counter_args(const sai_rpc_sai_thrift_create_counter_args&);
  sai_rpc_sai_thrift_create_counter_args& operator=(const sai_rpc_sai_thrift_create_counter_args&);
  sai_rpc_sai_thrift_create_counter_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_counter_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_counter_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_counter_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_counter_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_counter_result__isset {
  _sai_rpc_sai_thrift_create_counter_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_counter_result__isset;

class sai_rpc_sai_thrift_create_counter_result {
 public:

  sai_rpc_sai_thrift_create_counter_result(const sai_rpc_sai_thrift_create_counter_result&);
  sai_rpc_sai_thrift_create_counter_result& operator=(const sai_rpc_sai_thrift_create_counter_result&);
  sai_rpc_sai_thrift_create_counter_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_counter_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_counter_presult__isset {
  _sai_rpc_sai_thrift_create_counter_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_counter_presult__isset;

class sai_rpc_sai_thrift_create_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_counter_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_counter_args__isset {
  _sai_rpc_sai_thrift_remove_counter_args__isset() : counter_oid(false) {}
  bool counter_oid :1;
} _sai_rpc_sai_thrift_remove_counter_args__isset;

class sai_rpc_sai_thrift_remove_counter_args {
 public:

  sai_rpc_sai_thrift_remove_counter_args(const sai_rpc_sai_thrift_remove_counter_args&);
  sai_rpc_sai_thrift_remove_counter_args& operator=(const sai_rpc_sai_thrift_remove_counter_args&);
  sai_rpc_sai_thrift_remove_counter_args() : counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_counter_args() throw();
  sai_thrift_object_id_t counter_oid;

  _sai_rpc_sai_thrift_remove_counter_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_counter_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_counter_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_counter_result__isset {
  _sai_rpc_sai_thrift_remove_counter_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_counter_result__isset;

class sai_rpc_sai_thrift_remove_counter_result {
 public:

  sai_rpc_sai_thrift_remove_counter_result(const sai_rpc_sai_thrift_remove_counter_result&);
  sai_rpc_sai_thrift_remove_counter_result& operator=(const sai_rpc_sai_thrift_remove_counter_result&);
  sai_rpc_sai_thrift_remove_counter_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_counter_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_counter_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_counter_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_counter_presult__isset {
  _sai_rpc_sai_thrift_remove_counter_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_counter_presult__isset;

class sai_rpc_sai_thrift_remove_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_counter_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_set_counter_attribute_args__isset() : counter_oid(false), attr(false) {}
  bool counter_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_counter_attribute_args__isset;

class sai_rpc_sai_thrift_set_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_set_counter_attribute_args(const sai_rpc_sai_thrift_set_counter_attribute_args&);
  sai_rpc_sai_thrift_set_counter_attribute_args& operator=(const sai_rpc_sai_thrift_set_counter_attribute_args&);
  sai_rpc_sai_thrift_set_counter_attribute_args() : counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_counter_attribute_args() throw();
  sai_thrift_object_id_t counter_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_counter_attribute_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_counter_attribute_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_set_counter_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_counter_attribute_result__isset;

class sai_rpc_sai_thrift_set_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_set_counter_attribute_result(const sai_rpc_sai_thrift_set_counter_attribute_result&);
  sai_rpc_sai_thrift_set_counter_attribute_result& operator=(const sai_rpc_sai_thrift_set_counter_attribute_result&);
  sai_rpc_sai_thrift_set_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_counter_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_counter_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_counter_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_counter_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_set_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_counter_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_get_counter_attribute_args__isset() : counter_oid(false), attr_list(false) {}
  bool counter_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_counter_attribute_args__isset;

class sai_rpc_sai_thrift_get_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_get_counter_attribute_args(const sai_rpc_sai_thrift_get_counter_attribute_args&);
  sai_rpc_sai_thrift_get_counter_attribute_args& operator=(const sai_rpc_sai_thrift_get_counter_attribute_args&);
  sai_rpc_sai_thrift_get_counter_attribute_args() : counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_attribute_args() throw();
  sai_thrift_object_id_t counter_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_counter_attribute_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_attribute_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_get_counter_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_attribute_result__isset;

class sai_rpc_sai_thrift_get_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_get_counter_attribute_result(const sai_rpc_sai_thrift_get_counter_attribute_result&);
  sai_rpc_sai_thrift_get_counter_attribute_result& operator=(const sai_rpc_sai_thrift_get_counter_attribute_result&);
  sai_rpc_sai_thrift_get_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_counter_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_get_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_args__isset {
  _sai_rpc_sai_thrift_get_counter_stats_args__isset() : counter_oid(false), counter_ids(false) {}
  bool counter_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_counter_stats_args__isset;

class sai_rpc_sai_thrift_get_counter_stats_args {
 public:

  sai_rpc_sai_thrift_get_counter_stats_args(const sai_rpc_sai_thrift_get_counter_stats_args&);
  sai_rpc_sai_thrift_get_counter_stats_args& operator=(const sai_rpc_sai_thrift_get_counter_stats_args&);
  sai_rpc_sai_thrift_get_counter_stats_args() : counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_stats_args() throw();
  sai_thrift_object_id_t counter_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_counter_stats_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_stats_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_counter_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_stats_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_result__isset {
  _sai_rpc_sai_thrift_get_counter_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_stats_result__isset;

class sai_rpc_sai_thrift_get_counter_stats_result {
 public:

  sai_rpc_sai_thrift_get_counter_stats_result(const sai_rpc_sai_thrift_get_counter_stats_result&);
  sai_rpc_sai_thrift_get_counter_stats_result& operator=(const sai_rpc_sai_thrift_get_counter_stats_result&);
  sai_rpc_sai_thrift_get_counter_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_presult__isset {
  _sai_rpc_sai_thrift_get_counter_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_stats_presult__isset;

class sai_rpc_sai_thrift_get_counter_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_counter_stats_ext_args__isset() : counter_oid(false), counter_ids(false), mode(false) {}
  bool counter_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_counter_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_counter_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_counter_stats_ext_args(const sai_rpc_sai_thrift_get_counter_stats_ext_args&);
  sai_rpc_sai_thrift_get_counter_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_counter_stats_ext_args&);
  sai_rpc_sai_thrift_get_counter_stats_ext_args() : counter_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_stats_ext_args() throw();
  sai_thrift_object_id_t counter_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_counter_stats_ext_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_stats_ext_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_counter_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_counter_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_counter_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_counter_stats_ext_result(const sai_rpc_sai_thrift_get_counter_stats_ext_result&);
  sai_rpc_sai_thrift_get_counter_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_counter_stats_ext_result&);
  sai_rpc_sai_thrift_get_counter_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_counter_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_counter_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_counter_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_counter_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_counter_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_counter_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_counter_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_counter_stats_args__isset {
  _sai_rpc_sai_thrift_clear_counter_stats_args__isset() : counter_oid(false), counter_ids(false) {}
  bool counter_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_counter_stats_args__isset;

class sai_rpc_sai_thrift_clear_counter_stats_args {
 public:

  sai_rpc_sai_thrift_clear_counter_stats_args(const sai_rpc_sai_thrift_clear_counter_stats_args&);
  sai_rpc_sai_thrift_clear_counter_stats_args& operator=(const sai_rpc_sai_thrift_clear_counter_stats_args&);
  sai_rpc_sai_thrift_clear_counter_stats_args() : counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_counter_stats_args() throw();
  sai_thrift_object_id_t counter_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_counter_stats_args__isset __isset;

  void __set_counter_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_counter_stats_args & rhs) const
  {
    if (!(counter_oid == rhs.counter_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_counter_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_counter_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_counter_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_counter_stats_pargs() throw();
  const sai_thrift_object_id_t* counter_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_counter_stats_result__isset {
  _sai_rpc_sai_thrift_clear_counter_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_counter_stats_result__isset;

class sai_rpc_sai_thrift_clear_counter_stats_result {
 public:

  sai_rpc_sai_thrift_clear_counter_stats_result(const sai_rpc_sai_thrift_clear_counter_stats_result&);
  sai_rpc_sai_thrift_clear_counter_stats_result& operator=(const sai_rpc_sai_thrift_clear_counter_stats_result&);
  sai_rpc_sai_thrift_clear_counter_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_counter_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_counter_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_counter_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_counter_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_counter_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_counter_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_counter_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_counter_stats_presult__isset;

class sai_rpc_sai_thrift_clear_counter_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_counter_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_counter_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_group_args__isset {
  _sai_rpc_sai_thrift_create_dash_acl_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dash_acl_group_args__isset;

class sai_rpc_sai_thrift_create_dash_acl_group_args {
 public:

  sai_rpc_sai_thrift_create_dash_acl_group_args(const sai_rpc_sai_thrift_create_dash_acl_group_args&);
  sai_rpc_sai_thrift_create_dash_acl_group_args& operator=(const sai_rpc_sai_thrift_create_dash_acl_group_args&);
  sai_rpc_sai_thrift_create_dash_acl_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dash_acl_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dash_acl_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dash_acl_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dash_acl_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dash_acl_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dash_acl_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dash_acl_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_group_result__isset {
  _sai_rpc_sai_thrift_create_dash_acl_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dash_acl_group_result__isset;

class sai_rpc_sai_thrift_create_dash_acl_group_result {
 public:

  sai_rpc_sai_thrift_create_dash_acl_group_result(const sai_rpc_sai_thrift_create_dash_acl_group_result&);
  sai_rpc_sai_thrift_create_dash_acl_group_result& operator=(const sai_rpc_sai_thrift_create_dash_acl_group_result&);
  sai_rpc_sai_thrift_create_dash_acl_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dash_acl_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dash_acl_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dash_acl_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dash_acl_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dash_acl_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_group_presult__isset {
  _sai_rpc_sai_thrift_create_dash_acl_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dash_acl_group_presult__isset;

class sai_rpc_sai_thrift_create_dash_acl_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dash_acl_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dash_acl_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_group_args__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_group_args__isset() : dash_acl_group_oid(false) {}
  bool dash_acl_group_oid :1;
} _sai_rpc_sai_thrift_remove_dash_acl_group_args__isset;

class sai_rpc_sai_thrift_remove_dash_acl_group_args {
 public:

  sai_rpc_sai_thrift_remove_dash_acl_group_args(const sai_rpc_sai_thrift_remove_dash_acl_group_args&);
  sai_rpc_sai_thrift_remove_dash_acl_group_args& operator=(const sai_rpc_sai_thrift_remove_dash_acl_group_args&);
  sai_rpc_sai_thrift_remove_dash_acl_group_args() : dash_acl_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dash_acl_group_args() throw();
  sai_thrift_object_id_t dash_acl_group_oid;

  _sai_rpc_sai_thrift_remove_dash_acl_group_args__isset __isset;

  void __set_dash_acl_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dash_acl_group_args & rhs) const
  {
    if (!(dash_acl_group_oid == rhs.dash_acl_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dash_acl_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dash_acl_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dash_acl_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dash_acl_group_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_group_result__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dash_acl_group_result__isset;

class sai_rpc_sai_thrift_remove_dash_acl_group_result {
 public:

  sai_rpc_sai_thrift_remove_dash_acl_group_result(const sai_rpc_sai_thrift_remove_dash_acl_group_result&);
  sai_rpc_sai_thrift_remove_dash_acl_group_result& operator=(const sai_rpc_sai_thrift_remove_dash_acl_group_result&);
  sai_rpc_sai_thrift_remove_dash_acl_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dash_acl_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dash_acl_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dash_acl_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dash_acl_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dash_acl_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_group_presult__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dash_acl_group_presult__isset;

class sai_rpc_sai_thrift_remove_dash_acl_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dash_acl_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dash_acl_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_args__isset() : dash_acl_group_oid(false), attr(false) {}
  bool dash_acl_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dash_acl_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_dash_acl_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dash_acl_group_attribute_args(const sai_rpc_sai_thrift_set_dash_acl_group_attribute_args&);
  sai_rpc_sai_thrift_set_dash_acl_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_dash_acl_group_attribute_args&);
  sai_rpc_sai_thrift_set_dash_acl_group_attribute_args() : dash_acl_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dash_acl_group_attribute_args() throw();
  sai_thrift_object_id_t dash_acl_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_args__isset __isset;

  void __set_dash_acl_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_args & rhs) const
  {
    if (!(dash_acl_group_oid == rhs.dash_acl_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dash_acl_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dash_acl_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dash_acl_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_dash_acl_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dash_acl_group_attribute_result(const sai_rpc_sai_thrift_set_dash_acl_group_attribute_result&);
  sai_rpc_sai_thrift_set_dash_acl_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_dash_acl_group_attribute_result&);
  sai_rpc_sai_thrift_set_dash_acl_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dash_acl_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dash_acl_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dash_acl_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_args__isset() : dash_acl_group_oid(false), attr_list(false) {}
  bool dash_acl_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dash_acl_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_dash_acl_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dash_acl_group_attribute_args(const sai_rpc_sai_thrift_get_dash_acl_group_attribute_args&);
  sai_rpc_sai_thrift_get_dash_acl_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_dash_acl_group_attribute_args&);
  sai_rpc_sai_thrift_get_dash_acl_group_attribute_args() : dash_acl_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dash_acl_group_attribute_args() throw();
  sai_thrift_object_id_t dash_acl_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_args__isset __isset;

  void __set_dash_acl_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_args & rhs) const
  {
    if (!(dash_acl_group_oid == rhs.dash_acl_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dash_acl_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dash_acl_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dash_acl_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_dash_acl_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dash_acl_group_attribute_result(const sai_rpc_sai_thrift_get_dash_acl_group_attribute_result&);
  sai_rpc_sai_thrift_get_dash_acl_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_dash_acl_group_attribute_result&);
  sai_rpc_sai_thrift_get_dash_acl_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dash_acl_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dash_acl_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dash_acl_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_rule_args__isset {
  _sai_rpc_sai_thrift_create_dash_acl_rule_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dash_acl_rule_args__isset;

class sai_rpc_sai_thrift_create_dash_acl_rule_args {
 public:

  sai_rpc_sai_thrift_create_dash_acl_rule_args(const sai_rpc_sai_thrift_create_dash_acl_rule_args&);
  sai_rpc_sai_thrift_create_dash_acl_rule_args& operator=(const sai_rpc_sai_thrift_create_dash_acl_rule_args&);
  sai_rpc_sai_thrift_create_dash_acl_rule_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dash_acl_rule_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dash_acl_rule_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dash_acl_rule_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dash_acl_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dash_acl_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dash_acl_rule_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dash_acl_rule_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_rule_result__isset {
  _sai_rpc_sai_thrift_create_dash_acl_rule_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dash_acl_rule_result__isset;

class sai_rpc_sai_thrift_create_dash_acl_rule_result {
 public:

  sai_rpc_sai_thrift_create_dash_acl_rule_result(const sai_rpc_sai_thrift_create_dash_acl_rule_result&);
  sai_rpc_sai_thrift_create_dash_acl_rule_result& operator=(const sai_rpc_sai_thrift_create_dash_acl_rule_result&);
  sai_rpc_sai_thrift_create_dash_acl_rule_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dash_acl_rule_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dash_acl_rule_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dash_acl_rule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dash_acl_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dash_acl_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dash_acl_rule_presult__isset {
  _sai_rpc_sai_thrift_create_dash_acl_rule_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dash_acl_rule_presult__isset;

class sai_rpc_sai_thrift_create_dash_acl_rule_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dash_acl_rule_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dash_acl_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_rule_args__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_rule_args__isset() : dash_acl_rule_oid(false) {}
  bool dash_acl_rule_oid :1;
} _sai_rpc_sai_thrift_remove_dash_acl_rule_args__isset;

class sai_rpc_sai_thrift_remove_dash_acl_rule_args {
 public:

  sai_rpc_sai_thrift_remove_dash_acl_rule_args(const sai_rpc_sai_thrift_remove_dash_acl_rule_args&);
  sai_rpc_sai_thrift_remove_dash_acl_rule_args& operator=(const sai_rpc_sai_thrift_remove_dash_acl_rule_args&);
  sai_rpc_sai_thrift_remove_dash_acl_rule_args() : dash_acl_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dash_acl_rule_args() throw();
  sai_thrift_object_id_t dash_acl_rule_oid;

  _sai_rpc_sai_thrift_remove_dash_acl_rule_args__isset __isset;

  void __set_dash_acl_rule_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dash_acl_rule_args & rhs) const
  {
    if (!(dash_acl_rule_oid == rhs.dash_acl_rule_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dash_acl_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dash_acl_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dash_acl_rule_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dash_acl_rule_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_rule_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_rule_result__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_rule_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dash_acl_rule_result__isset;

class sai_rpc_sai_thrift_remove_dash_acl_rule_result {
 public:

  sai_rpc_sai_thrift_remove_dash_acl_rule_result(const sai_rpc_sai_thrift_remove_dash_acl_rule_result&);
  sai_rpc_sai_thrift_remove_dash_acl_rule_result& operator=(const sai_rpc_sai_thrift_remove_dash_acl_rule_result&);
  sai_rpc_sai_thrift_remove_dash_acl_rule_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dash_acl_rule_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dash_acl_rule_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dash_acl_rule_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dash_acl_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dash_acl_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dash_acl_rule_presult__isset {
  _sai_rpc_sai_thrift_remove_dash_acl_rule_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dash_acl_rule_presult__isset;

class sai_rpc_sai_thrift_remove_dash_acl_rule_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dash_acl_rule_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dash_acl_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args__isset() : dash_acl_rule_oid(false), attr(false) {}
  bool dash_acl_rule_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args__isset;

class sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args(const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args&);
  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args& operator=(const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args&);
  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args() : dash_acl_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args() throw();
  sai_thrift_object_id_t dash_acl_rule_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args__isset __isset;

  void __set_dash_acl_rule_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args & rhs) const
  {
    if (!(dash_acl_rule_oid == rhs.dash_acl_rule_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dash_acl_rule_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dash_acl_rule_attribute_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_rule_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result__isset;

class sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result(const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result&);
  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result& operator=(const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result&);
  sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dash_acl_rule_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dash_acl_rule_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args__isset() : dash_acl_rule_oid(false), attr_list(false) {}
  bool dash_acl_rule_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args__isset;

class sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args(const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args&);
  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args& operator=(const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args&);
  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args() : dash_acl_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args() throw();
  sai_thrift_object_id_t dash_acl_rule_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args__isset __isset;

  void __set_dash_acl_rule_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args & rhs) const
  {
    if (!(dash_acl_rule_oid == rhs.dash_acl_rule_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dash_acl_rule_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dash_acl_rule_attribute_pargs() throw();
  const sai_thrift_object_id_t* dash_acl_rule_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result__isset;

class sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result(const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result&);
  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result& operator=(const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result&);
  sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dash_acl_rule_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dash_acl_rule_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_direction_lookup_entry_args__isset {
  _sai_rpc_sai_thrift_create_direction_lookup_entry_args__isset() : direction_lookup_entry(false), attr_list(false) {}
  bool direction_lookup_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_direction_lookup_entry_args__isset;

class sai_rpc_sai_thrift_create_direction_lookup_entry_args {
 public:

  sai_rpc_sai_thrift_create_direction_lookup_entry_args(const sai_rpc_sai_thrift_create_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_create_direction_lookup_entry_args& operator=(const sai_rpc_sai_thrift_create_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_create_direction_lookup_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_direction_lookup_entry_args() throw();
  sai_thrift_direction_lookup_entry_t direction_lookup_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_direction_lookup_entry_args__isset __isset;

  void __set_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_direction_lookup_entry_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_direction_lookup_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_direction_lookup_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_direction_lookup_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_direction_lookup_entry_pargs() throw();
  const sai_thrift_direction_lookup_entry_t* direction_lookup_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_direction_lookup_entry_result__isset {
  _sai_rpc_sai_thrift_create_direction_lookup_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_direction_lookup_entry_result__isset;

class sai_rpc_sai_thrift_create_direction_lookup_entry_result {
 public:

  sai_rpc_sai_thrift_create_direction_lookup_entry_result(const sai_rpc_sai_thrift_create_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_create_direction_lookup_entry_result& operator=(const sai_rpc_sai_thrift_create_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_create_direction_lookup_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_direction_lookup_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_direction_lookup_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_direction_lookup_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_direction_lookup_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_direction_lookup_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_direction_lookup_entry_presult__isset {
  _sai_rpc_sai_thrift_create_direction_lookup_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_direction_lookup_entry_presult__isset;

class sai_rpc_sai_thrift_create_direction_lookup_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_direction_lookup_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_direction_lookup_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_direction_lookup_entry_args__isset {
  _sai_rpc_sai_thrift_remove_direction_lookup_entry_args__isset() : direction_lookup_entry(false) {}
  bool direction_lookup_entry :1;
} _sai_rpc_sai_thrift_remove_direction_lookup_entry_args__isset;

class sai_rpc_sai_thrift_remove_direction_lookup_entry_args {
 public:

  sai_rpc_sai_thrift_remove_direction_lookup_entry_args(const sai_rpc_sai_thrift_remove_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_remove_direction_lookup_entry_args& operator=(const sai_rpc_sai_thrift_remove_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_remove_direction_lookup_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_direction_lookup_entry_args() throw();
  sai_thrift_direction_lookup_entry_t direction_lookup_entry;

  _sai_rpc_sai_thrift_remove_direction_lookup_entry_args__isset __isset;

  void __set_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_direction_lookup_entry_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_direction_lookup_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_direction_lookup_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_direction_lookup_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_direction_lookup_entry_pargs() throw();
  const sai_thrift_direction_lookup_entry_t* direction_lookup_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_direction_lookup_entry_result__isset {
  _sai_rpc_sai_thrift_remove_direction_lookup_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_direction_lookup_entry_result__isset;

class sai_rpc_sai_thrift_remove_direction_lookup_entry_result {
 public:

  sai_rpc_sai_thrift_remove_direction_lookup_entry_result(const sai_rpc_sai_thrift_remove_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_remove_direction_lookup_entry_result& operator=(const sai_rpc_sai_thrift_remove_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_remove_direction_lookup_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_direction_lookup_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_direction_lookup_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_direction_lookup_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_direction_lookup_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_direction_lookup_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_direction_lookup_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_direction_lookup_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_direction_lookup_entry_presult__isset;

class sai_rpc_sai_thrift_remove_direction_lookup_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_direction_lookup_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_direction_lookup_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args__isset() : direction_lookup_entry(false), attr(false) {}
  bool direction_lookup_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args(const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args&);
  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args&);
  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args() throw();
  sai_thrift_direction_lookup_entry_t direction_lookup_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args__isset __isset;

  void __set_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_pargs() throw();
  const sai_thrift_direction_lookup_entry_t* direction_lookup_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result(const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result&);
  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result&);
  sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_direction_lookup_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args__isset() : direction_lookup_entry(false), attr_list(false) {}
  bool direction_lookup_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args(const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args&);
  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args&);
  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args() throw();
  sai_thrift_direction_lookup_entry_t direction_lookup_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args__isset __isset;

  void __set_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_pargs() throw();
  const sai_thrift_direction_lookup_entry_t* direction_lookup_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result(const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result&);
  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result&);
  sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_direction_lookup_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args__isset() : direction_lookup_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool direction_lookup_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args(const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args() throw();
  std::vector<sai_thrift_direction_lookup_entry_t>  direction_lookup_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args__isset __isset;

  void __set_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_pargs() throw();
  const std::vector<sai_thrift_direction_lookup_entry_t> * direction_lookup_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result(const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_direction_lookup_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args__isset() : direction_lookup_entry(false), mode(false) {}
  bool direction_lookup_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args(const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args() throw();
  std::vector<sai_thrift_direction_lookup_entry_t>  direction_lookup_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args__isset __isset;

  void __set_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args & rhs) const
  {
    if (!(direction_lookup_entry == rhs.direction_lookup_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_pargs() throw();
  const std::vector<sai_thrift_direction_lookup_entry_t> * direction_lookup_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result(const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_direction_lookup_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args__isset {
  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args__isset() : eni_ether_address_map_entry(false), attr_list(false) {}
  bool eni_ether_address_map_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args__isset;

class sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args {
 public:

  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args(const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args& operator=(const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args() throw();
  sai_thrift_eni_ether_address_map_entry_t eni_ether_address_map_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args__isset __isset;

  void __set_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_eni_ether_address_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_eni_ether_address_map_entry_pargs() throw();
  const sai_thrift_eni_ether_address_map_entry_t* eni_ether_address_map_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result__isset {
  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result__isset;

class sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result {
 public:

  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result(const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result& operator=(const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_eni_ether_address_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult__isset {
  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult__isset;

class sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_eni_ether_address_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args__isset {
  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args__isset() : eni_ether_address_map_entry(false) {}
  bool eni_ether_address_map_entry :1;
} _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args__isset;

class sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args {
 public:

  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args(const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args& operator=(const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args() throw();
  sai_thrift_eni_ether_address_map_entry_t eni_ether_address_map_entry;

  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args__isset __isset;

  void __set_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_pargs() throw();
  const sai_thrift_eni_ether_address_map_entry_t* eni_ether_address_map_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result__isset {
  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result__isset;

class sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result {
 public:

  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result(const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result& operator=(const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult__isset;

class sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_eni_ether_address_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args__isset() : eni_ether_address_map_entry(false), attr(false) {}
  bool eni_ether_address_map_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args(const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args&);
  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args&);
  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args() throw();
  sai_thrift_eni_ether_address_map_entry_t eni_ether_address_map_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args__isset __isset;

  void __set_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_pargs() throw();
  const sai_thrift_eni_ether_address_map_entry_t* eni_ether_address_map_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result(const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result&);
  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result&);
  sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_eni_ether_address_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args__isset() : eni_ether_address_map_entry(false), attr_list(false) {}
  bool eni_ether_address_map_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args(const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args&);
  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args&);
  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args() throw();
  sai_thrift_eni_ether_address_map_entry_t eni_ether_address_map_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args__isset __isset;

  void __set_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_pargs() throw();
  const sai_thrift_eni_ether_address_map_entry_t* eni_ether_address_map_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result(const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result&);
  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result&);
  sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_eni_ether_address_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args__isset() : eni_ether_address_map_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool eni_ether_address_map_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args(const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args() throw();
  std::vector<sai_thrift_eni_ether_address_map_entry_t>  eni_ether_address_map_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args__isset __isset;

  void __set_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_pargs() throw();
  const std::vector<sai_thrift_eni_ether_address_map_entry_t> * eni_ether_address_map_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result(const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_eni_ether_address_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args__isset() : eni_ether_address_map_entry(false), mode(false) {}
  bool eni_ether_address_map_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args(const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args() throw();
  std::vector<sai_thrift_eni_ether_address_map_entry_t>  eni_ether_address_map_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args__isset __isset;

  void __set_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args & rhs) const
  {
    if (!(eni_ether_address_map_entry == rhs.eni_ether_address_map_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_pargs() throw();
  const std::vector<sai_thrift_eni_ether_address_map_entry_t> * eni_ether_address_map_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result(const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_eni_ether_address_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_eni_args__isset {
  _sai_rpc_sai_thrift_create_eni_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_eni_args__isset;

class sai_rpc_sai_thrift_create_eni_args {
 public:

  sai_rpc_sai_thrift_create_eni_args(const sai_rpc_sai_thrift_create_eni_args&);
  sai_rpc_sai_thrift_create_eni_args& operator=(const sai_rpc_sai_thrift_create_eni_args&);
  sai_rpc_sai_thrift_create_eni_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_eni_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_eni_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_eni_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_eni_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_eni_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_eni_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_eni_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_eni_result__isset {
  _sai_rpc_sai_thrift_create_eni_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_eni_result__isset;

class sai_rpc_sai_thrift_create_eni_result {
 public:

  sai_rpc_sai_thrift_create_eni_result(const sai_rpc_sai_thrift_create_eni_result&);
  sai_rpc_sai_thrift_create_eni_result& operator=(const sai_rpc_sai_thrift_create_eni_result&);
  sai_rpc_sai_thrift_create_eni_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_eni_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_eni_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_eni_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_eni_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_eni_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_eni_presult__isset {
  _sai_rpc_sai_thrift_create_eni_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_eni_presult__isset;

class sai_rpc_sai_thrift_create_eni_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_eni_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_eni_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_eni_args__isset {
  _sai_rpc_sai_thrift_remove_eni_args__isset() : eni_oid(false) {}
  bool eni_oid :1;
} _sai_rpc_sai_thrift_remove_eni_args__isset;

class sai_rpc_sai_thrift_remove_eni_args {
 public:

  sai_rpc_sai_thrift_remove_eni_args(const sai_rpc_sai_thrift_remove_eni_args&);
  sai_rpc_sai_thrift_remove_eni_args& operator=(const sai_rpc_sai_thrift_remove_eni_args&);
  sai_rpc_sai_thrift_remove_eni_args() : eni_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_eni_args() throw();
  sai_thrift_object_id_t eni_oid;

  _sai_rpc_sai_thrift_remove_eni_args__isset __isset;

  void __set_eni_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_eni_args & rhs) const
  {
    if (!(eni_oid == rhs.eni_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_eni_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_eni_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_eni_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_eni_pargs() throw();
  const sai_thrift_object_id_t* eni_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_eni_result__isset {
  _sai_rpc_sai_thrift_remove_eni_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_eni_result__isset;

class sai_rpc_sai_thrift_remove_eni_result {
 public:

  sai_rpc_sai_thrift_remove_eni_result(const sai_rpc_sai_thrift_remove_eni_result&);
  sai_rpc_sai_thrift_remove_eni_result& operator=(const sai_rpc_sai_thrift_remove_eni_result&);
  sai_rpc_sai_thrift_remove_eni_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_eni_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_eni_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_eni_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_eni_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_eni_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_eni_presult__isset {
  _sai_rpc_sai_thrift_remove_eni_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_eni_presult__isset;

class sai_rpc_sai_thrift_remove_eni_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_eni_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_eni_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_eni_attribute_args__isset {
  _sai_rpc_sai_thrift_set_eni_attribute_args__isset() : eni_oid(false), attr(false) {}
  bool eni_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_eni_attribute_args__isset;

class sai_rpc_sai_thrift_set_eni_attribute_args {
 public:

  sai_rpc_sai_thrift_set_eni_attribute_args(const sai_rpc_sai_thrift_set_eni_attribute_args&);
  sai_rpc_sai_thrift_set_eni_attribute_args& operator=(const sai_rpc_sai_thrift_set_eni_attribute_args&);
  sai_rpc_sai_thrift_set_eni_attribute_args() : eni_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_eni_attribute_args() throw();
  sai_thrift_object_id_t eni_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_eni_attribute_args__isset __isset;

  void __set_eni_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_eni_attribute_args & rhs) const
  {
    if (!(eni_oid == rhs.eni_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_eni_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_eni_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_eni_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_eni_attribute_pargs() throw();
  const sai_thrift_object_id_t* eni_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_eni_attribute_result__isset {
  _sai_rpc_sai_thrift_set_eni_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_eni_attribute_result__isset;

class sai_rpc_sai_thrift_set_eni_attribute_result {
 public:

  sai_rpc_sai_thrift_set_eni_attribute_result(const sai_rpc_sai_thrift_set_eni_attribute_result&);
  sai_rpc_sai_thrift_set_eni_attribute_result& operator=(const sai_rpc_sai_thrift_set_eni_attribute_result&);
  sai_rpc_sai_thrift_set_eni_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_eni_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_eni_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_eni_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_eni_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_eni_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_eni_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_eni_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_eni_attribute_presult__isset;

class sai_rpc_sai_thrift_set_eni_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_eni_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_eni_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_eni_attribute_args__isset {
  _sai_rpc_sai_thrift_get_eni_attribute_args__isset() : eni_oid(false), attr_list(false) {}
  bool eni_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_eni_attribute_args__isset;

class sai_rpc_sai_thrift_get_eni_attribute_args {
 public:

  sai_rpc_sai_thrift_get_eni_attribute_args(const sai_rpc_sai_thrift_get_eni_attribute_args&);
  sai_rpc_sai_thrift_get_eni_attribute_args& operator=(const sai_rpc_sai_thrift_get_eni_attribute_args&);
  sai_rpc_sai_thrift_get_eni_attribute_args() : eni_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_eni_attribute_args() throw();
  sai_thrift_object_id_t eni_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_eni_attribute_args__isset __isset;

  void __set_eni_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_eni_attribute_args & rhs) const
  {
    if (!(eni_oid == rhs.eni_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_eni_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_eni_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_eni_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_eni_attribute_pargs() throw();
  const sai_thrift_object_id_t* eni_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_eni_attribute_result__isset {
  _sai_rpc_sai_thrift_get_eni_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_eni_attribute_result__isset;

class sai_rpc_sai_thrift_get_eni_attribute_result {
 public:

  sai_rpc_sai_thrift_get_eni_attribute_result(const sai_rpc_sai_thrift_get_eni_attribute_result&);
  sai_rpc_sai_thrift_get_eni_attribute_result& operator=(const sai_rpc_sai_thrift_get_eni_attribute_result&);
  sai_rpc_sai_thrift_get_eni_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_eni_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_eni_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_eni_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_eni_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_eni_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_eni_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_eni_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_eni_attribute_presult__isset;

class sai_rpc_sai_thrift_get_eni_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_eni_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_eni_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_inbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_create_inbound_routing_entry_args__isset() : inbound_routing_entry(false), attr_list(false) {}
  bool inbound_routing_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_inbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_create_inbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_create_inbound_routing_entry_args(const sai_rpc_sai_thrift_create_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_create_inbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_create_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_create_inbound_routing_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_inbound_routing_entry_args() throw();
  sai_thrift_inbound_routing_entry_t inbound_routing_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_inbound_routing_entry_args__isset __isset;

  void __set_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_inbound_routing_entry_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_inbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_inbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_inbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_inbound_routing_entry_pargs() throw();
  const sai_thrift_inbound_routing_entry_t* inbound_routing_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_inbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_create_inbound_routing_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_inbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_create_inbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_create_inbound_routing_entry_result(const sai_rpc_sai_thrift_create_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_create_inbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_create_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_create_inbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_inbound_routing_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_inbound_routing_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_inbound_routing_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_inbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_inbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_inbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_create_inbound_routing_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_inbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_create_inbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_inbound_routing_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_inbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_inbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_remove_inbound_routing_entry_args__isset() : inbound_routing_entry(false) {}
  bool inbound_routing_entry :1;
} _sai_rpc_sai_thrift_remove_inbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_remove_inbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_remove_inbound_routing_entry_args(const sai_rpc_sai_thrift_remove_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_remove_inbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_remove_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_remove_inbound_routing_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_inbound_routing_entry_args() throw();
  sai_thrift_inbound_routing_entry_t inbound_routing_entry;

  _sai_rpc_sai_thrift_remove_inbound_routing_entry_args__isset __isset;

  void __set_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_inbound_routing_entry_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_inbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_inbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_inbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_inbound_routing_entry_pargs() throw();
  const sai_thrift_inbound_routing_entry_t* inbound_routing_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_inbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_remove_inbound_routing_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_inbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_remove_inbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_remove_inbound_routing_entry_result(const sai_rpc_sai_thrift_remove_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_remove_inbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_remove_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_remove_inbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_inbound_routing_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_inbound_routing_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_inbound_routing_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_inbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_inbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_inbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_inbound_routing_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_inbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_remove_inbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_inbound_routing_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_inbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args__isset() : inbound_routing_entry(false), attr(false) {}
  bool inbound_routing_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args(const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args() throw();
  sai_thrift_inbound_routing_entry_t inbound_routing_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args__isset __isset;

  void __set_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_pargs() throw();
  const sai_thrift_inbound_routing_entry_t* inbound_routing_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result(const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_inbound_routing_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args__isset() : inbound_routing_entry(false), attr_list(false) {}
  bool inbound_routing_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args(const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args() throw();
  sai_thrift_inbound_routing_entry_t inbound_routing_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args__isset __isset;

  void __set_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_pargs() throw();
  const sai_thrift_inbound_routing_entry_t* inbound_routing_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result(const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_inbound_routing_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args__isset() : inbound_routing_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool inbound_routing_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args(const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args() throw();
  std::vector<sai_thrift_inbound_routing_entry_t>  inbound_routing_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args__isset __isset;

  void __set_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_pargs() throw();
  const std::vector<sai_thrift_inbound_routing_entry_t> * inbound_routing_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result(const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_inbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args__isset() : inbound_routing_entry(false), mode(false) {}
  bool inbound_routing_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args(const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args() throw();
  std::vector<sai_thrift_inbound_routing_entry_t>  inbound_routing_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args__isset __isset;

  void __set_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args & rhs) const
  {
    if (!(inbound_routing_entry == rhs.inbound_routing_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_pargs() throw();
  const std::vector<sai_thrift_inbound_routing_entry_t> * inbound_routing_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result(const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_inbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_meter_bucket_args__isset {
  _sai_rpc_sai_thrift_create_meter_bucket_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_meter_bucket_args__isset;

class sai_rpc_sai_thrift_create_meter_bucket_args {
 public:

  sai_rpc_sai_thrift_create_meter_bucket_args(const sai_rpc_sai_thrift_create_meter_bucket_args&);
  sai_rpc_sai_thrift_create_meter_bucket_args& operator=(const sai_rpc_sai_thrift_create_meter_bucket_args&);
  sai_rpc_sai_thrift_create_meter_bucket_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_bucket_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_meter_bucket_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_bucket_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_bucket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_bucket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_meter_bucket_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_bucket_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_bucket_result__isset {
  _sai_rpc_sai_thrift_create_meter_bucket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_bucket_result__isset;

class sai_rpc_sai_thrift_create_meter_bucket_result {
 public:

  sai_rpc_sai_thrift_create_meter_bucket_result(const sai_rpc_sai_thrift_create_meter_bucket_result&);
  sai_rpc_sai_thrift_create_meter_bucket_result& operator=(const sai_rpc_sai_thrift_create_meter_bucket_result&);
  sai_rpc_sai_thrift_create_meter_bucket_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_bucket_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_bucket_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_bucket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_bucket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_bucket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_bucket_presult__isset {
  _sai_rpc_sai_thrift_create_meter_bucket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_bucket_presult__isset;

class sai_rpc_sai_thrift_create_meter_bucket_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_bucket_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_bucket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_meter_bucket_args__isset {
  _sai_rpc_sai_thrift_remove_meter_bucket_args__isset() : meter_bucket_oid(false) {}
  bool meter_bucket_oid :1;
} _sai_rpc_sai_thrift_remove_meter_bucket_args__isset;

class sai_rpc_sai_thrift_remove_meter_bucket_args {
 public:

  sai_rpc_sai_thrift_remove_meter_bucket_args(const sai_rpc_sai_thrift_remove_meter_bucket_args&);
  sai_rpc_sai_thrift_remove_meter_bucket_args& operator=(const sai_rpc_sai_thrift_remove_meter_bucket_args&);
  sai_rpc_sai_thrift_remove_meter_bucket_args() : meter_bucket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_bucket_args() throw();
  sai_thrift_object_id_t meter_bucket_oid;

  _sai_rpc_sai_thrift_remove_meter_bucket_args__isset __isset;

  void __set_meter_bucket_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_bucket_args & rhs) const
  {
    if (!(meter_bucket_oid == rhs.meter_bucket_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_bucket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_bucket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_meter_bucket_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_bucket_pargs() throw();
  const sai_thrift_object_id_t* meter_bucket_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_bucket_result__isset {
  _sai_rpc_sai_thrift_remove_meter_bucket_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_bucket_result__isset;

class sai_rpc_sai_thrift_remove_meter_bucket_result {
 public:

  sai_rpc_sai_thrift_remove_meter_bucket_result(const sai_rpc_sai_thrift_remove_meter_bucket_result&);
  sai_rpc_sai_thrift_remove_meter_bucket_result& operator=(const sai_rpc_sai_thrift_remove_meter_bucket_result&);
  sai_rpc_sai_thrift_remove_meter_bucket_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_bucket_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_bucket_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_bucket_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_bucket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_bucket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_bucket_presult__isset {
  _sai_rpc_sai_thrift_remove_meter_bucket_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_bucket_presult__isset;

class sai_rpc_sai_thrift_remove_meter_bucket_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_bucket_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_bucket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_meter_bucket_attribute_args__isset {
  _sai_rpc_sai_thrift_set_meter_bucket_attribute_args__isset() : meter_bucket_oid(false), attr(false) {}
  bool meter_bucket_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_meter_bucket_attribute_args__isset;

class sai_rpc_sai_thrift_set_meter_bucket_attribute_args {
 public:

  sai_rpc_sai_thrift_set_meter_bucket_attribute_args(const sai_rpc_sai_thrift_set_meter_bucket_attribute_args&);
  sai_rpc_sai_thrift_set_meter_bucket_attribute_args& operator=(const sai_rpc_sai_thrift_set_meter_bucket_attribute_args&);
  sai_rpc_sai_thrift_set_meter_bucket_attribute_args() : meter_bucket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_bucket_attribute_args() throw();
  sai_thrift_object_id_t meter_bucket_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_meter_bucket_attribute_args__isset __isset;

  void __set_meter_bucket_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_bucket_attribute_args & rhs) const
  {
    if (!(meter_bucket_oid == rhs.meter_bucket_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_bucket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_bucket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_meter_bucket_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_bucket_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_bucket_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_bucket_attribute_result__isset {
  _sai_rpc_sai_thrift_set_meter_bucket_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_bucket_attribute_result__isset;

class sai_rpc_sai_thrift_set_meter_bucket_attribute_result {
 public:

  sai_rpc_sai_thrift_set_meter_bucket_attribute_result(const sai_rpc_sai_thrift_set_meter_bucket_attribute_result&);
  sai_rpc_sai_thrift_set_meter_bucket_attribute_result& operator=(const sai_rpc_sai_thrift_set_meter_bucket_attribute_result&);
  sai_rpc_sai_thrift_set_meter_bucket_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_bucket_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_bucket_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_bucket_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_bucket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_bucket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_bucket_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_meter_bucket_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_bucket_attribute_presult__isset;

class sai_rpc_sai_thrift_set_meter_bucket_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_bucket_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_bucket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_meter_bucket_attribute_args__isset {
  _sai_rpc_sai_thrift_get_meter_bucket_attribute_args__isset() : meter_bucket_oid(false), attr_list(false) {}
  bool meter_bucket_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_meter_bucket_attribute_args__isset;

class sai_rpc_sai_thrift_get_meter_bucket_attribute_args {
 public:

  sai_rpc_sai_thrift_get_meter_bucket_attribute_args(const sai_rpc_sai_thrift_get_meter_bucket_attribute_args&);
  sai_rpc_sai_thrift_get_meter_bucket_attribute_args& operator=(const sai_rpc_sai_thrift_get_meter_bucket_attribute_args&);
  sai_rpc_sai_thrift_get_meter_bucket_attribute_args() : meter_bucket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_bucket_attribute_args() throw();
  sai_thrift_object_id_t meter_bucket_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_meter_bucket_attribute_args__isset __isset;

  void __set_meter_bucket_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_bucket_attribute_args & rhs) const
  {
    if (!(meter_bucket_oid == rhs.meter_bucket_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_bucket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_bucket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_meter_bucket_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_bucket_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_bucket_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_bucket_attribute_result__isset {
  _sai_rpc_sai_thrift_get_meter_bucket_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_bucket_attribute_result__isset;

class sai_rpc_sai_thrift_get_meter_bucket_attribute_result {
 public:

  sai_rpc_sai_thrift_get_meter_bucket_attribute_result(const sai_rpc_sai_thrift_get_meter_bucket_attribute_result&);
  sai_rpc_sai_thrift_get_meter_bucket_attribute_result& operator=(const sai_rpc_sai_thrift_get_meter_bucket_attribute_result&);
  sai_rpc_sai_thrift_get_meter_bucket_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_bucket_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_bucket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_bucket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_bucket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_bucket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_bucket_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_meter_bucket_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_bucket_attribute_presult__isset;

class sai_rpc_sai_thrift_get_meter_bucket_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_bucket_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_bucket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_meter_policy_args__isset {
  _sai_rpc_sai_thrift_create_meter_policy_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_meter_policy_args__isset;

class sai_rpc_sai_thrift_create_meter_policy_args {
 public:

  sai_rpc_sai_thrift_create_meter_policy_args(const sai_rpc_sai_thrift_create_meter_policy_args&);
  sai_rpc_sai_thrift_create_meter_policy_args& operator=(const sai_rpc_sai_thrift_create_meter_policy_args&);
  sai_rpc_sai_thrift_create_meter_policy_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_policy_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_meter_policy_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_policy_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_policy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_policy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_meter_policy_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_policy_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_policy_result__isset {
  _sai_rpc_sai_thrift_create_meter_policy_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_policy_result__isset;

class sai_rpc_sai_thrift_create_meter_policy_result {
 public:

  sai_rpc_sai_thrift_create_meter_policy_result(const sai_rpc_sai_thrift_create_meter_policy_result&);
  sai_rpc_sai_thrift_create_meter_policy_result& operator=(const sai_rpc_sai_thrift_create_meter_policy_result&);
  sai_rpc_sai_thrift_create_meter_policy_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_policy_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_policy_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_policy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_policy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_policy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_policy_presult__isset {
  _sai_rpc_sai_thrift_create_meter_policy_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_policy_presult__isset;

class sai_rpc_sai_thrift_create_meter_policy_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_policy_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_policy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_meter_policy_args__isset {
  _sai_rpc_sai_thrift_remove_meter_policy_args__isset() : meter_policy_oid(false) {}
  bool meter_policy_oid :1;
} _sai_rpc_sai_thrift_remove_meter_policy_args__isset;

class sai_rpc_sai_thrift_remove_meter_policy_args {
 public:

  sai_rpc_sai_thrift_remove_meter_policy_args(const sai_rpc_sai_thrift_remove_meter_policy_args&);
  sai_rpc_sai_thrift_remove_meter_policy_args& operator=(const sai_rpc_sai_thrift_remove_meter_policy_args&);
  sai_rpc_sai_thrift_remove_meter_policy_args() : meter_policy_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_policy_args() throw();
  sai_thrift_object_id_t meter_policy_oid;

  _sai_rpc_sai_thrift_remove_meter_policy_args__isset __isset;

  void __set_meter_policy_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_policy_args & rhs) const
  {
    if (!(meter_policy_oid == rhs.meter_policy_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_policy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_policy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_meter_policy_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_policy_pargs() throw();
  const sai_thrift_object_id_t* meter_policy_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_policy_result__isset {
  _sai_rpc_sai_thrift_remove_meter_policy_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_policy_result__isset;

class sai_rpc_sai_thrift_remove_meter_policy_result {
 public:

  sai_rpc_sai_thrift_remove_meter_policy_result(const sai_rpc_sai_thrift_remove_meter_policy_result&);
  sai_rpc_sai_thrift_remove_meter_policy_result& operator=(const sai_rpc_sai_thrift_remove_meter_policy_result&);
  sai_rpc_sai_thrift_remove_meter_policy_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_policy_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_policy_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_policy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_policy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_policy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_policy_presult__isset {
  _sai_rpc_sai_thrift_remove_meter_policy_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_policy_presult__isset;

class sai_rpc_sai_thrift_remove_meter_policy_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_policy_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_policy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_meter_policy_attribute_args__isset {
  _sai_rpc_sai_thrift_set_meter_policy_attribute_args__isset() : meter_policy_oid(false), attr(false) {}
  bool meter_policy_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_meter_policy_attribute_args__isset;

class sai_rpc_sai_thrift_set_meter_policy_attribute_args {
 public:

  sai_rpc_sai_thrift_set_meter_policy_attribute_args(const sai_rpc_sai_thrift_set_meter_policy_attribute_args&);
  sai_rpc_sai_thrift_set_meter_policy_attribute_args& operator=(const sai_rpc_sai_thrift_set_meter_policy_attribute_args&);
  sai_rpc_sai_thrift_set_meter_policy_attribute_args() : meter_policy_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_policy_attribute_args() throw();
  sai_thrift_object_id_t meter_policy_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_meter_policy_attribute_args__isset __isset;

  void __set_meter_policy_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_policy_attribute_args & rhs) const
  {
    if (!(meter_policy_oid == rhs.meter_policy_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_policy_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_policy_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_meter_policy_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_policy_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_policy_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_policy_attribute_result__isset {
  _sai_rpc_sai_thrift_set_meter_policy_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_policy_attribute_result__isset;

class sai_rpc_sai_thrift_set_meter_policy_attribute_result {
 public:

  sai_rpc_sai_thrift_set_meter_policy_attribute_result(const sai_rpc_sai_thrift_set_meter_policy_attribute_result&);
  sai_rpc_sai_thrift_set_meter_policy_attribute_result& operator=(const sai_rpc_sai_thrift_set_meter_policy_attribute_result&);
  sai_rpc_sai_thrift_set_meter_policy_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_policy_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_policy_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_policy_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_policy_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_policy_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_policy_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_meter_policy_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_policy_attribute_presult__isset;

class sai_rpc_sai_thrift_set_meter_policy_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_policy_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_policy_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_meter_policy_attribute_args__isset {
  _sai_rpc_sai_thrift_get_meter_policy_attribute_args__isset() : meter_policy_oid(false), attr_list(false) {}
  bool meter_policy_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_meter_policy_attribute_args__isset;

class sai_rpc_sai_thrift_get_meter_policy_attribute_args {
 public:

  sai_rpc_sai_thrift_get_meter_policy_attribute_args(const sai_rpc_sai_thrift_get_meter_policy_attribute_args&);
  sai_rpc_sai_thrift_get_meter_policy_attribute_args& operator=(const sai_rpc_sai_thrift_get_meter_policy_attribute_args&);
  sai_rpc_sai_thrift_get_meter_policy_attribute_args() : meter_policy_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_policy_attribute_args() throw();
  sai_thrift_object_id_t meter_policy_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_meter_policy_attribute_args__isset __isset;

  void __set_meter_policy_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_policy_attribute_args & rhs) const
  {
    if (!(meter_policy_oid == rhs.meter_policy_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_policy_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_policy_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_meter_policy_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_policy_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_policy_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_policy_attribute_result__isset {
  _sai_rpc_sai_thrift_get_meter_policy_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_policy_attribute_result__isset;

class sai_rpc_sai_thrift_get_meter_policy_attribute_result {
 public:

  sai_rpc_sai_thrift_get_meter_policy_attribute_result(const sai_rpc_sai_thrift_get_meter_policy_attribute_result&);
  sai_rpc_sai_thrift_get_meter_policy_attribute_result& operator=(const sai_rpc_sai_thrift_get_meter_policy_attribute_result&);
  sai_rpc_sai_thrift_get_meter_policy_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_policy_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_policy_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_policy_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_policy_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_policy_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_policy_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_meter_policy_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_policy_attribute_presult__isset;

class sai_rpc_sai_thrift_get_meter_policy_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_policy_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_policy_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_meter_rule_args__isset {
  _sai_rpc_sai_thrift_create_meter_rule_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_meter_rule_args__isset;

class sai_rpc_sai_thrift_create_meter_rule_args {
 public:

  sai_rpc_sai_thrift_create_meter_rule_args(const sai_rpc_sai_thrift_create_meter_rule_args&);
  sai_rpc_sai_thrift_create_meter_rule_args& operator=(const sai_rpc_sai_thrift_create_meter_rule_args&);
  sai_rpc_sai_thrift_create_meter_rule_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_rule_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_meter_rule_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_rule_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_meter_rule_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_rule_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_rule_result__isset {
  _sai_rpc_sai_thrift_create_meter_rule_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_rule_result__isset;

class sai_rpc_sai_thrift_create_meter_rule_result {
 public:

  sai_rpc_sai_thrift_create_meter_rule_result(const sai_rpc_sai_thrift_create_meter_rule_result&);
  sai_rpc_sai_thrift_create_meter_rule_result& operator=(const sai_rpc_sai_thrift_create_meter_rule_result&);
  sai_rpc_sai_thrift_create_meter_rule_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_meter_rule_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_rule_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_meter_rule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_meter_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_meter_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_meter_rule_presult__isset {
  _sai_rpc_sai_thrift_create_meter_rule_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_meter_rule_presult__isset;

class sai_rpc_sai_thrift_create_meter_rule_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_meter_rule_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_meter_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_meter_rule_args__isset {
  _sai_rpc_sai_thrift_remove_meter_rule_args__isset() : meter_rule_oid(false) {}
  bool meter_rule_oid :1;
} _sai_rpc_sai_thrift_remove_meter_rule_args__isset;

class sai_rpc_sai_thrift_remove_meter_rule_args {
 public:

  sai_rpc_sai_thrift_remove_meter_rule_args(const sai_rpc_sai_thrift_remove_meter_rule_args&);
  sai_rpc_sai_thrift_remove_meter_rule_args& operator=(const sai_rpc_sai_thrift_remove_meter_rule_args&);
  sai_rpc_sai_thrift_remove_meter_rule_args() : meter_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_rule_args() throw();
  sai_thrift_object_id_t meter_rule_oid;

  _sai_rpc_sai_thrift_remove_meter_rule_args__isset __isset;

  void __set_meter_rule_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_rule_args & rhs) const
  {
    if (!(meter_rule_oid == rhs.meter_rule_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_meter_rule_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_rule_pargs() throw();
  const sai_thrift_object_id_t* meter_rule_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_rule_result__isset {
  _sai_rpc_sai_thrift_remove_meter_rule_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_rule_result__isset;

class sai_rpc_sai_thrift_remove_meter_rule_result {
 public:

  sai_rpc_sai_thrift_remove_meter_rule_result(const sai_rpc_sai_thrift_remove_meter_rule_result&);
  sai_rpc_sai_thrift_remove_meter_rule_result& operator=(const sai_rpc_sai_thrift_remove_meter_rule_result&);
  sai_rpc_sai_thrift_remove_meter_rule_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_meter_rule_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_rule_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_meter_rule_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_meter_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_meter_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_meter_rule_presult__isset {
  _sai_rpc_sai_thrift_remove_meter_rule_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_meter_rule_presult__isset;

class sai_rpc_sai_thrift_remove_meter_rule_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_meter_rule_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_meter_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_meter_rule_attribute_args__isset {
  _sai_rpc_sai_thrift_set_meter_rule_attribute_args__isset() : meter_rule_oid(false), attr(false) {}
  bool meter_rule_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_meter_rule_attribute_args__isset;

class sai_rpc_sai_thrift_set_meter_rule_attribute_args {
 public:

  sai_rpc_sai_thrift_set_meter_rule_attribute_args(const sai_rpc_sai_thrift_set_meter_rule_attribute_args&);
  sai_rpc_sai_thrift_set_meter_rule_attribute_args& operator=(const sai_rpc_sai_thrift_set_meter_rule_attribute_args&);
  sai_rpc_sai_thrift_set_meter_rule_attribute_args() : meter_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_rule_attribute_args() throw();
  sai_thrift_object_id_t meter_rule_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_meter_rule_attribute_args__isset __isset;

  void __set_meter_rule_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_rule_attribute_args & rhs) const
  {
    if (!(meter_rule_oid == rhs.meter_rule_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_rule_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_rule_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_meter_rule_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_rule_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_rule_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_rule_attribute_result__isset {
  _sai_rpc_sai_thrift_set_meter_rule_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_rule_attribute_result__isset;

class sai_rpc_sai_thrift_set_meter_rule_attribute_result {
 public:

  sai_rpc_sai_thrift_set_meter_rule_attribute_result(const sai_rpc_sai_thrift_set_meter_rule_attribute_result&);
  sai_rpc_sai_thrift_set_meter_rule_attribute_result& operator=(const sai_rpc_sai_thrift_set_meter_rule_attribute_result&);
  sai_rpc_sai_thrift_set_meter_rule_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_meter_rule_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_rule_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_meter_rule_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_meter_rule_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_meter_rule_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_meter_rule_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_meter_rule_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_meter_rule_attribute_presult__isset;

class sai_rpc_sai_thrift_set_meter_rule_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_meter_rule_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_meter_rule_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_meter_rule_attribute_args__isset {
  _sai_rpc_sai_thrift_get_meter_rule_attribute_args__isset() : meter_rule_oid(false), attr_list(false) {}
  bool meter_rule_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_meter_rule_attribute_args__isset;

class sai_rpc_sai_thrift_get_meter_rule_attribute_args {
 public:

  sai_rpc_sai_thrift_get_meter_rule_attribute_args(const sai_rpc_sai_thrift_get_meter_rule_attribute_args&);
  sai_rpc_sai_thrift_get_meter_rule_attribute_args& operator=(const sai_rpc_sai_thrift_get_meter_rule_attribute_args&);
  sai_rpc_sai_thrift_get_meter_rule_attribute_args() : meter_rule_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_rule_attribute_args() throw();
  sai_thrift_object_id_t meter_rule_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_meter_rule_attribute_args__isset __isset;

  void __set_meter_rule_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_rule_attribute_args & rhs) const
  {
    if (!(meter_rule_oid == rhs.meter_rule_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_rule_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_rule_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_meter_rule_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_rule_attribute_pargs() throw();
  const sai_thrift_object_id_t* meter_rule_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_rule_attribute_result__isset {
  _sai_rpc_sai_thrift_get_meter_rule_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_rule_attribute_result__isset;

class sai_rpc_sai_thrift_get_meter_rule_attribute_result {
 public:

  sai_rpc_sai_thrift_get_meter_rule_attribute_result(const sai_rpc_sai_thrift_get_meter_rule_attribute_result&);
  sai_rpc_sai_thrift_get_meter_rule_attribute_result& operator=(const sai_rpc_sai_thrift_get_meter_rule_attribute_result&);
  sai_rpc_sai_thrift_get_meter_rule_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_meter_rule_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_rule_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_meter_rule_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_meter_rule_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_meter_rule_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_meter_rule_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_meter_rule_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_meter_rule_attribute_presult__isset;

class sai_rpc_sai_thrift_get_meter_rule_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_meter_rule_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_meter_rule_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args__isset {
  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args__isset() : outbound_ca_to_pa_entry(false), attr_list(false) {}
  bool outbound_ca_to_pa_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args__isset;

class sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args {
 public:

  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args(const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args& operator=(const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args() throw();
  sai_thrift_outbound_ca_to_pa_entry_t outbound_ca_to_pa_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_pargs() throw();
  const sai_thrift_outbound_ca_to_pa_entry_t* outbound_ca_to_pa_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result__isset {
  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result__isset;

class sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result {
 public:

  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result(const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result& operator=(const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult__isset {
  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult__isset;

class sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_outbound_ca_to_pa_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args__isset {
  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args__isset() : outbound_ca_to_pa_entry(false) {}
  bool outbound_ca_to_pa_entry :1;
} _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args__isset;

class sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args {
 public:

  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args(const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args& operator=(const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args() throw();
  sai_thrift_outbound_ca_to_pa_entry_t outbound_ca_to_pa_entry;

  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_pargs() throw();
  const sai_thrift_outbound_ca_to_pa_entry_t* outbound_ca_to_pa_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result__isset {
  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result__isset;

class sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result {
 public:

  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result(const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result& operator=(const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult__isset;

class sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_outbound_ca_to_pa_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args__isset() : outbound_ca_to_pa_entry(false), attr(false) {}
  bool outbound_ca_to_pa_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args(const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args&);
  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args&);
  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args() throw();
  sai_thrift_outbound_ca_to_pa_entry_t outbound_ca_to_pa_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_pargs() throw();
  const sai_thrift_outbound_ca_to_pa_entry_t* outbound_ca_to_pa_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result(const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result&);
  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result&);
  sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_outbound_ca_to_pa_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args__isset() : outbound_ca_to_pa_entry(false), attr_list(false) {}
  bool outbound_ca_to_pa_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args(const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args&);
  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args&);
  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args() throw();
  sai_thrift_outbound_ca_to_pa_entry_t outbound_ca_to_pa_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_pargs() throw();
  const sai_thrift_outbound_ca_to_pa_entry_t* outbound_ca_to_pa_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result(const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result&);
  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result&);
  sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_outbound_ca_to_pa_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args__isset() : outbound_ca_to_pa_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool outbound_ca_to_pa_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args(const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args() throw();
  std::vector<sai_thrift_outbound_ca_to_pa_entry_t>  outbound_ca_to_pa_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_pargs() throw();
  const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> * outbound_ca_to_pa_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result(const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_outbound_ca_to_pa_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args__isset() : outbound_ca_to_pa_entry(false), mode(false) {}
  bool outbound_ca_to_pa_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args(const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args() throw();
  std::vector<sai_thrift_outbound_ca_to_pa_entry_t>  outbound_ca_to_pa_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args__isset __isset;

  void __set_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args & rhs) const
  {
    if (!(outbound_ca_to_pa_entry == rhs.outbound_ca_to_pa_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_pargs() throw();
  const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> * outbound_ca_to_pa_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result(const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_outbound_ca_to_pa_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_outbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_create_outbound_routing_entry_args__isset() : outbound_routing_entry(false), attr_list(false) {}
  bool outbound_routing_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_outbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_create_outbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_create_outbound_routing_entry_args(const sai_rpc_sai_thrift_create_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_create_outbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_create_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_create_outbound_routing_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_outbound_routing_entry_args() throw();
  sai_thrift_outbound_routing_entry_t outbound_routing_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_outbound_routing_entry_args__isset __isset;

  void __set_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_outbound_routing_entry_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_outbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_outbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_outbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_outbound_routing_entry_pargs() throw();
  const sai_thrift_outbound_routing_entry_t* outbound_routing_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_outbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_create_outbound_routing_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_outbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_create_outbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_create_outbound_routing_entry_result(const sai_rpc_sai_thrift_create_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_create_outbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_create_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_create_outbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_outbound_routing_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_outbound_routing_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_outbound_routing_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_outbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_outbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_outbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_create_outbound_routing_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_outbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_create_outbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_outbound_routing_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_outbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_remove_outbound_routing_entry_args__isset() : outbound_routing_entry(false) {}
  bool outbound_routing_entry :1;
} _sai_rpc_sai_thrift_remove_outbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_remove_outbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_remove_outbound_routing_entry_args(const sai_rpc_sai_thrift_remove_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_remove_outbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_remove_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_remove_outbound_routing_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_outbound_routing_entry_args() throw();
  sai_thrift_outbound_routing_entry_t outbound_routing_entry;

  _sai_rpc_sai_thrift_remove_outbound_routing_entry_args__isset __isset;

  void __set_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_outbound_routing_entry_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_outbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_outbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_outbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_outbound_routing_entry_pargs() throw();
  const sai_thrift_outbound_routing_entry_t* outbound_routing_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_remove_outbound_routing_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_outbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_remove_outbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_remove_outbound_routing_entry_result(const sai_rpc_sai_thrift_remove_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_remove_outbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_remove_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_remove_outbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_outbound_routing_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_outbound_routing_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_outbound_routing_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_outbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_outbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_outbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_outbound_routing_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_outbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_remove_outbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_outbound_routing_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_outbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args__isset() : outbound_routing_entry(false), attr(false) {}
  bool outbound_routing_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args(const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args() throw();
  sai_thrift_outbound_routing_entry_t outbound_routing_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args__isset __isset;

  void __set_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_pargs() throw();
  const sai_thrift_outbound_routing_entry_t* outbound_routing_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result(const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_outbound_routing_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args__isset() : outbound_routing_entry(false), attr_list(false) {}
  bool outbound_routing_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args(const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args&);
  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args() throw();
  sai_thrift_outbound_routing_entry_t outbound_routing_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args__isset __isset;

  void __set_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_pargs() throw();
  const sai_thrift_outbound_routing_entry_t* outbound_routing_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result(const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result&);
  sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_outbound_routing_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args__isset() : outbound_routing_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool outbound_routing_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args(const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args() throw();
  std::vector<sai_thrift_outbound_routing_entry_t>  outbound_routing_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args__isset __isset;

  void __set_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_pargs() throw();
  const std::vector<sai_thrift_outbound_routing_entry_t> * outbound_routing_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result(const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_outbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args__isset() : outbound_routing_entry(false), mode(false) {}
  bool outbound_routing_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args(const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args() throw();
  std::vector<sai_thrift_outbound_routing_entry_t>  outbound_routing_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args__isset __isset;

  void __set_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args & rhs) const
  {
    if (!(outbound_routing_entry == rhs.outbound_routing_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_pargs() throw();
  const std::vector<sai_thrift_outbound_routing_entry_t> * outbound_routing_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result(const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_outbound_routing_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_pa_validation_entry_args__isset {
  _sai_rpc_sai_thrift_create_pa_validation_entry_args__isset() : pa_validation_entry(false), attr_list(false) {}
  bool pa_validation_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_pa_validation_entry_args__isset;

class sai_rpc_sai_thrift_create_pa_validation_entry_args {
 public:

  sai_rpc_sai_thrift_create_pa_validation_entry_args(const sai_rpc_sai_thrift_create_pa_validation_entry_args&);
  sai_rpc_sai_thrift_create_pa_validation_entry_args& operator=(const sai_rpc_sai_thrift_create_pa_validation_entry_args&);
  sai_rpc_sai_thrift_create_pa_validation_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_pa_validation_entry_args() throw();
  sai_thrift_pa_validation_entry_t pa_validation_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_pa_validation_entry_args__isset __isset;

  void __set_pa_validation_entry(const sai_thrift_pa_validation_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_pa_validation_entry_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_pa_validation_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_pa_validation_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_pa_validation_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_pa_validation_entry_pargs() throw();
  const sai_thrift_pa_validation_entry_t* pa_validation_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_pa_validation_entry_result__isset {
  _sai_rpc_sai_thrift_create_pa_validation_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_pa_validation_entry_result__isset;

class sai_rpc_sai_thrift_create_pa_validation_entry_result {
 public:

  sai_rpc_sai_thrift_create_pa_validation_entry_result(const sai_rpc_sai_thrift_create_pa_validation_entry_result&);
  sai_rpc_sai_thrift_create_pa_validation_entry_result& operator=(const sai_rpc_sai_thrift_create_pa_validation_entry_result&);
  sai_rpc_sai_thrift_create_pa_validation_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_pa_validation_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_pa_validation_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_pa_validation_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_pa_validation_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_pa_validation_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_pa_validation_entry_presult__isset {
  _sai_rpc_sai_thrift_create_pa_validation_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_pa_validation_entry_presult__isset;

class sai_rpc_sai_thrift_create_pa_validation_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_pa_validation_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_pa_validation_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_pa_validation_entry_args__isset {
  _sai_rpc_sai_thrift_remove_pa_validation_entry_args__isset() : pa_validation_entry(false) {}
  bool pa_validation_entry :1;
} _sai_rpc_sai_thrift_remove_pa_validation_entry_args__isset;

class sai_rpc_sai_thrift_remove_pa_validation_entry_args {
 public:

  sai_rpc_sai_thrift_remove_pa_validation_entry_args(const sai_rpc_sai_thrift_remove_pa_validation_entry_args&);
  sai_rpc_sai_thrift_remove_pa_validation_entry_args& operator=(const sai_rpc_sai_thrift_remove_pa_validation_entry_args&);
  sai_rpc_sai_thrift_remove_pa_validation_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_pa_validation_entry_args() throw();
  sai_thrift_pa_validation_entry_t pa_validation_entry;

  _sai_rpc_sai_thrift_remove_pa_validation_entry_args__isset __isset;

  void __set_pa_validation_entry(const sai_thrift_pa_validation_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_pa_validation_entry_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_pa_validation_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_pa_validation_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_pa_validation_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_pa_validation_entry_pargs() throw();
  const sai_thrift_pa_validation_entry_t* pa_validation_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_pa_validation_entry_result__isset {
  _sai_rpc_sai_thrift_remove_pa_validation_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_pa_validation_entry_result__isset;

class sai_rpc_sai_thrift_remove_pa_validation_entry_result {
 public:

  sai_rpc_sai_thrift_remove_pa_validation_entry_result(const sai_rpc_sai_thrift_remove_pa_validation_entry_result&);
  sai_rpc_sai_thrift_remove_pa_validation_entry_result& operator=(const sai_rpc_sai_thrift_remove_pa_validation_entry_result&);
  sai_rpc_sai_thrift_remove_pa_validation_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_pa_validation_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_pa_validation_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_pa_validation_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_pa_validation_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_pa_validation_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_pa_validation_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_pa_validation_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_pa_validation_entry_presult__isset;

class sai_rpc_sai_thrift_remove_pa_validation_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_pa_validation_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_pa_validation_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args__isset() : pa_validation_entry(false), attr(false) {}
  bool pa_validation_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args(const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args&);
  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args&);
  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args() throw();
  sai_thrift_pa_validation_entry_t pa_validation_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args__isset __isset;

  void __set_pa_validation_entry(const sai_thrift_pa_validation_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_pa_validation_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_pa_validation_entry_attribute_pargs() throw();
  const sai_thrift_pa_validation_entry_t* pa_validation_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result(const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result&);
  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result&);
  sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_pa_validation_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_pa_validation_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args__isset() : pa_validation_entry(false), attr_list(false) {}
  bool pa_validation_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args(const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args&);
  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args&);
  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args() throw();
  sai_thrift_pa_validation_entry_t pa_validation_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args__isset __isset;

  void __set_pa_validation_entry(const sai_thrift_pa_validation_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_pa_validation_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_pa_validation_entry_attribute_pargs() throw();
  const sai_thrift_pa_validation_entry_t* pa_validation_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result(const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result&);
  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result&);
  sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_pa_validation_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_pa_validation_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args__isset() : pa_validation_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool pa_validation_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args(const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args&);
  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args&);
  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args() throw();
  std::vector<sai_thrift_pa_validation_entry_t>  pa_validation_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args__isset __isset;

  void __set_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_pa_validation_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_pa_validation_entry_pargs() throw();
  const std::vector<sai_thrift_pa_validation_entry_t> * pa_validation_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result(const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result&);
  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result&);
  sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_pa_validation_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_pa_validation_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args__isset() : pa_validation_entry(false), mode(false) {}
  bool pa_validation_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args(const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args() throw();
  std::vector<sai_thrift_pa_validation_entry_t>  pa_validation_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args__isset __isset;

  void __set_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args & rhs) const
  {
    if (!(pa_validation_entry == rhs.pa_validation_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_pargs() throw();
  const std::vector<sai_thrift_pa_validation_entry_t> * pa_validation_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result(const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_pa_validation_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dst_tag_entry_args__isset {
  _sai_rpc_sai_thrift_create_dst_tag_entry_args__isset() : dst_tag_entry(false), attr_list(false) {}
  bool dst_tag_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dst_tag_entry_args__isset;

class sai_rpc_sai_thrift_create_dst_tag_entry_args {
 public:

  sai_rpc_sai_thrift_create_dst_tag_entry_args(const sai_rpc_sai_thrift_create_dst_tag_entry_args&);
  sai_rpc_sai_thrift_create_dst_tag_entry_args& operator=(const sai_rpc_sai_thrift_create_dst_tag_entry_args&);
  sai_rpc_sai_thrift_create_dst_tag_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dst_tag_entry_args() throw();
  sai_thrift_dst_tag_entry_t dst_tag_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dst_tag_entry_args__isset __isset;

  void __set_dst_tag_entry(const sai_thrift_dst_tag_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dst_tag_entry_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dst_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dst_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dst_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dst_tag_entry_pargs() throw();
  const sai_thrift_dst_tag_entry_t* dst_tag_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dst_tag_entry_result__isset {
  _sai_rpc_sai_thrift_create_dst_tag_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_dst_tag_entry_result__isset;

class sai_rpc_sai_thrift_create_dst_tag_entry_result {
 public:

  sai_rpc_sai_thrift_create_dst_tag_entry_result(const sai_rpc_sai_thrift_create_dst_tag_entry_result&);
  sai_rpc_sai_thrift_create_dst_tag_entry_result& operator=(const sai_rpc_sai_thrift_create_dst_tag_entry_result&);
  sai_rpc_sai_thrift_create_dst_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_dst_tag_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dst_tag_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dst_tag_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dst_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dst_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dst_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_create_dst_tag_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_dst_tag_entry_presult__isset;

class sai_rpc_sai_thrift_create_dst_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dst_tag_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dst_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dst_tag_entry_args__isset {
  _sai_rpc_sai_thrift_remove_dst_tag_entry_args__isset() : dst_tag_entry(false) {}
  bool dst_tag_entry :1;
} _sai_rpc_sai_thrift_remove_dst_tag_entry_args__isset;

class sai_rpc_sai_thrift_remove_dst_tag_entry_args {
 public:

  sai_rpc_sai_thrift_remove_dst_tag_entry_args(const sai_rpc_sai_thrift_remove_dst_tag_entry_args&);
  sai_rpc_sai_thrift_remove_dst_tag_entry_args& operator=(const sai_rpc_sai_thrift_remove_dst_tag_entry_args&);
  sai_rpc_sai_thrift_remove_dst_tag_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dst_tag_entry_args() throw();
  sai_thrift_dst_tag_entry_t dst_tag_entry;

  _sai_rpc_sai_thrift_remove_dst_tag_entry_args__isset __isset;

  void __set_dst_tag_entry(const sai_thrift_dst_tag_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dst_tag_entry_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dst_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dst_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dst_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dst_tag_entry_pargs() throw();
  const sai_thrift_dst_tag_entry_t* dst_tag_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dst_tag_entry_result__isset {
  _sai_rpc_sai_thrift_remove_dst_tag_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dst_tag_entry_result__isset;

class sai_rpc_sai_thrift_remove_dst_tag_entry_result {
 public:

  sai_rpc_sai_thrift_remove_dst_tag_entry_result(const sai_rpc_sai_thrift_remove_dst_tag_entry_result&);
  sai_rpc_sai_thrift_remove_dst_tag_entry_result& operator=(const sai_rpc_sai_thrift_remove_dst_tag_entry_result&);
  sai_rpc_sai_thrift_remove_dst_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dst_tag_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dst_tag_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dst_tag_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dst_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dst_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dst_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_dst_tag_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dst_tag_entry_presult__isset;

class sai_rpc_sai_thrift_remove_dst_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dst_tag_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dst_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args__isset() : dst_tag_entry(false), attr(false) {}
  bool dst_tag_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args(const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args() throw();
  sai_thrift_dst_tag_entry_t dst_tag_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args__isset __isset;

  void __set_dst_tag_entry(const sai_thrift_dst_tag_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dst_tag_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dst_tag_entry_attribute_pargs() throw();
  const sai_thrift_dst_tag_entry_t* dst_tag_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result(const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dst_tag_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dst_tag_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args__isset() : dst_tag_entry(false), attr_list(false) {}
  bool dst_tag_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args(const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args() throw();
  sai_thrift_dst_tag_entry_t dst_tag_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args__isset __isset;

  void __set_dst_tag_entry(const sai_thrift_dst_tag_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dst_tag_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dst_tag_entry_attribute_pargs() throw();
  const sai_thrift_dst_tag_entry_t* dst_tag_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result(const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dst_tag_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dst_tag_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args__isset() : dst_tag_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool dst_tag_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args(const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args() throw();
  std::vector<sai_thrift_dst_tag_entry_t>  dst_tag_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args__isset __isset;

  void __set_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_dst_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_dst_tag_entry_pargs() throw();
  const std::vector<sai_thrift_dst_tag_entry_t> * dst_tag_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result(const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_dst_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_dst_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args__isset() : dst_tag_entry(false), mode(false) {}
  bool dst_tag_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args(const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args() throw();
  std::vector<sai_thrift_dst_tag_entry_t>  dst_tag_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args__isset __isset;

  void __set_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args & rhs) const
  {
    if (!(dst_tag_entry == rhs.dst_tag_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_pargs() throw();
  const std::vector<sai_thrift_dst_tag_entry_t> * dst_tag_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result(const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_dst_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_src_tag_entry_args__isset {
  _sai_rpc_sai_thrift_create_src_tag_entry_args__isset() : src_tag_entry(false), attr_list(false) {}
  bool src_tag_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_src_tag_entry_args__isset;

class sai_rpc_sai_thrift_create_src_tag_entry_args {
 public:

  sai_rpc_sai_thrift_create_src_tag_entry_args(const sai_rpc_sai_thrift_create_src_tag_entry_args&);
  sai_rpc_sai_thrift_create_src_tag_entry_args& operator=(const sai_rpc_sai_thrift_create_src_tag_entry_args&);
  sai_rpc_sai_thrift_create_src_tag_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_src_tag_entry_args() throw();
  sai_thrift_src_tag_entry_t src_tag_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_src_tag_entry_args__isset __isset;

  void __set_src_tag_entry(const sai_thrift_src_tag_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_src_tag_entry_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_src_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_src_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_src_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_src_tag_entry_pargs() throw();
  const sai_thrift_src_tag_entry_t* src_tag_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_src_tag_entry_result__isset {
  _sai_rpc_sai_thrift_create_src_tag_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_src_tag_entry_result__isset;

class sai_rpc_sai_thrift_create_src_tag_entry_result {
 public:

  sai_rpc_sai_thrift_create_src_tag_entry_result(const sai_rpc_sai_thrift_create_src_tag_entry_result&);
  sai_rpc_sai_thrift_create_src_tag_entry_result& operator=(const sai_rpc_sai_thrift_create_src_tag_entry_result&);
  sai_rpc_sai_thrift_create_src_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_src_tag_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_src_tag_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_src_tag_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_src_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_src_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_src_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_create_src_tag_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_src_tag_entry_presult__isset;

class sai_rpc_sai_thrift_create_src_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_src_tag_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_src_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_src_tag_entry_args__isset {
  _sai_rpc_sai_thrift_remove_src_tag_entry_args__isset() : src_tag_entry(false) {}
  bool src_tag_entry :1;
} _sai_rpc_sai_thrift_remove_src_tag_entry_args__isset;

class sai_rpc_sai_thrift_remove_src_tag_entry_args {
 public:

  sai_rpc_sai_thrift_remove_src_tag_entry_args(const sai_rpc_sai_thrift_remove_src_tag_entry_args&);
  sai_rpc_sai_thrift_remove_src_tag_entry_args& operator=(const sai_rpc_sai_thrift_remove_src_tag_entry_args&);
  sai_rpc_sai_thrift_remove_src_tag_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_src_tag_entry_args() throw();
  sai_thrift_src_tag_entry_t src_tag_entry;

  _sai_rpc_sai_thrift_remove_src_tag_entry_args__isset __isset;

  void __set_src_tag_entry(const sai_thrift_src_tag_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_src_tag_entry_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_src_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_src_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_src_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_src_tag_entry_pargs() throw();
  const sai_thrift_src_tag_entry_t* src_tag_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_src_tag_entry_result__isset {
  _sai_rpc_sai_thrift_remove_src_tag_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_src_tag_entry_result__isset;

class sai_rpc_sai_thrift_remove_src_tag_entry_result {
 public:

  sai_rpc_sai_thrift_remove_src_tag_entry_result(const sai_rpc_sai_thrift_remove_src_tag_entry_result&);
  sai_rpc_sai_thrift_remove_src_tag_entry_result& operator=(const sai_rpc_sai_thrift_remove_src_tag_entry_result&);
  sai_rpc_sai_thrift_remove_src_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_src_tag_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_src_tag_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_src_tag_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_src_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_src_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_src_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_src_tag_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_src_tag_entry_presult__isset;

class sai_rpc_sai_thrift_remove_src_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_src_tag_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_src_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_src_tag_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_args__isset() : src_tag_entry(false), attr(false) {}
  bool src_tag_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_src_tag_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_src_tag_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_src_tag_entry_attribute_args(const sai_rpc_sai_thrift_set_src_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_set_src_tag_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_src_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_set_src_tag_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_src_tag_entry_attribute_args() throw();
  sai_thrift_src_tag_entry_t src_tag_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_args__isset __isset;

  void __set_src_tag_entry(const sai_thrift_src_tag_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_src_tag_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_src_tag_entry_attribute_pargs() throw();
  const sai_thrift_src_tag_entry_t* src_tag_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_src_tag_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_src_tag_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_src_tag_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_src_tag_entry_attribute_result(const sai_rpc_sai_thrift_set_src_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_set_src_tag_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_src_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_set_src_tag_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_src_tag_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_src_tag_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_src_tag_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_src_tag_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_args__isset() : src_tag_entry(false), attr_list(false) {}
  bool src_tag_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_src_tag_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_src_tag_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_src_tag_entry_attribute_args(const sai_rpc_sai_thrift_get_src_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_get_src_tag_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_src_tag_entry_attribute_args&);
  sai_rpc_sai_thrift_get_src_tag_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_src_tag_entry_attribute_args() throw();
  sai_thrift_src_tag_entry_t src_tag_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_args__isset __isset;

  void __set_src_tag_entry(const sai_thrift_src_tag_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_src_tag_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_src_tag_entry_attribute_pargs() throw();
  const sai_thrift_src_tag_entry_t* src_tag_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_src_tag_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_src_tag_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_src_tag_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_src_tag_entry_attribute_result(const sai_rpc_sai_thrift_get_src_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_get_src_tag_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_src_tag_entry_attribute_result&);
  sai_rpc_sai_thrift_get_src_tag_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_src_tag_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_src_tag_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_src_tag_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_src_tag_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_args__isset() : src_tag_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool src_tag_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_src_tag_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_src_tag_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_src_tag_entry_args(const sai_rpc_sai_thrift_bulk_create_src_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_create_src_tag_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_src_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_create_src_tag_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_src_tag_entry_args() throw();
  std::vector<sai_thrift_src_tag_entry_t>  src_tag_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_args__isset __isset;

  void __set_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_src_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_src_tag_entry_pargs() throw();
  const std::vector<sai_thrift_src_tag_entry_t> * src_tag_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_src_tag_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_src_tag_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_src_tag_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_src_tag_entry_result(const sai_rpc_sai_thrift_bulk_create_src_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_create_src_tag_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_src_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_create_src_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_src_tag_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_src_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_src_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args__isset() : src_tag_entry(false), mode(false) {}
  bool src_tag_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args(const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args() throw();
  std::vector<sai_thrift_src_tag_entry_t>  src_tag_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args__isset __isset;

  void __set_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args & rhs) const
  {
    if (!(src_tag_entry == rhs.src_tag_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_src_tag_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_src_tag_entry_pargs() throw();
  const std::vector<sai_thrift_src_tag_entry_t> * src_tag_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result(const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_src_tag_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_src_tag_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_vip_entry_args__isset {
  _sai_rpc_sai_thrift_create_vip_entry_args__isset() : vip_entry(false), attr_list(false) {}
  bool vip_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_vip_entry_args__isset;

class sai_rpc_sai_thrift_create_vip_entry_args {
 public:

  sai_rpc_sai_thrift_create_vip_entry_args(const sai_rpc_sai_thrift_create_vip_entry_args&);
  sai_rpc_sai_thrift_create_vip_entry_args& operator=(const sai_rpc_sai_thrift_create_vip_entry_args&);
  sai_rpc_sai_thrift_create_vip_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_vip_entry_args() throw();
  sai_thrift_vip_entry_t vip_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_vip_entry_args__isset __isset;

  void __set_vip_entry(const sai_thrift_vip_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_vip_entry_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vip_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vip_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_vip_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_vip_entry_pargs() throw();
  const sai_thrift_vip_entry_t* vip_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vip_entry_result__isset {
  _sai_rpc_sai_thrift_create_vip_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_vip_entry_result__isset;

class sai_rpc_sai_thrift_create_vip_entry_result {
 public:

  sai_rpc_sai_thrift_create_vip_entry_result(const sai_rpc_sai_thrift_create_vip_entry_result&);
  sai_rpc_sai_thrift_create_vip_entry_result& operator=(const sai_rpc_sai_thrift_create_vip_entry_result&);
  sai_rpc_sai_thrift_create_vip_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_vip_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vip_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_vip_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vip_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vip_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vip_entry_presult__isset {
  _sai_rpc_sai_thrift_create_vip_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_vip_entry_presult__isset;

class sai_rpc_sai_thrift_create_vip_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_vip_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vip_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_vip_entry_args__isset {
  _sai_rpc_sai_thrift_remove_vip_entry_args__isset() : vip_entry(false) {}
  bool vip_entry :1;
} _sai_rpc_sai_thrift_remove_vip_entry_args__isset;

class sai_rpc_sai_thrift_remove_vip_entry_args {
 public:

  sai_rpc_sai_thrift_remove_vip_entry_args(const sai_rpc_sai_thrift_remove_vip_entry_args&);
  sai_rpc_sai_thrift_remove_vip_entry_args& operator=(const sai_rpc_sai_thrift_remove_vip_entry_args&);
  sai_rpc_sai_thrift_remove_vip_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_vip_entry_args() throw();
  sai_thrift_vip_entry_t vip_entry;

  _sai_rpc_sai_thrift_remove_vip_entry_args__isset __isset;

  void __set_vip_entry(const sai_thrift_vip_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_vip_entry_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vip_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vip_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_vip_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vip_entry_pargs() throw();
  const sai_thrift_vip_entry_t* vip_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vip_entry_result__isset {
  _sai_rpc_sai_thrift_remove_vip_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vip_entry_result__isset;

class sai_rpc_sai_thrift_remove_vip_entry_result {
 public:

  sai_rpc_sai_thrift_remove_vip_entry_result(const sai_rpc_sai_thrift_remove_vip_entry_result&);
  sai_rpc_sai_thrift_remove_vip_entry_result& operator=(const sai_rpc_sai_thrift_remove_vip_entry_result&);
  sai_rpc_sai_thrift_remove_vip_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_vip_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vip_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_vip_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vip_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vip_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vip_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_vip_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vip_entry_presult__isset;

class sai_rpc_sai_thrift_remove_vip_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vip_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vip_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_vip_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_vip_entry_attribute_args__isset() : vip_entry(false), attr(false) {}
  bool vip_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_vip_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_vip_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_vip_entry_attribute_args(const sai_rpc_sai_thrift_set_vip_entry_attribute_args&);
  sai_rpc_sai_thrift_set_vip_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_vip_entry_attribute_args&);
  sai_rpc_sai_thrift_set_vip_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_vip_entry_attribute_args() throw();
  sai_thrift_vip_entry_t vip_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_vip_entry_attribute_args__isset __isset;

  void __set_vip_entry(const sai_thrift_vip_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_vip_entry_attribute_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vip_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vip_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_vip_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_vip_entry_attribute_pargs() throw();
  const sai_thrift_vip_entry_t* vip_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vip_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_vip_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vip_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_vip_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_vip_entry_attribute_result(const sai_rpc_sai_thrift_set_vip_entry_attribute_result&);
  sai_rpc_sai_thrift_set_vip_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_vip_entry_attribute_result&);
  sai_rpc_sai_thrift_set_vip_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_vip_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vip_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_vip_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vip_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vip_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vip_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_vip_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vip_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_vip_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_vip_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vip_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vip_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_vip_entry_attribute_args__isset() : vip_entry(false), attr_list(false) {}
  bool vip_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_vip_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_vip_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_vip_entry_attribute_args(const sai_rpc_sai_thrift_get_vip_entry_attribute_args&);
  sai_rpc_sai_thrift_get_vip_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_vip_entry_attribute_args&);
  sai_rpc_sai_thrift_get_vip_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_vip_entry_attribute_args() throw();
  sai_thrift_vip_entry_t vip_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_vip_entry_attribute_args__isset __isset;

  void __set_vip_entry(const sai_thrift_vip_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_vip_entry_attribute_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vip_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vip_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vip_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vip_entry_attribute_pargs() throw();
  const sai_thrift_vip_entry_t* vip_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vip_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_vip_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vip_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_vip_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_vip_entry_attribute_result(const sai_rpc_sai_thrift_get_vip_entry_attribute_result&);
  sai_rpc_sai_thrift_get_vip_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_vip_entry_attribute_result&);
  sai_rpc_sai_thrift_get_vip_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vip_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vip_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vip_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vip_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vip_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vip_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_vip_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vip_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_vip_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vip_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vip_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_vip_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_vip_entry_args__isset() : vip_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool vip_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_vip_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_vip_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_vip_entry_args(const sai_rpc_sai_thrift_bulk_create_vip_entry_args&);
  sai_rpc_sai_thrift_bulk_create_vip_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_vip_entry_args&);
  sai_rpc_sai_thrift_bulk_create_vip_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_vip_entry_args() throw();
  std::vector<sai_thrift_vip_entry_t>  vip_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_vip_entry_args__isset __isset;

  void __set_vip_entry(const std::vector<sai_thrift_vip_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_vip_entry_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_vip_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_vip_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_vip_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_vip_entry_pargs() throw();
  const std::vector<sai_thrift_vip_entry_t> * vip_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_vip_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_vip_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_vip_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_vip_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_vip_entry_result(const sai_rpc_sai_thrift_bulk_create_vip_entry_result&);
  sai_rpc_sai_thrift_bulk_create_vip_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_vip_entry_result&);
  sai_rpc_sai_thrift_bulk_create_vip_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_vip_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_vip_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_vip_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_vip_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_vip_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_vip_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_vip_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_vip_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_vip_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_vip_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_vip_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_vip_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_vip_entry_args__isset() : vip_entry(false), mode(false) {}
  bool vip_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_vip_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_vip_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_vip_entry_args(const sai_rpc_sai_thrift_bulk_remove_vip_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_vip_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_vip_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_vip_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_vip_entry_args() throw();
  std::vector<sai_thrift_vip_entry_t>  vip_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_vip_entry_args__isset __isset;

  void __set_vip_entry(const std::vector<sai_thrift_vip_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_vip_entry_args & rhs) const
  {
    if (!(vip_entry == rhs.vip_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_vip_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_vip_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_vip_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_vip_entry_pargs() throw();
  const std::vector<sai_thrift_vip_entry_t> * vip_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_vip_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_vip_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_vip_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_vip_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_vip_entry_result(const sai_rpc_sai_thrift_bulk_remove_vip_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_vip_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_vip_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_vip_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_vip_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_vip_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_vip_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_vip_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_vip_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_vip_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_vip_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_vip_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_vip_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_vip_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_vip_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_vnet_args__isset {
  _sai_rpc_sai_thrift_create_vnet_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_vnet_args__isset;

class sai_rpc_sai_thrift_create_vnet_args {
 public:

  sai_rpc_sai_thrift_create_vnet_args(const sai_rpc_sai_thrift_create_vnet_args&);
  sai_rpc_sai_thrift_create_vnet_args& operator=(const sai_rpc_sai_thrift_create_vnet_args&);
  sai_rpc_sai_thrift_create_vnet_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_vnet_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_vnet_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_vnet_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vnet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vnet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_vnet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_vnet_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vnet_result__isset {
  _sai_rpc_sai_thrift_create_vnet_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vnet_result__isset;

class sai_rpc_sai_thrift_create_vnet_result {
 public:

  sai_rpc_sai_thrift_create_vnet_result(const sai_rpc_sai_thrift_create_vnet_result&);
  sai_rpc_sai_thrift_create_vnet_result& operator=(const sai_rpc_sai_thrift_create_vnet_result&);
  sai_rpc_sai_thrift_create_vnet_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_vnet_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vnet_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_vnet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vnet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vnet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vnet_presult__isset {
  _sai_rpc_sai_thrift_create_vnet_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vnet_presult__isset;

class sai_rpc_sai_thrift_create_vnet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_vnet_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vnet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_vnet_args__isset {
  _sai_rpc_sai_thrift_remove_vnet_args__isset() : vnet_oid(false) {}
  bool vnet_oid :1;
} _sai_rpc_sai_thrift_remove_vnet_args__isset;

class sai_rpc_sai_thrift_remove_vnet_args {
 public:

  sai_rpc_sai_thrift_remove_vnet_args(const sai_rpc_sai_thrift_remove_vnet_args&);
  sai_rpc_sai_thrift_remove_vnet_args& operator=(const sai_rpc_sai_thrift_remove_vnet_args&);
  sai_rpc_sai_thrift_remove_vnet_args() : vnet_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_vnet_args() throw();
  sai_thrift_object_id_t vnet_oid;

  _sai_rpc_sai_thrift_remove_vnet_args__isset __isset;

  void __set_vnet_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_vnet_args & rhs) const
  {
    if (!(vnet_oid == rhs.vnet_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vnet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vnet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_vnet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vnet_pargs() throw();
  const sai_thrift_object_id_t* vnet_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vnet_result__isset {
  _sai_rpc_sai_thrift_remove_vnet_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vnet_result__isset;

class sai_rpc_sai_thrift_remove_vnet_result {
 public:

  sai_rpc_sai_thrift_remove_vnet_result(const sai_rpc_sai_thrift_remove_vnet_result&);
  sai_rpc_sai_thrift_remove_vnet_result& operator=(const sai_rpc_sai_thrift_remove_vnet_result&);
  sai_rpc_sai_thrift_remove_vnet_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_vnet_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vnet_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_vnet_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vnet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vnet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vnet_presult__isset {
  _sai_rpc_sai_thrift_remove_vnet_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vnet_presult__isset;

class sai_rpc_sai_thrift_remove_vnet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vnet_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vnet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_vnet_attribute_args__isset {
  _sai_rpc_sai_thrift_set_vnet_attribute_args__isset() : vnet_oid(false), attr(false) {}
  bool vnet_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_vnet_attribute_args__isset;

class sai_rpc_sai_thrift_set_vnet_attribute_args {
 public:

  sai_rpc_sai_thrift_set_vnet_attribute_args(const sai_rpc_sai_thrift_set_vnet_attribute_args&);
  sai_rpc_sai_thrift_set_vnet_attribute_args& operator=(const sai_rpc_sai_thrift_set_vnet_attribute_args&);
  sai_rpc_sai_thrift_set_vnet_attribute_args() : vnet_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_vnet_attribute_args() throw();
  sai_thrift_object_id_t vnet_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_vnet_attribute_args__isset __isset;

  void __set_vnet_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_vnet_attribute_args & rhs) const
  {
    if (!(vnet_oid == rhs.vnet_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vnet_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vnet_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_vnet_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_vnet_attribute_pargs() throw();
  const sai_thrift_object_id_t* vnet_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vnet_attribute_result__isset {
  _sai_rpc_sai_thrift_set_vnet_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vnet_attribute_result__isset;

class sai_rpc_sai_thrift_set_vnet_attribute_result {
 public:

  sai_rpc_sai_thrift_set_vnet_attribute_result(const sai_rpc_sai_thrift_set_vnet_attribute_result&);
  sai_rpc_sai_thrift_set_vnet_attribute_result& operator=(const sai_rpc_sai_thrift_set_vnet_attribute_result&);
  sai_rpc_sai_thrift_set_vnet_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_vnet_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vnet_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_vnet_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vnet_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vnet_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vnet_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_vnet_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vnet_attribute_presult__isset;

class sai_rpc_sai_thrift_set_vnet_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_vnet_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vnet_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vnet_attribute_args__isset {
  _sai_rpc_sai_thrift_get_vnet_attribute_args__isset() : vnet_oid(false), attr_list(false) {}
  bool vnet_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_vnet_attribute_args__isset;

class sai_rpc_sai_thrift_get_vnet_attribute_args {
 public:

  sai_rpc_sai_thrift_get_vnet_attribute_args(const sai_rpc_sai_thrift_get_vnet_attribute_args&);
  sai_rpc_sai_thrift_get_vnet_attribute_args& operator=(const sai_rpc_sai_thrift_get_vnet_attribute_args&);
  sai_rpc_sai_thrift_get_vnet_attribute_args() : vnet_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_vnet_attribute_args() throw();
  sai_thrift_object_id_t vnet_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_vnet_attribute_args__isset __isset;

  void __set_vnet_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_vnet_attribute_args & rhs) const
  {
    if (!(vnet_oid == rhs.vnet_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vnet_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vnet_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vnet_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vnet_attribute_pargs() throw();
  const sai_thrift_object_id_t* vnet_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vnet_attribute_result__isset {
  _sai_rpc_sai_thrift_get_vnet_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vnet_attribute_result__isset;

class sai_rpc_sai_thrift_get_vnet_attribute_result {
 public:

  sai_rpc_sai_thrift_get_vnet_attribute_result(const sai_rpc_sai_thrift_get_vnet_attribute_result&);
  sai_rpc_sai_thrift_get_vnet_attribute_result& operator=(const sai_rpc_sai_thrift_get_vnet_attribute_result&);
  sai_rpc_sai_thrift_get_vnet_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vnet_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vnet_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vnet_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vnet_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vnet_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vnet_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_vnet_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vnet_attribute_presult__isset;

class sai_rpc_sai_thrift_get_vnet_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vnet_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vnet_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_debug_counter_args__isset {
  _sai_rpc_sai_thrift_create_debug_counter_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_debug_counter_args__isset;

class sai_rpc_sai_thrift_create_debug_counter_args {
 public:

  sai_rpc_sai_thrift_create_debug_counter_args(const sai_rpc_sai_thrift_create_debug_counter_args&);
  sai_rpc_sai_thrift_create_debug_counter_args& operator=(const sai_rpc_sai_thrift_create_debug_counter_args&);
  sai_rpc_sai_thrift_create_debug_counter_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_debug_counter_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_debug_counter_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_debug_counter_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_debug_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_debug_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_debug_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_debug_counter_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_debug_counter_result__isset {
  _sai_rpc_sai_thrift_create_debug_counter_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_debug_counter_result__isset;

class sai_rpc_sai_thrift_create_debug_counter_result {
 public:

  sai_rpc_sai_thrift_create_debug_counter_result(const sai_rpc_sai_thrift_create_debug_counter_result&);
  sai_rpc_sai_thrift_create_debug_counter_result& operator=(const sai_rpc_sai_thrift_create_debug_counter_result&);
  sai_rpc_sai_thrift_create_debug_counter_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_debug_counter_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_debug_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_debug_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_debug_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_debug_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_debug_counter_presult__isset {
  _sai_rpc_sai_thrift_create_debug_counter_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_debug_counter_presult__isset;

class sai_rpc_sai_thrift_create_debug_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_debug_counter_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_debug_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_debug_counter_args__isset {
  _sai_rpc_sai_thrift_remove_debug_counter_args__isset() : debug_counter_oid(false) {}
  bool debug_counter_oid :1;
} _sai_rpc_sai_thrift_remove_debug_counter_args__isset;

class sai_rpc_sai_thrift_remove_debug_counter_args {
 public:

  sai_rpc_sai_thrift_remove_debug_counter_args(const sai_rpc_sai_thrift_remove_debug_counter_args&);
  sai_rpc_sai_thrift_remove_debug_counter_args& operator=(const sai_rpc_sai_thrift_remove_debug_counter_args&);
  sai_rpc_sai_thrift_remove_debug_counter_args() : debug_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_debug_counter_args() throw();
  sai_thrift_object_id_t debug_counter_oid;

  _sai_rpc_sai_thrift_remove_debug_counter_args__isset __isset;

  void __set_debug_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_debug_counter_args & rhs) const
  {
    if (!(debug_counter_oid == rhs.debug_counter_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_debug_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_debug_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_debug_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_debug_counter_pargs() throw();
  const sai_thrift_object_id_t* debug_counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_debug_counter_result__isset {
  _sai_rpc_sai_thrift_remove_debug_counter_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_debug_counter_result__isset;

class sai_rpc_sai_thrift_remove_debug_counter_result {
 public:

  sai_rpc_sai_thrift_remove_debug_counter_result(const sai_rpc_sai_thrift_remove_debug_counter_result&);
  sai_rpc_sai_thrift_remove_debug_counter_result& operator=(const sai_rpc_sai_thrift_remove_debug_counter_result&);
  sai_rpc_sai_thrift_remove_debug_counter_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_debug_counter_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_debug_counter_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_debug_counter_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_debug_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_debug_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_debug_counter_presult__isset {
  _sai_rpc_sai_thrift_remove_debug_counter_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_debug_counter_presult__isset;

class sai_rpc_sai_thrift_remove_debug_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_debug_counter_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_debug_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset() : debug_counter_oid(false), attr(false) {}
  bool debug_counter_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset;

class sai_rpc_sai_thrift_set_debug_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_set_debug_counter_attribute_args(const sai_rpc_sai_thrift_set_debug_counter_attribute_args&);
  sai_rpc_sai_thrift_set_debug_counter_attribute_args& operator=(const sai_rpc_sai_thrift_set_debug_counter_attribute_args&);
  sai_rpc_sai_thrift_set_debug_counter_attribute_args() : debug_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_debug_counter_attribute_args() throw();
  sai_thrift_object_id_t debug_counter_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_debug_counter_attribute_args__isset __isset;

  void __set_debug_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_debug_counter_attribute_args & rhs) const
  {
    if (!(debug_counter_oid == rhs.debug_counter_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_debug_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_debug_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_debug_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_debug_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* debug_counter_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset;

class sai_rpc_sai_thrift_set_debug_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_set_debug_counter_attribute_result(const sai_rpc_sai_thrift_set_debug_counter_attribute_result&);
  sai_rpc_sai_thrift_set_debug_counter_attribute_result& operator=(const sai_rpc_sai_thrift_set_debug_counter_attribute_result&);
  sai_rpc_sai_thrift_set_debug_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_debug_counter_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_debug_counter_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_debug_counter_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_debug_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_debug_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_set_debug_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_debug_counter_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_debug_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset() : debug_counter_oid(false), attr_list(false) {}
  bool debug_counter_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset;

class sai_rpc_sai_thrift_get_debug_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_get_debug_counter_attribute_args(const sai_rpc_sai_thrift_get_debug_counter_attribute_args&);
  sai_rpc_sai_thrift_get_debug_counter_attribute_args& operator=(const sai_rpc_sai_thrift_get_debug_counter_attribute_args&);
  sai_rpc_sai_thrift_get_debug_counter_attribute_args() : debug_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_debug_counter_attribute_args() throw();
  sai_thrift_object_id_t debug_counter_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_debug_counter_attribute_args__isset __isset;

  void __set_debug_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_debug_counter_attribute_args & rhs) const
  {
    if (!(debug_counter_oid == rhs.debug_counter_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_debug_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_debug_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_debug_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_debug_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* debug_counter_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset;

class sai_rpc_sai_thrift_get_debug_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_get_debug_counter_attribute_result(const sai_rpc_sai_thrift_get_debug_counter_attribute_result&);
  sai_rpc_sai_thrift_get_debug_counter_attribute_result& operator=(const sai_rpc_sai_thrift_get_debug_counter_attribute_result&);
  sai_rpc_sai_thrift_get_debug_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_debug_counter_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_debug_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_debug_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_debug_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_debug_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_get_debug_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_debug_counter_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_debug_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dtel_args__isset {
  _sai_rpc_sai_thrift_create_dtel_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dtel_args__isset;

class sai_rpc_sai_thrift_create_dtel_args {
 public:

  sai_rpc_sai_thrift_create_dtel_args(const sai_rpc_sai_thrift_create_dtel_args&);
  sai_rpc_sai_thrift_create_dtel_args& operator=(const sai_rpc_sai_thrift_create_dtel_args&);
  sai_rpc_sai_thrift_create_dtel_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dtel_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dtel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_result__isset {
  _sai_rpc_sai_thrift_create_dtel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_result__isset;

class sai_rpc_sai_thrift_create_dtel_result {
 public:

  sai_rpc_sai_thrift_create_dtel_result(const sai_rpc_sai_thrift_create_dtel_result&);
  sai_rpc_sai_thrift_create_dtel_result& operator=(const sai_rpc_sai_thrift_create_dtel_result&);
  sai_rpc_sai_thrift_create_dtel_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_presult__isset {
  _sai_rpc_sai_thrift_create_dtel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_presult__isset;

class sai_rpc_sai_thrift_create_dtel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_args__isset {
  _sai_rpc_sai_thrift_remove_dtel_args__isset() : dtel_oid(false) {}
  bool dtel_oid :1;
} _sai_rpc_sai_thrift_remove_dtel_args__isset;

class sai_rpc_sai_thrift_remove_dtel_args {
 public:

  sai_rpc_sai_thrift_remove_dtel_args(const sai_rpc_sai_thrift_remove_dtel_args&);
  sai_rpc_sai_thrift_remove_dtel_args& operator=(const sai_rpc_sai_thrift_remove_dtel_args&);
  sai_rpc_sai_thrift_remove_dtel_args() : dtel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_args() throw();
  sai_thrift_object_id_t dtel_oid;

  _sai_rpc_sai_thrift_remove_dtel_args__isset __isset;

  void __set_dtel_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_args & rhs) const
  {
    if (!(dtel_oid == rhs.dtel_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dtel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_pargs() throw();
  const sai_thrift_object_id_t* dtel_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_result__isset {
  _sai_rpc_sai_thrift_remove_dtel_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_result__isset;

class sai_rpc_sai_thrift_remove_dtel_result {
 public:

  sai_rpc_sai_thrift_remove_dtel_result(const sai_rpc_sai_thrift_remove_dtel_result&);
  sai_rpc_sai_thrift_remove_dtel_result& operator=(const sai_rpc_sai_thrift_remove_dtel_result&);
  sai_rpc_sai_thrift_remove_dtel_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_presult__isset {
  _sai_rpc_sai_thrift_remove_dtel_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_presult__isset;

class sai_rpc_sai_thrift_remove_dtel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dtel_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dtel_attribute_args__isset() : dtel_oid(false), attr(false) {}
  bool dtel_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dtel_attribute_args__isset;

class sai_rpc_sai_thrift_set_dtel_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dtel_attribute_args(const sai_rpc_sai_thrift_set_dtel_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_attribute_args& operator=(const sai_rpc_sai_thrift_set_dtel_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_attribute_args() : dtel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_attribute_args() throw();
  sai_thrift_object_id_t dtel_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dtel_attribute_args__isset __isset;

  void __set_dtel_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_attribute_args & rhs) const
  {
    if (!(dtel_oid == rhs.dtel_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dtel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dtel_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_attribute_result__isset;

class sai_rpc_sai_thrift_set_dtel_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dtel_attribute_result(const sai_rpc_sai_thrift_set_dtel_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_attribute_result& operator=(const sai_rpc_sai_thrift_set_dtel_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dtel_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dtel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dtel_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dtel_attribute_args__isset() : dtel_oid(false), attr_list(false) {}
  bool dtel_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dtel_attribute_args__isset;

class sai_rpc_sai_thrift_get_dtel_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dtel_attribute_args(const sai_rpc_sai_thrift_get_dtel_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_attribute_args& operator=(const sai_rpc_sai_thrift_get_dtel_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_attribute_args() : dtel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_attribute_args() throw();
  sai_thrift_object_id_t dtel_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dtel_attribute_args__isset __isset;

  void __set_dtel_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_attribute_args & rhs) const
  {
    if (!(dtel_oid == rhs.dtel_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dtel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dtel_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_attribute_result__isset;

class sai_rpc_sai_thrift_get_dtel_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dtel_attribute_result(const sai_rpc_sai_thrift_get_dtel_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_attribute_result& operator=(const sai_rpc_sai_thrift_get_dtel_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dtel_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dtel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dtel_queue_report_args__isset {
  _sai_rpc_sai_thrift_create_dtel_queue_report_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dtel_queue_report_args__isset;

class sai_rpc_sai_thrift_create_dtel_queue_report_args {
 public:

  sai_rpc_sai_thrift_create_dtel_queue_report_args(const sai_rpc_sai_thrift_create_dtel_queue_report_args&);
  sai_rpc_sai_thrift_create_dtel_queue_report_args& operator=(const sai_rpc_sai_thrift_create_dtel_queue_report_args&);
  sai_rpc_sai_thrift_create_dtel_queue_report_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_queue_report_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dtel_queue_report_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_queue_report_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_queue_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_queue_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dtel_queue_report_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_queue_report_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_queue_report_result__isset {
  _sai_rpc_sai_thrift_create_dtel_queue_report_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_queue_report_result__isset;

class sai_rpc_sai_thrift_create_dtel_queue_report_result {
 public:

  sai_rpc_sai_thrift_create_dtel_queue_report_result(const sai_rpc_sai_thrift_create_dtel_queue_report_result&);
  sai_rpc_sai_thrift_create_dtel_queue_report_result& operator=(const sai_rpc_sai_thrift_create_dtel_queue_report_result&);
  sai_rpc_sai_thrift_create_dtel_queue_report_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_queue_report_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_queue_report_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_queue_report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_queue_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_queue_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_queue_report_presult__isset {
  _sai_rpc_sai_thrift_create_dtel_queue_report_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_queue_report_presult__isset;

class sai_rpc_sai_thrift_create_dtel_queue_report_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_queue_report_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_queue_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_queue_report_args__isset {
  _sai_rpc_sai_thrift_remove_dtel_queue_report_args__isset() : dtel_queue_report_oid(false) {}
  bool dtel_queue_report_oid :1;
} _sai_rpc_sai_thrift_remove_dtel_queue_report_args__isset;

class sai_rpc_sai_thrift_remove_dtel_queue_report_args {
 public:

  sai_rpc_sai_thrift_remove_dtel_queue_report_args(const sai_rpc_sai_thrift_remove_dtel_queue_report_args&);
  sai_rpc_sai_thrift_remove_dtel_queue_report_args& operator=(const sai_rpc_sai_thrift_remove_dtel_queue_report_args&);
  sai_rpc_sai_thrift_remove_dtel_queue_report_args() : dtel_queue_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_queue_report_args() throw();
  sai_thrift_object_id_t dtel_queue_report_oid;

  _sai_rpc_sai_thrift_remove_dtel_queue_report_args__isset __isset;

  void __set_dtel_queue_report_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_queue_report_args & rhs) const
  {
    if (!(dtel_queue_report_oid == rhs.dtel_queue_report_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_queue_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_queue_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dtel_queue_report_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_queue_report_pargs() throw();
  const sai_thrift_object_id_t* dtel_queue_report_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_queue_report_result__isset {
  _sai_rpc_sai_thrift_remove_dtel_queue_report_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_queue_report_result__isset;

class sai_rpc_sai_thrift_remove_dtel_queue_report_result {
 public:

  sai_rpc_sai_thrift_remove_dtel_queue_report_result(const sai_rpc_sai_thrift_remove_dtel_queue_report_result&);
  sai_rpc_sai_thrift_remove_dtel_queue_report_result& operator=(const sai_rpc_sai_thrift_remove_dtel_queue_report_result&);
  sai_rpc_sai_thrift_remove_dtel_queue_report_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_queue_report_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_queue_report_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_queue_report_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_queue_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_queue_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_queue_report_presult__isset {
  _sai_rpc_sai_thrift_remove_dtel_queue_report_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_queue_report_presult__isset;

class sai_rpc_sai_thrift_remove_dtel_queue_report_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_queue_report_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_queue_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args__isset() : dtel_queue_report_oid(false), attr(false) {}
  bool dtel_queue_report_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args__isset;

class sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args(const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args& operator=(const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args() : dtel_queue_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args() throw();
  sai_thrift_object_id_t dtel_queue_report_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args__isset __isset;

  void __set_dtel_queue_report_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args & rhs) const
  {
    if (!(dtel_queue_report_oid == rhs.dtel_queue_report_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dtel_queue_report_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_queue_report_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_queue_report_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result__isset;

class sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result(const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result& operator=(const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_queue_report_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_queue_report_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args__isset() : dtel_queue_report_oid(false), attr_list(false) {}
  bool dtel_queue_report_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args__isset;

class sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args(const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args& operator=(const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args() : dtel_queue_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args() throw();
  sai_thrift_object_id_t dtel_queue_report_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args__isset __isset;

  void __set_dtel_queue_report_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args & rhs) const
  {
    if (!(dtel_queue_report_oid == rhs.dtel_queue_report_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dtel_queue_report_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_queue_report_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_queue_report_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result__isset;

class sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result(const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result& operator=(const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_queue_report_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_queue_report_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dtel_int_session_args__isset {
  _sai_rpc_sai_thrift_create_dtel_int_session_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dtel_int_session_args__isset;

class sai_rpc_sai_thrift_create_dtel_int_session_args {
 public:

  sai_rpc_sai_thrift_create_dtel_int_session_args(const sai_rpc_sai_thrift_create_dtel_int_session_args&);
  sai_rpc_sai_thrift_create_dtel_int_session_args& operator=(const sai_rpc_sai_thrift_create_dtel_int_session_args&);
  sai_rpc_sai_thrift_create_dtel_int_session_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_int_session_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dtel_int_session_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_int_session_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_int_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_int_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dtel_int_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_int_session_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_int_session_result__isset {
  _sai_rpc_sai_thrift_create_dtel_int_session_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_int_session_result__isset;

class sai_rpc_sai_thrift_create_dtel_int_session_result {
 public:

  sai_rpc_sai_thrift_create_dtel_int_session_result(const sai_rpc_sai_thrift_create_dtel_int_session_result&);
  sai_rpc_sai_thrift_create_dtel_int_session_result& operator=(const sai_rpc_sai_thrift_create_dtel_int_session_result&);
  sai_rpc_sai_thrift_create_dtel_int_session_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_int_session_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_int_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_int_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_int_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_int_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_int_session_presult__isset {
  _sai_rpc_sai_thrift_create_dtel_int_session_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_int_session_presult__isset;

class sai_rpc_sai_thrift_create_dtel_int_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_int_session_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_int_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_int_session_args__isset {
  _sai_rpc_sai_thrift_remove_dtel_int_session_args__isset() : dtel_int_session_oid(false) {}
  bool dtel_int_session_oid :1;
} _sai_rpc_sai_thrift_remove_dtel_int_session_args__isset;

class sai_rpc_sai_thrift_remove_dtel_int_session_args {
 public:

  sai_rpc_sai_thrift_remove_dtel_int_session_args(const sai_rpc_sai_thrift_remove_dtel_int_session_args&);
  sai_rpc_sai_thrift_remove_dtel_int_session_args& operator=(const sai_rpc_sai_thrift_remove_dtel_int_session_args&);
  sai_rpc_sai_thrift_remove_dtel_int_session_args() : dtel_int_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_int_session_args() throw();
  sai_thrift_object_id_t dtel_int_session_oid;

  _sai_rpc_sai_thrift_remove_dtel_int_session_args__isset __isset;

  void __set_dtel_int_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_int_session_args & rhs) const
  {
    if (!(dtel_int_session_oid == rhs.dtel_int_session_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_int_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_int_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dtel_int_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_int_session_pargs() throw();
  const sai_thrift_object_id_t* dtel_int_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_int_session_result__isset {
  _sai_rpc_sai_thrift_remove_dtel_int_session_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_int_session_result__isset;

class sai_rpc_sai_thrift_remove_dtel_int_session_result {
 public:

  sai_rpc_sai_thrift_remove_dtel_int_session_result(const sai_rpc_sai_thrift_remove_dtel_int_session_result&);
  sai_rpc_sai_thrift_remove_dtel_int_session_result& operator=(const sai_rpc_sai_thrift_remove_dtel_int_session_result&);
  sai_rpc_sai_thrift_remove_dtel_int_session_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_int_session_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_int_session_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_int_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_int_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_int_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_int_session_presult__isset {
  _sai_rpc_sai_thrift_remove_dtel_int_session_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_int_session_presult__isset;

class sai_rpc_sai_thrift_remove_dtel_int_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_int_session_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_int_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dtel_int_session_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_args__isset() : dtel_int_session_oid(false), attr(false) {}
  bool dtel_int_session_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dtel_int_session_attribute_args__isset;

class sai_rpc_sai_thrift_set_dtel_int_session_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dtel_int_session_attribute_args(const sai_rpc_sai_thrift_set_dtel_int_session_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_int_session_attribute_args& operator=(const sai_rpc_sai_thrift_set_dtel_int_session_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_int_session_attribute_args() : dtel_int_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_int_session_attribute_args() throw();
  sai_thrift_object_id_t dtel_int_session_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_args__isset __isset;

  void __set_dtel_int_session_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_args & rhs) const
  {
    if (!(dtel_int_session_oid == rhs.dtel_int_session_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dtel_int_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_int_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_int_session_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_int_session_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_int_session_attribute_result__isset;

class sai_rpc_sai_thrift_set_dtel_int_session_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dtel_int_session_attribute_result(const sai_rpc_sai_thrift_set_dtel_int_session_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_int_session_attribute_result& operator=(const sai_rpc_sai_thrift_set_dtel_int_session_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_int_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_int_session_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_int_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_int_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dtel_int_session_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_args__isset() : dtel_int_session_oid(false), attr_list(false) {}
  bool dtel_int_session_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dtel_int_session_attribute_args__isset;

class sai_rpc_sai_thrift_get_dtel_int_session_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dtel_int_session_attribute_args(const sai_rpc_sai_thrift_get_dtel_int_session_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_int_session_attribute_args& operator=(const sai_rpc_sai_thrift_get_dtel_int_session_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_int_session_attribute_args() : dtel_int_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_int_session_attribute_args() throw();
  sai_thrift_object_id_t dtel_int_session_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_args__isset __isset;

  void __set_dtel_int_session_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_args & rhs) const
  {
    if (!(dtel_int_session_oid == rhs.dtel_int_session_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dtel_int_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_int_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_int_session_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_int_session_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_int_session_attribute_result__isset;

class sai_rpc_sai_thrift_get_dtel_int_session_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dtel_int_session_attribute_result(const sai_rpc_sai_thrift_get_dtel_int_session_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_int_session_attribute_result& operator=(const sai_rpc_sai_thrift_get_dtel_int_session_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_int_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_int_session_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_int_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_int_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dtel_report_session_args__isset {
  _sai_rpc_sai_thrift_create_dtel_report_session_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dtel_report_session_args__isset;

class sai_rpc_sai_thrift_create_dtel_report_session_args {
 public:

  sai_rpc_sai_thrift_create_dtel_report_session_args(const sai_rpc_sai_thrift_create_dtel_report_session_args&);
  sai_rpc_sai_thrift_create_dtel_report_session_args& operator=(const sai_rpc_sai_thrift_create_dtel_report_session_args&);
  sai_rpc_sai_thrift_create_dtel_report_session_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_report_session_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dtel_report_session_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_report_session_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_report_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_report_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dtel_report_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_report_session_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_report_session_result__isset {
  _sai_rpc_sai_thrift_create_dtel_report_session_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_report_session_result__isset;

class sai_rpc_sai_thrift_create_dtel_report_session_result {
 public:

  sai_rpc_sai_thrift_create_dtel_report_session_result(const sai_rpc_sai_thrift_create_dtel_report_session_result&);
  sai_rpc_sai_thrift_create_dtel_report_session_result& operator=(const sai_rpc_sai_thrift_create_dtel_report_session_result&);
  sai_rpc_sai_thrift_create_dtel_report_session_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_report_session_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_report_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_report_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_report_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_report_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_report_session_presult__isset {
  _sai_rpc_sai_thrift_create_dtel_report_session_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_report_session_presult__isset;

class sai_rpc_sai_thrift_create_dtel_report_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_report_session_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_report_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_report_session_args__isset {
  _sai_rpc_sai_thrift_remove_dtel_report_session_args__isset() : dtel_report_session_oid(false) {}
  bool dtel_report_session_oid :1;
} _sai_rpc_sai_thrift_remove_dtel_report_session_args__isset;

class sai_rpc_sai_thrift_remove_dtel_report_session_args {
 public:

  sai_rpc_sai_thrift_remove_dtel_report_session_args(const sai_rpc_sai_thrift_remove_dtel_report_session_args&);
  sai_rpc_sai_thrift_remove_dtel_report_session_args& operator=(const sai_rpc_sai_thrift_remove_dtel_report_session_args&);
  sai_rpc_sai_thrift_remove_dtel_report_session_args() : dtel_report_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_report_session_args() throw();
  sai_thrift_object_id_t dtel_report_session_oid;

  _sai_rpc_sai_thrift_remove_dtel_report_session_args__isset __isset;

  void __set_dtel_report_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_report_session_args & rhs) const
  {
    if (!(dtel_report_session_oid == rhs.dtel_report_session_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_report_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_report_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dtel_report_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_report_session_pargs() throw();
  const sai_thrift_object_id_t* dtel_report_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_report_session_result__isset {
  _sai_rpc_sai_thrift_remove_dtel_report_session_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_report_session_result__isset;

class sai_rpc_sai_thrift_remove_dtel_report_session_result {
 public:

  sai_rpc_sai_thrift_remove_dtel_report_session_result(const sai_rpc_sai_thrift_remove_dtel_report_session_result&);
  sai_rpc_sai_thrift_remove_dtel_report_session_result& operator=(const sai_rpc_sai_thrift_remove_dtel_report_session_result&);
  sai_rpc_sai_thrift_remove_dtel_report_session_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_report_session_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_report_session_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_report_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_report_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_report_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_report_session_presult__isset {
  _sai_rpc_sai_thrift_remove_dtel_report_session_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_report_session_presult__isset;

class sai_rpc_sai_thrift_remove_dtel_report_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_report_session_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_report_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dtel_report_session_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_args__isset() : dtel_report_session_oid(false), attr(false) {}
  bool dtel_report_session_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dtel_report_session_attribute_args__isset;

class sai_rpc_sai_thrift_set_dtel_report_session_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dtel_report_session_attribute_args(const sai_rpc_sai_thrift_set_dtel_report_session_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_report_session_attribute_args& operator=(const sai_rpc_sai_thrift_set_dtel_report_session_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_report_session_attribute_args() : dtel_report_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_report_session_attribute_args() throw();
  sai_thrift_object_id_t dtel_report_session_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_args__isset __isset;

  void __set_dtel_report_session_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_args & rhs) const
  {
    if (!(dtel_report_session_oid == rhs.dtel_report_session_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dtel_report_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_report_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_report_session_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_report_session_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_report_session_attribute_result__isset;

class sai_rpc_sai_thrift_set_dtel_report_session_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dtel_report_session_attribute_result(const sai_rpc_sai_thrift_set_dtel_report_session_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_report_session_attribute_result& operator=(const sai_rpc_sai_thrift_set_dtel_report_session_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_report_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_report_session_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_report_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_report_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dtel_report_session_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_args__isset() : dtel_report_session_oid(false), attr_list(false) {}
  bool dtel_report_session_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dtel_report_session_attribute_args__isset;

class sai_rpc_sai_thrift_get_dtel_report_session_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dtel_report_session_attribute_args(const sai_rpc_sai_thrift_get_dtel_report_session_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_report_session_attribute_args& operator=(const sai_rpc_sai_thrift_get_dtel_report_session_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_report_session_attribute_args() : dtel_report_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_report_session_attribute_args() throw();
  sai_thrift_object_id_t dtel_report_session_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_args__isset __isset;

  void __set_dtel_report_session_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_args & rhs) const
  {
    if (!(dtel_report_session_oid == rhs.dtel_report_session_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dtel_report_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_report_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_report_session_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_report_session_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_report_session_attribute_result__isset;

class sai_rpc_sai_thrift_get_dtel_report_session_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dtel_report_session_attribute_result(const sai_rpc_sai_thrift_get_dtel_report_session_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_report_session_attribute_result& operator=(const sai_rpc_sai_thrift_get_dtel_report_session_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_report_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_report_session_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_report_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_report_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_dtel_event_args__isset {
  _sai_rpc_sai_thrift_create_dtel_event_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_dtel_event_args__isset;

class sai_rpc_sai_thrift_create_dtel_event_args {
 public:

  sai_rpc_sai_thrift_create_dtel_event_args(const sai_rpc_sai_thrift_create_dtel_event_args&);
  sai_rpc_sai_thrift_create_dtel_event_args& operator=(const sai_rpc_sai_thrift_create_dtel_event_args&);
  sai_rpc_sai_thrift_create_dtel_event_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_event_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_dtel_event_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_event_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_dtel_event_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_event_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_event_result__isset {
  _sai_rpc_sai_thrift_create_dtel_event_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_event_result__isset;

class sai_rpc_sai_thrift_create_dtel_event_result {
 public:

  sai_rpc_sai_thrift_create_dtel_event_result(const sai_rpc_sai_thrift_create_dtel_event_result&);
  sai_rpc_sai_thrift_create_dtel_event_result& operator=(const sai_rpc_sai_thrift_create_dtel_event_result&);
  sai_rpc_sai_thrift_create_dtel_event_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_dtel_event_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_event_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_dtel_event_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_dtel_event_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_dtel_event_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_dtel_event_presult__isset {
  _sai_rpc_sai_thrift_create_dtel_event_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_dtel_event_presult__isset;

class sai_rpc_sai_thrift_create_dtel_event_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_dtel_event_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_dtel_event_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_event_args__isset {
  _sai_rpc_sai_thrift_remove_dtel_event_args__isset() : dtel_event_oid(false) {}
  bool dtel_event_oid :1;
} _sai_rpc_sai_thrift_remove_dtel_event_args__isset;

class sai_rpc_sai_thrift_remove_dtel_event_args {
 public:

  sai_rpc_sai_thrift_remove_dtel_event_args(const sai_rpc_sai_thrift_remove_dtel_event_args&);
  sai_rpc_sai_thrift_remove_dtel_event_args& operator=(const sai_rpc_sai_thrift_remove_dtel_event_args&);
  sai_rpc_sai_thrift_remove_dtel_event_args() : dtel_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_event_args() throw();
  sai_thrift_object_id_t dtel_event_oid;

  _sai_rpc_sai_thrift_remove_dtel_event_args__isset __isset;

  void __set_dtel_event_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_event_args & rhs) const
  {
    if (!(dtel_event_oid == rhs.dtel_event_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_dtel_event_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_event_pargs() throw();
  const sai_thrift_object_id_t* dtel_event_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_event_result__isset {
  _sai_rpc_sai_thrift_remove_dtel_event_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_event_result__isset;

class sai_rpc_sai_thrift_remove_dtel_event_result {
 public:

  sai_rpc_sai_thrift_remove_dtel_event_result(const sai_rpc_sai_thrift_remove_dtel_event_result&);
  sai_rpc_sai_thrift_remove_dtel_event_result& operator=(const sai_rpc_sai_thrift_remove_dtel_event_result&);
  sai_rpc_sai_thrift_remove_dtel_event_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_dtel_event_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_event_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_dtel_event_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_dtel_event_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_dtel_event_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_dtel_event_presult__isset {
  _sai_rpc_sai_thrift_remove_dtel_event_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_dtel_event_presult__isset;

class sai_rpc_sai_thrift_remove_dtel_event_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_dtel_event_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_dtel_event_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_dtel_event_attribute_args__isset {
  _sai_rpc_sai_thrift_set_dtel_event_attribute_args__isset() : dtel_event_oid(false), attr(false) {}
  bool dtel_event_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_dtel_event_attribute_args__isset;

class sai_rpc_sai_thrift_set_dtel_event_attribute_args {
 public:

  sai_rpc_sai_thrift_set_dtel_event_attribute_args(const sai_rpc_sai_thrift_set_dtel_event_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_event_attribute_args& operator=(const sai_rpc_sai_thrift_set_dtel_event_attribute_args&);
  sai_rpc_sai_thrift_set_dtel_event_attribute_args() : dtel_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_event_attribute_args() throw();
  sai_thrift_object_id_t dtel_event_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_dtel_event_attribute_args__isset __isset;

  void __set_dtel_event_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_event_attribute_args & rhs) const
  {
    if (!(dtel_event_oid == rhs.dtel_event_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_event_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_event_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_dtel_event_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_event_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_event_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_event_attribute_result__isset {
  _sai_rpc_sai_thrift_set_dtel_event_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_event_attribute_result__isset;

class sai_rpc_sai_thrift_set_dtel_event_attribute_result {
 public:

  sai_rpc_sai_thrift_set_dtel_event_attribute_result(const sai_rpc_sai_thrift_set_dtel_event_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_event_attribute_result& operator=(const sai_rpc_sai_thrift_set_dtel_event_attribute_result&);
  sai_rpc_sai_thrift_set_dtel_event_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_dtel_event_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_event_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_dtel_event_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_dtel_event_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_dtel_event_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_dtel_event_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_dtel_event_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_dtel_event_attribute_presult__isset;

class sai_rpc_sai_thrift_set_dtel_event_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_dtel_event_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_dtel_event_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_dtel_event_attribute_args__isset {
  _sai_rpc_sai_thrift_get_dtel_event_attribute_args__isset() : dtel_event_oid(false), attr_list(false) {}
  bool dtel_event_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_dtel_event_attribute_args__isset;

class sai_rpc_sai_thrift_get_dtel_event_attribute_args {
 public:

  sai_rpc_sai_thrift_get_dtel_event_attribute_args(const sai_rpc_sai_thrift_get_dtel_event_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_event_attribute_args& operator=(const sai_rpc_sai_thrift_get_dtel_event_attribute_args&);
  sai_rpc_sai_thrift_get_dtel_event_attribute_args() : dtel_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_event_attribute_args() throw();
  sai_thrift_object_id_t dtel_event_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_dtel_event_attribute_args__isset __isset;

  void __set_dtel_event_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_event_attribute_args & rhs) const
  {
    if (!(dtel_event_oid == rhs.dtel_event_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_event_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_event_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_dtel_event_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_event_attribute_pargs() throw();
  const sai_thrift_object_id_t* dtel_event_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_event_attribute_result__isset {
  _sai_rpc_sai_thrift_get_dtel_event_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_event_attribute_result__isset;

class sai_rpc_sai_thrift_get_dtel_event_attribute_result {
 public:

  sai_rpc_sai_thrift_get_dtel_event_attribute_result(const sai_rpc_sai_thrift_get_dtel_event_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_event_attribute_result& operator=(const sai_rpc_sai_thrift_get_dtel_event_attribute_result&);
  sai_rpc_sai_thrift_get_dtel_event_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_dtel_event_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_event_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_dtel_event_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_dtel_event_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_dtel_event_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_dtel_event_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_dtel_event_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_dtel_event_attribute_presult__isset;

class sai_rpc_sai_thrift_get_dtel_event_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_dtel_event_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_dtel_event_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_create_fdb_entry_args__isset() : fdb_entry(false), attr_list(false) {}
  bool fdb_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_fdb_entry_args__isset;

class sai_rpc_sai_thrift_create_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_create_fdb_entry_args(const sai_rpc_sai_thrift_create_fdb_entry_args&);
  sai_rpc_sai_thrift_create_fdb_entry_args& operator=(const sai_rpc_sai_thrift_create_fdb_entry_args&);
  sai_rpc_sai_thrift_create_fdb_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_fdb_entry_args() throw();
  sai_thrift_fdb_entry_t fdb_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_fdb_entry_args__isset __isset;

  void __set_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_fdb_entry_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_fdb_entry_pargs() throw();
  const sai_thrift_fdb_entry_t* fdb_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_create_fdb_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_fdb_entry_result__isset;

class sai_rpc_sai_thrift_create_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_create_fdb_entry_result(const sai_rpc_sai_thrift_create_fdb_entry_result&);
  sai_rpc_sai_thrift_create_fdb_entry_result& operator=(const sai_rpc_sai_thrift_create_fdb_entry_result&);
  sai_rpc_sai_thrift_create_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_fdb_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_fdb_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_fdb_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_create_fdb_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_create_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_fdb_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_remove_fdb_entry_args__isset() : fdb_entry(false) {}
  bool fdb_entry :1;
} _sai_rpc_sai_thrift_remove_fdb_entry_args__isset;

class sai_rpc_sai_thrift_remove_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_remove_fdb_entry_args(const sai_rpc_sai_thrift_remove_fdb_entry_args&);
  sai_rpc_sai_thrift_remove_fdb_entry_args& operator=(const sai_rpc_sai_thrift_remove_fdb_entry_args&);
  sai_rpc_sai_thrift_remove_fdb_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_fdb_entry_args() throw();
  sai_thrift_fdb_entry_t fdb_entry;

  _sai_rpc_sai_thrift_remove_fdb_entry_args__isset __isset;

  void __set_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_fdb_entry_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_fdb_entry_pargs() throw();
  const sai_thrift_fdb_entry_t* fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_remove_fdb_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_fdb_entry_result__isset;

class sai_rpc_sai_thrift_remove_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_remove_fdb_entry_result(const sai_rpc_sai_thrift_remove_fdb_entry_result&);
  sai_rpc_sai_thrift_remove_fdb_entry_result& operator=(const sai_rpc_sai_thrift_remove_fdb_entry_result&);
  sai_rpc_sai_thrift_remove_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_fdb_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_fdb_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_fdb_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_fdb_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_remove_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_fdb_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset() : fdb_entry(false), attr(false) {}
  bool fdb_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_fdb_entry_attribute_args(const sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_set_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_set_fdb_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_fdb_entry_attribute_args() throw();
  sai_thrift_fdb_entry_t fdb_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset __isset;

  void __set_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_fdb_entry_attribute_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs() throw();
  const sai_thrift_fdb_entry_t* fdb_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_fdb_entry_attribute_result(const sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_set_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_set_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_fdb_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_fdb_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_fdb_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset() : fdb_entry(false), attr_list(false) {}
  bool fdb_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_fdb_entry_attribute_args(const sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_get_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_get_fdb_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_fdb_entry_attribute_args() throw();
  sai_thrift_fdb_entry_t fdb_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset __isset;

  void __set_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_fdb_entry_attribute_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs() throw();
  const sai_thrift_fdb_entry_t* fdb_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_fdb_entry_attribute_result(const sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_get_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_get_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_fdb_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_fdb_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_flush_fdb_entries_args__isset {
  _sai_rpc_sai_thrift_flush_fdb_entries_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_flush_fdb_entries_args__isset;

class sai_rpc_sai_thrift_flush_fdb_entries_args {
 public:

  sai_rpc_sai_thrift_flush_fdb_entries_args(const sai_rpc_sai_thrift_flush_fdb_entries_args&);
  sai_rpc_sai_thrift_flush_fdb_entries_args& operator=(const sai_rpc_sai_thrift_flush_fdb_entries_args&);
  sai_rpc_sai_thrift_flush_fdb_entries_args() {
  }

  virtual ~sai_rpc_sai_thrift_flush_fdb_entries_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_flush_fdb_entries_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_flush_fdb_entries_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_flush_fdb_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_flush_fdb_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_flush_fdb_entries_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_flush_fdb_entries_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_flush_fdb_entries_result__isset {
  _sai_rpc_sai_thrift_flush_fdb_entries_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_flush_fdb_entries_result__isset;

class sai_rpc_sai_thrift_flush_fdb_entries_result {
 public:

  sai_rpc_sai_thrift_flush_fdb_entries_result(const sai_rpc_sai_thrift_flush_fdb_entries_result&);
  sai_rpc_sai_thrift_flush_fdb_entries_result& operator=(const sai_rpc_sai_thrift_flush_fdb_entries_result&);
  sai_rpc_sai_thrift_flush_fdb_entries_result() {
  }

  virtual ~sai_rpc_sai_thrift_flush_fdb_entries_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_flush_fdb_entries_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_flush_fdb_entries_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_flush_fdb_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_flush_fdb_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_flush_fdb_entries_presult__isset {
  _sai_rpc_sai_thrift_flush_fdb_entries_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_flush_fdb_entries_presult__isset;

class sai_rpc_sai_thrift_flush_fdb_entries_presult {
 public:


  virtual ~sai_rpc_sai_thrift_flush_fdb_entries_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_flush_fdb_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_fdb_entry_args__isset() : fdb_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool fdb_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_fdb_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_fdb_entry_args(const sai_rpc_sai_thrift_bulk_create_fdb_entry_args&);
  sai_rpc_sai_thrift_bulk_create_fdb_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_fdb_entry_args&);
  sai_rpc_sai_thrift_bulk_create_fdb_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_fdb_entry_args() throw();
  std::vector<sai_thrift_fdb_entry_t>  fdb_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_fdb_entry_args__isset __isset;

  void __set_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_fdb_entry_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_fdb_entry_pargs() throw();
  const std::vector<sai_thrift_fdb_entry_t> * fdb_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_fdb_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_fdb_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_fdb_entry_result(const sai_rpc_sai_thrift_bulk_create_fdb_entry_result&);
  sai_rpc_sai_thrift_bulk_create_fdb_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_fdb_entry_result&);
  sai_rpc_sai_thrift_bulk_create_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_fdb_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_fdb_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_fdb_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_fdb_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_args__isset() : fdb_entry(false), mode(false) {}
  bool fdb_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_fdb_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_fdb_entry_args(const sai_rpc_sai_thrift_bulk_remove_fdb_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_fdb_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_fdb_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_fdb_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_fdb_entry_args() throw();
  std::vector<sai_thrift_fdb_entry_t>  fdb_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_args__isset __isset;

  void __set_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_fdb_entry_pargs() throw();
  const std::vector<sai_thrift_fdb_entry_t> * fdb_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_fdb_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_fdb_entry_result(const sai_rpc_sai_thrift_bulk_remove_fdb_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_fdb_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_fdb_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_fdb_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args__isset() : fdb_entry(false), attr_list(false), mode(false) {}
  bool fdb_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args() throw();
  std::vector<sai_thrift_fdb_entry_t>  fdb_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args__isset __isset;

  void __set_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_fdb_entry_t> * fdb_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args__isset() : fdb_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool fdb_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args() throw();
  std::vector<sai_thrift_fdb_entry_t>  fdb_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args__isset __isset;

  void __set_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args & rhs) const
  {
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_fdb_entry_t> * fdb_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_generic_programmable_args__isset {
  _sai_rpc_sai_thrift_create_generic_programmable_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_generic_programmable_args__isset;

class sai_rpc_sai_thrift_create_generic_programmable_args {
 public:

  sai_rpc_sai_thrift_create_generic_programmable_args(const sai_rpc_sai_thrift_create_generic_programmable_args&);
  sai_rpc_sai_thrift_create_generic_programmable_args& operator=(const sai_rpc_sai_thrift_create_generic_programmable_args&);
  sai_rpc_sai_thrift_create_generic_programmable_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_generic_programmable_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_generic_programmable_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_generic_programmable_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_generic_programmable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_generic_programmable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_generic_programmable_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_generic_programmable_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_generic_programmable_result__isset {
  _sai_rpc_sai_thrift_create_generic_programmable_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_generic_programmable_result__isset;

class sai_rpc_sai_thrift_create_generic_programmable_result {
 public:

  sai_rpc_sai_thrift_create_generic_programmable_result(const sai_rpc_sai_thrift_create_generic_programmable_result&);
  sai_rpc_sai_thrift_create_generic_programmable_result& operator=(const sai_rpc_sai_thrift_create_generic_programmable_result&);
  sai_rpc_sai_thrift_create_generic_programmable_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_generic_programmable_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_generic_programmable_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_generic_programmable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_generic_programmable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_generic_programmable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_generic_programmable_presult__isset {
  _sai_rpc_sai_thrift_create_generic_programmable_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_generic_programmable_presult__isset;

class sai_rpc_sai_thrift_create_generic_programmable_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_generic_programmable_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_generic_programmable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_generic_programmable_args__isset {
  _sai_rpc_sai_thrift_remove_generic_programmable_args__isset() : generic_programmable_oid(false) {}
  bool generic_programmable_oid :1;
} _sai_rpc_sai_thrift_remove_generic_programmable_args__isset;

class sai_rpc_sai_thrift_remove_generic_programmable_args {
 public:

  sai_rpc_sai_thrift_remove_generic_programmable_args(const sai_rpc_sai_thrift_remove_generic_programmable_args&);
  sai_rpc_sai_thrift_remove_generic_programmable_args& operator=(const sai_rpc_sai_thrift_remove_generic_programmable_args&);
  sai_rpc_sai_thrift_remove_generic_programmable_args() : generic_programmable_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_generic_programmable_args() throw();
  sai_thrift_object_id_t generic_programmable_oid;

  _sai_rpc_sai_thrift_remove_generic_programmable_args__isset __isset;

  void __set_generic_programmable_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_generic_programmable_args & rhs) const
  {
    if (!(generic_programmable_oid == rhs.generic_programmable_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_generic_programmable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_generic_programmable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_generic_programmable_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_generic_programmable_pargs() throw();
  const sai_thrift_object_id_t* generic_programmable_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_generic_programmable_result__isset {
  _sai_rpc_sai_thrift_remove_generic_programmable_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_generic_programmable_result__isset;

class sai_rpc_sai_thrift_remove_generic_programmable_result {
 public:

  sai_rpc_sai_thrift_remove_generic_programmable_result(const sai_rpc_sai_thrift_remove_generic_programmable_result&);
  sai_rpc_sai_thrift_remove_generic_programmable_result& operator=(const sai_rpc_sai_thrift_remove_generic_programmable_result&);
  sai_rpc_sai_thrift_remove_generic_programmable_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_generic_programmable_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_generic_programmable_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_generic_programmable_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_generic_programmable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_generic_programmable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_generic_programmable_presult__isset {
  _sai_rpc_sai_thrift_remove_generic_programmable_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_generic_programmable_presult__isset;

class sai_rpc_sai_thrift_remove_generic_programmable_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_generic_programmable_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_generic_programmable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_generic_programmable_attribute_args__isset {
  _sai_rpc_sai_thrift_set_generic_programmable_attribute_args__isset() : generic_programmable_oid(false), attr(false) {}
  bool generic_programmable_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_generic_programmable_attribute_args__isset;

class sai_rpc_sai_thrift_set_generic_programmable_attribute_args {
 public:

  sai_rpc_sai_thrift_set_generic_programmable_attribute_args(const sai_rpc_sai_thrift_set_generic_programmable_attribute_args&);
  sai_rpc_sai_thrift_set_generic_programmable_attribute_args& operator=(const sai_rpc_sai_thrift_set_generic_programmable_attribute_args&);
  sai_rpc_sai_thrift_set_generic_programmable_attribute_args() : generic_programmable_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_generic_programmable_attribute_args() throw();
  sai_thrift_object_id_t generic_programmable_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_generic_programmable_attribute_args__isset __isset;

  void __set_generic_programmable_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_generic_programmable_attribute_args & rhs) const
  {
    if (!(generic_programmable_oid == rhs.generic_programmable_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_generic_programmable_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_generic_programmable_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_generic_programmable_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_generic_programmable_attribute_pargs() throw();
  const sai_thrift_object_id_t* generic_programmable_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_generic_programmable_attribute_result__isset {
  _sai_rpc_sai_thrift_set_generic_programmable_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_generic_programmable_attribute_result__isset;

class sai_rpc_sai_thrift_set_generic_programmable_attribute_result {
 public:

  sai_rpc_sai_thrift_set_generic_programmable_attribute_result(const sai_rpc_sai_thrift_set_generic_programmable_attribute_result&);
  sai_rpc_sai_thrift_set_generic_programmable_attribute_result& operator=(const sai_rpc_sai_thrift_set_generic_programmable_attribute_result&);
  sai_rpc_sai_thrift_set_generic_programmable_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_generic_programmable_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_generic_programmable_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_generic_programmable_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_generic_programmable_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_generic_programmable_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_generic_programmable_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_generic_programmable_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_generic_programmable_attribute_presult__isset;

class sai_rpc_sai_thrift_set_generic_programmable_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_generic_programmable_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_generic_programmable_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_generic_programmable_attribute_args__isset {
  _sai_rpc_sai_thrift_get_generic_programmable_attribute_args__isset() : generic_programmable_oid(false), attr_list(false) {}
  bool generic_programmable_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_generic_programmable_attribute_args__isset;

class sai_rpc_sai_thrift_get_generic_programmable_attribute_args {
 public:

  sai_rpc_sai_thrift_get_generic_programmable_attribute_args(const sai_rpc_sai_thrift_get_generic_programmable_attribute_args&);
  sai_rpc_sai_thrift_get_generic_programmable_attribute_args& operator=(const sai_rpc_sai_thrift_get_generic_programmable_attribute_args&);
  sai_rpc_sai_thrift_get_generic_programmable_attribute_args() : generic_programmable_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_generic_programmable_attribute_args() throw();
  sai_thrift_object_id_t generic_programmable_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_generic_programmable_attribute_args__isset __isset;

  void __set_generic_programmable_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_generic_programmable_attribute_args & rhs) const
  {
    if (!(generic_programmable_oid == rhs.generic_programmable_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_generic_programmable_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_generic_programmable_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_generic_programmable_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_generic_programmable_attribute_pargs() throw();
  const sai_thrift_object_id_t* generic_programmable_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_generic_programmable_attribute_result__isset {
  _sai_rpc_sai_thrift_get_generic_programmable_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_generic_programmable_attribute_result__isset;

class sai_rpc_sai_thrift_get_generic_programmable_attribute_result {
 public:

  sai_rpc_sai_thrift_get_generic_programmable_attribute_result(const sai_rpc_sai_thrift_get_generic_programmable_attribute_result&);
  sai_rpc_sai_thrift_get_generic_programmable_attribute_result& operator=(const sai_rpc_sai_thrift_get_generic_programmable_attribute_result&);
  sai_rpc_sai_thrift_get_generic_programmable_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_generic_programmable_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_generic_programmable_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_generic_programmable_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_generic_programmable_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_generic_programmable_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_generic_programmable_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_generic_programmable_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_generic_programmable_attribute_presult__isset;

class sai_rpc_sai_thrift_get_generic_programmable_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_generic_programmable_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_generic_programmable_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_fine_grained_hash_field_args__isset {
  _sai_rpc_sai_thrift_create_fine_grained_hash_field_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_fine_grained_hash_field_args__isset;

class sai_rpc_sai_thrift_create_fine_grained_hash_field_args {
 public:

  sai_rpc_sai_thrift_create_fine_grained_hash_field_args(const sai_rpc_sai_thrift_create_fine_grained_hash_field_args&);
  sai_rpc_sai_thrift_create_fine_grained_hash_field_args& operator=(const sai_rpc_sai_thrift_create_fine_grained_hash_field_args&);
  sai_rpc_sai_thrift_create_fine_grained_hash_field_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_fine_grained_hash_field_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_fine_grained_hash_field_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_fine_grained_hash_field_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_fine_grained_hash_field_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_fine_grained_hash_field_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_fine_grained_hash_field_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_fine_grained_hash_field_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_fine_grained_hash_field_result__isset {
  _sai_rpc_sai_thrift_create_fine_grained_hash_field_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_fine_grained_hash_field_result__isset;

class sai_rpc_sai_thrift_create_fine_grained_hash_field_result {
 public:

  sai_rpc_sai_thrift_create_fine_grained_hash_field_result(const sai_rpc_sai_thrift_create_fine_grained_hash_field_result&);
  sai_rpc_sai_thrift_create_fine_grained_hash_field_result& operator=(const sai_rpc_sai_thrift_create_fine_grained_hash_field_result&);
  sai_rpc_sai_thrift_create_fine_grained_hash_field_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_fine_grained_hash_field_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_fine_grained_hash_field_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_fine_grained_hash_field_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_fine_grained_hash_field_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_fine_grained_hash_field_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_fine_grained_hash_field_presult__isset {
  _sai_rpc_sai_thrift_create_fine_grained_hash_field_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_fine_grained_hash_field_presult__isset;

class sai_rpc_sai_thrift_create_fine_grained_hash_field_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_fine_grained_hash_field_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_fine_grained_hash_field_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_fine_grained_hash_field_args__isset {
  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_args__isset() : fine_grained_hash_field_oid(false) {}
  bool fine_grained_hash_field_oid :1;
} _sai_rpc_sai_thrift_remove_fine_grained_hash_field_args__isset;

class sai_rpc_sai_thrift_remove_fine_grained_hash_field_args {
 public:

  sai_rpc_sai_thrift_remove_fine_grained_hash_field_args(const sai_rpc_sai_thrift_remove_fine_grained_hash_field_args&);
  sai_rpc_sai_thrift_remove_fine_grained_hash_field_args& operator=(const sai_rpc_sai_thrift_remove_fine_grained_hash_field_args&);
  sai_rpc_sai_thrift_remove_fine_grained_hash_field_args() : fine_grained_hash_field_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_fine_grained_hash_field_args() throw();
  sai_thrift_object_id_t fine_grained_hash_field_oid;

  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_args__isset __isset;

  void __set_fine_grained_hash_field_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_args & rhs) const
  {
    if (!(fine_grained_hash_field_oid == rhs.fine_grained_hash_field_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_fine_grained_hash_field_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_fine_grained_hash_field_pargs() throw();
  const sai_thrift_object_id_t* fine_grained_hash_field_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_fine_grained_hash_field_result__isset {
  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_fine_grained_hash_field_result__isset;

class sai_rpc_sai_thrift_remove_fine_grained_hash_field_result {
 public:

  sai_rpc_sai_thrift_remove_fine_grained_hash_field_result(const sai_rpc_sai_thrift_remove_fine_grained_hash_field_result&);
  sai_rpc_sai_thrift_remove_fine_grained_hash_field_result& operator=(const sai_rpc_sai_thrift_remove_fine_grained_hash_field_result&);
  sai_rpc_sai_thrift_remove_fine_grained_hash_field_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_fine_grained_hash_field_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_fine_grained_hash_field_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult__isset {
  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult__isset;

class sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_fine_grained_hash_field_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args__isset {
  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args__isset() : fine_grained_hash_field_oid(false), attr(false) {}
  bool fine_grained_hash_field_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args__isset;

class sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args {
 public:

  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args(const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args&);
  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args& operator=(const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args&);
  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args() : fine_grained_hash_field_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args() throw();
  sai_thrift_object_id_t fine_grained_hash_field_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args__isset __isset;

  void __set_fine_grained_hash_field_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args & rhs) const
  {
    if (!(fine_grained_hash_field_oid == rhs.fine_grained_hash_field_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_pargs() throw();
  const sai_thrift_object_id_t* fine_grained_hash_field_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result__isset {
  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result__isset;

class sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result {
 public:

  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result(const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result&);
  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result& operator=(const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result&);
  sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult__isset;

class sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_fine_grained_hash_field_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args__isset {
  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args__isset() : fine_grained_hash_field_oid(false), attr_list(false) {}
  bool fine_grained_hash_field_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args__isset;

class sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args {
 public:

  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args(const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args&);
  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args& operator=(const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args&);
  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args() : fine_grained_hash_field_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args() throw();
  sai_thrift_object_id_t fine_grained_hash_field_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args__isset __isset;

  void __set_fine_grained_hash_field_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args & rhs) const
  {
    if (!(fine_grained_hash_field_oid == rhs.fine_grained_hash_field_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_pargs() throw();
  const sai_thrift_object_id_t* fine_grained_hash_field_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result__isset {
  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result__isset;

class sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result {
 public:

  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result(const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result&);
  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result& operator=(const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result&);
  sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult__isset;

class sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_fine_grained_hash_field_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hash_args__isset {
  _sai_rpc_sai_thrift_create_hash_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hash_args__isset;

class sai_rpc_sai_thrift_create_hash_args {
 public:

  sai_rpc_sai_thrift_create_hash_args(const sai_rpc_sai_thrift_create_hash_args&);
  sai_rpc_sai_thrift_create_hash_args& operator=(const sai_rpc_sai_thrift_create_hash_args&);
  sai_rpc_sai_thrift_create_hash_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hash_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hash_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hash_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hash_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hash_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hash_result__isset {
  _sai_rpc_sai_thrift_create_hash_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hash_result__isset;

class sai_rpc_sai_thrift_create_hash_result {
 public:

  sai_rpc_sai_thrift_create_hash_result(const sai_rpc_sai_thrift_create_hash_result&);
  sai_rpc_sai_thrift_create_hash_result& operator=(const sai_rpc_sai_thrift_create_hash_result&);
  sai_rpc_sai_thrift_create_hash_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hash_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hash_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hash_presult__isset {
  _sai_rpc_sai_thrift_create_hash_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hash_presult__isset;

class sai_rpc_sai_thrift_create_hash_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hash_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hash_args__isset {
  _sai_rpc_sai_thrift_remove_hash_args__isset() : hash_oid(false) {}
  bool hash_oid :1;
} _sai_rpc_sai_thrift_remove_hash_args__isset;

class sai_rpc_sai_thrift_remove_hash_args {
 public:

  sai_rpc_sai_thrift_remove_hash_args(const sai_rpc_sai_thrift_remove_hash_args&);
  sai_rpc_sai_thrift_remove_hash_args& operator=(const sai_rpc_sai_thrift_remove_hash_args&);
  sai_rpc_sai_thrift_remove_hash_args() : hash_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hash_args() throw();
  sai_thrift_object_id_t hash_oid;

  _sai_rpc_sai_thrift_remove_hash_args__isset __isset;

  void __set_hash_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hash_args & rhs) const
  {
    if (!(hash_oid == rhs.hash_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hash_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hash_pargs() throw();
  const sai_thrift_object_id_t* hash_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hash_result__isset {
  _sai_rpc_sai_thrift_remove_hash_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hash_result__isset;

class sai_rpc_sai_thrift_remove_hash_result {
 public:

  sai_rpc_sai_thrift_remove_hash_result(const sai_rpc_sai_thrift_remove_hash_result&);
  sai_rpc_sai_thrift_remove_hash_result& operator=(const sai_rpc_sai_thrift_remove_hash_result&);
  sai_rpc_sai_thrift_remove_hash_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hash_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hash_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hash_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hash_presult__isset {
  _sai_rpc_sai_thrift_remove_hash_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hash_presult__isset;

class sai_rpc_sai_thrift_remove_hash_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hash_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hash_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hash_attribute_args__isset() : hash_oid(false), attr(false) {}
  bool hash_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hash_attribute_args__isset;

class sai_rpc_sai_thrift_set_hash_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hash_attribute_args(const sai_rpc_sai_thrift_set_hash_attribute_args&);
  sai_rpc_sai_thrift_set_hash_attribute_args& operator=(const sai_rpc_sai_thrift_set_hash_attribute_args&);
  sai_rpc_sai_thrift_set_hash_attribute_args() : hash_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hash_attribute_args() throw();
  sai_thrift_object_id_t hash_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hash_attribute_args__isset __isset;

  void __set_hash_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hash_attribute_args & rhs) const
  {
    if (!(hash_oid == rhs.hash_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hash_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hash_attribute_pargs() throw();
  const sai_thrift_object_id_t* hash_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hash_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hash_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hash_attribute_result__isset;

class sai_rpc_sai_thrift_set_hash_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hash_attribute_result(const sai_rpc_sai_thrift_set_hash_attribute_result&);
  sai_rpc_sai_thrift_set_hash_attribute_result& operator=(const sai_rpc_sai_thrift_set_hash_attribute_result&);
  sai_rpc_sai_thrift_set_hash_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hash_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hash_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hash_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hash_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hash_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hash_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hash_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hash_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hash_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hash_attribute_args__isset() : hash_oid(false), attr_list(false) {}
  bool hash_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hash_attribute_args__isset;

class sai_rpc_sai_thrift_get_hash_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hash_attribute_args(const sai_rpc_sai_thrift_get_hash_attribute_args&);
  sai_rpc_sai_thrift_get_hash_attribute_args& operator=(const sai_rpc_sai_thrift_get_hash_attribute_args&);
  sai_rpc_sai_thrift_get_hash_attribute_args() : hash_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hash_attribute_args() throw();
  sai_thrift_object_id_t hash_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hash_attribute_args__isset __isset;

  void __set_hash_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hash_attribute_args & rhs) const
  {
    if (!(hash_oid == rhs.hash_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hash_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hash_attribute_pargs() throw();
  const sai_thrift_object_id_t* hash_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hash_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hash_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hash_attribute_result__isset;

class sai_rpc_sai_thrift_get_hash_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hash_attribute_result(const sai_rpc_sai_thrift_get_hash_attribute_result&);
  sai_rpc_sai_thrift_get_hash_attribute_result& operator=(const sai_rpc_sai_thrift_get_hash_attribute_result&);
  sai_rpc_sai_thrift_get_hash_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hash_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hash_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hash_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hash_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hash_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hash_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hash_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hash_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_group_args__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hostif_trap_group_args__isset;

class sai_rpc_sai_thrift_create_hostif_trap_group_args {
 public:

  sai_rpc_sai_thrift_create_hostif_trap_group_args(const sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  sai_rpc_sai_thrift_create_hostif_trap_group_args& operator=(const sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  sai_rpc_sai_thrift_create_hostif_trap_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_trap_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hostif_trap_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_trap_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hostif_trap_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_trap_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_group_result__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_trap_group_result__isset;

class sai_rpc_sai_thrift_create_hostif_trap_group_result {
 public:

  sai_rpc_sai_thrift_create_hostif_trap_group_result(const sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  sai_rpc_sai_thrift_create_hostif_trap_group_result& operator=(const sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  sai_rpc_sai_thrift_create_hostif_trap_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_trap_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset;

class sai_rpc_sai_thrift_create_hostif_trap_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_trap_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset() : hostif_trap_group_oid(false) {}
  bool hostif_trap_group_oid :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_group_args {
 public:

  sai_rpc_sai_thrift_remove_hostif_trap_group_args(const sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  sai_rpc_sai_thrift_remove_hostif_trap_group_args& operator=(const sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  sai_rpc_sai_thrift_remove_hostif_trap_group_args() : hostif_trap_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_group_args() throw();
  sai_thrift_object_id_t hostif_trap_group_oid;

  _sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset __isset;

  void __set_hostif_trap_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_trap_group_args & rhs) const
  {
    if (!(hostif_trap_group_oid == rhs.hostif_trap_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hostif_trap_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_group_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_group_result {
 public:

  sai_rpc_sai_thrift_remove_hostif_trap_group_result(const sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  sai_rpc_sai_thrift_remove_hostif_trap_group_result& operator=(const sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  sai_rpc_sai_thrift_remove_hostif_trap_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_trap_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset() : hostif_trap_group_oid(false), attr(false) {}
  bool hostif_trap_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args(const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() : hostif_trap_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() throw();
  sai_thrift_object_id_t hostif_trap_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset __isset;

  void __set_hostif_trap_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(hostif_trap_group_oid == rhs.hostif_trap_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result(const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset() : hostif_trap_group_oid(false), attr_list(false) {}
  bool hostif_trap_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args(const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() : hostif_trap_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() throw();
  sai_thrift_object_id_t hostif_trap_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset __isset;

  void __set_hostif_trap_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(hostif_trap_group_oid == rhs.hostif_trap_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result(const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_args__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hostif_trap_args__isset;

class sai_rpc_sai_thrift_create_hostif_trap_args {
 public:

  sai_rpc_sai_thrift_create_hostif_trap_args(const sai_rpc_sai_thrift_create_hostif_trap_args&);
  sai_rpc_sai_thrift_create_hostif_trap_args& operator=(const sai_rpc_sai_thrift_create_hostif_trap_args&);
  sai_rpc_sai_thrift_create_hostif_trap_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_trap_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hostif_trap_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_trap_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hostif_trap_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_trap_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_result__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_trap_result__isset;

class sai_rpc_sai_thrift_create_hostif_trap_result {
 public:

  sai_rpc_sai_thrift_create_hostif_trap_result(const sai_rpc_sai_thrift_create_hostif_trap_result&);
  sai_rpc_sai_thrift_create_hostif_trap_result& operator=(const sai_rpc_sai_thrift_create_hostif_trap_result&);
  sai_rpc_sai_thrift_create_hostif_trap_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_trap_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_trap_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_trap_presult__isset {
  _sai_rpc_sai_thrift_create_hostif_trap_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_trap_presult__isset;

class sai_rpc_sai_thrift_create_hostif_trap_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_trap_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_args__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_args__isset() : hostif_trap_oid(false) {}
  bool hostif_trap_oid :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_args__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_args {
 public:

  sai_rpc_sai_thrift_remove_hostif_trap_args(const sai_rpc_sai_thrift_remove_hostif_trap_args&);
  sai_rpc_sai_thrift_remove_hostif_trap_args& operator=(const sai_rpc_sai_thrift_remove_hostif_trap_args&);
  sai_rpc_sai_thrift_remove_hostif_trap_args() : hostif_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_args() throw();
  sai_thrift_object_id_t hostif_trap_oid;

  _sai_rpc_sai_thrift_remove_hostif_trap_args__isset __isset;

  void __set_hostif_trap_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_trap_args & rhs) const
  {
    if (!(hostif_trap_oid == rhs.hostif_trap_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hostif_trap_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_result__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_result__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_result {
 public:

  sai_rpc_sai_thrift_remove_hostif_trap_result(const sai_rpc_sai_thrift_remove_hostif_trap_result&);
  sai_rpc_sai_thrift_remove_hostif_trap_result& operator=(const sai_rpc_sai_thrift_remove_hostif_trap_result&);
  sai_rpc_sai_thrift_remove_hostif_trap_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_trap_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_trap_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_trap_presult__isset {
  _sai_rpc_sai_thrift_remove_hostif_trap_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_trap_presult__isset;

class sai_rpc_sai_thrift_remove_hostif_trap_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_trap_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset() : hostif_trap_oid(false), attr(false) {}
  bool hostif_trap_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset;

class sai_rpc_sai_thrift_set_hostif_trap_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hostif_trap_attribute_args(const sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_trap_attribute_args& operator=(const sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_trap_attribute_args() : hostif_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_trap_attribute_args() throw();
  sai_thrift_object_id_t hostif_trap_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset __isset;

  void __set_hostif_trap_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_trap_attribute_args & rhs) const
  {
    if (!(hostif_trap_oid == rhs.hostif_trap_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset;

class sai_rpc_sai_thrift_set_hostif_trap_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hostif_trap_attribute_result(const sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_trap_attribute_result& operator=(const sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_trap_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_trap_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_trap_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hostif_trap_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_trap_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset() : hostif_trap_oid(false), attr_list(false) {}
  bool hostif_trap_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset;

class sai_rpc_sai_thrift_get_hostif_trap_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hostif_trap_attribute_args(const sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_trap_attribute_args& operator=(const sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_trap_attribute_args() : hostif_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_trap_attribute_args() throw();
  sai_thrift_object_id_t hostif_trap_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset __isset;

  void __set_hostif_trap_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_trap_attribute_args & rhs) const
  {
    if (!(hostif_trap_oid == rhs.hostif_trap_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_trap_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset;

class sai_rpc_sai_thrift_get_hostif_trap_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hostif_trap_attribute_result(const sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_trap_attribute_result& operator=(const sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_trap_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_trap_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hostif_trap_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_trap_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hostif_user_defined_trap_args__isset {
  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hostif_user_defined_trap_args__isset;

class sai_rpc_sai_thrift_create_hostif_user_defined_trap_args {
 public:

  sai_rpc_sai_thrift_create_hostif_user_defined_trap_args(const sai_rpc_sai_thrift_create_hostif_user_defined_trap_args&);
  sai_rpc_sai_thrift_create_hostif_user_defined_trap_args& operator=(const sai_rpc_sai_thrift_create_hostif_user_defined_trap_args&);
  sai_rpc_sai_thrift_create_hostif_user_defined_trap_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_user_defined_trap_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hostif_user_defined_trap_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_user_defined_trap_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_user_defined_trap_result__isset {
  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_user_defined_trap_result__isset;

class sai_rpc_sai_thrift_create_hostif_user_defined_trap_result {
 public:

  sai_rpc_sai_thrift_create_hostif_user_defined_trap_result(const sai_rpc_sai_thrift_create_hostif_user_defined_trap_result&);
  sai_rpc_sai_thrift_create_hostif_user_defined_trap_result& operator=(const sai_rpc_sai_thrift_create_hostif_user_defined_trap_result&);
  sai_rpc_sai_thrift_create_hostif_user_defined_trap_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_user_defined_trap_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_user_defined_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult__isset {
  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult__isset;

class sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_user_defined_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args__isset {
  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args__isset() : hostif_user_defined_trap_oid(false) {}
  bool hostif_user_defined_trap_oid :1;
} _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args__isset;

class sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args {
 public:

  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args(const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args&);
  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args& operator=(const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args&);
  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args() : hostif_user_defined_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args() throw();
  sai_thrift_object_id_t hostif_user_defined_trap_oid;

  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args__isset __isset;

  void __set_hostif_user_defined_trap_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args & rhs) const
  {
    if (!(hostif_user_defined_trap_oid == rhs.hostif_user_defined_trap_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hostif_user_defined_trap_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_user_defined_trap_pargs() throw();
  const sai_thrift_object_id_t* hostif_user_defined_trap_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result__isset {
  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result__isset;

class sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result {
 public:

  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result(const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result&);
  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result& operator=(const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result&);
  sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_user_defined_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult__isset {
  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult__isset;

class sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_user_defined_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args__isset() : hostif_user_defined_trap_oid(false), attr(false) {}
  bool hostif_user_defined_trap_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args__isset;

class sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args(const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args& operator=(const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args() : hostif_user_defined_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args() throw();
  sai_thrift_object_id_t hostif_user_defined_trap_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args__isset __isset;

  void __set_hostif_user_defined_trap_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args & rhs) const
  {
    if (!(hostif_user_defined_trap_oid == rhs.hostif_user_defined_trap_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_user_defined_trap_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result__isset;

class sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result(const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result& operator=(const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_user_defined_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args__isset() : hostif_user_defined_trap_oid(false), attr_list(false) {}
  bool hostif_user_defined_trap_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args__isset;

class sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args(const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args& operator=(const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args() : hostif_user_defined_trap_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args() throw();
  sai_thrift_object_id_t hostif_user_defined_trap_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args__isset __isset;

  void __set_hostif_user_defined_trap_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args & rhs) const
  {
    if (!(hostif_user_defined_trap_oid == rhs.hostif_user_defined_trap_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_user_defined_trap_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result__isset;

class sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result(const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result& operator=(const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_user_defined_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hostif_args__isset {
  _sai_rpc_sai_thrift_create_hostif_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hostif_args__isset;

class sai_rpc_sai_thrift_create_hostif_args {
 public:

  sai_rpc_sai_thrift_create_hostif_args(const sai_rpc_sai_thrift_create_hostif_args&);
  sai_rpc_sai_thrift_create_hostif_args& operator=(const sai_rpc_sai_thrift_create_hostif_args&);
  sai_rpc_sai_thrift_create_hostif_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hostif_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hostif_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_result__isset {
  _sai_rpc_sai_thrift_create_hostif_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_result__isset;

class sai_rpc_sai_thrift_create_hostif_result {
 public:

  sai_rpc_sai_thrift_create_hostif_result(const sai_rpc_sai_thrift_create_hostif_result&);
  sai_rpc_sai_thrift_create_hostif_result& operator=(const sai_rpc_sai_thrift_create_hostif_result&);
  sai_rpc_sai_thrift_create_hostif_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_presult__isset {
  _sai_rpc_sai_thrift_create_hostif_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_presult__isset;

class sai_rpc_sai_thrift_create_hostif_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_args__isset {
  _sai_rpc_sai_thrift_remove_hostif_args__isset() : hostif_oid(false) {}
  bool hostif_oid :1;
} _sai_rpc_sai_thrift_remove_hostif_args__isset;

class sai_rpc_sai_thrift_remove_hostif_args {
 public:

  sai_rpc_sai_thrift_remove_hostif_args(const sai_rpc_sai_thrift_remove_hostif_args&);
  sai_rpc_sai_thrift_remove_hostif_args& operator=(const sai_rpc_sai_thrift_remove_hostif_args&);
  sai_rpc_sai_thrift_remove_hostif_args() : hostif_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_args() throw();
  sai_thrift_object_id_t hostif_oid;

  _sai_rpc_sai_thrift_remove_hostif_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hostif_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_result__isset {
  _sai_rpc_sai_thrift_remove_hostif_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_result__isset;

class sai_rpc_sai_thrift_remove_hostif_result {
 public:

  sai_rpc_sai_thrift_remove_hostif_result(const sai_rpc_sai_thrift_remove_hostif_result&);
  sai_rpc_sai_thrift_remove_hostif_result& operator=(const sai_rpc_sai_thrift_remove_hostif_result&);
  sai_rpc_sai_thrift_remove_hostif_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_presult__isset {
  _sai_rpc_sai_thrift_remove_hostif_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_presult__isset;

class sai_rpc_sai_thrift_remove_hostif_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hostif_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hostif_attribute_args__isset() : hostif_oid(false), attr(false) {}
  bool hostif_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hostif_attribute_args__isset;

class sai_rpc_sai_thrift_set_hostif_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hostif_attribute_args(const sai_rpc_sai_thrift_set_hostif_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_attribute_args& operator=(const sai_rpc_sai_thrift_set_hostif_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_attribute_args() : hostif_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_attribute_args() throw();
  sai_thrift_object_id_t hostif_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hostif_attribute_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_attribute_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hostif_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hostif_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_attribute_result__isset;

class sai_rpc_sai_thrift_set_hostif_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hostif_attribute_result(const sai_rpc_sai_thrift_set_hostif_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_attribute_result& operator=(const sai_rpc_sai_thrift_set_hostif_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hostif_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hostif_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hostif_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hostif_attribute_args__isset() : hostif_oid(false), attr_list(false) {}
  bool hostif_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hostif_attribute_args__isset;

class sai_rpc_sai_thrift_get_hostif_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hostif_attribute_args(const sai_rpc_sai_thrift_get_hostif_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_attribute_args& operator=(const sai_rpc_sai_thrift_get_hostif_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_attribute_args() : hostif_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_attribute_args() throw();
  sai_thrift_object_id_t hostif_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hostif_attribute_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_attribute_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hostif_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hostif_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_attribute_result__isset;

class sai_rpc_sai_thrift_get_hostif_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hostif_attribute_result(const sai_rpc_sai_thrift_get_hostif_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_attribute_result& operator=(const sai_rpc_sai_thrift_get_hostif_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hostif_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hostif_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_hostif_table_entry_args__isset {
  _sai_rpc_sai_thrift_create_hostif_table_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_hostif_table_entry_args__isset;

class sai_rpc_sai_thrift_create_hostif_table_entry_args {
 public:

  sai_rpc_sai_thrift_create_hostif_table_entry_args(const sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  sai_rpc_sai_thrift_create_hostif_table_entry_args& operator=(const sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  sai_rpc_sai_thrift_create_hostif_table_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_table_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_hostif_table_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_table_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_hostif_table_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_table_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_table_entry_result__isset {
  _sai_rpc_sai_thrift_create_hostif_table_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_table_entry_result__isset;

class sai_rpc_sai_thrift_create_hostif_table_entry_result {
 public:

  sai_rpc_sai_thrift_create_hostif_table_entry_result(const sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  sai_rpc_sai_thrift_create_hostif_table_entry_result& operator=(const sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  sai_rpc_sai_thrift_create_hostif_table_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_hostif_table_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_hostif_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset {
  _sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset;

class sai_rpc_sai_thrift_create_hostif_table_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_hostif_table_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset {
  _sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset() : hostif_table_entry_oid(false) {}
  bool hostif_table_entry_oid :1;
} _sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset;

class sai_rpc_sai_thrift_remove_hostif_table_entry_args {
 public:

  sai_rpc_sai_thrift_remove_hostif_table_entry_args(const sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  sai_rpc_sai_thrift_remove_hostif_table_entry_args& operator=(const sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  sai_rpc_sai_thrift_remove_hostif_table_entry_args() : hostif_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_table_entry_args() throw();
  sai_thrift_object_id_t hostif_table_entry_oid;

  _sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset __isset;

  void __set_hostif_table_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_table_entry_args & rhs) const
  {
    if (!(hostif_table_entry_oid == rhs.hostif_table_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_hostif_table_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_table_entry_pargs() throw();
  const sai_thrift_object_id_t* hostif_table_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset {
  _sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset;

class sai_rpc_sai_thrift_remove_hostif_table_entry_result {
 public:

  sai_rpc_sai_thrift_remove_hostif_table_entry_result(const sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  sai_rpc_sai_thrift_remove_hostif_table_entry_result& operator=(const sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  sai_rpc_sai_thrift_remove_hostif_table_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_hostif_table_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_hostif_table_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset;

class sai_rpc_sai_thrift_remove_hostif_table_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_hostif_table_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset() : hostif_table_entry_oid(false), attr(false) {}
  bool hostif_table_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args(const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() : hostif_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() throw();
  sai_thrift_object_id_t hostif_table_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset __isset;

  void __set_hostif_table_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(hostif_table_entry_oid == rhs.hostif_table_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_table_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result(const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset() : hostif_table_entry_oid(false), attr_list(false) {}
  bool hostif_table_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args(const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() : hostif_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() throw();
  sai_thrift_object_id_t hostif_table_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset __isset;

  void __set_hostif_table_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(hostif_table_entry_oid == rhs.hostif_table_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* hostif_table_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result(const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_recv_hostif_packet_args__isset {
  _sai_rpc_sai_thrift_recv_hostif_packet_args__isset() : hostif_oid(false), buffer_size(false), buffer(false), attr_list(false) {}
  bool hostif_oid :1;
  bool buffer_size :1;
  bool buffer :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_recv_hostif_packet_args__isset;

class sai_rpc_sai_thrift_recv_hostif_packet_args {
 public:

  sai_rpc_sai_thrift_recv_hostif_packet_args(const sai_rpc_sai_thrift_recv_hostif_packet_args&);
  sai_rpc_sai_thrift_recv_hostif_packet_args& operator=(const sai_rpc_sai_thrift_recv_hostif_packet_args&);
  sai_rpc_sai_thrift_recv_hostif_packet_args() : hostif_oid(0), buffer_size(0), buffer() {
  }

  virtual ~sai_rpc_sai_thrift_recv_hostif_packet_args() throw();
  sai_thrift_object_id_t hostif_oid;
  sai_thrift_size_t buffer_size;
  std::string buffer;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_recv_hostif_packet_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_buffer_size(const sai_thrift_size_t val);

  void __set_buffer(const std::string& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_recv_hostif_packet_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(buffer_size == rhs.buffer_size))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_recv_hostif_packet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_recv_hostif_packet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_recv_hostif_packet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_recv_hostif_packet_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const sai_thrift_size_t* buffer_size;
  const std::string* buffer;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_recv_hostif_packet_result__isset {
  _sai_rpc_sai_thrift_recv_hostif_packet_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_recv_hostif_packet_result__isset;

class sai_rpc_sai_thrift_recv_hostif_packet_result {
 public:

  sai_rpc_sai_thrift_recv_hostif_packet_result(const sai_rpc_sai_thrift_recv_hostif_packet_result&);
  sai_rpc_sai_thrift_recv_hostif_packet_result& operator=(const sai_rpc_sai_thrift_recv_hostif_packet_result&);
  sai_rpc_sai_thrift_recv_hostif_packet_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_recv_hostif_packet_result() throw();
  sai_thrift_size_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_recv_hostif_packet_result__isset __isset;

  void __set_success(const sai_thrift_size_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_recv_hostif_packet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_recv_hostif_packet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_recv_hostif_packet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_recv_hostif_packet_presult__isset {
  _sai_rpc_sai_thrift_recv_hostif_packet_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_recv_hostif_packet_presult__isset;

class sai_rpc_sai_thrift_recv_hostif_packet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_recv_hostif_packet_presult() throw();
  sai_thrift_size_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_recv_hostif_packet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_send_hostif_packet_args__isset {
  _sai_rpc_sai_thrift_send_hostif_packet_args__isset() : hostif_oid(false), buffer_size(false), buffer(false), attr_list(false) {}
  bool hostif_oid :1;
  bool buffer_size :1;
  bool buffer :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_send_hostif_packet_args__isset;

class sai_rpc_sai_thrift_send_hostif_packet_args {
 public:

  sai_rpc_sai_thrift_send_hostif_packet_args(const sai_rpc_sai_thrift_send_hostif_packet_args&);
  sai_rpc_sai_thrift_send_hostif_packet_args& operator=(const sai_rpc_sai_thrift_send_hostif_packet_args&);
  sai_rpc_sai_thrift_send_hostif_packet_args() : hostif_oid(0), buffer_size(0), buffer() {
  }

  virtual ~sai_rpc_sai_thrift_send_hostif_packet_args() throw();
  sai_thrift_object_id_t hostif_oid;
  sai_thrift_size_t buffer_size;
  std::string buffer;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_send_hostif_packet_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_buffer_size(const sai_thrift_size_t val);

  void __set_buffer(const std::string& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_send_hostif_packet_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(buffer_size == rhs.buffer_size))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_send_hostif_packet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_send_hostif_packet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_send_hostif_packet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_send_hostif_packet_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const sai_thrift_size_t* buffer_size;
  const std::string* buffer;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_send_hostif_packet_result__isset {
  _sai_rpc_sai_thrift_send_hostif_packet_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_send_hostif_packet_result__isset;

class sai_rpc_sai_thrift_send_hostif_packet_result {
 public:

  sai_rpc_sai_thrift_send_hostif_packet_result(const sai_rpc_sai_thrift_send_hostif_packet_result&);
  sai_rpc_sai_thrift_send_hostif_packet_result& operator=(const sai_rpc_sai_thrift_send_hostif_packet_result&);
  sai_rpc_sai_thrift_send_hostif_packet_result() {
  }

  virtual ~sai_rpc_sai_thrift_send_hostif_packet_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_send_hostif_packet_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_send_hostif_packet_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_send_hostif_packet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_send_hostif_packet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_send_hostif_packet_presult__isset {
  _sai_rpc_sai_thrift_send_hostif_packet_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_send_hostif_packet_presult__isset;

class sai_rpc_sai_thrift_send_hostif_packet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_send_hostif_packet_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_send_hostif_packet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_allocate_hostif_packet_args__isset {
  _sai_rpc_sai_thrift_allocate_hostif_packet_args__isset() : hostif_oid(false), buffer_size(false), attr_list(false) {}
  bool hostif_oid :1;
  bool buffer_size :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_allocate_hostif_packet_args__isset;

class sai_rpc_sai_thrift_allocate_hostif_packet_args {
 public:

  sai_rpc_sai_thrift_allocate_hostif_packet_args(const sai_rpc_sai_thrift_allocate_hostif_packet_args&);
  sai_rpc_sai_thrift_allocate_hostif_packet_args& operator=(const sai_rpc_sai_thrift_allocate_hostif_packet_args&);
  sai_rpc_sai_thrift_allocate_hostif_packet_args() : hostif_oid(0), buffer_size(0) {
  }

  virtual ~sai_rpc_sai_thrift_allocate_hostif_packet_args() throw();
  sai_thrift_object_id_t hostif_oid;
  sai_thrift_size_t buffer_size;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_allocate_hostif_packet_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_buffer_size(const sai_thrift_size_t val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_allocate_hostif_packet_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(buffer_size == rhs.buffer_size))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_allocate_hostif_packet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_allocate_hostif_packet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_allocate_hostif_packet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_allocate_hostif_packet_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const sai_thrift_size_t* buffer_size;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_allocate_hostif_packet_result__isset {
  _sai_rpc_sai_thrift_allocate_hostif_packet_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_allocate_hostif_packet_result__isset;

class sai_rpc_sai_thrift_allocate_hostif_packet_result {
 public:

  sai_rpc_sai_thrift_allocate_hostif_packet_result(const sai_rpc_sai_thrift_allocate_hostif_packet_result&);
  sai_rpc_sai_thrift_allocate_hostif_packet_result& operator=(const sai_rpc_sai_thrift_allocate_hostif_packet_result&);
  sai_rpc_sai_thrift_allocate_hostif_packet_result() : success() {
  }

  virtual ~sai_rpc_sai_thrift_allocate_hostif_packet_result() throw();
  std::string success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_allocate_hostif_packet_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_allocate_hostif_packet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_allocate_hostif_packet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_allocate_hostif_packet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_allocate_hostif_packet_presult__isset {
  _sai_rpc_sai_thrift_allocate_hostif_packet_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_allocate_hostif_packet_presult__isset;

class sai_rpc_sai_thrift_allocate_hostif_packet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_allocate_hostif_packet_presult() throw();
  std::string* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_allocate_hostif_packet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_free_hostif_packet_args__isset {
  _sai_rpc_sai_thrift_free_hostif_packet_args__isset() : hostif_oid(false), buffer(false) {}
  bool hostif_oid :1;
  bool buffer :1;
} _sai_rpc_sai_thrift_free_hostif_packet_args__isset;

class sai_rpc_sai_thrift_free_hostif_packet_args {
 public:

  sai_rpc_sai_thrift_free_hostif_packet_args(const sai_rpc_sai_thrift_free_hostif_packet_args&);
  sai_rpc_sai_thrift_free_hostif_packet_args& operator=(const sai_rpc_sai_thrift_free_hostif_packet_args&);
  sai_rpc_sai_thrift_free_hostif_packet_args() : hostif_oid(0), buffer() {
  }

  virtual ~sai_rpc_sai_thrift_free_hostif_packet_args() throw();
  sai_thrift_object_id_t hostif_oid;
  std::string buffer;

  _sai_rpc_sai_thrift_free_hostif_packet_args__isset __isset;

  void __set_hostif_oid(const sai_thrift_object_id_t val);

  void __set_buffer(const std::string& val);

  bool operator == (const sai_rpc_sai_thrift_free_hostif_packet_args & rhs) const
  {
    if (!(hostif_oid == rhs.hostif_oid))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_free_hostif_packet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_free_hostif_packet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_free_hostif_packet_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_free_hostif_packet_pargs() throw();
  const sai_thrift_object_id_t* hostif_oid;
  const std::string* buffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_free_hostif_packet_result__isset {
  _sai_rpc_sai_thrift_free_hostif_packet_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_free_hostif_packet_result__isset;

class sai_rpc_sai_thrift_free_hostif_packet_result {
 public:

  sai_rpc_sai_thrift_free_hostif_packet_result(const sai_rpc_sai_thrift_free_hostif_packet_result&);
  sai_rpc_sai_thrift_free_hostif_packet_result& operator=(const sai_rpc_sai_thrift_free_hostif_packet_result&);
  sai_rpc_sai_thrift_free_hostif_packet_result() : success() {
  }

  virtual ~sai_rpc_sai_thrift_free_hostif_packet_result() throw();
  std::string success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_free_hostif_packet_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_free_hostif_packet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_free_hostif_packet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_free_hostif_packet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_free_hostif_packet_presult__isset {
  _sai_rpc_sai_thrift_free_hostif_packet_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_free_hostif_packet_presult__isset;

class sai_rpc_sai_thrift_free_hostif_packet_presult {
 public:


  virtual ~sai_rpc_sai_thrift_free_hostif_packet_presult() throw();
  std::string* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_free_hostif_packet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_entry_args__isset {
  _sai_rpc_sai_thrift_create_ipmc_entry_args__isset() : ipmc_entry(false), attr_list(false) {}
  bool ipmc_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipmc_entry_args__isset;

class sai_rpc_sai_thrift_create_ipmc_entry_args {
 public:

  sai_rpc_sai_thrift_create_ipmc_entry_args(const sai_rpc_sai_thrift_create_ipmc_entry_args&);
  sai_rpc_sai_thrift_create_ipmc_entry_args& operator=(const sai_rpc_sai_thrift_create_ipmc_entry_args&);
  sai_rpc_sai_thrift_create_ipmc_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_entry_args() throw();
  sai_thrift_ipmc_entry_t ipmc_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipmc_entry_args__isset __isset;

  void __set_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_entry_args & rhs) const
  {
    if (!(ipmc_entry == rhs.ipmc_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipmc_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_entry_pargs() throw();
  const sai_thrift_ipmc_entry_t* ipmc_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_entry_result__isset {
  _sai_rpc_sai_thrift_create_ipmc_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_entry_result__isset;

class sai_rpc_sai_thrift_create_ipmc_entry_result {
 public:

  sai_rpc_sai_thrift_create_ipmc_entry_result(const sai_rpc_sai_thrift_create_ipmc_entry_result&);
  sai_rpc_sai_thrift_create_ipmc_entry_result& operator=(const sai_rpc_sai_thrift_create_ipmc_entry_result&);
  sai_rpc_sai_thrift_create_ipmc_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_entry_presult__isset {
  _sai_rpc_sai_thrift_create_ipmc_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_entry_presult__isset;

class sai_rpc_sai_thrift_create_ipmc_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_entry_args__isset {
  _sai_rpc_sai_thrift_remove_ipmc_entry_args__isset() : ipmc_entry(false) {}
  bool ipmc_entry :1;
} _sai_rpc_sai_thrift_remove_ipmc_entry_args__isset;

class sai_rpc_sai_thrift_remove_ipmc_entry_args {
 public:

  sai_rpc_sai_thrift_remove_ipmc_entry_args(const sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  sai_rpc_sai_thrift_remove_ipmc_entry_args& operator=(const sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  sai_rpc_sai_thrift_remove_ipmc_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_entry_args() throw();
  sai_thrift_ipmc_entry_t ipmc_entry;

  _sai_rpc_sai_thrift_remove_ipmc_entry_args__isset __isset;

  void __set_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_entry_args & rhs) const
  {
    if (!(ipmc_entry == rhs.ipmc_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipmc_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_entry_pargs() throw();
  const sai_thrift_ipmc_entry_t* ipmc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_entry_result__isset {
  _sai_rpc_sai_thrift_remove_ipmc_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_entry_result__isset;

class sai_rpc_sai_thrift_remove_ipmc_entry_result {
 public:

  sai_rpc_sai_thrift_remove_ipmc_entry_result(const sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  sai_rpc_sai_thrift_remove_ipmc_entry_result& operator=(const sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  sai_rpc_sai_thrift_remove_ipmc_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset;

class sai_rpc_sai_thrift_remove_ipmc_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset() : ipmc_entry(false), attr(false) {}
  bool ipmc_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipmc_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipmc_entry_attribute_args(const sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() throw();
  sai_thrift_ipmc_entry_t ipmc_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset __isset;

  void __set_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & rhs) const
  {
    if (!(ipmc_entry == rhs.ipmc_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs() throw();
  const sai_thrift_ipmc_entry_t* ipmc_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipmc_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipmc_entry_attribute_result(const sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset() : ipmc_entry(false), attr_list(false) {}
  bool ipmc_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipmc_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipmc_entry_attribute_args(const sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() throw();
  sai_thrift_ipmc_entry_t ipmc_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset __isset;

  void __set_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & rhs) const
  {
    if (!(ipmc_entry == rhs.ipmc_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs() throw();
  const sai_thrift_ipmc_entry_t* ipmc_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipmc_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipmc_entry_attribute_result(const sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_args__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipmc_group_args__isset;

class sai_rpc_sai_thrift_create_ipmc_group_args {
 public:

  sai_rpc_sai_thrift_create_ipmc_group_args(const sai_rpc_sai_thrift_create_ipmc_group_args&);
  sai_rpc_sai_thrift_create_ipmc_group_args& operator=(const sai_rpc_sai_thrift_create_ipmc_group_args&);
  sai_rpc_sai_thrift_create_ipmc_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipmc_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipmc_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_result__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_group_result__isset;

class sai_rpc_sai_thrift_create_ipmc_group_result {
 public:

  sai_rpc_sai_thrift_create_ipmc_group_result(const sai_rpc_sai_thrift_create_ipmc_group_result&);
  sai_rpc_sai_thrift_create_ipmc_group_result& operator=(const sai_rpc_sai_thrift_create_ipmc_group_result&);
  sai_rpc_sai_thrift_create_ipmc_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_presult__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_group_presult__isset;

class sai_rpc_sai_thrift_create_ipmc_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_args__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_args__isset() : ipmc_group_oid(false) {}
  bool ipmc_group_oid :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_args__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_args {
 public:

  sai_rpc_sai_thrift_remove_ipmc_group_args(const sai_rpc_sai_thrift_remove_ipmc_group_args&);
  sai_rpc_sai_thrift_remove_ipmc_group_args& operator=(const sai_rpc_sai_thrift_remove_ipmc_group_args&);
  sai_rpc_sai_thrift_remove_ipmc_group_args() : ipmc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_args() throw();
  sai_thrift_object_id_t ipmc_group_oid;

  _sai_rpc_sai_thrift_remove_ipmc_group_args__isset __isset;

  void __set_ipmc_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_group_args & rhs) const
  {
    if (!(ipmc_group_oid == rhs.ipmc_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipmc_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_result__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_result__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_result {
 public:

  sai_rpc_sai_thrift_remove_ipmc_group_result(const sai_rpc_sai_thrift_remove_ipmc_group_result&);
  sai_rpc_sai_thrift_remove_ipmc_group_result& operator=(const sai_rpc_sai_thrift_remove_ipmc_group_result&);
  sai_rpc_sai_thrift_remove_ipmc_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_presult__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_presult__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_attribute_args__isset() : ipmc_group_oid(false), attr(false) {}
  bool ipmc_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipmc_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipmc_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipmc_group_attribute_args(const sai_rpc_sai_thrift_set_ipmc_group_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipmc_group_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_group_attribute_args() : ipmc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_group_attribute_args() throw();
  sai_thrift_object_id_t ipmc_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipmc_group_attribute_args__isset __isset;

  void __set_ipmc_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_group_attribute_args & rhs) const
  {
    if (!(ipmc_group_oid == rhs.ipmc_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipmc_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipmc_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipmc_group_attribute_result(const sai_rpc_sai_thrift_set_ipmc_group_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipmc_group_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipmc_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset() : ipmc_group_oid(false), attr_list(false) {}
  bool ipmc_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipmc_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipmc_group_attribute_args(const sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_group_attribute_args() : ipmc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_group_attribute_args() throw();
  sai_thrift_object_id_t ipmc_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset __isset;

  void __set_ipmc_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_group_attribute_args & rhs) const
  {
    if (!(ipmc_group_oid == rhs.ipmc_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipmc_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipmc_group_attribute_result(const sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipmc_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_member_args__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipmc_group_member_args__isset;

class sai_rpc_sai_thrift_create_ipmc_group_member_args {
 public:

  sai_rpc_sai_thrift_create_ipmc_group_member_args(const sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  sai_rpc_sai_thrift_create_ipmc_group_member_args& operator=(const sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  sai_rpc_sai_thrift_create_ipmc_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipmc_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipmc_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_member_result__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_group_member_result__isset;

class sai_rpc_sai_thrift_create_ipmc_group_member_result {
 public:

  sai_rpc_sai_thrift_create_ipmc_group_member_result(const sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  sai_rpc_sai_thrift_create_ipmc_group_member_result& operator=(const sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  sai_rpc_sai_thrift_create_ipmc_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ipmc_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipmc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset;

class sai_rpc_sai_thrift_create_ipmc_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipmc_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset() : ipmc_group_member_oid(false) {}
  bool ipmc_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_ipmc_group_member_args(const sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  sai_rpc_sai_thrift_remove_ipmc_group_member_args& operator=(const sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  sai_rpc_sai_thrift_remove_ipmc_group_member_args() : ipmc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_member_args() throw();
  sai_thrift_object_id_t ipmc_group_member_oid;

  _sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset __isset;

  void __set_ipmc_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_group_member_args & rhs) const
  {
    if (!(ipmc_group_member_oid == rhs.ipmc_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipmc_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_member_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_ipmc_group_member_result(const sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  sai_rpc_sai_thrift_remove_ipmc_group_member_result& operator=(const sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  sai_rpc_sai_thrift_remove_ipmc_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipmc_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_ipmc_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipmc_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset() : ipmc_group_member_oid(false), attr(false) {}
  bool ipmc_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args(const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() : ipmc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() throw();
  sai_thrift_object_id_t ipmc_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset __isset;

  void __set_ipmc_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(ipmc_group_member_oid == rhs.ipmc_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result(const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset() : ipmc_group_member_oid(false), attr_list(false) {}
  bool ipmc_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args(const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() : ipmc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() throw();
  sai_thrift_object_id_t ipmc_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset __isset;

  void __set_ipmc_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(ipmc_group_member_oid == rhs.ipmc_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipmc_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result(const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_args__isset {
  _sai_rpc_sai_thrift_create_ipsec_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipsec_args__isset;

class sai_rpc_sai_thrift_create_ipsec_args {
 public:

  sai_rpc_sai_thrift_create_ipsec_args(const sai_rpc_sai_thrift_create_ipsec_args&);
  sai_rpc_sai_thrift_create_ipsec_args& operator=(const sai_rpc_sai_thrift_create_ipsec_args&);
  sai_rpc_sai_thrift_create_ipsec_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipsec_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipsec_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_result__isset {
  _sai_rpc_sai_thrift_create_ipsec_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_result__isset;

class sai_rpc_sai_thrift_create_ipsec_result {
 public:

  sai_rpc_sai_thrift_create_ipsec_result(const sai_rpc_sai_thrift_create_ipsec_result&);
  sai_rpc_sai_thrift_create_ipsec_result& operator=(const sai_rpc_sai_thrift_create_ipsec_result&);
  sai_rpc_sai_thrift_create_ipsec_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_presult__isset {
  _sai_rpc_sai_thrift_create_ipsec_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_presult__isset;

class sai_rpc_sai_thrift_create_ipsec_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_args__isset {
  _sai_rpc_sai_thrift_remove_ipsec_args__isset() : ipsec_oid(false) {}
  bool ipsec_oid :1;
} _sai_rpc_sai_thrift_remove_ipsec_args__isset;

class sai_rpc_sai_thrift_remove_ipsec_args {
 public:

  sai_rpc_sai_thrift_remove_ipsec_args(const sai_rpc_sai_thrift_remove_ipsec_args&);
  sai_rpc_sai_thrift_remove_ipsec_args& operator=(const sai_rpc_sai_thrift_remove_ipsec_args&);
  sai_rpc_sai_thrift_remove_ipsec_args() : ipsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_args() throw();
  sai_thrift_object_id_t ipsec_oid;

  _sai_rpc_sai_thrift_remove_ipsec_args__isset __isset;

  void __set_ipsec_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_args & rhs) const
  {
    if (!(ipsec_oid == rhs.ipsec_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipsec_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_pargs() throw();
  const sai_thrift_object_id_t* ipsec_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_result__isset {
  _sai_rpc_sai_thrift_remove_ipsec_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_result__isset;

class sai_rpc_sai_thrift_remove_ipsec_result {
 public:

  sai_rpc_sai_thrift_remove_ipsec_result(const sai_rpc_sai_thrift_remove_ipsec_result&);
  sai_rpc_sai_thrift_remove_ipsec_result& operator=(const sai_rpc_sai_thrift_remove_ipsec_result&);
  sai_rpc_sai_thrift_remove_ipsec_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_presult__isset {
  _sai_rpc_sai_thrift_remove_ipsec_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_presult__isset;

class sai_rpc_sai_thrift_remove_ipsec_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipsec_attribute_args__isset() : ipsec_oid(false), attr(false) {}
  bool ipsec_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipsec_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipsec_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipsec_attribute_args(const sai_rpc_sai_thrift_set_ipsec_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipsec_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_attribute_args() : ipsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_attribute_args() throw();
  sai_thrift_object_id_t ipsec_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipsec_attribute_args__isset __isset;

  void __set_ipsec_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_attribute_args & rhs) const
  {
    if (!(ipsec_oid == rhs.ipsec_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipsec_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipsec_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipsec_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipsec_attribute_result(const sai_rpc_sai_thrift_set_ipsec_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipsec_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipsec_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipsec_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_attribute_args__isset() : ipsec_oid(false), attr_list(false) {}
  bool ipsec_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipsec_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipsec_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_attribute_args(const sai_rpc_sai_thrift_get_ipsec_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipsec_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_attribute_args() : ipsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_attribute_args() throw();
  sai_thrift_object_id_t ipsec_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipsec_attribute_args__isset __isset;

  void __set_ipsec_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_attribute_args & rhs) const
  {
    if (!(ipsec_oid == rhs.ipsec_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipsec_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_attribute_result(const sai_rpc_sai_thrift_get_ipsec_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipsec_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_port_args__isset {
  _sai_rpc_sai_thrift_create_ipsec_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipsec_port_args__isset;

class sai_rpc_sai_thrift_create_ipsec_port_args {
 public:

  sai_rpc_sai_thrift_create_ipsec_port_args(const sai_rpc_sai_thrift_create_ipsec_port_args&);
  sai_rpc_sai_thrift_create_ipsec_port_args& operator=(const sai_rpc_sai_thrift_create_ipsec_port_args&);
  sai_rpc_sai_thrift_create_ipsec_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipsec_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipsec_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_port_result__isset {
  _sai_rpc_sai_thrift_create_ipsec_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_port_result__isset;

class sai_rpc_sai_thrift_create_ipsec_port_result {
 public:

  sai_rpc_sai_thrift_create_ipsec_port_result(const sai_rpc_sai_thrift_create_ipsec_port_result&);
  sai_rpc_sai_thrift_create_ipsec_port_result& operator=(const sai_rpc_sai_thrift_create_ipsec_port_result&);
  sai_rpc_sai_thrift_create_ipsec_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_port_presult__isset {
  _sai_rpc_sai_thrift_create_ipsec_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_port_presult__isset;

class sai_rpc_sai_thrift_create_ipsec_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_port_args__isset {
  _sai_rpc_sai_thrift_remove_ipsec_port_args__isset() : ipsec_port_oid(false) {}
  bool ipsec_port_oid :1;
} _sai_rpc_sai_thrift_remove_ipsec_port_args__isset;

class sai_rpc_sai_thrift_remove_ipsec_port_args {
 public:

  sai_rpc_sai_thrift_remove_ipsec_port_args(const sai_rpc_sai_thrift_remove_ipsec_port_args&);
  sai_rpc_sai_thrift_remove_ipsec_port_args& operator=(const sai_rpc_sai_thrift_remove_ipsec_port_args&);
  sai_rpc_sai_thrift_remove_ipsec_port_args() : ipsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_port_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;

  _sai_rpc_sai_thrift_remove_ipsec_port_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_port_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipsec_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_port_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_port_result__isset {
  _sai_rpc_sai_thrift_remove_ipsec_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_port_result__isset;

class sai_rpc_sai_thrift_remove_ipsec_port_result {
 public:

  sai_rpc_sai_thrift_remove_ipsec_port_result(const sai_rpc_sai_thrift_remove_ipsec_port_result&);
  sai_rpc_sai_thrift_remove_ipsec_port_result& operator=(const sai_rpc_sai_thrift_remove_ipsec_port_result&);
  sai_rpc_sai_thrift_remove_ipsec_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_port_presult__isset {
  _sai_rpc_sai_thrift_remove_ipsec_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_port_presult__isset;

class sai_rpc_sai_thrift_remove_ipsec_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipsec_port_attribute_args__isset() : ipsec_port_oid(false), attr(false) {}
  bool ipsec_port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipsec_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipsec_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipsec_port_attribute_args(const sai_rpc_sai_thrift_set_ipsec_port_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipsec_port_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_port_attribute_args() : ipsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_port_attribute_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipsec_port_attribute_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_port_attribute_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipsec_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipsec_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipsec_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipsec_port_attribute_result(const sai_rpc_sai_thrift_set_ipsec_port_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipsec_port_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipsec_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipsec_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_attribute_args__isset() : ipsec_port_oid(false), attr_list(false) {}
  bool ipsec_port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipsec_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipsec_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_attribute_args(const sai_rpc_sai_thrift_get_ipsec_port_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipsec_port_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_port_attribute_args() : ipsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_attribute_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipsec_port_attribute_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_attribute_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipsec_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_attribute_result(const sai_rpc_sai_thrift_get_ipsec_port_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipsec_port_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_args__isset() : ipsec_port_oid(false), counter_ids(false) {}
  bool ipsec_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_args__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_stats_args(const sai_rpc_sai_thrift_get_ipsec_port_stats_args&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_args& operator=(const sai_rpc_sai_thrift_get_ipsec_port_stats_args&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_args() : ipsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_stats_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_result__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_stats_result(const sai_rpc_sai_thrift_get_ipsec_port_stats_result&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_result& operator=(const sai_rpc_sai_thrift_get_ipsec_port_stats_result&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args__isset() : ipsec_port_oid(false), counter_ids(false), mode(false) {}
  bool ipsec_port_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args(const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args() : ipsec_port_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_port_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result(const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_port_stats_args__isset {
  _sai_rpc_sai_thrift_clear_ipsec_port_stats_args__isset() : ipsec_port_oid(false), counter_ids(false) {}
  bool ipsec_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_ipsec_port_stats_args__isset;

class sai_rpc_sai_thrift_clear_ipsec_port_stats_args {
 public:

  sai_rpc_sai_thrift_clear_ipsec_port_stats_args(const sai_rpc_sai_thrift_clear_ipsec_port_stats_args&);
  sai_rpc_sai_thrift_clear_ipsec_port_stats_args& operator=(const sai_rpc_sai_thrift_clear_ipsec_port_stats_args&);
  sai_rpc_sai_thrift_clear_ipsec_port_stats_args() : ipsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_ipsec_port_stats_args() throw();
  sai_thrift_object_id_t ipsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_ipsec_port_stats_args__isset __isset;

  void __set_ipsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_ipsec_port_stats_args & rhs) const
  {
    if (!(ipsec_port_oid == rhs.ipsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ipsec_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ipsec_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_ipsec_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ipsec_port_stats_pargs() throw();
  const sai_thrift_object_id_t* ipsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_port_stats_result__isset {
  _sai_rpc_sai_thrift_clear_ipsec_port_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ipsec_port_stats_result__isset;

class sai_rpc_sai_thrift_clear_ipsec_port_stats_result {
 public:

  sai_rpc_sai_thrift_clear_ipsec_port_stats_result(const sai_rpc_sai_thrift_clear_ipsec_port_stats_result&);
  sai_rpc_sai_thrift_clear_ipsec_port_stats_result& operator=(const sai_rpc_sai_thrift_clear_ipsec_port_stats_result&);
  sai_rpc_sai_thrift_clear_ipsec_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_ipsec_port_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ipsec_port_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_ipsec_port_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ipsec_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ipsec_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_port_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_ipsec_port_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ipsec_port_stats_presult__isset;

class sai_rpc_sai_thrift_clear_ipsec_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ipsec_port_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ipsec_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_sa_args__isset {
  _sai_rpc_sai_thrift_create_ipsec_sa_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_ipsec_sa_args__isset;

class sai_rpc_sai_thrift_create_ipsec_sa_args {
 public:

  sai_rpc_sai_thrift_create_ipsec_sa_args(const sai_rpc_sai_thrift_create_ipsec_sa_args&);
  sai_rpc_sai_thrift_create_ipsec_sa_args& operator=(const sai_rpc_sai_thrift_create_ipsec_sa_args&);
  sai_rpc_sai_thrift_create_ipsec_sa_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_sa_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_ipsec_sa_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_sa_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_sa_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_sa_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_ipsec_sa_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_sa_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_sa_result__isset {
  _sai_rpc_sai_thrift_create_ipsec_sa_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_sa_result__isset;

class sai_rpc_sai_thrift_create_ipsec_sa_result {
 public:

  sai_rpc_sai_thrift_create_ipsec_sa_result(const sai_rpc_sai_thrift_create_ipsec_sa_result&);
  sai_rpc_sai_thrift_create_ipsec_sa_result& operator=(const sai_rpc_sai_thrift_create_ipsec_sa_result&);
  sai_rpc_sai_thrift_create_ipsec_sa_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_ipsec_sa_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_sa_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_ipsec_sa_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_ipsec_sa_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_ipsec_sa_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_ipsec_sa_presult__isset {
  _sai_rpc_sai_thrift_create_ipsec_sa_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_ipsec_sa_presult__isset;

class sai_rpc_sai_thrift_create_ipsec_sa_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_ipsec_sa_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_ipsec_sa_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_sa_args__isset {
  _sai_rpc_sai_thrift_remove_ipsec_sa_args__isset() : ipsec_sa_oid(false) {}
  bool ipsec_sa_oid :1;
} _sai_rpc_sai_thrift_remove_ipsec_sa_args__isset;

class sai_rpc_sai_thrift_remove_ipsec_sa_args {
 public:

  sai_rpc_sai_thrift_remove_ipsec_sa_args(const sai_rpc_sai_thrift_remove_ipsec_sa_args&);
  sai_rpc_sai_thrift_remove_ipsec_sa_args& operator=(const sai_rpc_sai_thrift_remove_ipsec_sa_args&);
  sai_rpc_sai_thrift_remove_ipsec_sa_args() : ipsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_sa_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;

  _sai_rpc_sai_thrift_remove_ipsec_sa_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_sa_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_sa_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_sa_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_ipsec_sa_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_sa_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_sa_result__isset {
  _sai_rpc_sai_thrift_remove_ipsec_sa_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_sa_result__isset;

class sai_rpc_sai_thrift_remove_ipsec_sa_result {
 public:

  sai_rpc_sai_thrift_remove_ipsec_sa_result(const sai_rpc_sai_thrift_remove_ipsec_sa_result&);
  sai_rpc_sai_thrift_remove_ipsec_sa_result& operator=(const sai_rpc_sai_thrift_remove_ipsec_sa_result&);
  sai_rpc_sai_thrift_remove_ipsec_sa_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_ipsec_sa_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_sa_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_ipsec_sa_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_ipsec_sa_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_ipsec_sa_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_ipsec_sa_presult__isset {
  _sai_rpc_sai_thrift_remove_ipsec_sa_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_ipsec_sa_presult__isset;

class sai_rpc_sai_thrift_remove_ipsec_sa_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_ipsec_sa_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_ipsec_sa_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_sa_attribute_args__isset {
  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_args__isset() : ipsec_sa_oid(false), attr(false) {}
  bool ipsec_sa_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_ipsec_sa_attribute_args__isset;

class sai_rpc_sai_thrift_set_ipsec_sa_attribute_args {
 public:

  sai_rpc_sai_thrift_set_ipsec_sa_attribute_args(const sai_rpc_sai_thrift_set_ipsec_sa_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_sa_attribute_args& operator=(const sai_rpc_sai_thrift_set_ipsec_sa_attribute_args&);
  sai_rpc_sai_thrift_set_ipsec_sa_attribute_args() : ipsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_sa_attribute_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_ipsec_sa_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_sa_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_sa_attribute_result__isset {
  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_sa_attribute_result__isset;

class sai_rpc_sai_thrift_set_ipsec_sa_attribute_result {
 public:

  sai_rpc_sai_thrift_set_ipsec_sa_attribute_result(const sai_rpc_sai_thrift_set_ipsec_sa_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_sa_attribute_result& operator=(const sai_rpc_sai_thrift_set_ipsec_sa_attribute_result&);
  sai_rpc_sai_thrift_set_ipsec_sa_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_ipsec_sa_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_ipsec_sa_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult__isset;

class sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_ipsec_sa_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_attribute_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_args__isset() : ipsec_sa_oid(false), attr_list(false) {}
  bool ipsec_sa_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_attribute_args__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_attribute_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_attribute_args(const sai_rpc_sai_thrift_get_ipsec_sa_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_attribute_args& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_attribute_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_attribute_args() : ipsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_attribute_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_sa_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_attribute_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_attribute_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_attribute_result__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_attribute_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_attribute_result(const sai_rpc_sai_thrift_get_ipsec_sa_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_attribute_result& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_attribute_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_args__isset() : ipsec_sa_oid(false), counter_ids(false) {}
  bool ipsec_sa_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_args__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_stats_args(const sai_rpc_sai_thrift_get_ipsec_sa_stats_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_args& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_stats_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_args() : ipsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_stats_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_sa_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_result__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_stats_result(const sai_rpc_sai_thrift_get_ipsec_sa_stats_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_result& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_stats_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args__isset() : ipsec_sa_oid(false), counter_ids(false), mode(false) {}
  bool ipsec_sa_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args(const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args() : ipsec_sa_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result(const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result&);
  sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_ipsec_sa_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_sa_stats_args__isset {
  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_args__isset() : ipsec_sa_oid(false), counter_ids(false) {}
  bool ipsec_sa_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_ipsec_sa_stats_args__isset;

class sai_rpc_sai_thrift_clear_ipsec_sa_stats_args {
 public:

  sai_rpc_sai_thrift_clear_ipsec_sa_stats_args(const sai_rpc_sai_thrift_clear_ipsec_sa_stats_args&);
  sai_rpc_sai_thrift_clear_ipsec_sa_stats_args& operator=(const sai_rpc_sai_thrift_clear_ipsec_sa_stats_args&);
  sai_rpc_sai_thrift_clear_ipsec_sa_stats_args() : ipsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_ipsec_sa_stats_args() throw();
  sai_thrift_object_id_t ipsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_args__isset __isset;

  void __set_ipsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_args & rhs) const
  {
    if (!(ipsec_sa_oid == rhs.ipsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_ipsec_sa_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ipsec_sa_stats_pargs() throw();
  const sai_thrift_object_id_t* ipsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_sa_stats_result__isset {
  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ipsec_sa_stats_result__isset;

class sai_rpc_sai_thrift_clear_ipsec_sa_stats_result {
 public:

  sai_rpc_sai_thrift_clear_ipsec_sa_stats_result(const sai_rpc_sai_thrift_clear_ipsec_sa_stats_result&);
  sai_rpc_sai_thrift_clear_ipsec_sa_stats_result& operator=(const sai_rpc_sai_thrift_clear_ipsec_sa_stats_result&);
  sai_rpc_sai_thrift_clear_ipsec_sa_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_ipsec_sa_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_ipsec_sa_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult__isset;

class sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_ipsec_sa_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_args__isset {
  _sai_rpc_sai_thrift_create_isolation_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_isolation_group_args__isset;

class sai_rpc_sai_thrift_create_isolation_group_args {
 public:

  sai_rpc_sai_thrift_create_isolation_group_args(const sai_rpc_sai_thrift_create_isolation_group_args&);
  sai_rpc_sai_thrift_create_isolation_group_args& operator=(const sai_rpc_sai_thrift_create_isolation_group_args&);
  sai_rpc_sai_thrift_create_isolation_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_isolation_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_isolation_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_isolation_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_isolation_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_isolation_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_isolation_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_isolation_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_result__isset {
  _sai_rpc_sai_thrift_create_isolation_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_isolation_group_result__isset;

class sai_rpc_sai_thrift_create_isolation_group_result {
 public:

  sai_rpc_sai_thrift_create_isolation_group_result(const sai_rpc_sai_thrift_create_isolation_group_result&);
  sai_rpc_sai_thrift_create_isolation_group_result& operator=(const sai_rpc_sai_thrift_create_isolation_group_result&);
  sai_rpc_sai_thrift_create_isolation_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_isolation_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_isolation_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_isolation_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_isolation_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_isolation_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_presult__isset {
  _sai_rpc_sai_thrift_create_isolation_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_isolation_group_presult__isset;

class sai_rpc_sai_thrift_create_isolation_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_isolation_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_isolation_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_args__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_args__isset() : isolation_group_oid(false) {}
  bool isolation_group_oid :1;
} _sai_rpc_sai_thrift_remove_isolation_group_args__isset;

class sai_rpc_sai_thrift_remove_isolation_group_args {
 public:

  sai_rpc_sai_thrift_remove_isolation_group_args(const sai_rpc_sai_thrift_remove_isolation_group_args&);
  sai_rpc_sai_thrift_remove_isolation_group_args& operator=(const sai_rpc_sai_thrift_remove_isolation_group_args&);
  sai_rpc_sai_thrift_remove_isolation_group_args() : isolation_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_isolation_group_args() throw();
  sai_thrift_object_id_t isolation_group_oid;

  _sai_rpc_sai_thrift_remove_isolation_group_args__isset __isset;

  void __set_isolation_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_isolation_group_args & rhs) const
  {
    if (!(isolation_group_oid == rhs.isolation_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_isolation_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_isolation_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_isolation_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_isolation_group_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_result__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_isolation_group_result__isset;

class sai_rpc_sai_thrift_remove_isolation_group_result {
 public:

  sai_rpc_sai_thrift_remove_isolation_group_result(const sai_rpc_sai_thrift_remove_isolation_group_result&);
  sai_rpc_sai_thrift_remove_isolation_group_result& operator=(const sai_rpc_sai_thrift_remove_isolation_group_result&);
  sai_rpc_sai_thrift_remove_isolation_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_isolation_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_isolation_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_isolation_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_isolation_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_isolation_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_presult__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_isolation_group_presult__isset;

class sai_rpc_sai_thrift_remove_isolation_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_isolation_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_isolation_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_isolation_group_attribute_args__isset() : isolation_group_oid(false), attr(false) {}
  bool isolation_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_isolation_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_isolation_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_isolation_group_attribute_args(const sai_rpc_sai_thrift_set_isolation_group_attribute_args&);
  sai_rpc_sai_thrift_set_isolation_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_isolation_group_attribute_args&);
  sai_rpc_sai_thrift_set_isolation_group_attribute_args() : isolation_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_isolation_group_attribute_args() throw();
  sai_thrift_object_id_t isolation_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_isolation_group_attribute_args__isset __isset;

  void __set_isolation_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_isolation_group_attribute_args & rhs) const
  {
    if (!(isolation_group_oid == rhs.isolation_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_isolation_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_isolation_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_isolation_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_isolation_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_isolation_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_isolation_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_isolation_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_isolation_group_attribute_result(const sai_rpc_sai_thrift_set_isolation_group_attribute_result&);
  sai_rpc_sai_thrift_set_isolation_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_isolation_group_attribute_result&);
  sai_rpc_sai_thrift_set_isolation_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_isolation_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_isolation_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_isolation_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_isolation_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_isolation_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_isolation_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_isolation_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_isolation_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_isolation_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_isolation_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_isolation_group_attribute_args__isset() : isolation_group_oid(false), attr_list(false) {}
  bool isolation_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_isolation_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_isolation_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_isolation_group_attribute_args(const sai_rpc_sai_thrift_get_isolation_group_attribute_args&);
  sai_rpc_sai_thrift_get_isolation_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_isolation_group_attribute_args&);
  sai_rpc_sai_thrift_get_isolation_group_attribute_args() : isolation_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_isolation_group_attribute_args() throw();
  sai_thrift_object_id_t isolation_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_isolation_group_attribute_args__isset __isset;

  void __set_isolation_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_isolation_group_attribute_args & rhs) const
  {
    if (!(isolation_group_oid == rhs.isolation_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_isolation_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_isolation_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_isolation_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_isolation_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_isolation_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_isolation_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_isolation_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_isolation_group_attribute_result(const sai_rpc_sai_thrift_get_isolation_group_attribute_result&);
  sai_rpc_sai_thrift_get_isolation_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_isolation_group_attribute_result&);
  sai_rpc_sai_thrift_get_isolation_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_isolation_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_isolation_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_isolation_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_isolation_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_isolation_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_isolation_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_isolation_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_isolation_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_isolation_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_isolation_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_member_args__isset {
  _sai_rpc_sai_thrift_create_isolation_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_isolation_group_member_args__isset;

class sai_rpc_sai_thrift_create_isolation_group_member_args {
 public:

  sai_rpc_sai_thrift_create_isolation_group_member_args(const sai_rpc_sai_thrift_create_isolation_group_member_args&);
  sai_rpc_sai_thrift_create_isolation_group_member_args& operator=(const sai_rpc_sai_thrift_create_isolation_group_member_args&);
  sai_rpc_sai_thrift_create_isolation_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_isolation_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_isolation_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_isolation_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_isolation_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_isolation_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_isolation_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_isolation_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_member_result__isset {
  _sai_rpc_sai_thrift_create_isolation_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_isolation_group_member_result__isset;

class sai_rpc_sai_thrift_create_isolation_group_member_result {
 public:

  sai_rpc_sai_thrift_create_isolation_group_member_result(const sai_rpc_sai_thrift_create_isolation_group_member_result&);
  sai_rpc_sai_thrift_create_isolation_group_member_result& operator=(const sai_rpc_sai_thrift_create_isolation_group_member_result&);
  sai_rpc_sai_thrift_create_isolation_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_isolation_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_isolation_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_isolation_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_isolation_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_isolation_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_isolation_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_isolation_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_isolation_group_member_presult__isset;

class sai_rpc_sai_thrift_create_isolation_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_isolation_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_isolation_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_member_args__isset() : isolation_group_member_oid(false) {}
  bool isolation_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_isolation_group_member_args__isset;

class sai_rpc_sai_thrift_remove_isolation_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_isolation_group_member_args(const sai_rpc_sai_thrift_remove_isolation_group_member_args&);
  sai_rpc_sai_thrift_remove_isolation_group_member_args& operator=(const sai_rpc_sai_thrift_remove_isolation_group_member_args&);
  sai_rpc_sai_thrift_remove_isolation_group_member_args() : isolation_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_isolation_group_member_args() throw();
  sai_thrift_object_id_t isolation_group_member_oid;

  _sai_rpc_sai_thrift_remove_isolation_group_member_args__isset __isset;

  void __set_isolation_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_isolation_group_member_args & rhs) const
  {
    if (!(isolation_group_member_oid == rhs.isolation_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_isolation_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_isolation_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_isolation_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_isolation_group_member_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_isolation_group_member_result__isset;

class sai_rpc_sai_thrift_remove_isolation_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_isolation_group_member_result(const sai_rpc_sai_thrift_remove_isolation_group_member_result&);
  sai_rpc_sai_thrift_remove_isolation_group_member_result& operator=(const sai_rpc_sai_thrift_remove_isolation_group_member_result&);
  sai_rpc_sai_thrift_remove_isolation_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_isolation_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_isolation_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_isolation_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_isolation_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_isolation_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_isolation_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_isolation_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_isolation_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_args__isset() : isolation_group_member_oid(false), attr(false) {}
  bool isolation_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_isolation_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_isolation_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_isolation_group_member_attribute_args(const sai_rpc_sai_thrift_set_isolation_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_isolation_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_isolation_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_isolation_group_member_attribute_args() : isolation_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_isolation_group_member_attribute_args() throw();
  sai_thrift_object_id_t isolation_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_args__isset __isset;

  void __set_isolation_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_args & rhs) const
  {
    if (!(isolation_group_member_oid == rhs.isolation_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_isolation_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_isolation_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_isolation_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_isolation_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_isolation_group_member_attribute_result(const sai_rpc_sai_thrift_set_isolation_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_isolation_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_isolation_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_isolation_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_isolation_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_isolation_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_isolation_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_args__isset() : isolation_group_member_oid(false), attr_list(false) {}
  bool isolation_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_isolation_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_isolation_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_isolation_group_member_attribute_args(const sai_rpc_sai_thrift_get_isolation_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_isolation_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_isolation_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_isolation_group_member_attribute_args() : isolation_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_isolation_group_member_attribute_args() throw();
  sai_thrift_object_id_t isolation_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_args__isset __isset;

  void __set_isolation_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_args & rhs) const
  {
    if (!(isolation_group_member_oid == rhs.isolation_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_isolation_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_isolation_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* isolation_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_isolation_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_isolation_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_isolation_group_member_attribute_result(const sai_rpc_sai_thrift_get_isolation_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_isolation_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_isolation_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_isolation_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_isolation_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_isolation_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_isolation_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_entry_args__isset {
  _sai_rpc_sai_thrift_create_l2mc_entry_args__isset() : l2mc_entry(false), attr_list(false) {}
  bool l2mc_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_l2mc_entry_args__isset;

class sai_rpc_sai_thrift_create_l2mc_entry_args {
 public:

  sai_rpc_sai_thrift_create_l2mc_entry_args(const sai_rpc_sai_thrift_create_l2mc_entry_args&);
  sai_rpc_sai_thrift_create_l2mc_entry_args& operator=(const sai_rpc_sai_thrift_create_l2mc_entry_args&);
  sai_rpc_sai_thrift_create_l2mc_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_entry_args() throw();
  sai_thrift_l2mc_entry_t l2mc_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_l2mc_entry_args__isset __isset;

  void __set_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_entry_args & rhs) const
  {
    if (!(l2mc_entry == rhs.l2mc_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_l2mc_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_entry_pargs() throw();
  const sai_thrift_l2mc_entry_t* l2mc_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_entry_result__isset {
  _sai_rpc_sai_thrift_create_l2mc_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_entry_result__isset;

class sai_rpc_sai_thrift_create_l2mc_entry_result {
 public:

  sai_rpc_sai_thrift_create_l2mc_entry_result(const sai_rpc_sai_thrift_create_l2mc_entry_result&);
  sai_rpc_sai_thrift_create_l2mc_entry_result& operator=(const sai_rpc_sai_thrift_create_l2mc_entry_result&);
  sai_rpc_sai_thrift_create_l2mc_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_entry_presult__isset {
  _sai_rpc_sai_thrift_create_l2mc_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_entry_presult__isset;

class sai_rpc_sai_thrift_create_l2mc_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_entry_args__isset {
  _sai_rpc_sai_thrift_remove_l2mc_entry_args__isset() : l2mc_entry(false) {}
  bool l2mc_entry :1;
} _sai_rpc_sai_thrift_remove_l2mc_entry_args__isset;

class sai_rpc_sai_thrift_remove_l2mc_entry_args {
 public:

  sai_rpc_sai_thrift_remove_l2mc_entry_args(const sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  sai_rpc_sai_thrift_remove_l2mc_entry_args& operator=(const sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  sai_rpc_sai_thrift_remove_l2mc_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_entry_args() throw();
  sai_thrift_l2mc_entry_t l2mc_entry;

  _sai_rpc_sai_thrift_remove_l2mc_entry_args__isset __isset;

  void __set_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_entry_args & rhs) const
  {
    if (!(l2mc_entry == rhs.l2mc_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_l2mc_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_entry_pargs() throw();
  const sai_thrift_l2mc_entry_t* l2mc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_entry_result__isset {
  _sai_rpc_sai_thrift_remove_l2mc_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_entry_result__isset;

class sai_rpc_sai_thrift_remove_l2mc_entry_result {
 public:

  sai_rpc_sai_thrift_remove_l2mc_entry_result(const sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  sai_rpc_sai_thrift_remove_l2mc_entry_result& operator=(const sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  sai_rpc_sai_thrift_remove_l2mc_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset;

class sai_rpc_sai_thrift_remove_l2mc_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset() : l2mc_entry(false), attr(false) {}
  bool l2mc_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_l2mc_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_l2mc_entry_attribute_args(const sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() throw();
  sai_thrift_l2mc_entry_t l2mc_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset __isset;

  void __set_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & rhs) const
  {
    if (!(l2mc_entry == rhs.l2mc_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs() throw();
  const sai_thrift_l2mc_entry_t* l2mc_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_l2mc_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_l2mc_entry_attribute_result(const sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset() : l2mc_entry(false), attr_list(false) {}
  bool l2mc_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_l2mc_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_l2mc_entry_attribute_args(const sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() throw();
  sai_thrift_l2mc_entry_t l2mc_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset __isset;

  void __set_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & rhs) const
  {
    if (!(l2mc_entry == rhs.l2mc_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs() throw();
  const sai_thrift_l2mc_entry_t* l2mc_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_l2mc_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_l2mc_entry_attribute_result(const sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_args__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_l2mc_group_args__isset;

class sai_rpc_sai_thrift_create_l2mc_group_args {
 public:

  sai_rpc_sai_thrift_create_l2mc_group_args(const sai_rpc_sai_thrift_create_l2mc_group_args&);
  sai_rpc_sai_thrift_create_l2mc_group_args& operator=(const sai_rpc_sai_thrift_create_l2mc_group_args&);
  sai_rpc_sai_thrift_create_l2mc_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_l2mc_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_l2mc_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_result__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_group_result__isset;

class sai_rpc_sai_thrift_create_l2mc_group_result {
 public:

  sai_rpc_sai_thrift_create_l2mc_group_result(const sai_rpc_sai_thrift_create_l2mc_group_result&);
  sai_rpc_sai_thrift_create_l2mc_group_result& operator=(const sai_rpc_sai_thrift_create_l2mc_group_result&);
  sai_rpc_sai_thrift_create_l2mc_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_presult__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_group_presult__isset;

class sai_rpc_sai_thrift_create_l2mc_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_args__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_args__isset() : l2mc_group_oid(false) {}
  bool l2mc_group_oid :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_args__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_args {
 public:

  sai_rpc_sai_thrift_remove_l2mc_group_args(const sai_rpc_sai_thrift_remove_l2mc_group_args&);
  sai_rpc_sai_thrift_remove_l2mc_group_args& operator=(const sai_rpc_sai_thrift_remove_l2mc_group_args&);
  sai_rpc_sai_thrift_remove_l2mc_group_args() : l2mc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_args() throw();
  sai_thrift_object_id_t l2mc_group_oid;

  _sai_rpc_sai_thrift_remove_l2mc_group_args__isset __isset;

  void __set_l2mc_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_group_args & rhs) const
  {
    if (!(l2mc_group_oid == rhs.l2mc_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_l2mc_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_result__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_result__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_result {
 public:

  sai_rpc_sai_thrift_remove_l2mc_group_result(const sai_rpc_sai_thrift_remove_l2mc_group_result&);
  sai_rpc_sai_thrift_remove_l2mc_group_result& operator=(const sai_rpc_sai_thrift_remove_l2mc_group_result&);
  sai_rpc_sai_thrift_remove_l2mc_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_presult__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_presult__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_attribute_args__isset() : l2mc_group_oid(false), attr(false) {}
  bool l2mc_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_l2mc_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_l2mc_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_l2mc_group_attribute_args(const sai_rpc_sai_thrift_set_l2mc_group_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_l2mc_group_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_group_attribute_args() : l2mc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_group_attribute_args() throw();
  sai_thrift_object_id_t l2mc_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_l2mc_group_attribute_args__isset __isset;

  void __set_l2mc_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_group_attribute_args & rhs) const
  {
    if (!(l2mc_group_oid == rhs.l2mc_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_l2mc_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_l2mc_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_l2mc_group_attribute_result(const sai_rpc_sai_thrift_set_l2mc_group_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_l2mc_group_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_l2mc_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset() : l2mc_group_oid(false), attr_list(false) {}
  bool l2mc_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_l2mc_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_l2mc_group_attribute_args(const sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_group_attribute_args() : l2mc_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_group_attribute_args() throw();
  sai_thrift_object_id_t l2mc_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset __isset;

  void __set_l2mc_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_group_attribute_args & rhs) const
  {
    if (!(l2mc_group_oid == rhs.l2mc_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_l2mc_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_l2mc_group_attribute_result(const sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_l2mc_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_member_args__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_l2mc_group_member_args__isset;

class sai_rpc_sai_thrift_create_l2mc_group_member_args {
 public:

  sai_rpc_sai_thrift_create_l2mc_group_member_args(const sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  sai_rpc_sai_thrift_create_l2mc_group_member_args& operator=(const sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  sai_rpc_sai_thrift_create_l2mc_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_l2mc_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_l2mc_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_member_result__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_group_member_result__isset;

class sai_rpc_sai_thrift_create_l2mc_group_member_result {
 public:

  sai_rpc_sai_thrift_create_l2mc_group_member_result(const sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  sai_rpc_sai_thrift_create_l2mc_group_member_result& operator=(const sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  sai_rpc_sai_thrift_create_l2mc_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_l2mc_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_l2mc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset;

class sai_rpc_sai_thrift_create_l2mc_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_l2mc_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset() : l2mc_group_member_oid(false) {}
  bool l2mc_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_l2mc_group_member_args(const sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  sai_rpc_sai_thrift_remove_l2mc_group_member_args& operator=(const sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  sai_rpc_sai_thrift_remove_l2mc_group_member_args() : l2mc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_member_args() throw();
  sai_thrift_object_id_t l2mc_group_member_oid;

  _sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset __isset;

  void __set_l2mc_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_group_member_args & rhs) const
  {
    if (!(l2mc_group_member_oid == rhs.l2mc_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_l2mc_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_member_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_l2mc_group_member_result(const sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  sai_rpc_sai_thrift_remove_l2mc_group_member_result& operator=(const sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  sai_rpc_sai_thrift_remove_l2mc_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_l2mc_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_l2mc_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_l2mc_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset() : l2mc_group_member_oid(false), attr(false) {}
  bool l2mc_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args(const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() : l2mc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() throw();
  sai_thrift_object_id_t l2mc_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset __isset;

  void __set_l2mc_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(l2mc_group_member_oid == rhs.l2mc_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result(const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset() : l2mc_group_member_oid(false), attr_list(false) {}
  bool l2mc_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args(const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() : l2mc_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() throw();
  sai_thrift_object_id_t l2mc_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset __isset;

  void __set_l2mc_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(l2mc_group_member_oid == rhs.l2mc_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* l2mc_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result(const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_lag_args__isset {
  _sai_rpc_sai_thrift_create_lag_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_lag_args__isset;

class sai_rpc_sai_thrift_create_lag_args {
 public:

  sai_rpc_sai_thrift_create_lag_args(const sai_rpc_sai_thrift_create_lag_args&);
  sai_rpc_sai_thrift_create_lag_args& operator=(const sai_rpc_sai_thrift_create_lag_args&);
  sai_rpc_sai_thrift_create_lag_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_lag_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_lag_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_lag_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_lag_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_lag_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_lag_result__isset {
  _sai_rpc_sai_thrift_create_lag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_lag_result__isset;

class sai_rpc_sai_thrift_create_lag_result {
 public:

  sai_rpc_sai_thrift_create_lag_result(const sai_rpc_sai_thrift_create_lag_result&);
  sai_rpc_sai_thrift_create_lag_result& operator=(const sai_rpc_sai_thrift_create_lag_result&);
  sai_rpc_sai_thrift_create_lag_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_lag_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_lag_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_lag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_lag_presult__isset {
  _sai_rpc_sai_thrift_create_lag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_lag_presult__isset;

class sai_rpc_sai_thrift_create_lag_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_lag_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_lag_args__isset {
  _sai_rpc_sai_thrift_remove_lag_args__isset() : lag_oid(false) {}
  bool lag_oid :1;
} _sai_rpc_sai_thrift_remove_lag_args__isset;

class sai_rpc_sai_thrift_remove_lag_args {
 public:

  sai_rpc_sai_thrift_remove_lag_args(const sai_rpc_sai_thrift_remove_lag_args&);
  sai_rpc_sai_thrift_remove_lag_args& operator=(const sai_rpc_sai_thrift_remove_lag_args&);
  sai_rpc_sai_thrift_remove_lag_args() : lag_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_lag_args() throw();
  sai_thrift_object_id_t lag_oid;

  _sai_rpc_sai_thrift_remove_lag_args__isset __isset;

  void __set_lag_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_lag_args & rhs) const
  {
    if (!(lag_oid == rhs.lag_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_lag_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_lag_pargs() throw();
  const sai_thrift_object_id_t* lag_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_lag_result__isset {
  _sai_rpc_sai_thrift_remove_lag_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_lag_result__isset;

class sai_rpc_sai_thrift_remove_lag_result {
 public:

  sai_rpc_sai_thrift_remove_lag_result(const sai_rpc_sai_thrift_remove_lag_result&);
  sai_rpc_sai_thrift_remove_lag_result& operator=(const sai_rpc_sai_thrift_remove_lag_result&);
  sai_rpc_sai_thrift_remove_lag_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_lag_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_lag_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_lag_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_lag_presult__isset {
  _sai_rpc_sai_thrift_remove_lag_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_lag_presult__isset;

class sai_rpc_sai_thrift_remove_lag_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_lag_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_lag_attribute_args__isset {
  _sai_rpc_sai_thrift_set_lag_attribute_args__isset() : lag_oid(false), attr(false) {}
  bool lag_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_lag_attribute_args__isset;

class sai_rpc_sai_thrift_set_lag_attribute_args {
 public:

  sai_rpc_sai_thrift_set_lag_attribute_args(const sai_rpc_sai_thrift_set_lag_attribute_args&);
  sai_rpc_sai_thrift_set_lag_attribute_args& operator=(const sai_rpc_sai_thrift_set_lag_attribute_args&);
  sai_rpc_sai_thrift_set_lag_attribute_args() : lag_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_lag_attribute_args() throw();
  sai_thrift_object_id_t lag_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_lag_attribute_args__isset __isset;

  void __set_lag_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_lag_attribute_args & rhs) const
  {
    if (!(lag_oid == rhs.lag_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_lag_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_lag_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_lag_attribute_result__isset {
  _sai_rpc_sai_thrift_set_lag_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_lag_attribute_result__isset;

class sai_rpc_sai_thrift_set_lag_attribute_result {
 public:

  sai_rpc_sai_thrift_set_lag_attribute_result(const sai_rpc_sai_thrift_set_lag_attribute_result&);
  sai_rpc_sai_thrift_set_lag_attribute_result& operator=(const sai_rpc_sai_thrift_set_lag_attribute_result&);
  sai_rpc_sai_thrift_set_lag_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_lag_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_lag_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_lag_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_lag_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_lag_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_lag_attribute_presult__isset;

class sai_rpc_sai_thrift_set_lag_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_lag_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_lag_attribute_args__isset {
  _sai_rpc_sai_thrift_get_lag_attribute_args__isset() : lag_oid(false), attr_list(false) {}
  bool lag_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_lag_attribute_args__isset;

class sai_rpc_sai_thrift_get_lag_attribute_args {
 public:

  sai_rpc_sai_thrift_get_lag_attribute_args(const sai_rpc_sai_thrift_get_lag_attribute_args&);
  sai_rpc_sai_thrift_get_lag_attribute_args& operator=(const sai_rpc_sai_thrift_get_lag_attribute_args&);
  sai_rpc_sai_thrift_get_lag_attribute_args() : lag_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_lag_attribute_args() throw();
  sai_thrift_object_id_t lag_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_lag_attribute_args__isset __isset;

  void __set_lag_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_lag_attribute_args & rhs) const
  {
    if (!(lag_oid == rhs.lag_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_lag_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_lag_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_lag_attribute_result__isset {
  _sai_rpc_sai_thrift_get_lag_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_lag_attribute_result__isset;

class sai_rpc_sai_thrift_get_lag_attribute_result {
 public:

  sai_rpc_sai_thrift_get_lag_attribute_result(const sai_rpc_sai_thrift_get_lag_attribute_result&);
  sai_rpc_sai_thrift_get_lag_attribute_result& operator=(const sai_rpc_sai_thrift_get_lag_attribute_result&);
  sai_rpc_sai_thrift_get_lag_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_lag_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_lag_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_lag_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_lag_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_lag_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_lag_attribute_presult__isset;

class sai_rpc_sai_thrift_get_lag_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_lag_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_lag_member_args__isset {
  _sai_rpc_sai_thrift_create_lag_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_lag_member_args__isset;

class sai_rpc_sai_thrift_create_lag_member_args {
 public:

  sai_rpc_sai_thrift_create_lag_member_args(const sai_rpc_sai_thrift_create_lag_member_args&);
  sai_rpc_sai_thrift_create_lag_member_args& operator=(const sai_rpc_sai_thrift_create_lag_member_args&);
  sai_rpc_sai_thrift_create_lag_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_lag_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_lag_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_lag_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_lag_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_lag_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_lag_member_result__isset {
  _sai_rpc_sai_thrift_create_lag_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_lag_member_result__isset;

class sai_rpc_sai_thrift_create_lag_member_result {
 public:

  sai_rpc_sai_thrift_create_lag_member_result(const sai_rpc_sai_thrift_create_lag_member_result&);
  sai_rpc_sai_thrift_create_lag_member_result& operator=(const sai_rpc_sai_thrift_create_lag_member_result&);
  sai_rpc_sai_thrift_create_lag_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_lag_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_lag_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_lag_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_lag_member_presult__isset {
  _sai_rpc_sai_thrift_create_lag_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_lag_member_presult__isset;

class sai_rpc_sai_thrift_create_lag_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_lag_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_lag_member_args__isset {
  _sai_rpc_sai_thrift_remove_lag_member_args__isset() : lag_member_oid(false) {}
  bool lag_member_oid :1;
} _sai_rpc_sai_thrift_remove_lag_member_args__isset;

class sai_rpc_sai_thrift_remove_lag_member_args {
 public:

  sai_rpc_sai_thrift_remove_lag_member_args(const sai_rpc_sai_thrift_remove_lag_member_args&);
  sai_rpc_sai_thrift_remove_lag_member_args& operator=(const sai_rpc_sai_thrift_remove_lag_member_args&);
  sai_rpc_sai_thrift_remove_lag_member_args() : lag_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_lag_member_args() throw();
  sai_thrift_object_id_t lag_member_oid;

  _sai_rpc_sai_thrift_remove_lag_member_args__isset __isset;

  void __set_lag_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_lag_member_args & rhs) const
  {
    if (!(lag_member_oid == rhs.lag_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_lag_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_lag_member_pargs() throw();
  const sai_thrift_object_id_t* lag_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_lag_member_result__isset {
  _sai_rpc_sai_thrift_remove_lag_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_lag_member_result__isset;

class sai_rpc_sai_thrift_remove_lag_member_result {
 public:

  sai_rpc_sai_thrift_remove_lag_member_result(const sai_rpc_sai_thrift_remove_lag_member_result&);
  sai_rpc_sai_thrift_remove_lag_member_result& operator=(const sai_rpc_sai_thrift_remove_lag_member_result&);
  sai_rpc_sai_thrift_remove_lag_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_lag_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_lag_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_lag_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_lag_member_presult__isset {
  _sai_rpc_sai_thrift_remove_lag_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_lag_member_presult__isset;

class sai_rpc_sai_thrift_remove_lag_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_lag_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_lag_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_lag_member_attribute_args__isset() : lag_member_oid(false), attr(false) {}
  bool lag_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_lag_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_lag_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_lag_member_attribute_args(const sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  sai_rpc_sai_thrift_set_lag_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  sai_rpc_sai_thrift_set_lag_member_attribute_args() : lag_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_lag_member_attribute_args() throw();
  sai_thrift_object_id_t lag_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_lag_member_attribute_args__isset __isset;

  void __set_lag_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_oid == rhs.lag_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_lag_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_lag_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_lag_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_lag_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_lag_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_lag_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_lag_member_attribute_result(const sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  sai_rpc_sai_thrift_set_lag_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  sai_rpc_sai_thrift_set_lag_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_lag_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_lag_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_lag_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_lag_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_lag_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_lag_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_lag_member_attribute_args__isset() : lag_member_oid(false), attr_list(false) {}
  bool lag_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_lag_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_lag_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_lag_member_attribute_args(const sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  sai_rpc_sai_thrift_get_lag_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  sai_rpc_sai_thrift_get_lag_member_attribute_args() : lag_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_lag_member_attribute_args() throw();
  sai_thrift_object_id_t lag_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_lag_member_attribute_args__isset __isset;

  void __set_lag_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_oid == rhs.lag_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_lag_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_lag_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_lag_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_lag_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_lag_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_lag_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_lag_member_attribute_result(const sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  sai_rpc_sai_thrift_get_lag_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  sai_rpc_sai_thrift_get_lag_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_lag_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_lag_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_lag_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_lag_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_lag_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_macsec_args__isset {
  _sai_rpc_sai_thrift_create_macsec_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_macsec_args__isset;

class sai_rpc_sai_thrift_create_macsec_args {
 public:

  sai_rpc_sai_thrift_create_macsec_args(const sai_rpc_sai_thrift_create_macsec_args&);
  sai_rpc_sai_thrift_create_macsec_args& operator=(const sai_rpc_sai_thrift_create_macsec_args&);
  sai_rpc_sai_thrift_create_macsec_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_macsec_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_macsec_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_result__isset {
  _sai_rpc_sai_thrift_create_macsec_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_result__isset;

class sai_rpc_sai_thrift_create_macsec_result {
 public:

  sai_rpc_sai_thrift_create_macsec_result(const sai_rpc_sai_thrift_create_macsec_result&);
  sai_rpc_sai_thrift_create_macsec_result& operator=(const sai_rpc_sai_thrift_create_macsec_result&);
  sai_rpc_sai_thrift_create_macsec_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_presult__isset {
  _sai_rpc_sai_thrift_create_macsec_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_presult__isset;

class sai_rpc_sai_thrift_create_macsec_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_args__isset {
  _sai_rpc_sai_thrift_remove_macsec_args__isset() : macsec_oid(false) {}
  bool macsec_oid :1;
} _sai_rpc_sai_thrift_remove_macsec_args__isset;

class sai_rpc_sai_thrift_remove_macsec_args {
 public:

  sai_rpc_sai_thrift_remove_macsec_args(const sai_rpc_sai_thrift_remove_macsec_args&);
  sai_rpc_sai_thrift_remove_macsec_args& operator=(const sai_rpc_sai_thrift_remove_macsec_args&);
  sai_rpc_sai_thrift_remove_macsec_args() : macsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_args() throw();
  sai_thrift_object_id_t macsec_oid;

  _sai_rpc_sai_thrift_remove_macsec_args__isset __isset;

  void __set_macsec_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_args & rhs) const
  {
    if (!(macsec_oid == rhs.macsec_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_macsec_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_pargs() throw();
  const sai_thrift_object_id_t* macsec_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_result__isset {
  _sai_rpc_sai_thrift_remove_macsec_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_result__isset;

class sai_rpc_sai_thrift_remove_macsec_result {
 public:

  sai_rpc_sai_thrift_remove_macsec_result(const sai_rpc_sai_thrift_remove_macsec_result&);
  sai_rpc_sai_thrift_remove_macsec_result& operator=(const sai_rpc_sai_thrift_remove_macsec_result&);
  sai_rpc_sai_thrift_remove_macsec_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_presult__isset {
  _sai_rpc_sai_thrift_remove_macsec_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_presult__isset;

class sai_rpc_sai_thrift_remove_macsec_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_macsec_attribute_args__isset {
  _sai_rpc_sai_thrift_set_macsec_attribute_args__isset() : macsec_oid(false), attr(false) {}
  bool macsec_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_macsec_attribute_args__isset;

class sai_rpc_sai_thrift_set_macsec_attribute_args {
 public:

  sai_rpc_sai_thrift_set_macsec_attribute_args(const sai_rpc_sai_thrift_set_macsec_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_attribute_args& operator=(const sai_rpc_sai_thrift_set_macsec_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_attribute_args() : macsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_attribute_args() throw();
  sai_thrift_object_id_t macsec_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_macsec_attribute_args__isset __isset;

  void __set_macsec_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_attribute_args & rhs) const
  {
    if (!(macsec_oid == rhs.macsec_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_macsec_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_attribute_result__isset {
  _sai_rpc_sai_thrift_set_macsec_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_attribute_result__isset;

class sai_rpc_sai_thrift_set_macsec_attribute_result {
 public:

  sai_rpc_sai_thrift_set_macsec_attribute_result(const sai_rpc_sai_thrift_set_macsec_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_attribute_result& operator=(const sai_rpc_sai_thrift_set_macsec_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_macsec_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_attribute_presult__isset;

class sai_rpc_sai_thrift_set_macsec_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_attribute_args__isset {
  _sai_rpc_sai_thrift_get_macsec_attribute_args__isset() : macsec_oid(false), attr_list(false) {}
  bool macsec_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_macsec_attribute_args__isset;

class sai_rpc_sai_thrift_get_macsec_attribute_args {
 public:

  sai_rpc_sai_thrift_get_macsec_attribute_args(const sai_rpc_sai_thrift_get_macsec_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_attribute_args& operator=(const sai_rpc_sai_thrift_get_macsec_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_attribute_args() : macsec_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_attribute_args() throw();
  sai_thrift_object_id_t macsec_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_macsec_attribute_args__isset __isset;

  void __set_macsec_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_attribute_args & rhs) const
  {
    if (!(macsec_oid == rhs.macsec_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_attribute_result__isset {
  _sai_rpc_sai_thrift_get_macsec_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_attribute_result__isset;

class sai_rpc_sai_thrift_get_macsec_attribute_result {
 public:

  sai_rpc_sai_thrift_get_macsec_attribute_result(const sai_rpc_sai_thrift_get_macsec_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_attribute_result& operator=(const sai_rpc_sai_thrift_get_macsec_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_attribute_presult__isset;

class sai_rpc_sai_thrift_get_macsec_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_macsec_port_args__isset {
  _sai_rpc_sai_thrift_create_macsec_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_macsec_port_args__isset;

class sai_rpc_sai_thrift_create_macsec_port_args {
 public:

  sai_rpc_sai_thrift_create_macsec_port_args(const sai_rpc_sai_thrift_create_macsec_port_args&);
  sai_rpc_sai_thrift_create_macsec_port_args& operator=(const sai_rpc_sai_thrift_create_macsec_port_args&);
  sai_rpc_sai_thrift_create_macsec_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_macsec_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_macsec_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_port_result__isset {
  _sai_rpc_sai_thrift_create_macsec_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_port_result__isset;

class sai_rpc_sai_thrift_create_macsec_port_result {
 public:

  sai_rpc_sai_thrift_create_macsec_port_result(const sai_rpc_sai_thrift_create_macsec_port_result&);
  sai_rpc_sai_thrift_create_macsec_port_result& operator=(const sai_rpc_sai_thrift_create_macsec_port_result&);
  sai_rpc_sai_thrift_create_macsec_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_port_presult__isset {
  _sai_rpc_sai_thrift_create_macsec_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_port_presult__isset;

class sai_rpc_sai_thrift_create_macsec_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_port_args__isset {
  _sai_rpc_sai_thrift_remove_macsec_port_args__isset() : macsec_port_oid(false) {}
  bool macsec_port_oid :1;
} _sai_rpc_sai_thrift_remove_macsec_port_args__isset;

class sai_rpc_sai_thrift_remove_macsec_port_args {
 public:

  sai_rpc_sai_thrift_remove_macsec_port_args(const sai_rpc_sai_thrift_remove_macsec_port_args&);
  sai_rpc_sai_thrift_remove_macsec_port_args& operator=(const sai_rpc_sai_thrift_remove_macsec_port_args&);
  sai_rpc_sai_thrift_remove_macsec_port_args() : macsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_port_args() throw();
  sai_thrift_object_id_t macsec_port_oid;

  _sai_rpc_sai_thrift_remove_macsec_port_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_port_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_macsec_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_port_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_port_result__isset {
  _sai_rpc_sai_thrift_remove_macsec_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_port_result__isset;

class sai_rpc_sai_thrift_remove_macsec_port_result {
 public:

  sai_rpc_sai_thrift_remove_macsec_port_result(const sai_rpc_sai_thrift_remove_macsec_port_result&);
  sai_rpc_sai_thrift_remove_macsec_port_result& operator=(const sai_rpc_sai_thrift_remove_macsec_port_result&);
  sai_rpc_sai_thrift_remove_macsec_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_port_presult__isset {
  _sai_rpc_sai_thrift_remove_macsec_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_port_presult__isset;

class sai_rpc_sai_thrift_remove_macsec_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_macsec_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_macsec_port_attribute_args__isset() : macsec_port_oid(false), attr(false) {}
  bool macsec_port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_macsec_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_macsec_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_macsec_port_attribute_args(const sai_rpc_sai_thrift_set_macsec_port_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_macsec_port_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_port_attribute_args() : macsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_port_attribute_args() throw();
  sai_thrift_object_id_t macsec_port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_macsec_port_attribute_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_port_attribute_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_macsec_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_macsec_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_macsec_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_macsec_port_attribute_result(const sai_rpc_sai_thrift_set_macsec_port_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_macsec_port_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_macsec_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_macsec_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_macsec_port_attribute_args__isset() : macsec_port_oid(false), attr_list(false) {}
  bool macsec_port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_macsec_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_macsec_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_macsec_port_attribute_args(const sai_rpc_sai_thrift_get_macsec_port_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_macsec_port_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_port_attribute_args() : macsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_attribute_args() throw();
  sai_thrift_object_id_t macsec_port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_macsec_port_attribute_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_attribute_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_macsec_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_macsec_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_macsec_port_attribute_result(const sai_rpc_sai_thrift_get_macsec_port_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_macsec_port_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_macsec_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_args__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_args__isset() : macsec_port_oid(false), counter_ids(false) {}
  bool macsec_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_args__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_args {
 public:

  sai_rpc_sai_thrift_get_macsec_port_stats_args(const sai_rpc_sai_thrift_get_macsec_port_stats_args&);
  sai_rpc_sai_thrift_get_macsec_port_stats_args& operator=(const sai_rpc_sai_thrift_get_macsec_port_stats_args&);
  sai_rpc_sai_thrift_get_macsec_port_stats_args() : macsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_args() throw();
  sai_thrift_object_id_t macsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_macsec_port_stats_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_stats_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_result__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_result__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_result {
 public:

  sai_rpc_sai_thrift_get_macsec_port_stats_result(const sai_rpc_sai_thrift_get_macsec_port_stats_result&);
  sai_rpc_sai_thrift_get_macsec_port_stats_result& operator=(const sai_rpc_sai_thrift_get_macsec_port_stats_result&);
  sai_rpc_sai_thrift_get_macsec_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_presult__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_args__isset() : macsec_port_oid(false), counter_ids(false), mode(false) {}
  bool macsec_port_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_macsec_port_stats_ext_args(const sai_rpc_sai_thrift_get_macsec_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_port_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_macsec_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_port_stats_ext_args() : macsec_port_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_ext_args() throw();
  sai_thrift_object_id_t macsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_port_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_macsec_port_stats_ext_result(const sai_rpc_sai_thrift_get_macsec_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_port_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_macsec_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_port_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_port_stats_args__isset {
  _sai_rpc_sai_thrift_clear_macsec_port_stats_args__isset() : macsec_port_oid(false), counter_ids(false) {}
  bool macsec_port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_macsec_port_stats_args__isset;

class sai_rpc_sai_thrift_clear_macsec_port_stats_args {
 public:

  sai_rpc_sai_thrift_clear_macsec_port_stats_args(const sai_rpc_sai_thrift_clear_macsec_port_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_port_stats_args& operator=(const sai_rpc_sai_thrift_clear_macsec_port_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_port_stats_args() : macsec_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_port_stats_args() throw();
  sai_thrift_object_id_t macsec_port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_macsec_port_stats_args__isset __isset;

  void __set_macsec_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_port_stats_args & rhs) const
  {
    if (!(macsec_port_oid == rhs.macsec_port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_macsec_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_port_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_port_stats_result__isset {
  _sai_rpc_sai_thrift_clear_macsec_port_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_port_stats_result__isset;

class sai_rpc_sai_thrift_clear_macsec_port_stats_result {
 public:

  sai_rpc_sai_thrift_clear_macsec_port_stats_result(const sai_rpc_sai_thrift_clear_macsec_port_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_port_stats_result& operator=(const sai_rpc_sai_thrift_clear_macsec_port_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_port_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_port_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_port_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_port_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_macsec_port_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_port_stats_presult__isset;

class sai_rpc_sai_thrift_clear_macsec_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_port_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_macsec_flow_args__isset {
  _sai_rpc_sai_thrift_create_macsec_flow_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_macsec_flow_args__isset;

class sai_rpc_sai_thrift_create_macsec_flow_args {
 public:

  sai_rpc_sai_thrift_create_macsec_flow_args(const sai_rpc_sai_thrift_create_macsec_flow_args&);
  sai_rpc_sai_thrift_create_macsec_flow_args& operator=(const sai_rpc_sai_thrift_create_macsec_flow_args&);
  sai_rpc_sai_thrift_create_macsec_flow_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_flow_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_macsec_flow_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_flow_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_flow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_flow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_macsec_flow_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_flow_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_flow_result__isset {
  _sai_rpc_sai_thrift_create_macsec_flow_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_flow_result__isset;

class sai_rpc_sai_thrift_create_macsec_flow_result {
 public:

  sai_rpc_sai_thrift_create_macsec_flow_result(const sai_rpc_sai_thrift_create_macsec_flow_result&);
  sai_rpc_sai_thrift_create_macsec_flow_result& operator=(const sai_rpc_sai_thrift_create_macsec_flow_result&);
  sai_rpc_sai_thrift_create_macsec_flow_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_flow_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_flow_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_flow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_flow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_flow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_flow_presult__isset {
  _sai_rpc_sai_thrift_create_macsec_flow_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_flow_presult__isset;

class sai_rpc_sai_thrift_create_macsec_flow_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_flow_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_flow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_flow_args__isset {
  _sai_rpc_sai_thrift_remove_macsec_flow_args__isset() : macsec_flow_oid(false) {}
  bool macsec_flow_oid :1;
} _sai_rpc_sai_thrift_remove_macsec_flow_args__isset;

class sai_rpc_sai_thrift_remove_macsec_flow_args {
 public:

  sai_rpc_sai_thrift_remove_macsec_flow_args(const sai_rpc_sai_thrift_remove_macsec_flow_args&);
  sai_rpc_sai_thrift_remove_macsec_flow_args& operator=(const sai_rpc_sai_thrift_remove_macsec_flow_args&);
  sai_rpc_sai_thrift_remove_macsec_flow_args() : macsec_flow_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_flow_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;

  _sai_rpc_sai_thrift_remove_macsec_flow_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_flow_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_flow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_flow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_macsec_flow_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_flow_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_flow_result__isset {
  _sai_rpc_sai_thrift_remove_macsec_flow_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_flow_result__isset;

class sai_rpc_sai_thrift_remove_macsec_flow_result {
 public:

  sai_rpc_sai_thrift_remove_macsec_flow_result(const sai_rpc_sai_thrift_remove_macsec_flow_result&);
  sai_rpc_sai_thrift_remove_macsec_flow_result& operator=(const sai_rpc_sai_thrift_remove_macsec_flow_result&);
  sai_rpc_sai_thrift_remove_macsec_flow_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_flow_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_flow_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_flow_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_flow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_flow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_flow_presult__isset {
  _sai_rpc_sai_thrift_remove_macsec_flow_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_flow_presult__isset;

class sai_rpc_sai_thrift_remove_macsec_flow_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_flow_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_flow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_macsec_flow_attribute_args__isset {
  _sai_rpc_sai_thrift_set_macsec_flow_attribute_args__isset() : macsec_flow_oid(false), attr(false) {}
  bool macsec_flow_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_macsec_flow_attribute_args__isset;

class sai_rpc_sai_thrift_set_macsec_flow_attribute_args {
 public:

  sai_rpc_sai_thrift_set_macsec_flow_attribute_args(const sai_rpc_sai_thrift_set_macsec_flow_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_flow_attribute_args& operator=(const sai_rpc_sai_thrift_set_macsec_flow_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_flow_attribute_args() : macsec_flow_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_flow_attribute_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_macsec_flow_attribute_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_flow_attribute_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_flow_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_flow_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_macsec_flow_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_flow_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_flow_attribute_result__isset {
  _sai_rpc_sai_thrift_set_macsec_flow_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_flow_attribute_result__isset;

class sai_rpc_sai_thrift_set_macsec_flow_attribute_result {
 public:

  sai_rpc_sai_thrift_set_macsec_flow_attribute_result(const sai_rpc_sai_thrift_set_macsec_flow_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_flow_attribute_result& operator=(const sai_rpc_sai_thrift_set_macsec_flow_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_flow_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_flow_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_flow_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_flow_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_flow_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_flow_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_flow_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_macsec_flow_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_flow_attribute_presult__isset;

class sai_rpc_sai_thrift_set_macsec_flow_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_flow_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_flow_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_attribute_args__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_attribute_args__isset() : macsec_flow_oid(false), attr_list(false) {}
  bool macsec_flow_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_macsec_flow_attribute_args__isset;

class sai_rpc_sai_thrift_get_macsec_flow_attribute_args {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_attribute_args(const sai_rpc_sai_thrift_get_macsec_flow_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_flow_attribute_args& operator=(const sai_rpc_sai_thrift_get_macsec_flow_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_flow_attribute_args() : macsec_flow_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_attribute_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_macsec_flow_attribute_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_attribute_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_flow_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_attribute_result__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_attribute_result__isset;

class sai_rpc_sai_thrift_get_macsec_flow_attribute_result {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_attribute_result(const sai_rpc_sai_thrift_get_macsec_flow_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_flow_attribute_result& operator=(const sai_rpc_sai_thrift_get_macsec_flow_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_flow_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_attribute_presult__isset;

class sai_rpc_sai_thrift_get_macsec_flow_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_args__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_args__isset() : macsec_flow_oid(false), counter_ids(false) {}
  bool macsec_flow_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_args__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_args {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_stats_args(const sai_rpc_sai_thrift_get_macsec_flow_stats_args&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_args& operator=(const sai_rpc_sai_thrift_get_macsec_flow_stats_args&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_args() : macsec_flow_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_stats_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_flow_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_result__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_result__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_result {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_stats_result(const sai_rpc_sai_thrift_get_macsec_flow_stats_result&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_result& operator=(const sai_rpc_sai_thrift_get_macsec_flow_stats_result&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_presult__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args__isset() : macsec_flow_oid(false), counter_ids(false), mode(false) {}
  bool macsec_flow_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args(const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args() : macsec_flow_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_flow_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result(const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_flow_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_flow_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_flow_stats_args__isset {
  _sai_rpc_sai_thrift_clear_macsec_flow_stats_args__isset() : macsec_flow_oid(false), counter_ids(false) {}
  bool macsec_flow_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_macsec_flow_stats_args__isset;

class sai_rpc_sai_thrift_clear_macsec_flow_stats_args {
 public:

  sai_rpc_sai_thrift_clear_macsec_flow_stats_args(const sai_rpc_sai_thrift_clear_macsec_flow_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_flow_stats_args& operator=(const sai_rpc_sai_thrift_clear_macsec_flow_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_flow_stats_args() : macsec_flow_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_flow_stats_args() throw();
  sai_thrift_object_id_t macsec_flow_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_macsec_flow_stats_args__isset __isset;

  void __set_macsec_flow_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_flow_stats_args & rhs) const
  {
    if (!(macsec_flow_oid == rhs.macsec_flow_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_flow_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_flow_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_macsec_flow_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_flow_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_flow_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_flow_stats_result__isset {
  _sai_rpc_sai_thrift_clear_macsec_flow_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_flow_stats_result__isset;

class sai_rpc_sai_thrift_clear_macsec_flow_stats_result {
 public:

  sai_rpc_sai_thrift_clear_macsec_flow_stats_result(const sai_rpc_sai_thrift_clear_macsec_flow_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_flow_stats_result& operator=(const sai_rpc_sai_thrift_clear_macsec_flow_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_flow_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_flow_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_flow_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_flow_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_flow_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_flow_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_flow_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_macsec_flow_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_flow_stats_presult__isset;

class sai_rpc_sai_thrift_clear_macsec_flow_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_flow_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_flow_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sc_args__isset {
  _sai_rpc_sai_thrift_create_macsec_sc_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_macsec_sc_args__isset;

class sai_rpc_sai_thrift_create_macsec_sc_args {
 public:

  sai_rpc_sai_thrift_create_macsec_sc_args(const sai_rpc_sai_thrift_create_macsec_sc_args&);
  sai_rpc_sai_thrift_create_macsec_sc_args& operator=(const sai_rpc_sai_thrift_create_macsec_sc_args&);
  sai_rpc_sai_thrift_create_macsec_sc_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_sc_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_macsec_sc_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_sc_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_sc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_sc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_macsec_sc_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_sc_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sc_result__isset {
  _sai_rpc_sai_thrift_create_macsec_sc_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_sc_result__isset;

class sai_rpc_sai_thrift_create_macsec_sc_result {
 public:

  sai_rpc_sai_thrift_create_macsec_sc_result(const sai_rpc_sai_thrift_create_macsec_sc_result&);
  sai_rpc_sai_thrift_create_macsec_sc_result& operator=(const sai_rpc_sai_thrift_create_macsec_sc_result&);
  sai_rpc_sai_thrift_create_macsec_sc_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_sc_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_sc_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_sc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_sc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_sc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sc_presult__isset {
  _sai_rpc_sai_thrift_create_macsec_sc_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_sc_presult__isset;

class sai_rpc_sai_thrift_create_macsec_sc_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_sc_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_sc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sc_args__isset {
  _sai_rpc_sai_thrift_remove_macsec_sc_args__isset() : macsec_sc_oid(false) {}
  bool macsec_sc_oid :1;
} _sai_rpc_sai_thrift_remove_macsec_sc_args__isset;

class sai_rpc_sai_thrift_remove_macsec_sc_args {
 public:

  sai_rpc_sai_thrift_remove_macsec_sc_args(const sai_rpc_sai_thrift_remove_macsec_sc_args&);
  sai_rpc_sai_thrift_remove_macsec_sc_args& operator=(const sai_rpc_sai_thrift_remove_macsec_sc_args&);
  sai_rpc_sai_thrift_remove_macsec_sc_args() : macsec_sc_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_sc_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;

  _sai_rpc_sai_thrift_remove_macsec_sc_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_sc_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_sc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_sc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_macsec_sc_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_sc_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sc_result__isset {
  _sai_rpc_sai_thrift_remove_macsec_sc_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_sc_result__isset;

class sai_rpc_sai_thrift_remove_macsec_sc_result {
 public:

  sai_rpc_sai_thrift_remove_macsec_sc_result(const sai_rpc_sai_thrift_remove_macsec_sc_result&);
  sai_rpc_sai_thrift_remove_macsec_sc_result& operator=(const sai_rpc_sai_thrift_remove_macsec_sc_result&);
  sai_rpc_sai_thrift_remove_macsec_sc_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_sc_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_sc_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_sc_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_sc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_sc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sc_presult__isset {
  _sai_rpc_sai_thrift_remove_macsec_sc_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_sc_presult__isset;

class sai_rpc_sai_thrift_remove_macsec_sc_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_sc_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_sc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sc_attribute_args__isset {
  _sai_rpc_sai_thrift_set_macsec_sc_attribute_args__isset() : macsec_sc_oid(false), attr(false) {}
  bool macsec_sc_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_macsec_sc_attribute_args__isset;

class sai_rpc_sai_thrift_set_macsec_sc_attribute_args {
 public:

  sai_rpc_sai_thrift_set_macsec_sc_attribute_args(const sai_rpc_sai_thrift_set_macsec_sc_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_sc_attribute_args& operator=(const sai_rpc_sai_thrift_set_macsec_sc_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_sc_attribute_args() : macsec_sc_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_sc_attribute_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_macsec_sc_attribute_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_sc_attribute_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_sc_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_sc_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_macsec_sc_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_sc_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sc_attribute_result__isset {
  _sai_rpc_sai_thrift_set_macsec_sc_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_sc_attribute_result__isset;

class sai_rpc_sai_thrift_set_macsec_sc_attribute_result {
 public:

  sai_rpc_sai_thrift_set_macsec_sc_attribute_result(const sai_rpc_sai_thrift_set_macsec_sc_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_sc_attribute_result& operator=(const sai_rpc_sai_thrift_set_macsec_sc_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_sc_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_sc_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_sc_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_sc_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_sc_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_sc_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sc_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_macsec_sc_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_sc_attribute_presult__isset;

class sai_rpc_sai_thrift_set_macsec_sc_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_sc_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_sc_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_attribute_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_attribute_args__isset() : macsec_sc_oid(false), attr_list(false) {}
  bool macsec_sc_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_macsec_sc_attribute_args__isset;

class sai_rpc_sai_thrift_get_macsec_sc_attribute_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_attribute_args(const sai_rpc_sai_thrift_get_macsec_sc_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_sc_attribute_args& operator=(const sai_rpc_sai_thrift_get_macsec_sc_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_sc_attribute_args() : macsec_sc_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_attribute_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_macsec_sc_attribute_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_attribute_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sc_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_attribute_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_attribute_result__isset;

class sai_rpc_sai_thrift_get_macsec_sc_attribute_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_attribute_result(const sai_rpc_sai_thrift_get_macsec_sc_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_sc_attribute_result& operator=(const sai_rpc_sai_thrift_get_macsec_sc_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_sc_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_attribute_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sc_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_args__isset() : macsec_sc_oid(false), counter_ids(false) {}
  bool macsec_sc_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_args__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_stats_args(const sai_rpc_sai_thrift_get_macsec_sc_stats_args&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_args& operator=(const sai_rpc_sai_thrift_get_macsec_sc_stats_args&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_args() : macsec_sc_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_stats_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sc_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_result__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_stats_result(const sai_rpc_sai_thrift_get_macsec_sc_stats_result&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_result& operator=(const sai_rpc_sai_thrift_get_macsec_sc_stats_result&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args__isset() : macsec_sc_oid(false), counter_ids(false), mode(false) {}
  bool macsec_sc_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args(const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args() : macsec_sc_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sc_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result(const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sc_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sc_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sc_stats_args__isset {
  _sai_rpc_sai_thrift_clear_macsec_sc_stats_args__isset() : macsec_sc_oid(false), counter_ids(false) {}
  bool macsec_sc_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_macsec_sc_stats_args__isset;

class sai_rpc_sai_thrift_clear_macsec_sc_stats_args {
 public:

  sai_rpc_sai_thrift_clear_macsec_sc_stats_args(const sai_rpc_sai_thrift_clear_macsec_sc_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_sc_stats_args& operator=(const sai_rpc_sai_thrift_clear_macsec_sc_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_sc_stats_args() : macsec_sc_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_sc_stats_args() throw();
  sai_thrift_object_id_t macsec_sc_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_macsec_sc_stats_args__isset __isset;

  void __set_macsec_sc_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_sc_stats_args & rhs) const
  {
    if (!(macsec_sc_oid == rhs.macsec_sc_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_sc_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_sc_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_macsec_sc_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_sc_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_sc_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sc_stats_result__isset {
  _sai_rpc_sai_thrift_clear_macsec_sc_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_sc_stats_result__isset;

class sai_rpc_sai_thrift_clear_macsec_sc_stats_result {
 public:

  sai_rpc_sai_thrift_clear_macsec_sc_stats_result(const sai_rpc_sai_thrift_clear_macsec_sc_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_sc_stats_result& operator=(const sai_rpc_sai_thrift_clear_macsec_sc_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_sc_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_sc_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_sc_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_sc_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_sc_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_sc_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sc_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_macsec_sc_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_sc_stats_presult__isset;

class sai_rpc_sai_thrift_clear_macsec_sc_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_sc_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_sc_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sa_args__isset {
  _sai_rpc_sai_thrift_create_macsec_sa_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_macsec_sa_args__isset;

class sai_rpc_sai_thrift_create_macsec_sa_args {
 public:

  sai_rpc_sai_thrift_create_macsec_sa_args(const sai_rpc_sai_thrift_create_macsec_sa_args&);
  sai_rpc_sai_thrift_create_macsec_sa_args& operator=(const sai_rpc_sai_thrift_create_macsec_sa_args&);
  sai_rpc_sai_thrift_create_macsec_sa_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_sa_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_macsec_sa_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_sa_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_sa_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_sa_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_macsec_sa_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_sa_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sa_result__isset {
  _sai_rpc_sai_thrift_create_macsec_sa_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_sa_result__isset;

class sai_rpc_sai_thrift_create_macsec_sa_result {
 public:

  sai_rpc_sai_thrift_create_macsec_sa_result(const sai_rpc_sai_thrift_create_macsec_sa_result&);
  sai_rpc_sai_thrift_create_macsec_sa_result& operator=(const sai_rpc_sai_thrift_create_macsec_sa_result&);
  sai_rpc_sai_thrift_create_macsec_sa_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_macsec_sa_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_sa_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_macsec_sa_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_macsec_sa_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_macsec_sa_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_macsec_sa_presult__isset {
  _sai_rpc_sai_thrift_create_macsec_sa_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_macsec_sa_presult__isset;

class sai_rpc_sai_thrift_create_macsec_sa_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_macsec_sa_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_macsec_sa_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sa_args__isset {
  _sai_rpc_sai_thrift_remove_macsec_sa_args__isset() : macsec_sa_oid(false) {}
  bool macsec_sa_oid :1;
} _sai_rpc_sai_thrift_remove_macsec_sa_args__isset;

class sai_rpc_sai_thrift_remove_macsec_sa_args {
 public:

  sai_rpc_sai_thrift_remove_macsec_sa_args(const sai_rpc_sai_thrift_remove_macsec_sa_args&);
  sai_rpc_sai_thrift_remove_macsec_sa_args& operator=(const sai_rpc_sai_thrift_remove_macsec_sa_args&);
  sai_rpc_sai_thrift_remove_macsec_sa_args() : macsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_sa_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;

  _sai_rpc_sai_thrift_remove_macsec_sa_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_sa_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_sa_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_sa_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_macsec_sa_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_sa_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sa_result__isset {
  _sai_rpc_sai_thrift_remove_macsec_sa_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_sa_result__isset;

class sai_rpc_sai_thrift_remove_macsec_sa_result {
 public:

  sai_rpc_sai_thrift_remove_macsec_sa_result(const sai_rpc_sai_thrift_remove_macsec_sa_result&);
  sai_rpc_sai_thrift_remove_macsec_sa_result& operator=(const sai_rpc_sai_thrift_remove_macsec_sa_result&);
  sai_rpc_sai_thrift_remove_macsec_sa_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_macsec_sa_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_sa_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_macsec_sa_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_macsec_sa_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_macsec_sa_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_macsec_sa_presult__isset {
  _sai_rpc_sai_thrift_remove_macsec_sa_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_macsec_sa_presult__isset;

class sai_rpc_sai_thrift_remove_macsec_sa_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_macsec_sa_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_macsec_sa_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sa_attribute_args__isset {
  _sai_rpc_sai_thrift_set_macsec_sa_attribute_args__isset() : macsec_sa_oid(false), attr(false) {}
  bool macsec_sa_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_macsec_sa_attribute_args__isset;

class sai_rpc_sai_thrift_set_macsec_sa_attribute_args {
 public:

  sai_rpc_sai_thrift_set_macsec_sa_attribute_args(const sai_rpc_sai_thrift_set_macsec_sa_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_sa_attribute_args& operator=(const sai_rpc_sai_thrift_set_macsec_sa_attribute_args&);
  sai_rpc_sai_thrift_set_macsec_sa_attribute_args() : macsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_sa_attribute_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_macsec_sa_attribute_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_sa_attribute_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_sa_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_sa_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_macsec_sa_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_sa_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sa_attribute_result__isset {
  _sai_rpc_sai_thrift_set_macsec_sa_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_sa_attribute_result__isset;

class sai_rpc_sai_thrift_set_macsec_sa_attribute_result {
 public:

  sai_rpc_sai_thrift_set_macsec_sa_attribute_result(const sai_rpc_sai_thrift_set_macsec_sa_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_sa_attribute_result& operator=(const sai_rpc_sai_thrift_set_macsec_sa_attribute_result&);
  sai_rpc_sai_thrift_set_macsec_sa_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_macsec_sa_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_sa_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_macsec_sa_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_macsec_sa_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_macsec_sa_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_macsec_sa_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_macsec_sa_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_macsec_sa_attribute_presult__isset;

class sai_rpc_sai_thrift_set_macsec_sa_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_macsec_sa_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_macsec_sa_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_attribute_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_attribute_args__isset() : macsec_sa_oid(false), attr_list(false) {}
  bool macsec_sa_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_macsec_sa_attribute_args__isset;

class sai_rpc_sai_thrift_get_macsec_sa_attribute_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_attribute_args(const sai_rpc_sai_thrift_get_macsec_sa_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_sa_attribute_args& operator=(const sai_rpc_sai_thrift_get_macsec_sa_attribute_args&);
  sai_rpc_sai_thrift_get_macsec_sa_attribute_args() : macsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_attribute_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_macsec_sa_attribute_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_attribute_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sa_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_attribute_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_attribute_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_attribute_result__isset;

class sai_rpc_sai_thrift_get_macsec_sa_attribute_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_attribute_result(const sai_rpc_sai_thrift_get_macsec_sa_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_sa_attribute_result& operator=(const sai_rpc_sai_thrift_get_macsec_sa_attribute_result&);
  sai_rpc_sai_thrift_get_macsec_sa_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_attribute_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sa_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_args__isset() : macsec_sa_oid(false), counter_ids(false) {}
  bool macsec_sa_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_args__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_stats_args(const sai_rpc_sai_thrift_get_macsec_sa_stats_args&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_args& operator=(const sai_rpc_sai_thrift_get_macsec_sa_stats_args&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_args() : macsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_stats_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sa_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_result__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_stats_result(const sai_rpc_sai_thrift_get_macsec_sa_stats_result&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_result& operator=(const sai_rpc_sai_thrift_get_macsec_sa_stats_result&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args__isset() : macsec_sa_oid(false), counter_ids(false), mode(false) {}
  bool macsec_sa_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args(const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args() : macsec_sa_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_macsec_sa_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result(const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result&);
  sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_macsec_sa_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_macsec_sa_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sa_stats_args__isset {
  _sai_rpc_sai_thrift_clear_macsec_sa_stats_args__isset() : macsec_sa_oid(false), counter_ids(false) {}
  bool macsec_sa_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_macsec_sa_stats_args__isset;

class sai_rpc_sai_thrift_clear_macsec_sa_stats_args {
 public:

  sai_rpc_sai_thrift_clear_macsec_sa_stats_args(const sai_rpc_sai_thrift_clear_macsec_sa_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_sa_stats_args& operator=(const sai_rpc_sai_thrift_clear_macsec_sa_stats_args&);
  sai_rpc_sai_thrift_clear_macsec_sa_stats_args() : macsec_sa_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_sa_stats_args() throw();
  sai_thrift_object_id_t macsec_sa_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_macsec_sa_stats_args__isset __isset;

  void __set_macsec_sa_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_sa_stats_args & rhs) const
  {
    if (!(macsec_sa_oid == rhs.macsec_sa_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_sa_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_sa_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_macsec_sa_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_sa_stats_pargs() throw();
  const sai_thrift_object_id_t* macsec_sa_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sa_stats_result__isset {
  _sai_rpc_sai_thrift_clear_macsec_sa_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_sa_stats_result__isset;

class sai_rpc_sai_thrift_clear_macsec_sa_stats_result {
 public:

  sai_rpc_sai_thrift_clear_macsec_sa_stats_result(const sai_rpc_sai_thrift_clear_macsec_sa_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_sa_stats_result& operator=(const sai_rpc_sai_thrift_clear_macsec_sa_stats_result&);
  sai_rpc_sai_thrift_clear_macsec_sa_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_macsec_sa_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_sa_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_macsec_sa_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_macsec_sa_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_macsec_sa_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_macsec_sa_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_macsec_sa_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_macsec_sa_stats_presult__isset;

class sai_rpc_sai_thrift_clear_macsec_sa_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_macsec_sa_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_macsec_sa_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset() : mcast_fdb_entry(false), attr_list(false) {}
  bool mcast_fdb_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset;

class sai_rpc_sai_thrift_create_mcast_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_create_mcast_fdb_entry_args(const sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  sai_rpc_sai_thrift_create_mcast_fdb_entry_args& operator=(const sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  sai_rpc_sai_thrift_create_mcast_fdb_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_mcast_fdb_entry_args() throw();
  sai_thrift_mcast_fdb_entry_t mcast_fdb_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset __isset;

  void __set_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_mcast_fdb_entry_args & rhs) const
  {
    if (!(mcast_fdb_entry == rhs.mcast_fdb_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* mcast_fdb_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset;

class sai_rpc_sai_thrift_create_mcast_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_create_mcast_fdb_entry_result(const sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  sai_rpc_sai_thrift_create_mcast_fdb_entry_result& operator=(const sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  sai_rpc_sai_thrift_create_mcast_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_mcast_fdb_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_mcast_fdb_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_create_mcast_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_mcast_fdb_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset {
  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset() : mcast_fdb_entry(false) {}
  bool mcast_fdb_entry :1;
} _sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset;

class sai_rpc_sai_thrift_remove_mcast_fdb_entry_args {
 public:

  sai_rpc_sai_thrift_remove_mcast_fdb_entry_args(const sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  sai_rpc_sai_thrift_remove_mcast_fdb_entry_args& operator=(const sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() throw();
  sai_thrift_mcast_fdb_entry_t mcast_fdb_entry;

  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset __isset;

  void __set_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & rhs) const
  {
    if (!(mcast_fdb_entry == rhs.mcast_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* mcast_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset {
  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset;

class sai_rpc_sai_thrift_remove_mcast_fdb_entry_result {
 public:

  sai_rpc_sai_thrift_remove_mcast_fdb_entry_result(const sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  sai_rpc_sai_thrift_remove_mcast_fdb_entry_result& operator=(const sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset;

class sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset() : mcast_fdb_entry(false), attr(false) {}
  bool mcast_fdb_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args(const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() throw();
  sai_thrift_mcast_fdb_entry_t mcast_fdb_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(mcast_fdb_entry == rhs.mcast_fdb_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* mcast_fdb_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result(const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset() : mcast_fdb_entry(false), attr_list(false) {}
  bool mcast_fdb_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args(const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() throw();
  sai_thrift_mcast_fdb_entry_t mcast_fdb_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(mcast_fdb_entry == rhs.mcast_fdb_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* mcast_fdb_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result(const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_mirror_session_args__isset {
  _sai_rpc_sai_thrift_create_mirror_session_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_mirror_session_args__isset;

class sai_rpc_sai_thrift_create_mirror_session_args {
 public:

  sai_rpc_sai_thrift_create_mirror_session_args(const sai_rpc_sai_thrift_create_mirror_session_args&);
  sai_rpc_sai_thrift_create_mirror_session_args& operator=(const sai_rpc_sai_thrift_create_mirror_session_args&);
  sai_rpc_sai_thrift_create_mirror_session_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_mirror_session_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_mirror_session_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_mirror_session_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_mirror_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_mirror_session_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_mirror_session_result__isset {
  _sai_rpc_sai_thrift_create_mirror_session_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_mirror_session_result__isset;

class sai_rpc_sai_thrift_create_mirror_session_result {
 public:

  sai_rpc_sai_thrift_create_mirror_session_result(const sai_rpc_sai_thrift_create_mirror_session_result&);
  sai_rpc_sai_thrift_create_mirror_session_result& operator=(const sai_rpc_sai_thrift_create_mirror_session_result&);
  sai_rpc_sai_thrift_create_mirror_session_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_mirror_session_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_mirror_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_mirror_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_mirror_session_presult__isset {
  _sai_rpc_sai_thrift_create_mirror_session_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_mirror_session_presult__isset;

class sai_rpc_sai_thrift_create_mirror_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_mirror_session_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_mirror_session_args__isset {
  _sai_rpc_sai_thrift_remove_mirror_session_args__isset() : mirror_session_oid(false) {}
  bool mirror_session_oid :1;
} _sai_rpc_sai_thrift_remove_mirror_session_args__isset;

class sai_rpc_sai_thrift_remove_mirror_session_args {
 public:

  sai_rpc_sai_thrift_remove_mirror_session_args(const sai_rpc_sai_thrift_remove_mirror_session_args&);
  sai_rpc_sai_thrift_remove_mirror_session_args& operator=(const sai_rpc_sai_thrift_remove_mirror_session_args&);
  sai_rpc_sai_thrift_remove_mirror_session_args() : mirror_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_mirror_session_args() throw();
  sai_thrift_object_id_t mirror_session_oid;

  _sai_rpc_sai_thrift_remove_mirror_session_args__isset __isset;

  void __set_mirror_session_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_mirror_session_args & rhs) const
  {
    if (!(mirror_session_oid == rhs.mirror_session_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_mirror_session_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_mirror_session_pargs() throw();
  const sai_thrift_object_id_t* mirror_session_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_mirror_session_result__isset {
  _sai_rpc_sai_thrift_remove_mirror_session_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_mirror_session_result__isset;

class sai_rpc_sai_thrift_remove_mirror_session_result {
 public:

  sai_rpc_sai_thrift_remove_mirror_session_result(const sai_rpc_sai_thrift_remove_mirror_session_result&);
  sai_rpc_sai_thrift_remove_mirror_session_result& operator=(const sai_rpc_sai_thrift_remove_mirror_session_result&);
  sai_rpc_sai_thrift_remove_mirror_session_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_mirror_session_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_mirror_session_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_mirror_session_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_mirror_session_presult__isset {
  _sai_rpc_sai_thrift_remove_mirror_session_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_mirror_session_presult__isset;

class sai_rpc_sai_thrift_remove_mirror_session_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_mirror_session_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_mirror_session_attribute_args__isset {
  _sai_rpc_sai_thrift_set_mirror_session_attribute_args__isset() : mirror_session_oid(false), attr(false) {}
  bool mirror_session_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_mirror_session_attribute_args__isset;

class sai_rpc_sai_thrift_set_mirror_session_attribute_args {
 public:

  sai_rpc_sai_thrift_set_mirror_session_attribute_args(const sai_rpc_sai_thrift_set_mirror_session_attribute_args&);
  sai_rpc_sai_thrift_set_mirror_session_attribute_args& operator=(const sai_rpc_sai_thrift_set_mirror_session_attribute_args&);
  sai_rpc_sai_thrift_set_mirror_session_attribute_args() : mirror_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_mirror_session_attribute_args() throw();
  sai_thrift_object_id_t mirror_session_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_mirror_session_attribute_args__isset __isset;

  void __set_mirror_session_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_mirror_session_attribute_args & rhs) const
  {
    if (!(mirror_session_oid == rhs.mirror_session_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_mirror_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_mirror_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_mirror_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_mirror_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* mirror_session_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_mirror_session_attribute_result__isset {
  _sai_rpc_sai_thrift_set_mirror_session_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_mirror_session_attribute_result__isset;

class sai_rpc_sai_thrift_set_mirror_session_attribute_result {
 public:

  sai_rpc_sai_thrift_set_mirror_session_attribute_result(const sai_rpc_sai_thrift_set_mirror_session_attribute_result&);
  sai_rpc_sai_thrift_set_mirror_session_attribute_result& operator=(const sai_rpc_sai_thrift_set_mirror_session_attribute_result&);
  sai_rpc_sai_thrift_set_mirror_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_mirror_session_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_mirror_session_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_mirror_session_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_mirror_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_mirror_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_mirror_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_mirror_session_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_mirror_session_attribute_presult__isset;

class sai_rpc_sai_thrift_set_mirror_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_mirror_session_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_mirror_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_mirror_session_attribute_args__isset {
  _sai_rpc_sai_thrift_get_mirror_session_attribute_args__isset() : mirror_session_oid(false), attr_list(false) {}
  bool mirror_session_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_mirror_session_attribute_args__isset;

class sai_rpc_sai_thrift_get_mirror_session_attribute_args {
 public:

  sai_rpc_sai_thrift_get_mirror_session_attribute_args(const sai_rpc_sai_thrift_get_mirror_session_attribute_args&);
  sai_rpc_sai_thrift_get_mirror_session_attribute_args& operator=(const sai_rpc_sai_thrift_get_mirror_session_attribute_args&);
  sai_rpc_sai_thrift_get_mirror_session_attribute_args() : mirror_session_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_mirror_session_attribute_args() throw();
  sai_thrift_object_id_t mirror_session_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_mirror_session_attribute_args__isset __isset;

  void __set_mirror_session_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_mirror_session_attribute_args & rhs) const
  {
    if (!(mirror_session_oid == rhs.mirror_session_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_mirror_session_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_mirror_session_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_mirror_session_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_mirror_session_attribute_pargs() throw();
  const sai_thrift_object_id_t* mirror_session_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_mirror_session_attribute_result__isset {
  _sai_rpc_sai_thrift_get_mirror_session_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_mirror_session_attribute_result__isset;

class sai_rpc_sai_thrift_get_mirror_session_attribute_result {
 public:

  sai_rpc_sai_thrift_get_mirror_session_attribute_result(const sai_rpc_sai_thrift_get_mirror_session_attribute_result&);
  sai_rpc_sai_thrift_get_mirror_session_attribute_result& operator=(const sai_rpc_sai_thrift_get_mirror_session_attribute_result&);
  sai_rpc_sai_thrift_get_mirror_session_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_mirror_session_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_mirror_session_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_mirror_session_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_mirror_session_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_mirror_session_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_mirror_session_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_mirror_session_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_mirror_session_attribute_presult__isset;

class sai_rpc_sai_thrift_get_mirror_session_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_mirror_session_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_mirror_session_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_inseg_entry_args__isset {
  _sai_rpc_sai_thrift_create_inseg_entry_args__isset() : inseg_entry(false), attr_list(false) {}
  bool inseg_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_inseg_entry_args__isset;

class sai_rpc_sai_thrift_create_inseg_entry_args {
 public:

  sai_rpc_sai_thrift_create_inseg_entry_args(const sai_rpc_sai_thrift_create_inseg_entry_args&);
  sai_rpc_sai_thrift_create_inseg_entry_args& operator=(const sai_rpc_sai_thrift_create_inseg_entry_args&);
  sai_rpc_sai_thrift_create_inseg_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_inseg_entry_args() throw();
  sai_thrift_inseg_entry_t inseg_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_inseg_entry_args__isset __isset;

  void __set_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_inseg_entry_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_inseg_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_inseg_entry_pargs() throw();
  const sai_thrift_inseg_entry_t* inseg_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_inseg_entry_result__isset {
  _sai_rpc_sai_thrift_create_inseg_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_inseg_entry_result__isset;

class sai_rpc_sai_thrift_create_inseg_entry_result {
 public:

  sai_rpc_sai_thrift_create_inseg_entry_result(const sai_rpc_sai_thrift_create_inseg_entry_result&);
  sai_rpc_sai_thrift_create_inseg_entry_result& operator=(const sai_rpc_sai_thrift_create_inseg_entry_result&);
  sai_rpc_sai_thrift_create_inseg_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_inseg_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_inseg_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_inseg_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_inseg_entry_presult__isset {
  _sai_rpc_sai_thrift_create_inseg_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_inseg_entry_presult__isset;

class sai_rpc_sai_thrift_create_inseg_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_inseg_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_inseg_entry_args__isset {
  _sai_rpc_sai_thrift_remove_inseg_entry_args__isset() : inseg_entry(false) {}
  bool inseg_entry :1;
} _sai_rpc_sai_thrift_remove_inseg_entry_args__isset;

class sai_rpc_sai_thrift_remove_inseg_entry_args {
 public:

  sai_rpc_sai_thrift_remove_inseg_entry_args(const sai_rpc_sai_thrift_remove_inseg_entry_args&);
  sai_rpc_sai_thrift_remove_inseg_entry_args& operator=(const sai_rpc_sai_thrift_remove_inseg_entry_args&);
  sai_rpc_sai_thrift_remove_inseg_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_inseg_entry_args() throw();
  sai_thrift_inseg_entry_t inseg_entry;

  _sai_rpc_sai_thrift_remove_inseg_entry_args__isset __isset;

  void __set_inseg_entry(const sai_thrift_inseg_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_inseg_entry_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_inseg_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_inseg_entry_pargs() throw();
  const sai_thrift_inseg_entry_t* inseg_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_inseg_entry_result__isset {
  _sai_rpc_sai_thrift_remove_inseg_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_inseg_entry_result__isset;

class sai_rpc_sai_thrift_remove_inseg_entry_result {
 public:

  sai_rpc_sai_thrift_remove_inseg_entry_result(const sai_rpc_sai_thrift_remove_inseg_entry_result&);
  sai_rpc_sai_thrift_remove_inseg_entry_result& operator=(const sai_rpc_sai_thrift_remove_inseg_entry_result&);
  sai_rpc_sai_thrift_remove_inseg_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_inseg_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_inseg_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_inseg_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_inseg_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_inseg_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_inseg_entry_presult__isset;

class sai_rpc_sai_thrift_remove_inseg_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_inseg_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset() : inseg_entry(false), attr(false) {}
  bool inseg_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_inseg_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_inseg_entry_attribute_args(const sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_set_inseg_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_set_inseg_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_inseg_entry_attribute_args() throw();
  sai_thrift_inseg_entry_t inseg_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset __isset;

  void __set_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_inseg_entry_attribute_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs() throw();
  const sai_thrift_inseg_entry_t* inseg_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_inseg_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_inseg_entry_attribute_result(const sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_set_inseg_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_set_inseg_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_inseg_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_inseg_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_inseg_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_inseg_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset() : inseg_entry(false), attr_list(false) {}
  bool inseg_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_inseg_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_inseg_entry_attribute_args(const sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_get_inseg_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_get_inseg_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_inseg_entry_attribute_args() throw();
  sai_thrift_inseg_entry_t inseg_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset __isset;

  void __set_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_inseg_entry_attribute_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs() throw();
  const sai_thrift_inseg_entry_t* inseg_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_inseg_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_inseg_entry_attribute_result(const sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_get_inseg_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_get_inseg_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_inseg_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_inseg_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_inseg_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inseg_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_inseg_entry_args__isset() : inseg_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool inseg_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_inseg_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_inseg_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_inseg_entry_args(const sai_rpc_sai_thrift_bulk_create_inseg_entry_args&);
  sai_rpc_sai_thrift_bulk_create_inseg_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_inseg_entry_args&);
  sai_rpc_sai_thrift_bulk_create_inseg_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_inseg_entry_args() throw();
  std::vector<sai_thrift_inseg_entry_t>  inseg_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_inseg_entry_args__isset __isset;

  void __set_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_inseg_entry_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_inseg_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_inseg_entry_pargs() throw();
  const std::vector<sai_thrift_inseg_entry_t> * inseg_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inseg_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_inseg_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_inseg_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_inseg_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_inseg_entry_result(const sai_rpc_sai_thrift_bulk_create_inseg_entry_result&);
  sai_rpc_sai_thrift_bulk_create_inseg_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_inseg_entry_result&);
  sai_rpc_sai_thrift_bulk_create_inseg_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_inseg_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_inseg_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_inseg_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_inseg_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_inseg_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_inseg_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_inseg_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inseg_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_args__isset() : inseg_entry(false), mode(false) {}
  bool inseg_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_inseg_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_inseg_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_inseg_entry_args(const sai_rpc_sai_thrift_bulk_remove_inseg_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_inseg_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_inseg_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_inseg_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_inseg_entry_args() throw();
  std::vector<sai_thrift_inseg_entry_t>  inseg_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_args__isset __isset;

  void __set_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_inseg_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_inseg_entry_pargs() throw();
  const std::vector<sai_thrift_inseg_entry_t> * inseg_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inseg_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_inseg_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_inseg_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_inseg_entry_result(const sai_rpc_sai_thrift_bulk_remove_inseg_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_inseg_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_inseg_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_inseg_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_inseg_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args__isset() : inseg_entry(false), attr_list(false), mode(false) {}
  bool inseg_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args() throw();
  std::vector<sai_thrift_inseg_entry_t>  inseg_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args__isset __isset;

  void __set_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_inseg_entry_t> * inseg_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args__isset() : inseg_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool inseg_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args() throw();
  std::vector<sai_thrift_inseg_entry_t>  inseg_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args__isset __isset;

  void __set_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args & rhs) const
  {
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_inseg_entry_t> * inseg_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_my_mac_args__isset {
  _sai_rpc_sai_thrift_create_my_mac_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_my_mac_args__isset;

class sai_rpc_sai_thrift_create_my_mac_args {
 public:

  sai_rpc_sai_thrift_create_my_mac_args(const sai_rpc_sai_thrift_create_my_mac_args&);
  sai_rpc_sai_thrift_create_my_mac_args& operator=(const sai_rpc_sai_thrift_create_my_mac_args&);
  sai_rpc_sai_thrift_create_my_mac_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_my_mac_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_my_mac_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_my_mac_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_my_mac_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_my_mac_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_my_mac_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_my_mac_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_my_mac_result__isset {
  _sai_rpc_sai_thrift_create_my_mac_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_my_mac_result__isset;

class sai_rpc_sai_thrift_create_my_mac_result {
 public:

  sai_rpc_sai_thrift_create_my_mac_result(const sai_rpc_sai_thrift_create_my_mac_result&);
  sai_rpc_sai_thrift_create_my_mac_result& operator=(const sai_rpc_sai_thrift_create_my_mac_result&);
  sai_rpc_sai_thrift_create_my_mac_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_my_mac_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_my_mac_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_my_mac_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_my_mac_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_my_mac_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_my_mac_presult__isset {
  _sai_rpc_sai_thrift_create_my_mac_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_my_mac_presult__isset;

class sai_rpc_sai_thrift_create_my_mac_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_my_mac_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_my_mac_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_my_mac_args__isset {
  _sai_rpc_sai_thrift_remove_my_mac_args__isset() : my_mac_oid(false) {}
  bool my_mac_oid :1;
} _sai_rpc_sai_thrift_remove_my_mac_args__isset;

class sai_rpc_sai_thrift_remove_my_mac_args {
 public:

  sai_rpc_sai_thrift_remove_my_mac_args(const sai_rpc_sai_thrift_remove_my_mac_args&);
  sai_rpc_sai_thrift_remove_my_mac_args& operator=(const sai_rpc_sai_thrift_remove_my_mac_args&);
  sai_rpc_sai_thrift_remove_my_mac_args() : my_mac_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_my_mac_args() throw();
  sai_thrift_object_id_t my_mac_oid;

  _sai_rpc_sai_thrift_remove_my_mac_args__isset __isset;

  void __set_my_mac_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_my_mac_args & rhs) const
  {
    if (!(my_mac_oid == rhs.my_mac_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_my_mac_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_my_mac_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_my_mac_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_my_mac_pargs() throw();
  const sai_thrift_object_id_t* my_mac_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_my_mac_result__isset {
  _sai_rpc_sai_thrift_remove_my_mac_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_my_mac_result__isset;

class sai_rpc_sai_thrift_remove_my_mac_result {
 public:

  sai_rpc_sai_thrift_remove_my_mac_result(const sai_rpc_sai_thrift_remove_my_mac_result&);
  sai_rpc_sai_thrift_remove_my_mac_result& operator=(const sai_rpc_sai_thrift_remove_my_mac_result&);
  sai_rpc_sai_thrift_remove_my_mac_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_my_mac_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_my_mac_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_my_mac_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_my_mac_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_my_mac_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_my_mac_presult__isset {
  _sai_rpc_sai_thrift_remove_my_mac_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_my_mac_presult__isset;

class sai_rpc_sai_thrift_remove_my_mac_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_my_mac_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_my_mac_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_my_mac_attribute_args__isset {
  _sai_rpc_sai_thrift_set_my_mac_attribute_args__isset() : my_mac_oid(false), attr(false) {}
  bool my_mac_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_my_mac_attribute_args__isset;

class sai_rpc_sai_thrift_set_my_mac_attribute_args {
 public:

  sai_rpc_sai_thrift_set_my_mac_attribute_args(const sai_rpc_sai_thrift_set_my_mac_attribute_args&);
  sai_rpc_sai_thrift_set_my_mac_attribute_args& operator=(const sai_rpc_sai_thrift_set_my_mac_attribute_args&);
  sai_rpc_sai_thrift_set_my_mac_attribute_args() : my_mac_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_my_mac_attribute_args() throw();
  sai_thrift_object_id_t my_mac_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_my_mac_attribute_args__isset __isset;

  void __set_my_mac_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_my_mac_attribute_args & rhs) const
  {
    if (!(my_mac_oid == rhs.my_mac_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_my_mac_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_my_mac_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_my_mac_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_my_mac_attribute_pargs() throw();
  const sai_thrift_object_id_t* my_mac_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_my_mac_attribute_result__isset {
  _sai_rpc_sai_thrift_set_my_mac_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_my_mac_attribute_result__isset;

class sai_rpc_sai_thrift_set_my_mac_attribute_result {
 public:

  sai_rpc_sai_thrift_set_my_mac_attribute_result(const sai_rpc_sai_thrift_set_my_mac_attribute_result&);
  sai_rpc_sai_thrift_set_my_mac_attribute_result& operator=(const sai_rpc_sai_thrift_set_my_mac_attribute_result&);
  sai_rpc_sai_thrift_set_my_mac_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_my_mac_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_my_mac_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_my_mac_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_my_mac_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_my_mac_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_my_mac_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_my_mac_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_my_mac_attribute_presult__isset;

class sai_rpc_sai_thrift_set_my_mac_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_my_mac_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_my_mac_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_my_mac_attribute_args__isset {
  _sai_rpc_sai_thrift_get_my_mac_attribute_args__isset() : my_mac_oid(false), attr_list(false) {}
  bool my_mac_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_my_mac_attribute_args__isset;

class sai_rpc_sai_thrift_get_my_mac_attribute_args {
 public:

  sai_rpc_sai_thrift_get_my_mac_attribute_args(const sai_rpc_sai_thrift_get_my_mac_attribute_args&);
  sai_rpc_sai_thrift_get_my_mac_attribute_args& operator=(const sai_rpc_sai_thrift_get_my_mac_attribute_args&);
  sai_rpc_sai_thrift_get_my_mac_attribute_args() : my_mac_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_my_mac_attribute_args() throw();
  sai_thrift_object_id_t my_mac_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_my_mac_attribute_args__isset __isset;

  void __set_my_mac_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_my_mac_attribute_args & rhs) const
  {
    if (!(my_mac_oid == rhs.my_mac_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_my_mac_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_my_mac_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_my_mac_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_my_mac_attribute_pargs() throw();
  const sai_thrift_object_id_t* my_mac_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_my_mac_attribute_result__isset {
  _sai_rpc_sai_thrift_get_my_mac_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_my_mac_attribute_result__isset;

class sai_rpc_sai_thrift_get_my_mac_attribute_result {
 public:

  sai_rpc_sai_thrift_get_my_mac_attribute_result(const sai_rpc_sai_thrift_get_my_mac_attribute_result&);
  sai_rpc_sai_thrift_get_my_mac_attribute_result& operator=(const sai_rpc_sai_thrift_get_my_mac_attribute_result&);
  sai_rpc_sai_thrift_get_my_mac_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_my_mac_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_my_mac_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_my_mac_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_my_mac_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_my_mac_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_my_mac_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_my_mac_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_my_mac_attribute_presult__isset;

class sai_rpc_sai_thrift_get_my_mac_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_my_mac_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_my_mac_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_nat_entry_args__isset {
  _sai_rpc_sai_thrift_create_nat_entry_args__isset() : nat_entry(false), attr_list(false) {}
  bool nat_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_nat_entry_args__isset;

class sai_rpc_sai_thrift_create_nat_entry_args {
 public:

  sai_rpc_sai_thrift_create_nat_entry_args(const sai_rpc_sai_thrift_create_nat_entry_args&);
  sai_rpc_sai_thrift_create_nat_entry_args& operator=(const sai_rpc_sai_thrift_create_nat_entry_args&);
  sai_rpc_sai_thrift_create_nat_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_nat_entry_args() throw();
  sai_thrift_nat_entry_t nat_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_nat_entry_args__isset __isset;

  void __set_nat_entry(const sai_thrift_nat_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_nat_entry_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_nat_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_nat_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_nat_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_nat_entry_pargs() throw();
  const sai_thrift_nat_entry_t* nat_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_nat_entry_result__isset {
  _sai_rpc_sai_thrift_create_nat_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_nat_entry_result__isset;

class sai_rpc_sai_thrift_create_nat_entry_result {
 public:

  sai_rpc_sai_thrift_create_nat_entry_result(const sai_rpc_sai_thrift_create_nat_entry_result&);
  sai_rpc_sai_thrift_create_nat_entry_result& operator=(const sai_rpc_sai_thrift_create_nat_entry_result&);
  sai_rpc_sai_thrift_create_nat_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_nat_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_nat_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_nat_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_nat_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_nat_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_nat_entry_presult__isset {
  _sai_rpc_sai_thrift_create_nat_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_nat_entry_presult__isset;

class sai_rpc_sai_thrift_create_nat_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_nat_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_nat_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_nat_entry_args__isset {
  _sai_rpc_sai_thrift_remove_nat_entry_args__isset() : nat_entry(false) {}
  bool nat_entry :1;
} _sai_rpc_sai_thrift_remove_nat_entry_args__isset;

class sai_rpc_sai_thrift_remove_nat_entry_args {
 public:

  sai_rpc_sai_thrift_remove_nat_entry_args(const sai_rpc_sai_thrift_remove_nat_entry_args&);
  sai_rpc_sai_thrift_remove_nat_entry_args& operator=(const sai_rpc_sai_thrift_remove_nat_entry_args&);
  sai_rpc_sai_thrift_remove_nat_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_nat_entry_args() throw();
  sai_thrift_nat_entry_t nat_entry;

  _sai_rpc_sai_thrift_remove_nat_entry_args__isset __isset;

  void __set_nat_entry(const sai_thrift_nat_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_nat_entry_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_nat_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_nat_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_nat_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_nat_entry_pargs() throw();
  const sai_thrift_nat_entry_t* nat_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_nat_entry_result__isset {
  _sai_rpc_sai_thrift_remove_nat_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_nat_entry_result__isset;

class sai_rpc_sai_thrift_remove_nat_entry_result {
 public:

  sai_rpc_sai_thrift_remove_nat_entry_result(const sai_rpc_sai_thrift_remove_nat_entry_result&);
  sai_rpc_sai_thrift_remove_nat_entry_result& operator=(const sai_rpc_sai_thrift_remove_nat_entry_result&);
  sai_rpc_sai_thrift_remove_nat_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_nat_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_nat_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_nat_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_nat_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_nat_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_nat_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_nat_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_nat_entry_presult__isset;

class sai_rpc_sai_thrift_remove_nat_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_nat_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_nat_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_nat_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_nat_entry_attribute_args__isset() : nat_entry(false), attr(false) {}
  bool nat_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_nat_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_nat_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_nat_entry_attribute_args(const sai_rpc_sai_thrift_set_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_set_nat_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_set_nat_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_nat_entry_attribute_args() throw();
  sai_thrift_nat_entry_t nat_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_nat_entry_attribute_args__isset __isset;

  void __set_nat_entry(const sai_thrift_nat_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_nat_entry_attribute_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_nat_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_nat_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_nat_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_nat_entry_attribute_pargs() throw();
  const sai_thrift_nat_entry_t* nat_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_nat_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_nat_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_nat_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_nat_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_nat_entry_attribute_result(const sai_rpc_sai_thrift_set_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_set_nat_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_set_nat_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_nat_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_nat_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_nat_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_nat_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_nat_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_nat_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_nat_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_nat_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_nat_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_nat_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_nat_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_nat_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_nat_entry_attribute_args__isset() : nat_entry(false), attr_list(false) {}
  bool nat_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_nat_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_nat_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_nat_entry_attribute_args(const sai_rpc_sai_thrift_get_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_get_nat_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_get_nat_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_nat_entry_attribute_args() throw();
  sai_thrift_nat_entry_t nat_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_nat_entry_attribute_args__isset __isset;

  void __set_nat_entry(const sai_thrift_nat_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_nat_entry_attribute_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_nat_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_nat_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_nat_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_nat_entry_attribute_pargs() throw();
  const sai_thrift_nat_entry_t* nat_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_nat_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_nat_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_nat_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_nat_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_nat_entry_attribute_result(const sai_rpc_sai_thrift_get_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_get_nat_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_get_nat_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_nat_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_nat_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_nat_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_nat_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_nat_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_nat_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_nat_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_nat_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_nat_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_nat_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_nat_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_nat_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_nat_entry_args__isset() : nat_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool nat_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_nat_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_nat_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_nat_entry_args(const sai_rpc_sai_thrift_bulk_create_nat_entry_args&);
  sai_rpc_sai_thrift_bulk_create_nat_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_nat_entry_args&);
  sai_rpc_sai_thrift_bulk_create_nat_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_nat_entry_args() throw();
  std::vector<sai_thrift_nat_entry_t>  nat_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_nat_entry_args__isset __isset;

  void __set_nat_entry(const std::vector<sai_thrift_nat_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_nat_entry_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_nat_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_nat_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_nat_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_nat_entry_pargs() throw();
  const std::vector<sai_thrift_nat_entry_t> * nat_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_nat_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_nat_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_nat_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_nat_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_nat_entry_result(const sai_rpc_sai_thrift_bulk_create_nat_entry_result&);
  sai_rpc_sai_thrift_bulk_create_nat_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_nat_entry_result&);
  sai_rpc_sai_thrift_bulk_create_nat_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_nat_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_nat_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_nat_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_nat_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_nat_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_nat_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_nat_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_nat_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_nat_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_nat_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_nat_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_nat_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_nat_entry_args__isset() : nat_entry(false), mode(false) {}
  bool nat_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_nat_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_nat_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_nat_entry_args(const sai_rpc_sai_thrift_bulk_remove_nat_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_nat_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_nat_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_nat_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_nat_entry_args() throw();
  std::vector<sai_thrift_nat_entry_t>  nat_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_nat_entry_args__isset __isset;

  void __set_nat_entry(const std::vector<sai_thrift_nat_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_nat_entry_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_nat_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_nat_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_nat_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_nat_entry_pargs() throw();
  const std::vector<sai_thrift_nat_entry_t> * nat_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_nat_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_nat_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_nat_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_nat_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_nat_entry_result(const sai_rpc_sai_thrift_bulk_remove_nat_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_nat_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_nat_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_nat_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_nat_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_nat_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_nat_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_nat_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_nat_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_nat_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_nat_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_nat_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_nat_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_nat_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_nat_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args__isset() : nat_entry(false), attr_list(false), mode(false) {}
  bool nat_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args() throw();
  std::vector<sai_thrift_nat_entry_t>  nat_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args__isset __isset;

  void __set_nat_entry(const std::vector<sai_thrift_nat_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_nat_entry_t> * nat_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_nat_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args__isset() : nat_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool nat_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args() throw();
  std::vector<sai_thrift_nat_entry_t>  nat_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args__isset __isset;

  void __set_nat_entry(const std::vector<sai_thrift_nat_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args & rhs) const
  {
    if (!(nat_entry == rhs.nat_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_nat_entry_t> * nat_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_nat_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_nat_zone_counter_args__isset {
  _sai_rpc_sai_thrift_create_nat_zone_counter_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_nat_zone_counter_args__isset;

class sai_rpc_sai_thrift_create_nat_zone_counter_args {
 public:

  sai_rpc_sai_thrift_create_nat_zone_counter_args(const sai_rpc_sai_thrift_create_nat_zone_counter_args&);
  sai_rpc_sai_thrift_create_nat_zone_counter_args& operator=(const sai_rpc_sai_thrift_create_nat_zone_counter_args&);
  sai_rpc_sai_thrift_create_nat_zone_counter_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_nat_zone_counter_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_nat_zone_counter_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_nat_zone_counter_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_nat_zone_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_nat_zone_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_nat_zone_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_nat_zone_counter_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_nat_zone_counter_result__isset {
  _sai_rpc_sai_thrift_create_nat_zone_counter_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_nat_zone_counter_result__isset;

class sai_rpc_sai_thrift_create_nat_zone_counter_result {
 public:

  sai_rpc_sai_thrift_create_nat_zone_counter_result(const sai_rpc_sai_thrift_create_nat_zone_counter_result&);
  sai_rpc_sai_thrift_create_nat_zone_counter_result& operator=(const sai_rpc_sai_thrift_create_nat_zone_counter_result&);
  sai_rpc_sai_thrift_create_nat_zone_counter_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_nat_zone_counter_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_nat_zone_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_nat_zone_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_nat_zone_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_nat_zone_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_nat_zone_counter_presult__isset {
  _sai_rpc_sai_thrift_create_nat_zone_counter_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_nat_zone_counter_presult__isset;

class sai_rpc_sai_thrift_create_nat_zone_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_nat_zone_counter_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_nat_zone_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_nat_zone_counter_args__isset {
  _sai_rpc_sai_thrift_remove_nat_zone_counter_args__isset() : nat_zone_counter_oid(false) {}
  bool nat_zone_counter_oid :1;
} _sai_rpc_sai_thrift_remove_nat_zone_counter_args__isset;

class sai_rpc_sai_thrift_remove_nat_zone_counter_args {
 public:

  sai_rpc_sai_thrift_remove_nat_zone_counter_args(const sai_rpc_sai_thrift_remove_nat_zone_counter_args&);
  sai_rpc_sai_thrift_remove_nat_zone_counter_args& operator=(const sai_rpc_sai_thrift_remove_nat_zone_counter_args&);
  sai_rpc_sai_thrift_remove_nat_zone_counter_args() : nat_zone_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_nat_zone_counter_args() throw();
  sai_thrift_object_id_t nat_zone_counter_oid;

  _sai_rpc_sai_thrift_remove_nat_zone_counter_args__isset __isset;

  void __set_nat_zone_counter_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_nat_zone_counter_args & rhs) const
  {
    if (!(nat_zone_counter_oid == rhs.nat_zone_counter_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_nat_zone_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_nat_zone_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_nat_zone_counter_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_nat_zone_counter_pargs() throw();
  const sai_thrift_object_id_t* nat_zone_counter_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_nat_zone_counter_result__isset {
  _sai_rpc_sai_thrift_remove_nat_zone_counter_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_nat_zone_counter_result__isset;

class sai_rpc_sai_thrift_remove_nat_zone_counter_result {
 public:

  sai_rpc_sai_thrift_remove_nat_zone_counter_result(const sai_rpc_sai_thrift_remove_nat_zone_counter_result&);
  sai_rpc_sai_thrift_remove_nat_zone_counter_result& operator=(const sai_rpc_sai_thrift_remove_nat_zone_counter_result&);
  sai_rpc_sai_thrift_remove_nat_zone_counter_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_nat_zone_counter_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_nat_zone_counter_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_nat_zone_counter_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_nat_zone_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_nat_zone_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_nat_zone_counter_presult__isset {
  _sai_rpc_sai_thrift_remove_nat_zone_counter_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_nat_zone_counter_presult__isset;

class sai_rpc_sai_thrift_remove_nat_zone_counter_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_nat_zone_counter_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_nat_zone_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args__isset() : nat_zone_counter_oid(false), attr(false) {}
  bool nat_zone_counter_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args__isset;

class sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args(const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args&);
  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args& operator=(const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args&);
  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args() : nat_zone_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args() throw();
  sai_thrift_object_id_t nat_zone_counter_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args__isset __isset;

  void __set_nat_zone_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args & rhs) const
  {
    if (!(nat_zone_counter_oid == rhs.nat_zone_counter_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_nat_zone_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_nat_zone_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* nat_zone_counter_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result__isset;

class sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result(const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result&);
  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result& operator=(const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result&);
  sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_nat_zone_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_nat_zone_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args__isset {
  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args__isset() : nat_zone_counter_oid(false), attr_list(false) {}
  bool nat_zone_counter_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args__isset;

class sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args {
 public:

  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args(const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args&);
  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args& operator=(const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args&);
  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args() : nat_zone_counter_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args() throw();
  sai_thrift_object_id_t nat_zone_counter_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args__isset __isset;

  void __set_nat_zone_counter_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args & rhs) const
  {
    if (!(nat_zone_counter_oid == rhs.nat_zone_counter_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_nat_zone_counter_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_nat_zone_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* nat_zone_counter_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result__isset {
  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result__isset;

class sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result {
 public:

  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result(const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result&);
  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result& operator=(const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result&);
  sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_nat_zone_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult__isset;

class sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_nat_zone_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_neighbor_entry_args__isset {
  _sai_rpc_sai_thrift_create_neighbor_entry_args__isset() : neighbor_entry(false), attr_list(false) {}
  bool neighbor_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_neighbor_entry_args__isset;

class sai_rpc_sai_thrift_create_neighbor_entry_args {
 public:

  sai_rpc_sai_thrift_create_neighbor_entry_args(const sai_rpc_sai_thrift_create_neighbor_entry_args&);
  sai_rpc_sai_thrift_create_neighbor_entry_args& operator=(const sai_rpc_sai_thrift_create_neighbor_entry_args&);
  sai_rpc_sai_thrift_create_neighbor_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_neighbor_entry_args() throw();
  sai_thrift_neighbor_entry_t neighbor_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_neighbor_entry_args__isset __isset;

  void __set_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_neighbor_entry_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_neighbor_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_neighbor_entry_pargs() throw();
  const sai_thrift_neighbor_entry_t* neighbor_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_neighbor_entry_result__isset {
  _sai_rpc_sai_thrift_create_neighbor_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_neighbor_entry_result__isset;

class sai_rpc_sai_thrift_create_neighbor_entry_result {
 public:

  sai_rpc_sai_thrift_create_neighbor_entry_result(const sai_rpc_sai_thrift_create_neighbor_entry_result&);
  sai_rpc_sai_thrift_create_neighbor_entry_result& operator=(const sai_rpc_sai_thrift_create_neighbor_entry_result&);
  sai_rpc_sai_thrift_create_neighbor_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_neighbor_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_neighbor_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_neighbor_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_neighbor_entry_presult__isset {
  _sai_rpc_sai_thrift_create_neighbor_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_neighbor_entry_presult__isset;

class sai_rpc_sai_thrift_create_neighbor_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_neighbor_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_neighbor_entry_args__isset {
  _sai_rpc_sai_thrift_remove_neighbor_entry_args__isset() : neighbor_entry(false) {}
  bool neighbor_entry :1;
} _sai_rpc_sai_thrift_remove_neighbor_entry_args__isset;

class sai_rpc_sai_thrift_remove_neighbor_entry_args {
 public:

  sai_rpc_sai_thrift_remove_neighbor_entry_args(const sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  sai_rpc_sai_thrift_remove_neighbor_entry_args& operator=(const sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  sai_rpc_sai_thrift_remove_neighbor_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_neighbor_entry_args() throw();
  sai_thrift_neighbor_entry_t neighbor_entry;

  _sai_rpc_sai_thrift_remove_neighbor_entry_args__isset __isset;

  void __set_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_neighbor_entry_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_neighbor_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_neighbor_entry_pargs() throw();
  const sai_thrift_neighbor_entry_t* neighbor_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_neighbor_entry_result__isset {
  _sai_rpc_sai_thrift_remove_neighbor_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_neighbor_entry_result__isset;

class sai_rpc_sai_thrift_remove_neighbor_entry_result {
 public:

  sai_rpc_sai_thrift_remove_neighbor_entry_result(const sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  sai_rpc_sai_thrift_remove_neighbor_entry_result& operator=(const sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  sai_rpc_sai_thrift_remove_neighbor_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_neighbor_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_neighbor_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_neighbor_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset;

class sai_rpc_sai_thrift_remove_neighbor_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_neighbor_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset() : neighbor_entry(false), attr(false) {}
  bool neighbor_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_neighbor_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_neighbor_entry_attribute_args(const sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_set_neighbor_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() throw();
  sai_thrift_neighbor_entry_t neighbor_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset __isset;

  void __set_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs() throw();
  const sai_thrift_neighbor_entry_t* neighbor_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_neighbor_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_neighbor_entry_attribute_result(const sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_set_neighbor_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset() : neighbor_entry(false), attr_list(false) {}
  bool neighbor_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_neighbor_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_neighbor_entry_attribute_args(const sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_get_neighbor_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() throw();
  sai_thrift_neighbor_entry_t neighbor_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset __isset;

  void __set_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs() throw();
  const sai_thrift_neighbor_entry_t* neighbor_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_neighbor_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_neighbor_entry_attribute_result(const sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_get_neighbor_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sai_rpc_sai_thrift_remove_all_neighbor_entries_args {
 public:

  sai_rpc_sai_thrift_remove_all_neighbor_entries_args(const sai_rpc_sai_thrift_remove_all_neighbor_entries_args&);
  sai_rpc_sai_thrift_remove_all_neighbor_entries_args& operator=(const sai_rpc_sai_thrift_remove_all_neighbor_entries_args&);
  sai_rpc_sai_thrift_remove_all_neighbor_entries_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_all_neighbor_entries_args() throw();

  bool operator == (const sai_rpc_sai_thrift_remove_all_neighbor_entries_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_all_neighbor_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_all_neighbor_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_all_neighbor_entries_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_all_neighbor_entries_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_all_neighbor_entries_result__isset {
  _sai_rpc_sai_thrift_remove_all_neighbor_entries_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_all_neighbor_entries_result__isset;

class sai_rpc_sai_thrift_remove_all_neighbor_entries_result {
 public:

  sai_rpc_sai_thrift_remove_all_neighbor_entries_result(const sai_rpc_sai_thrift_remove_all_neighbor_entries_result&);
  sai_rpc_sai_thrift_remove_all_neighbor_entries_result& operator=(const sai_rpc_sai_thrift_remove_all_neighbor_entries_result&);
  sai_rpc_sai_thrift_remove_all_neighbor_entries_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_all_neighbor_entries_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_all_neighbor_entries_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_all_neighbor_entries_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_all_neighbor_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_all_neighbor_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_all_neighbor_entries_presult__isset {
  _sai_rpc_sai_thrift_remove_all_neighbor_entries_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_all_neighbor_entries_presult__isset;

class sai_rpc_sai_thrift_remove_all_neighbor_entries_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_all_neighbor_entries_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_all_neighbor_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_neighbor_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_args__isset() : neighbor_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool neighbor_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_neighbor_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_neighbor_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_neighbor_entry_args(const sai_rpc_sai_thrift_bulk_create_neighbor_entry_args&);
  sai_rpc_sai_thrift_bulk_create_neighbor_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_neighbor_entry_args&);
  sai_rpc_sai_thrift_bulk_create_neighbor_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_neighbor_entry_args() throw();
  std::vector<sai_thrift_neighbor_entry_t>  neighbor_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_args__isset __isset;

  void __set_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_neighbor_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_neighbor_entry_pargs() throw();
  const std::vector<sai_thrift_neighbor_entry_t> * neighbor_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_neighbor_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_neighbor_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_neighbor_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_neighbor_entry_result(const sai_rpc_sai_thrift_bulk_create_neighbor_entry_result&);
  sai_rpc_sai_thrift_bulk_create_neighbor_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_neighbor_entry_result&);
  sai_rpc_sai_thrift_bulk_create_neighbor_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_neighbor_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args__isset() : neighbor_entry(false), mode(false) {}
  bool neighbor_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args(const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args() throw();
  std::vector<sai_thrift_neighbor_entry_t>  neighbor_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args__isset __isset;

  void __set_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_neighbor_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_neighbor_entry_pargs() throw();
  const std::vector<sai_thrift_neighbor_entry_t> * neighbor_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result(const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args__isset() : neighbor_entry(false), attr_list(false), mode(false) {}
  bool neighbor_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args() throw();
  std::vector<sai_thrift_neighbor_entry_t>  neighbor_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args__isset __isset;

  void __set_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_neighbor_entry_t> * neighbor_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args__isset() : neighbor_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool neighbor_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args() throw();
  std::vector<sai_thrift_neighbor_entry_t>  neighbor_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args__isset __isset;

  void __set_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args & rhs) const
  {
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_neighbor_entry_t> * neighbor_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_args__isset {
  _sai_rpc_sai_thrift_create_next_hop_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_next_hop_args__isset;

class sai_rpc_sai_thrift_create_next_hop_args {
 public:

  sai_rpc_sai_thrift_create_next_hop_args(const sai_rpc_sai_thrift_create_next_hop_args&);
  sai_rpc_sai_thrift_create_next_hop_args& operator=(const sai_rpc_sai_thrift_create_next_hop_args&);
  sai_rpc_sai_thrift_create_next_hop_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_next_hop_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_next_hop_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_result__isset {
  _sai_rpc_sai_thrift_create_next_hop_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_result__isset;

class sai_rpc_sai_thrift_create_next_hop_result {
 public:

  sai_rpc_sai_thrift_create_next_hop_result(const sai_rpc_sai_thrift_create_next_hop_result&);
  sai_rpc_sai_thrift_create_next_hop_result& operator=(const sai_rpc_sai_thrift_create_next_hop_result&);
  sai_rpc_sai_thrift_create_next_hop_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_presult__isset {
  _sai_rpc_sai_thrift_create_next_hop_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_presult__isset;

class sai_rpc_sai_thrift_create_next_hop_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_args__isset {
  _sai_rpc_sai_thrift_remove_next_hop_args__isset() : next_hop_oid(false) {}
  bool next_hop_oid :1;
} _sai_rpc_sai_thrift_remove_next_hop_args__isset;

class sai_rpc_sai_thrift_remove_next_hop_args {
 public:

  sai_rpc_sai_thrift_remove_next_hop_args(const sai_rpc_sai_thrift_remove_next_hop_args&);
  sai_rpc_sai_thrift_remove_next_hop_args& operator=(const sai_rpc_sai_thrift_remove_next_hop_args&);
  sai_rpc_sai_thrift_remove_next_hop_args() : next_hop_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_args() throw();
  sai_thrift_object_id_t next_hop_oid;

  _sai_rpc_sai_thrift_remove_next_hop_args__isset __isset;

  void __set_next_hop_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_args & rhs) const
  {
    if (!(next_hop_oid == rhs.next_hop_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_next_hop_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_pargs() throw();
  const sai_thrift_object_id_t* next_hop_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_result__isset {
  _sai_rpc_sai_thrift_remove_next_hop_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_result__isset;

class sai_rpc_sai_thrift_remove_next_hop_result {
 public:

  sai_rpc_sai_thrift_remove_next_hop_result(const sai_rpc_sai_thrift_remove_next_hop_result&);
  sai_rpc_sai_thrift_remove_next_hop_result& operator=(const sai_rpc_sai_thrift_remove_next_hop_result&);
  sai_rpc_sai_thrift_remove_next_hop_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_presult__isset {
  _sai_rpc_sai_thrift_remove_next_hop_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_presult__isset;

class sai_rpc_sai_thrift_remove_next_hop_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_attribute_args__isset {
  _sai_rpc_sai_thrift_set_next_hop_attribute_args__isset() : next_hop_oid(false), attr(false) {}
  bool next_hop_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_next_hop_attribute_args__isset;

class sai_rpc_sai_thrift_set_next_hop_attribute_args {
 public:

  sai_rpc_sai_thrift_set_next_hop_attribute_args(const sai_rpc_sai_thrift_set_next_hop_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_attribute_args& operator=(const sai_rpc_sai_thrift_set_next_hop_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_attribute_args() : next_hop_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_attribute_args() throw();
  sai_thrift_object_id_t next_hop_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_next_hop_attribute_args__isset __isset;

  void __set_next_hop_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_attribute_args & rhs) const
  {
    if (!(next_hop_oid == rhs.next_hop_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_next_hop_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_attribute_result__isset {
  _sai_rpc_sai_thrift_set_next_hop_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_attribute_result__isset;

class sai_rpc_sai_thrift_set_next_hop_attribute_result {
 public:

  sai_rpc_sai_thrift_set_next_hop_attribute_result(const sai_rpc_sai_thrift_set_next_hop_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_attribute_result& operator=(const sai_rpc_sai_thrift_set_next_hop_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_next_hop_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_attribute_presult__isset;

class sai_rpc_sai_thrift_set_next_hop_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_attribute_args__isset {
  _sai_rpc_sai_thrift_get_next_hop_attribute_args__isset() : next_hop_oid(false), attr_list(false) {}
  bool next_hop_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_next_hop_attribute_args__isset;

class sai_rpc_sai_thrift_get_next_hop_attribute_args {
 public:

  sai_rpc_sai_thrift_get_next_hop_attribute_args(const sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_attribute_args& operator=(const sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_attribute_args() : next_hop_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_attribute_args() throw();
  sai_thrift_object_id_t next_hop_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_next_hop_attribute_args__isset __isset;

  void __set_next_hop_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_attribute_args & rhs) const
  {
    if (!(next_hop_oid == rhs.next_hop_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_next_hop_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_attribute_result__isset {
  _sai_rpc_sai_thrift_get_next_hop_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_attribute_result__isset;

class sai_rpc_sai_thrift_get_next_hop_attribute_result {
 public:

  sai_rpc_sai_thrift_get_next_hop_attribute_result(const sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_attribute_result& operator=(const sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset;

class sai_rpc_sai_thrift_get_next_hop_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_args__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_next_hop_group_args__isset;

class sai_rpc_sai_thrift_create_next_hop_group_args {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_args(const sai_rpc_sai_thrift_create_next_hop_group_args&);
  sai_rpc_sai_thrift_create_next_hop_group_args& operator=(const sai_rpc_sai_thrift_create_next_hop_group_args&);
  sai_rpc_sai_thrift_create_next_hop_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_next_hop_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_next_hop_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_result__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_result__isset;

class sai_rpc_sai_thrift_create_next_hop_group_result {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_result(const sai_rpc_sai_thrift_create_next_hop_group_result&);
  sai_rpc_sai_thrift_create_next_hop_group_result& operator=(const sai_rpc_sai_thrift_create_next_hop_group_result&);
  sai_rpc_sai_thrift_create_next_hop_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_presult__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_presult__isset;

class sai_rpc_sai_thrift_create_next_hop_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_args__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_args__isset() : next_hop_group_oid(false) {}
  bool next_hop_group_oid :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_args__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_args {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_args(const sai_rpc_sai_thrift_remove_next_hop_group_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_args& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_args() : next_hop_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_args() throw();
  sai_thrift_object_id_t next_hop_group_oid;

  _sai_rpc_sai_thrift_remove_next_hop_group_args__isset __isset;

  void __set_next_hop_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_args & rhs) const
  {
    if (!(next_hop_group_oid == rhs.next_hop_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_next_hop_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_result__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_result__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_result {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_result(const sai_rpc_sai_thrift_remove_next_hop_group_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_result& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_presult__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_presult__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset() : next_hop_group_oid(false), attr(false) {}
  bool next_hop_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_next_hop_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_attribute_args(const sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_attribute_args() : next_hop_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset __isset;

  void __set_next_hop_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_attribute_args & rhs) const
  {
    if (!(next_hop_group_oid == rhs.next_hop_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_next_hop_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_attribute_result(const sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_next_hop_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset() : next_hop_group_oid(false), attr_list(false) {}
  bool next_hop_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_next_hop_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_attribute_args(const sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_attribute_args() : next_hop_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset __isset;

  void __set_next_hop_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_attribute_args & rhs) const
  {
    if (!(next_hop_group_oid == rhs.next_hop_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_next_hop_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_attribute_result(const sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_next_hop_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_member_args__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_next_hop_group_member_args__isset;

class sai_rpc_sai_thrift_create_next_hop_group_member_args {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_member_args(const sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  sai_rpc_sai_thrift_create_next_hop_group_member_args& operator=(const sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  sai_rpc_sai_thrift_create_next_hop_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_next_hop_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_next_hop_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_member_result__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_member_result__isset;

class sai_rpc_sai_thrift_create_next_hop_group_member_result {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_member_result(const sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  sai_rpc_sai_thrift_create_next_hop_group_member_result& operator=(const sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  sai_rpc_sai_thrift_create_next_hop_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset;

class sai_rpc_sai_thrift_create_next_hop_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset() : next_hop_group_member_oid(false) {}
  bool next_hop_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_member_args(const sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_member_args& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_member_args() : next_hop_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_member_args() throw();
  sai_thrift_object_id_t next_hop_group_member_oid;

  _sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset __isset;

  void __set_next_hop_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_member_args & rhs) const
  {
    if (!(next_hop_group_member_oid == rhs.next_hop_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_next_hop_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_member_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_member_result(const sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_member_result& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args__isset() : next_hop_group_member_oid(false), attr(false) {}
  bool next_hop_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args(const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args() : next_hop_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args__isset __isset;

  void __set_next_hop_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args & rhs) const
  {
    if (!(next_hop_group_member_oid == rhs.next_hop_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_next_hop_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result(const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset() : next_hop_group_member_oid(false), attr_list(false) {}
  bool next_hop_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args(const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() : next_hop_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset __isset;

  void __set_next_hop_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & rhs) const
  {
    if (!(next_hop_group_member_oid == rhs.next_hop_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result(const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_map_args__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_map_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_next_hop_group_map_args__isset;

class sai_rpc_sai_thrift_create_next_hop_group_map_args {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_map_args(const sai_rpc_sai_thrift_create_next_hop_group_map_args&);
  sai_rpc_sai_thrift_create_next_hop_group_map_args& operator=(const sai_rpc_sai_thrift_create_next_hop_group_map_args&);
  sai_rpc_sai_thrift_create_next_hop_group_map_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_map_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_next_hop_group_map_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_map_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_next_hop_group_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_map_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_map_result__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_map_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_map_result__isset;

class sai_rpc_sai_thrift_create_next_hop_group_map_result {
 public:

  sai_rpc_sai_thrift_create_next_hop_group_map_result(const sai_rpc_sai_thrift_create_next_hop_group_map_result&);
  sai_rpc_sai_thrift_create_next_hop_group_map_result& operator=(const sai_rpc_sai_thrift_create_next_hop_group_map_result&);
  sai_rpc_sai_thrift_create_next_hop_group_map_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_next_hop_group_map_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_next_hop_group_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_next_hop_group_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_next_hop_group_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_next_hop_group_map_presult__isset {
  _sai_rpc_sai_thrift_create_next_hop_group_map_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_next_hop_group_map_presult__isset;

class sai_rpc_sai_thrift_create_next_hop_group_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_next_hop_group_map_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_next_hop_group_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_map_args__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_map_args__isset() : next_hop_group_map_oid(false) {}
  bool next_hop_group_map_oid :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_map_args__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_map_args {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_map_args(const sai_rpc_sai_thrift_remove_next_hop_group_map_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_map_args& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_map_args&);
  sai_rpc_sai_thrift_remove_next_hop_group_map_args() : next_hop_group_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_map_args() throw();
  sai_thrift_object_id_t next_hop_group_map_oid;

  _sai_rpc_sai_thrift_remove_next_hop_group_map_args__isset __isset;

  void __set_next_hop_group_map_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_map_args & rhs) const
  {
    if (!(next_hop_group_map_oid == rhs.next_hop_group_map_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_next_hop_group_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_map_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_map_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_map_result__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_map_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_map_result__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_map_result {
 public:

  sai_rpc_sai_thrift_remove_next_hop_group_map_result(const sai_rpc_sai_thrift_remove_next_hop_group_map_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_map_result& operator=(const sai_rpc_sai_thrift_remove_next_hop_group_map_result&);
  sai_rpc_sai_thrift_remove_next_hop_group_map_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_map_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_map_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_next_hop_group_map_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_next_hop_group_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_next_hop_group_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_next_hop_group_map_presult__isset {
  _sai_rpc_sai_thrift_remove_next_hop_group_map_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_next_hop_group_map_presult__isset;

class sai_rpc_sai_thrift_remove_next_hop_group_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_next_hop_group_map_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_next_hop_group_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args__isset() : next_hop_group_map_oid(false), attr(false) {}
  bool next_hop_group_map_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args__isset;

class sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args(const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args& operator=(const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args&);
  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args() : next_hop_group_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_map_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args__isset __isset;

  void __set_next_hop_group_map_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args & rhs) const
  {
    if (!(next_hop_group_map_oid == rhs.next_hop_group_map_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_next_hop_group_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_map_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result__isset;

class sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result {
 public:

  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result(const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result& operator=(const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result&);
  sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_next_hop_group_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult__isset;

class sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_next_hop_group_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args__isset() : next_hop_group_map_oid(false), attr_list(false) {}
  bool next_hop_group_map_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args__isset;

class sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args(const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args& operator=(const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args&);
  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args() : next_hop_group_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args() throw();
  sai_thrift_object_id_t next_hop_group_map_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args__isset __isset;

  void __set_next_hop_group_map_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args & rhs) const
  {
    if (!(next_hop_group_map_oid == rhs.next_hop_group_map_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_next_hop_group_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_group_map_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result__isset;

class sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result {
 public:

  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result(const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result& operator=(const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result&);
  sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_next_hop_group_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult__isset;

class sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_next_hop_group_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_policer_args__isset {
  _sai_rpc_sai_thrift_create_policer_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_policer_args__isset;

class sai_rpc_sai_thrift_create_policer_args {
 public:

  sai_rpc_sai_thrift_create_policer_args(const sai_rpc_sai_thrift_create_policer_args&);
  sai_rpc_sai_thrift_create_policer_args& operator=(const sai_rpc_sai_thrift_create_policer_args&);
  sai_rpc_sai_thrift_create_policer_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_policer_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_policer_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_policer_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_policer_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_policer_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_policer_result__isset {
  _sai_rpc_sai_thrift_create_policer_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_policer_result__isset;

class sai_rpc_sai_thrift_create_policer_result {
 public:

  sai_rpc_sai_thrift_create_policer_result(const sai_rpc_sai_thrift_create_policer_result&);
  sai_rpc_sai_thrift_create_policer_result& operator=(const sai_rpc_sai_thrift_create_policer_result&);
  sai_rpc_sai_thrift_create_policer_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_policer_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_policer_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_policer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_policer_presult__isset {
  _sai_rpc_sai_thrift_create_policer_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_policer_presult__isset;

class sai_rpc_sai_thrift_create_policer_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_policer_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_policer_args__isset {
  _sai_rpc_sai_thrift_remove_policer_args__isset() : policer_oid(false) {}
  bool policer_oid :1;
} _sai_rpc_sai_thrift_remove_policer_args__isset;

class sai_rpc_sai_thrift_remove_policer_args {
 public:

  sai_rpc_sai_thrift_remove_policer_args(const sai_rpc_sai_thrift_remove_policer_args&);
  sai_rpc_sai_thrift_remove_policer_args& operator=(const sai_rpc_sai_thrift_remove_policer_args&);
  sai_rpc_sai_thrift_remove_policer_args() : policer_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_policer_args() throw();
  sai_thrift_object_id_t policer_oid;

  _sai_rpc_sai_thrift_remove_policer_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_policer_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_policer_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_policer_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_policer_result__isset {
  _sai_rpc_sai_thrift_remove_policer_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_policer_result__isset;

class sai_rpc_sai_thrift_remove_policer_result {
 public:

  sai_rpc_sai_thrift_remove_policer_result(const sai_rpc_sai_thrift_remove_policer_result&);
  sai_rpc_sai_thrift_remove_policer_result& operator=(const sai_rpc_sai_thrift_remove_policer_result&);
  sai_rpc_sai_thrift_remove_policer_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_policer_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_policer_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_policer_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_policer_presult__isset {
  _sai_rpc_sai_thrift_remove_policer_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_policer_presult__isset;

class sai_rpc_sai_thrift_remove_policer_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_policer_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_policer_attribute_args__isset {
  _sai_rpc_sai_thrift_set_policer_attribute_args__isset() : policer_oid(false), attr(false) {}
  bool policer_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_policer_attribute_args__isset;

class sai_rpc_sai_thrift_set_policer_attribute_args {
 public:

  sai_rpc_sai_thrift_set_policer_attribute_args(const sai_rpc_sai_thrift_set_policer_attribute_args&);
  sai_rpc_sai_thrift_set_policer_attribute_args& operator=(const sai_rpc_sai_thrift_set_policer_attribute_args&);
  sai_rpc_sai_thrift_set_policer_attribute_args() : policer_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_policer_attribute_args() throw();
  sai_thrift_object_id_t policer_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_policer_attribute_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_policer_attribute_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_policer_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_policer_attribute_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_policer_attribute_result__isset {
  _sai_rpc_sai_thrift_set_policer_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_policer_attribute_result__isset;

class sai_rpc_sai_thrift_set_policer_attribute_result {
 public:

  sai_rpc_sai_thrift_set_policer_attribute_result(const sai_rpc_sai_thrift_set_policer_attribute_result&);
  sai_rpc_sai_thrift_set_policer_attribute_result& operator=(const sai_rpc_sai_thrift_set_policer_attribute_result&);
  sai_rpc_sai_thrift_set_policer_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_policer_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_policer_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_policer_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_policer_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_policer_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_policer_attribute_presult__isset;

class sai_rpc_sai_thrift_set_policer_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_policer_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_policer_attribute_args__isset {
  _sai_rpc_sai_thrift_get_policer_attribute_args__isset() : policer_oid(false), attr_list(false) {}
  bool policer_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_policer_attribute_args__isset;

class sai_rpc_sai_thrift_get_policer_attribute_args {
 public:

  sai_rpc_sai_thrift_get_policer_attribute_args(const sai_rpc_sai_thrift_get_policer_attribute_args&);
  sai_rpc_sai_thrift_get_policer_attribute_args& operator=(const sai_rpc_sai_thrift_get_policer_attribute_args&);
  sai_rpc_sai_thrift_get_policer_attribute_args() : policer_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_attribute_args() throw();
  sai_thrift_object_id_t policer_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_policer_attribute_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_attribute_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_policer_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_attribute_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_attribute_result__isset {
  _sai_rpc_sai_thrift_get_policer_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_attribute_result__isset;

class sai_rpc_sai_thrift_get_policer_attribute_result {
 public:

  sai_rpc_sai_thrift_get_policer_attribute_result(const sai_rpc_sai_thrift_get_policer_attribute_result&);
  sai_rpc_sai_thrift_get_policer_attribute_result& operator=(const sai_rpc_sai_thrift_get_policer_attribute_result&);
  sai_rpc_sai_thrift_get_policer_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_policer_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_attribute_presult__isset;

class sai_rpc_sai_thrift_get_policer_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_args__isset {
  _sai_rpc_sai_thrift_get_policer_stats_args__isset() : policer_oid(false), counter_ids(false) {}
  bool policer_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_policer_stats_args__isset;

class sai_rpc_sai_thrift_get_policer_stats_args {
 public:

  sai_rpc_sai_thrift_get_policer_stats_args(const sai_rpc_sai_thrift_get_policer_stats_args&);
  sai_rpc_sai_thrift_get_policer_stats_args& operator=(const sai_rpc_sai_thrift_get_policer_stats_args&);
  sai_rpc_sai_thrift_get_policer_stats_args() : policer_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_stats_args() throw();
  sai_thrift_object_id_t policer_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_policer_stats_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_stats_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_policer_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_stats_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_result__isset {
  _sai_rpc_sai_thrift_get_policer_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_stats_result__isset;

class sai_rpc_sai_thrift_get_policer_stats_result {
 public:

  sai_rpc_sai_thrift_get_policer_stats_result(const sai_rpc_sai_thrift_get_policer_stats_result&);
  sai_rpc_sai_thrift_get_policer_stats_result& operator=(const sai_rpc_sai_thrift_get_policer_stats_result&);
  sai_rpc_sai_thrift_get_policer_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_presult__isset {
  _sai_rpc_sai_thrift_get_policer_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_stats_presult__isset;

class sai_rpc_sai_thrift_get_policer_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_policer_stats_ext_args__isset() : policer_oid(false), counter_ids(false), mode(false) {}
  bool policer_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_policer_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_policer_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_policer_stats_ext_args(const sai_rpc_sai_thrift_get_policer_stats_ext_args&);
  sai_rpc_sai_thrift_get_policer_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_policer_stats_ext_args&);
  sai_rpc_sai_thrift_get_policer_stats_ext_args() : policer_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_stats_ext_args() throw();
  sai_thrift_object_id_t policer_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_policer_stats_ext_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_stats_ext_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_policer_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_policer_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_policer_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_policer_stats_ext_result(const sai_rpc_sai_thrift_get_policer_stats_ext_result&);
  sai_rpc_sai_thrift_get_policer_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_policer_stats_ext_result&);
  sai_rpc_sai_thrift_get_policer_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_policer_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_policer_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_policer_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_policer_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_policer_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_policer_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_policer_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_policer_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_policer_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_policer_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_policer_stats_args__isset {
  _sai_rpc_sai_thrift_clear_policer_stats_args__isset() : policer_oid(false), counter_ids(false) {}
  bool policer_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_policer_stats_args__isset;

class sai_rpc_sai_thrift_clear_policer_stats_args {
 public:

  sai_rpc_sai_thrift_clear_policer_stats_args(const sai_rpc_sai_thrift_clear_policer_stats_args&);
  sai_rpc_sai_thrift_clear_policer_stats_args& operator=(const sai_rpc_sai_thrift_clear_policer_stats_args&);
  sai_rpc_sai_thrift_clear_policer_stats_args() : policer_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_policer_stats_args() throw();
  sai_thrift_object_id_t policer_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_policer_stats_args__isset __isset;

  void __set_policer_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_policer_stats_args & rhs) const
  {
    if (!(policer_oid == rhs.policer_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_policer_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_policer_stats_pargs() throw();
  const sai_thrift_object_id_t* policer_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_policer_stats_result__isset {
  _sai_rpc_sai_thrift_clear_policer_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_policer_stats_result__isset;

class sai_rpc_sai_thrift_clear_policer_stats_result {
 public:

  sai_rpc_sai_thrift_clear_policer_stats_result(const sai_rpc_sai_thrift_clear_policer_stats_result&);
  sai_rpc_sai_thrift_clear_policer_stats_result& operator=(const sai_rpc_sai_thrift_clear_policer_stats_result&);
  sai_rpc_sai_thrift_clear_policer_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_policer_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_policer_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_policer_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_policer_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_policer_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_policer_stats_presult__isset;

class sai_rpc_sai_thrift_clear_policer_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_policer_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_port_args__isset {
  _sai_rpc_sai_thrift_create_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_port_args__isset;

class sai_rpc_sai_thrift_create_port_args {
 public:

  sai_rpc_sai_thrift_create_port_args(const sai_rpc_sai_thrift_create_port_args&);
  sai_rpc_sai_thrift_create_port_args& operator=(const sai_rpc_sai_thrift_create_port_args&);
  sai_rpc_sai_thrift_create_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_result__isset {
  _sai_rpc_sai_thrift_create_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_result__isset;

class sai_rpc_sai_thrift_create_port_result {
 public:

  sai_rpc_sai_thrift_create_port_result(const sai_rpc_sai_thrift_create_port_result&);
  sai_rpc_sai_thrift_create_port_result& operator=(const sai_rpc_sai_thrift_create_port_result&);
  sai_rpc_sai_thrift_create_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_presult__isset {
  _sai_rpc_sai_thrift_create_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_presult__isset;

class sai_rpc_sai_thrift_create_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_port_args__isset {
  _sai_rpc_sai_thrift_remove_port_args__isset() : port_oid(false) {}
  bool port_oid :1;
} _sai_rpc_sai_thrift_remove_port_args__isset;

class sai_rpc_sai_thrift_remove_port_args {
 public:

  sai_rpc_sai_thrift_remove_port_args(const sai_rpc_sai_thrift_remove_port_args&);
  sai_rpc_sai_thrift_remove_port_args& operator=(const sai_rpc_sai_thrift_remove_port_args&);
  sai_rpc_sai_thrift_remove_port_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_args() throw();
  sai_thrift_object_id_t port_oid;

  _sai_rpc_sai_thrift_remove_port_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_pargs() throw();
  const sai_thrift_object_id_t* port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_result__isset {
  _sai_rpc_sai_thrift_remove_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_result__isset;

class sai_rpc_sai_thrift_remove_port_result {
 public:

  sai_rpc_sai_thrift_remove_port_result(const sai_rpc_sai_thrift_remove_port_result&);
  sai_rpc_sai_thrift_remove_port_result& operator=(const sai_rpc_sai_thrift_remove_port_result&);
  sai_rpc_sai_thrift_remove_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_presult__isset {
  _sai_rpc_sai_thrift_remove_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_presult__isset;

class sai_rpc_sai_thrift_remove_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_port_attribute_args__isset() : port_oid(false), attr(false) {}
  bool port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_port_attribute_args(const sai_rpc_sai_thrift_set_port_attribute_args&);
  sai_rpc_sai_thrift_set_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_port_attribute_args&);
  sai_rpc_sai_thrift_set_port_attribute_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_port_attribute_args() throw();
  sai_thrift_object_id_t port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_port_attribute_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_attribute_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_port_attribute_result(const sai_rpc_sai_thrift_set_port_attribute_result&);
  sai_rpc_sai_thrift_set_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_port_attribute_result&);
  sai_rpc_sai_thrift_set_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_port_attribute_args__isset() : port_oid(false), attr_list(false) {}
  bool port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_port_attribute_args(const sai_rpc_sai_thrift_get_port_attribute_args&);
  sai_rpc_sai_thrift_get_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_port_attribute_args&);
  sai_rpc_sai_thrift_get_port_attribute_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_attribute_args() throw();
  sai_thrift_object_id_t port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_port_attribute_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_attribute_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_port_attribute_result(const sai_rpc_sai_thrift_get_port_attribute_result&);
  sai_rpc_sai_thrift_get_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_port_attribute_result&);
  sai_rpc_sai_thrift_get_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_args__isset {
  _sai_rpc_sai_thrift_get_port_stats_args__isset() : port_oid(false), counter_ids(false) {}
  bool port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_port_stats_args__isset;

class sai_rpc_sai_thrift_get_port_stats_args {
 public:

  sai_rpc_sai_thrift_get_port_stats_args(const sai_rpc_sai_thrift_get_port_stats_args&);
  sai_rpc_sai_thrift_get_port_stats_args& operator=(const sai_rpc_sai_thrift_get_port_stats_args&);
  sai_rpc_sai_thrift_get_port_stats_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_stats_args() throw();
  sai_thrift_object_id_t port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_port_stats_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_port_stats_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_stats_pargs() throw();
  const sai_thrift_object_id_t* port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_result__isset {
  _sai_rpc_sai_thrift_get_port_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_stats_result__isset;

class sai_rpc_sai_thrift_get_port_stats_result {
 public:

  sai_rpc_sai_thrift_get_port_stats_result(const sai_rpc_sai_thrift_get_port_stats_result&);
  sai_rpc_sai_thrift_get_port_stats_result& operator=(const sai_rpc_sai_thrift_get_port_stats_result&);
  sai_rpc_sai_thrift_get_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_presult__isset {
  _sai_rpc_sai_thrift_get_port_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_stats_presult__isset;

class sai_rpc_sai_thrift_get_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_port_stats_ext_args__isset() : port_oid(false), counter_ids(false), mode(false) {}
  bool port_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_port_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_port_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_port_stats_ext_args(const sai_rpc_sai_thrift_get_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_port_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_port_stats_ext_args&);
  sai_rpc_sai_thrift_get_port_stats_ext_args() : port_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_stats_ext_args() throw();
  sai_thrift_object_id_t port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_port_stats_ext_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_port_stats_ext_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_port_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_port_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_port_stats_ext_result(const sai_rpc_sai_thrift_get_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_port_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_port_stats_ext_result&);
  sai_rpc_sai_thrift_get_port_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_port_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_port_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_port_stats_args__isset {
  _sai_rpc_sai_thrift_clear_port_stats_args__isset() : port_oid(false), counter_ids(false) {}
  bool port_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_port_stats_args__isset;

class sai_rpc_sai_thrift_clear_port_stats_args {
 public:

  sai_rpc_sai_thrift_clear_port_stats_args(const sai_rpc_sai_thrift_clear_port_stats_args&);
  sai_rpc_sai_thrift_clear_port_stats_args& operator=(const sai_rpc_sai_thrift_clear_port_stats_args&);
  sai_rpc_sai_thrift_clear_port_stats_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_stats_args() throw();
  sai_thrift_object_id_t port_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_port_stats_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_stats_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_port_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_stats_pargs() throw();
  const sai_thrift_object_id_t* port_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_stats_result__isset {
  _sai_rpc_sai_thrift_clear_port_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_stats_result__isset;

class sai_rpc_sai_thrift_clear_port_stats_result {
 public:

  sai_rpc_sai_thrift_clear_port_stats_result(const sai_rpc_sai_thrift_clear_port_stats_result&);
  sai_rpc_sai_thrift_clear_port_stats_result& operator=(const sai_rpc_sai_thrift_clear_port_stats_result&);
  sai_rpc_sai_thrift_clear_port_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_port_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_stats_presult__isset;

class sai_rpc_sai_thrift_clear_port_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_port_all_stats_args__isset {
  _sai_rpc_sai_thrift_clear_port_all_stats_args__isset() : port_oid(false) {}
  bool port_oid :1;
} _sai_rpc_sai_thrift_clear_port_all_stats_args__isset;

class sai_rpc_sai_thrift_clear_port_all_stats_args {
 public:

  sai_rpc_sai_thrift_clear_port_all_stats_args(const sai_rpc_sai_thrift_clear_port_all_stats_args&);
  sai_rpc_sai_thrift_clear_port_all_stats_args& operator=(const sai_rpc_sai_thrift_clear_port_all_stats_args&);
  sai_rpc_sai_thrift_clear_port_all_stats_args() : port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_all_stats_args() throw();
  sai_thrift_object_id_t port_oid;

  _sai_rpc_sai_thrift_clear_port_all_stats_args__isset __isset;

  void __set_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_all_stats_args & rhs) const
  {
    if (!(port_oid == rhs.port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_all_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_all_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_port_all_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_all_stats_pargs() throw();
  const sai_thrift_object_id_t* port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_all_stats_result__isset {
  _sai_rpc_sai_thrift_clear_port_all_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_all_stats_result__isset;

class sai_rpc_sai_thrift_clear_port_all_stats_result {
 public:

  sai_rpc_sai_thrift_clear_port_all_stats_result(const sai_rpc_sai_thrift_clear_port_all_stats_result&);
  sai_rpc_sai_thrift_clear_port_all_stats_result& operator=(const sai_rpc_sai_thrift_clear_port_all_stats_result&);
  sai_rpc_sai_thrift_clear_port_all_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_all_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_all_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_all_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_all_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_all_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_all_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_port_all_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_all_stats_presult__isset;

class sai_rpc_sai_thrift_clear_port_all_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_all_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_all_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_port_pool_args__isset {
  _sai_rpc_sai_thrift_create_port_pool_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_port_pool_args__isset;

class sai_rpc_sai_thrift_create_port_pool_args {
 public:

  sai_rpc_sai_thrift_create_port_pool_args(const sai_rpc_sai_thrift_create_port_pool_args&);
  sai_rpc_sai_thrift_create_port_pool_args& operator=(const sai_rpc_sai_thrift_create_port_pool_args&);
  sai_rpc_sai_thrift_create_port_pool_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_port_pool_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_port_pool_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_port_pool_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_pool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_pool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_port_pool_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_pool_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_pool_result__isset {
  _sai_rpc_sai_thrift_create_port_pool_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_pool_result__isset;

class sai_rpc_sai_thrift_create_port_pool_result {
 public:

  sai_rpc_sai_thrift_create_port_pool_result(const sai_rpc_sai_thrift_create_port_pool_result&);
  sai_rpc_sai_thrift_create_port_pool_result& operator=(const sai_rpc_sai_thrift_create_port_pool_result&);
  sai_rpc_sai_thrift_create_port_pool_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_port_pool_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_pool_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_port_pool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_pool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_pool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_pool_presult__isset {
  _sai_rpc_sai_thrift_create_port_pool_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_pool_presult__isset;

class sai_rpc_sai_thrift_create_port_pool_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_pool_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_pool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_port_pool_args__isset {
  _sai_rpc_sai_thrift_remove_port_pool_args__isset() : port_pool_oid(false) {}
  bool port_pool_oid :1;
} _sai_rpc_sai_thrift_remove_port_pool_args__isset;

class sai_rpc_sai_thrift_remove_port_pool_args {
 public:

  sai_rpc_sai_thrift_remove_port_pool_args(const sai_rpc_sai_thrift_remove_port_pool_args&);
  sai_rpc_sai_thrift_remove_port_pool_args& operator=(const sai_rpc_sai_thrift_remove_port_pool_args&);
  sai_rpc_sai_thrift_remove_port_pool_args() : port_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_pool_args() throw();
  sai_thrift_object_id_t port_pool_oid;

  _sai_rpc_sai_thrift_remove_port_pool_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_pool_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_pool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_pool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_port_pool_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_pool_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_pool_result__isset {
  _sai_rpc_sai_thrift_remove_port_pool_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_pool_result__isset;

class sai_rpc_sai_thrift_remove_port_pool_result {
 public:

  sai_rpc_sai_thrift_remove_port_pool_result(const sai_rpc_sai_thrift_remove_port_pool_result&);
  sai_rpc_sai_thrift_remove_port_pool_result& operator=(const sai_rpc_sai_thrift_remove_port_pool_result&);
  sai_rpc_sai_thrift_remove_port_pool_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_pool_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_pool_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_pool_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_pool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_pool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_pool_presult__isset {
  _sai_rpc_sai_thrift_remove_port_pool_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_pool_presult__isset;

class sai_rpc_sai_thrift_remove_port_pool_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_pool_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_pool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_port_pool_attribute_args__isset {
  _sai_rpc_sai_thrift_set_port_pool_attribute_args__isset() : port_pool_oid(false), attr(false) {}
  bool port_pool_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_port_pool_attribute_args__isset;

class sai_rpc_sai_thrift_set_port_pool_attribute_args {
 public:

  sai_rpc_sai_thrift_set_port_pool_attribute_args(const sai_rpc_sai_thrift_set_port_pool_attribute_args&);
  sai_rpc_sai_thrift_set_port_pool_attribute_args& operator=(const sai_rpc_sai_thrift_set_port_pool_attribute_args&);
  sai_rpc_sai_thrift_set_port_pool_attribute_args() : port_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_port_pool_attribute_args() throw();
  sai_thrift_object_id_t port_pool_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_port_pool_attribute_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_pool_attribute_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_pool_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_pool_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_port_pool_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_pool_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_pool_attribute_result__isset {
  _sai_rpc_sai_thrift_set_port_pool_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_pool_attribute_result__isset;

class sai_rpc_sai_thrift_set_port_pool_attribute_result {
 public:

  sai_rpc_sai_thrift_set_port_pool_attribute_result(const sai_rpc_sai_thrift_set_port_pool_attribute_result&);
  sai_rpc_sai_thrift_set_port_pool_attribute_result& operator=(const sai_rpc_sai_thrift_set_port_pool_attribute_result&);
  sai_rpc_sai_thrift_set_port_pool_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_port_pool_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_pool_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_pool_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_pool_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_pool_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_pool_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_port_pool_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_pool_attribute_presult__isset;

class sai_rpc_sai_thrift_set_port_pool_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_pool_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_pool_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_attribute_args__isset {
  _sai_rpc_sai_thrift_get_port_pool_attribute_args__isset() : port_pool_oid(false), attr_list(false) {}
  bool port_pool_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_port_pool_attribute_args__isset;

class sai_rpc_sai_thrift_get_port_pool_attribute_args {
 public:

  sai_rpc_sai_thrift_get_port_pool_attribute_args(const sai_rpc_sai_thrift_get_port_pool_attribute_args&);
  sai_rpc_sai_thrift_get_port_pool_attribute_args& operator=(const sai_rpc_sai_thrift_get_port_pool_attribute_args&);
  sai_rpc_sai_thrift_get_port_pool_attribute_args() : port_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_attribute_args() throw();
  sai_thrift_object_id_t port_pool_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_port_pool_attribute_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_attribute_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_pool_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_attribute_result__isset {
  _sai_rpc_sai_thrift_get_port_pool_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_attribute_result__isset;

class sai_rpc_sai_thrift_get_port_pool_attribute_result {
 public:

  sai_rpc_sai_thrift_get_port_pool_attribute_result(const sai_rpc_sai_thrift_get_port_pool_attribute_result&);
  sai_rpc_sai_thrift_get_port_pool_attribute_result& operator=(const sai_rpc_sai_thrift_get_port_pool_attribute_result&);
  sai_rpc_sai_thrift_get_port_pool_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_port_pool_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_attribute_presult__isset;

class sai_rpc_sai_thrift_get_port_pool_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_args__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_args__isset() : port_pool_oid(false), counter_ids(false) {}
  bool port_pool_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_args__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_args {
 public:

  sai_rpc_sai_thrift_get_port_pool_stats_args(const sai_rpc_sai_thrift_get_port_pool_stats_args&);
  sai_rpc_sai_thrift_get_port_pool_stats_args& operator=(const sai_rpc_sai_thrift_get_port_pool_stats_args&);
  sai_rpc_sai_thrift_get_port_pool_stats_args() : port_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_args() throw();
  sai_thrift_object_id_t port_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_port_pool_stats_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_stats_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_pool_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_result__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_result__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_result {
 public:

  sai_rpc_sai_thrift_get_port_pool_stats_result(const sai_rpc_sai_thrift_get_port_pool_stats_result&);
  sai_rpc_sai_thrift_get_port_pool_stats_result& operator=(const sai_rpc_sai_thrift_get_port_pool_stats_result&);
  sai_rpc_sai_thrift_get_port_pool_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_presult__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_presult__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_ext_args__isset() : port_pool_oid(false), counter_ids(false), mode(false) {}
  bool port_pool_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_port_pool_stats_ext_args(const sai_rpc_sai_thrift_get_port_pool_stats_ext_args&);
  sai_rpc_sai_thrift_get_port_pool_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_port_pool_stats_ext_args&);
  sai_rpc_sai_thrift_get_port_pool_stats_ext_args() : port_pool_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_ext_args() throw();
  sai_thrift_object_id_t port_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_port_pool_stats_ext_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_stats_ext_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_pool_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_port_pool_stats_ext_result(const sai_rpc_sai_thrift_get_port_pool_stats_ext_result&);
  sai_rpc_sai_thrift_get_port_pool_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_port_pool_stats_ext_result&);
  sai_rpc_sai_thrift_get_port_pool_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_pool_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_pool_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_pool_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_pool_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_port_pool_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_pool_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_port_pool_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_pool_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_pool_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_port_pool_stats_args__isset {
  _sai_rpc_sai_thrift_clear_port_pool_stats_args__isset() : port_pool_oid(false), counter_ids(false) {}
  bool port_pool_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_port_pool_stats_args__isset;

class sai_rpc_sai_thrift_clear_port_pool_stats_args {
 public:

  sai_rpc_sai_thrift_clear_port_pool_stats_args(const sai_rpc_sai_thrift_clear_port_pool_stats_args&);
  sai_rpc_sai_thrift_clear_port_pool_stats_args& operator=(const sai_rpc_sai_thrift_clear_port_pool_stats_args&);
  sai_rpc_sai_thrift_clear_port_pool_stats_args() : port_pool_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_pool_stats_args() throw();
  sai_thrift_object_id_t port_pool_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_port_pool_stats_args__isset __isset;

  void __set_port_pool_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_pool_stats_args & rhs) const
  {
    if (!(port_pool_oid == rhs.port_pool_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_pool_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_pool_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_port_pool_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_pool_stats_pargs() throw();
  const sai_thrift_object_id_t* port_pool_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_pool_stats_result__isset {
  _sai_rpc_sai_thrift_clear_port_pool_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_pool_stats_result__isset;

class sai_rpc_sai_thrift_clear_port_pool_stats_result {
 public:

  sai_rpc_sai_thrift_clear_port_pool_stats_result(const sai_rpc_sai_thrift_clear_port_pool_stats_result&);
  sai_rpc_sai_thrift_clear_port_pool_stats_result& operator=(const sai_rpc_sai_thrift_clear_port_pool_stats_result&);
  sai_rpc_sai_thrift_clear_port_pool_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_port_pool_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_pool_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_port_pool_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_port_pool_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_port_pool_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_port_pool_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_port_pool_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_port_pool_stats_presult__isset;

class sai_rpc_sai_thrift_clear_port_pool_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_port_pool_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_port_pool_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_port_serdes_args__isset {
  _sai_rpc_sai_thrift_create_port_serdes_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_port_serdes_args__isset;

class sai_rpc_sai_thrift_create_port_serdes_args {
 public:

  sai_rpc_sai_thrift_create_port_serdes_args(const sai_rpc_sai_thrift_create_port_serdes_args&);
  sai_rpc_sai_thrift_create_port_serdes_args& operator=(const sai_rpc_sai_thrift_create_port_serdes_args&);
  sai_rpc_sai_thrift_create_port_serdes_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_port_serdes_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_port_serdes_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_port_serdes_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_serdes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_serdes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_port_serdes_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_serdes_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_serdes_result__isset {
  _sai_rpc_sai_thrift_create_port_serdes_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_serdes_result__isset;

class sai_rpc_sai_thrift_create_port_serdes_result {
 public:

  sai_rpc_sai_thrift_create_port_serdes_result(const sai_rpc_sai_thrift_create_port_serdes_result&);
  sai_rpc_sai_thrift_create_port_serdes_result& operator=(const sai_rpc_sai_thrift_create_port_serdes_result&);
  sai_rpc_sai_thrift_create_port_serdes_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_port_serdes_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_serdes_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_port_serdes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_serdes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_serdes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_serdes_presult__isset {
  _sai_rpc_sai_thrift_create_port_serdes_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_serdes_presult__isset;

class sai_rpc_sai_thrift_create_port_serdes_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_serdes_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_serdes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_port_serdes_args__isset {
  _sai_rpc_sai_thrift_remove_port_serdes_args__isset() : port_serdes_oid(false) {}
  bool port_serdes_oid :1;
} _sai_rpc_sai_thrift_remove_port_serdes_args__isset;

class sai_rpc_sai_thrift_remove_port_serdes_args {
 public:

  sai_rpc_sai_thrift_remove_port_serdes_args(const sai_rpc_sai_thrift_remove_port_serdes_args&);
  sai_rpc_sai_thrift_remove_port_serdes_args& operator=(const sai_rpc_sai_thrift_remove_port_serdes_args&);
  sai_rpc_sai_thrift_remove_port_serdes_args() : port_serdes_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_serdes_args() throw();
  sai_thrift_object_id_t port_serdes_oid;

  _sai_rpc_sai_thrift_remove_port_serdes_args__isset __isset;

  void __set_port_serdes_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_serdes_args & rhs) const
  {
    if (!(port_serdes_oid == rhs.port_serdes_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_serdes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_serdes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_port_serdes_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_serdes_pargs() throw();
  const sai_thrift_object_id_t* port_serdes_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_serdes_result__isset {
  _sai_rpc_sai_thrift_remove_port_serdes_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_serdes_result__isset;

class sai_rpc_sai_thrift_remove_port_serdes_result {
 public:

  sai_rpc_sai_thrift_remove_port_serdes_result(const sai_rpc_sai_thrift_remove_port_serdes_result&);
  sai_rpc_sai_thrift_remove_port_serdes_result& operator=(const sai_rpc_sai_thrift_remove_port_serdes_result&);
  sai_rpc_sai_thrift_remove_port_serdes_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_serdes_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_serdes_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_serdes_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_serdes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_serdes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_serdes_presult__isset {
  _sai_rpc_sai_thrift_remove_port_serdes_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_serdes_presult__isset;

class sai_rpc_sai_thrift_remove_port_serdes_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_serdes_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_serdes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_port_serdes_attribute_args__isset {
  _sai_rpc_sai_thrift_set_port_serdes_attribute_args__isset() : port_serdes_oid(false), attr(false) {}
  bool port_serdes_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_port_serdes_attribute_args__isset;

class sai_rpc_sai_thrift_set_port_serdes_attribute_args {
 public:

  sai_rpc_sai_thrift_set_port_serdes_attribute_args(const sai_rpc_sai_thrift_set_port_serdes_attribute_args&);
  sai_rpc_sai_thrift_set_port_serdes_attribute_args& operator=(const sai_rpc_sai_thrift_set_port_serdes_attribute_args&);
  sai_rpc_sai_thrift_set_port_serdes_attribute_args() : port_serdes_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_port_serdes_attribute_args() throw();
  sai_thrift_object_id_t port_serdes_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_port_serdes_attribute_args__isset __isset;

  void __set_port_serdes_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_serdes_attribute_args & rhs) const
  {
    if (!(port_serdes_oid == rhs.port_serdes_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_serdes_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_serdes_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_port_serdes_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_serdes_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_serdes_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_serdes_attribute_result__isset {
  _sai_rpc_sai_thrift_set_port_serdes_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_serdes_attribute_result__isset;

class sai_rpc_sai_thrift_set_port_serdes_attribute_result {
 public:

  sai_rpc_sai_thrift_set_port_serdes_attribute_result(const sai_rpc_sai_thrift_set_port_serdes_attribute_result&);
  sai_rpc_sai_thrift_set_port_serdes_attribute_result& operator=(const sai_rpc_sai_thrift_set_port_serdes_attribute_result&);
  sai_rpc_sai_thrift_set_port_serdes_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_port_serdes_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_serdes_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_serdes_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_serdes_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_serdes_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_serdes_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_port_serdes_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_serdes_attribute_presult__isset;

class sai_rpc_sai_thrift_set_port_serdes_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_serdes_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_serdes_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_serdes_attribute_args__isset {
  _sai_rpc_sai_thrift_get_port_serdes_attribute_args__isset() : port_serdes_oid(false), attr_list(false) {}
  bool port_serdes_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_port_serdes_attribute_args__isset;

class sai_rpc_sai_thrift_get_port_serdes_attribute_args {
 public:

  sai_rpc_sai_thrift_get_port_serdes_attribute_args(const sai_rpc_sai_thrift_get_port_serdes_attribute_args&);
  sai_rpc_sai_thrift_get_port_serdes_attribute_args& operator=(const sai_rpc_sai_thrift_get_port_serdes_attribute_args&);
  sai_rpc_sai_thrift_get_port_serdes_attribute_args() : port_serdes_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_serdes_attribute_args() throw();
  sai_thrift_object_id_t port_serdes_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_port_serdes_attribute_args__isset __isset;

  void __set_port_serdes_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_serdes_attribute_args & rhs) const
  {
    if (!(port_serdes_oid == rhs.port_serdes_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_serdes_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_serdes_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_serdes_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_serdes_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_serdes_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_serdes_attribute_result__isset {
  _sai_rpc_sai_thrift_get_port_serdes_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_serdes_attribute_result__isset;

class sai_rpc_sai_thrift_get_port_serdes_attribute_result {
 public:

  sai_rpc_sai_thrift_get_port_serdes_attribute_result(const sai_rpc_sai_thrift_get_port_serdes_attribute_result&);
  sai_rpc_sai_thrift_get_port_serdes_attribute_result& operator=(const sai_rpc_sai_thrift_get_port_serdes_attribute_result&);
  sai_rpc_sai_thrift_get_port_serdes_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_serdes_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_serdes_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_serdes_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_serdes_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_serdes_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_serdes_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_port_serdes_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_serdes_attribute_presult__isset;

class sai_rpc_sai_thrift_get_port_serdes_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_serdes_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_serdes_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_port_connector_args__isset {
  _sai_rpc_sai_thrift_create_port_connector_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_port_connector_args__isset;

class sai_rpc_sai_thrift_create_port_connector_args {
 public:

  sai_rpc_sai_thrift_create_port_connector_args(const sai_rpc_sai_thrift_create_port_connector_args&);
  sai_rpc_sai_thrift_create_port_connector_args& operator=(const sai_rpc_sai_thrift_create_port_connector_args&);
  sai_rpc_sai_thrift_create_port_connector_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_port_connector_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_port_connector_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_port_connector_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_connector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_connector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_port_connector_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_connector_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_connector_result__isset {
  _sai_rpc_sai_thrift_create_port_connector_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_connector_result__isset;

class sai_rpc_sai_thrift_create_port_connector_result {
 public:

  sai_rpc_sai_thrift_create_port_connector_result(const sai_rpc_sai_thrift_create_port_connector_result&);
  sai_rpc_sai_thrift_create_port_connector_result& operator=(const sai_rpc_sai_thrift_create_port_connector_result&);
  sai_rpc_sai_thrift_create_port_connector_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_port_connector_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_connector_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_port_connector_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_port_connector_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_port_connector_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_port_connector_presult__isset {
  _sai_rpc_sai_thrift_create_port_connector_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_port_connector_presult__isset;

class sai_rpc_sai_thrift_create_port_connector_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_port_connector_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_port_connector_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_port_connector_args__isset {
  _sai_rpc_sai_thrift_remove_port_connector_args__isset() : port_connector_oid(false) {}
  bool port_connector_oid :1;
} _sai_rpc_sai_thrift_remove_port_connector_args__isset;

class sai_rpc_sai_thrift_remove_port_connector_args {
 public:

  sai_rpc_sai_thrift_remove_port_connector_args(const sai_rpc_sai_thrift_remove_port_connector_args&);
  sai_rpc_sai_thrift_remove_port_connector_args& operator=(const sai_rpc_sai_thrift_remove_port_connector_args&);
  sai_rpc_sai_thrift_remove_port_connector_args() : port_connector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_connector_args() throw();
  sai_thrift_object_id_t port_connector_oid;

  _sai_rpc_sai_thrift_remove_port_connector_args__isset __isset;

  void __set_port_connector_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_connector_args & rhs) const
  {
    if (!(port_connector_oid == rhs.port_connector_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_connector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_connector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_port_connector_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_connector_pargs() throw();
  const sai_thrift_object_id_t* port_connector_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_connector_result__isset {
  _sai_rpc_sai_thrift_remove_port_connector_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_connector_result__isset;

class sai_rpc_sai_thrift_remove_port_connector_result {
 public:

  sai_rpc_sai_thrift_remove_port_connector_result(const sai_rpc_sai_thrift_remove_port_connector_result&);
  sai_rpc_sai_thrift_remove_port_connector_result& operator=(const sai_rpc_sai_thrift_remove_port_connector_result&);
  sai_rpc_sai_thrift_remove_port_connector_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_port_connector_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_connector_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_port_connector_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_port_connector_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_port_connector_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_port_connector_presult__isset {
  _sai_rpc_sai_thrift_remove_port_connector_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_port_connector_presult__isset;

class sai_rpc_sai_thrift_remove_port_connector_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_port_connector_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_port_connector_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_port_connector_attribute_args__isset {
  _sai_rpc_sai_thrift_set_port_connector_attribute_args__isset() : port_connector_oid(false), attr(false) {}
  bool port_connector_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_port_connector_attribute_args__isset;

class sai_rpc_sai_thrift_set_port_connector_attribute_args {
 public:

  sai_rpc_sai_thrift_set_port_connector_attribute_args(const sai_rpc_sai_thrift_set_port_connector_attribute_args&);
  sai_rpc_sai_thrift_set_port_connector_attribute_args& operator=(const sai_rpc_sai_thrift_set_port_connector_attribute_args&);
  sai_rpc_sai_thrift_set_port_connector_attribute_args() : port_connector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_port_connector_attribute_args() throw();
  sai_thrift_object_id_t port_connector_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_port_connector_attribute_args__isset __isset;

  void __set_port_connector_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_connector_attribute_args & rhs) const
  {
    if (!(port_connector_oid == rhs.port_connector_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_connector_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_connector_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_port_connector_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_connector_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_connector_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_connector_attribute_result__isset {
  _sai_rpc_sai_thrift_set_port_connector_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_connector_attribute_result__isset;

class sai_rpc_sai_thrift_set_port_connector_attribute_result {
 public:

  sai_rpc_sai_thrift_set_port_connector_attribute_result(const sai_rpc_sai_thrift_set_port_connector_attribute_result&);
  sai_rpc_sai_thrift_set_port_connector_attribute_result& operator=(const sai_rpc_sai_thrift_set_port_connector_attribute_result&);
  sai_rpc_sai_thrift_set_port_connector_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_port_connector_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_connector_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_port_connector_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_port_connector_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_port_connector_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_port_connector_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_port_connector_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_port_connector_attribute_presult__isset;

class sai_rpc_sai_thrift_set_port_connector_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_port_connector_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_port_connector_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_port_connector_attribute_args__isset {
  _sai_rpc_sai_thrift_get_port_connector_attribute_args__isset() : port_connector_oid(false), attr_list(false) {}
  bool port_connector_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_port_connector_attribute_args__isset;

class sai_rpc_sai_thrift_get_port_connector_attribute_args {
 public:

  sai_rpc_sai_thrift_get_port_connector_attribute_args(const sai_rpc_sai_thrift_get_port_connector_attribute_args&);
  sai_rpc_sai_thrift_get_port_connector_attribute_args& operator=(const sai_rpc_sai_thrift_get_port_connector_attribute_args&);
  sai_rpc_sai_thrift_get_port_connector_attribute_args() : port_connector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_port_connector_attribute_args() throw();
  sai_thrift_object_id_t port_connector_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_port_connector_attribute_args__isset __isset;

  void __set_port_connector_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_connector_attribute_args & rhs) const
  {
    if (!(port_connector_oid == rhs.port_connector_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_connector_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_connector_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_port_connector_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_connector_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_connector_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_connector_attribute_result__isset {
  _sai_rpc_sai_thrift_get_port_connector_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_connector_attribute_result__isset;

class sai_rpc_sai_thrift_get_port_connector_attribute_result {
 public:

  sai_rpc_sai_thrift_get_port_connector_attribute_result(const sai_rpc_sai_thrift_get_port_connector_attribute_result&);
  sai_rpc_sai_thrift_get_port_connector_attribute_result& operator=(const sai_rpc_sai_thrift_get_port_connector_attribute_result&);
  sai_rpc_sai_thrift_get_port_connector_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_port_connector_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_connector_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_port_connector_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_port_connector_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_port_connector_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_port_connector_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_port_connector_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_port_connector_attribute_presult__isset;

class sai_rpc_sai_thrift_get_port_connector_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_port_connector_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_port_connector_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_qos_map_args__isset {
  _sai_rpc_sai_thrift_create_qos_map_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_qos_map_args__isset;

class sai_rpc_sai_thrift_create_qos_map_args {
 public:

  sai_rpc_sai_thrift_create_qos_map_args(const sai_rpc_sai_thrift_create_qos_map_args&);
  sai_rpc_sai_thrift_create_qos_map_args& operator=(const sai_rpc_sai_thrift_create_qos_map_args&);
  sai_rpc_sai_thrift_create_qos_map_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_qos_map_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_qos_map_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_qos_map_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_qos_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_qos_map_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_qos_map_result__isset {
  _sai_rpc_sai_thrift_create_qos_map_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_qos_map_result__isset;

class sai_rpc_sai_thrift_create_qos_map_result {
 public:

  sai_rpc_sai_thrift_create_qos_map_result(const sai_rpc_sai_thrift_create_qos_map_result&);
  sai_rpc_sai_thrift_create_qos_map_result& operator=(const sai_rpc_sai_thrift_create_qos_map_result&);
  sai_rpc_sai_thrift_create_qos_map_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_qos_map_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_qos_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_qos_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_qos_map_presult__isset {
  _sai_rpc_sai_thrift_create_qos_map_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_qos_map_presult__isset;

class sai_rpc_sai_thrift_create_qos_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_qos_map_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_qos_map_args__isset {
  _sai_rpc_sai_thrift_remove_qos_map_args__isset() : qos_map_oid(false) {}
  bool qos_map_oid :1;
} _sai_rpc_sai_thrift_remove_qos_map_args__isset;

class sai_rpc_sai_thrift_remove_qos_map_args {
 public:

  sai_rpc_sai_thrift_remove_qos_map_args(const sai_rpc_sai_thrift_remove_qos_map_args&);
  sai_rpc_sai_thrift_remove_qos_map_args& operator=(const sai_rpc_sai_thrift_remove_qos_map_args&);
  sai_rpc_sai_thrift_remove_qos_map_args() : qos_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_qos_map_args() throw();
  sai_thrift_object_id_t qos_map_oid;

  _sai_rpc_sai_thrift_remove_qos_map_args__isset __isset;

  void __set_qos_map_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_qos_map_args & rhs) const
  {
    if (!(qos_map_oid == rhs.qos_map_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_qos_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_qos_map_pargs() throw();
  const sai_thrift_object_id_t* qos_map_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_qos_map_result__isset {
  _sai_rpc_sai_thrift_remove_qos_map_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_qos_map_result__isset;

class sai_rpc_sai_thrift_remove_qos_map_result {
 public:

  sai_rpc_sai_thrift_remove_qos_map_result(const sai_rpc_sai_thrift_remove_qos_map_result&);
  sai_rpc_sai_thrift_remove_qos_map_result& operator=(const sai_rpc_sai_thrift_remove_qos_map_result&);
  sai_rpc_sai_thrift_remove_qos_map_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_qos_map_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_qos_map_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_qos_map_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_qos_map_presult__isset {
  _sai_rpc_sai_thrift_remove_qos_map_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_qos_map_presult__isset;

class sai_rpc_sai_thrift_remove_qos_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_qos_map_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_qos_map_attribute_args__isset {
  _sai_rpc_sai_thrift_set_qos_map_attribute_args__isset() : qos_map_oid(false), attr(false) {}
  bool qos_map_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_qos_map_attribute_args__isset;

class sai_rpc_sai_thrift_set_qos_map_attribute_args {
 public:

  sai_rpc_sai_thrift_set_qos_map_attribute_args(const sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  sai_rpc_sai_thrift_set_qos_map_attribute_args& operator=(const sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  sai_rpc_sai_thrift_set_qos_map_attribute_args() : qos_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_qos_map_attribute_args() throw();
  sai_thrift_object_id_t qos_map_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_qos_map_attribute_args__isset __isset;

  void __set_qos_map_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_oid == rhs.qos_map_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_qos_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_qos_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* qos_map_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_qos_map_attribute_result__isset {
  _sai_rpc_sai_thrift_set_qos_map_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_qos_map_attribute_result__isset;

class sai_rpc_sai_thrift_set_qos_map_attribute_result {
 public:

  sai_rpc_sai_thrift_set_qos_map_attribute_result(const sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  sai_rpc_sai_thrift_set_qos_map_attribute_result& operator=(const sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  sai_rpc_sai_thrift_set_qos_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_qos_map_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_qos_map_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_qos_map_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset;

class sai_rpc_sai_thrift_set_qos_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_qos_map_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_qos_map_attribute_args__isset {
  _sai_rpc_sai_thrift_get_qos_map_attribute_args__isset() : qos_map_oid(false), attr_list(false) {}
  bool qos_map_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_qos_map_attribute_args__isset;

class sai_rpc_sai_thrift_get_qos_map_attribute_args {
 public:

  sai_rpc_sai_thrift_get_qos_map_attribute_args(const sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  sai_rpc_sai_thrift_get_qos_map_attribute_args& operator=(const sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  sai_rpc_sai_thrift_get_qos_map_attribute_args() : qos_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_qos_map_attribute_args() throw();
  sai_thrift_object_id_t qos_map_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_qos_map_attribute_args__isset __isset;

  void __set_qos_map_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_oid == rhs.qos_map_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_qos_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_qos_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* qos_map_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_qos_map_attribute_result__isset {
  _sai_rpc_sai_thrift_get_qos_map_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_qos_map_attribute_result__isset;

class sai_rpc_sai_thrift_get_qos_map_attribute_result {
 public:

  sai_rpc_sai_thrift_get_qos_map_attribute_result(const sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  sai_rpc_sai_thrift_get_qos_map_attribute_result& operator=(const sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  sai_rpc_sai_thrift_get_qos_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_qos_map_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_qos_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_qos_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset;

class sai_rpc_sai_thrift_get_qos_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_qos_map_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_queue_args__isset {
  _sai_rpc_sai_thrift_create_queue_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_queue_args__isset;

class sai_rpc_sai_thrift_create_queue_args {
 public:

  sai_rpc_sai_thrift_create_queue_args(const sai_rpc_sai_thrift_create_queue_args&);
  sai_rpc_sai_thrift_create_queue_args& operator=(const sai_rpc_sai_thrift_create_queue_args&);
  sai_rpc_sai_thrift_create_queue_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_queue_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_queue_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_queue_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_queue_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_queue_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_queue_result__isset {
  _sai_rpc_sai_thrift_create_queue_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_queue_result__isset;

class sai_rpc_sai_thrift_create_queue_result {
 public:

  sai_rpc_sai_thrift_create_queue_result(const sai_rpc_sai_thrift_create_queue_result&);
  sai_rpc_sai_thrift_create_queue_result& operator=(const sai_rpc_sai_thrift_create_queue_result&);
  sai_rpc_sai_thrift_create_queue_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_queue_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_queue_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_queue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_queue_presult__isset {
  _sai_rpc_sai_thrift_create_queue_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_queue_presult__isset;

class sai_rpc_sai_thrift_create_queue_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_queue_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_queue_args__isset {
  _sai_rpc_sai_thrift_remove_queue_args__isset() : queue_oid(false) {}
  bool queue_oid :1;
} _sai_rpc_sai_thrift_remove_queue_args__isset;

class sai_rpc_sai_thrift_remove_queue_args {
 public:

  sai_rpc_sai_thrift_remove_queue_args(const sai_rpc_sai_thrift_remove_queue_args&);
  sai_rpc_sai_thrift_remove_queue_args& operator=(const sai_rpc_sai_thrift_remove_queue_args&);
  sai_rpc_sai_thrift_remove_queue_args() : queue_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_queue_args() throw();
  sai_thrift_object_id_t queue_oid;

  _sai_rpc_sai_thrift_remove_queue_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_queue_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_queue_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_queue_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_queue_result__isset {
  _sai_rpc_sai_thrift_remove_queue_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_queue_result__isset;

class sai_rpc_sai_thrift_remove_queue_result {
 public:

  sai_rpc_sai_thrift_remove_queue_result(const sai_rpc_sai_thrift_remove_queue_result&);
  sai_rpc_sai_thrift_remove_queue_result& operator=(const sai_rpc_sai_thrift_remove_queue_result&);
  sai_rpc_sai_thrift_remove_queue_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_queue_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_queue_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_queue_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_queue_presult__isset {
  _sai_rpc_sai_thrift_remove_queue_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_queue_presult__isset;

class sai_rpc_sai_thrift_remove_queue_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_queue_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_queue_attribute_args__isset {
  _sai_rpc_sai_thrift_set_queue_attribute_args__isset() : queue_oid(false), attr(false) {}
  bool queue_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_queue_attribute_args__isset;

class sai_rpc_sai_thrift_set_queue_attribute_args {
 public:

  sai_rpc_sai_thrift_set_queue_attribute_args(const sai_rpc_sai_thrift_set_queue_attribute_args&);
  sai_rpc_sai_thrift_set_queue_attribute_args& operator=(const sai_rpc_sai_thrift_set_queue_attribute_args&);
  sai_rpc_sai_thrift_set_queue_attribute_args() : queue_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_queue_attribute_args() throw();
  sai_thrift_object_id_t queue_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_queue_attribute_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_queue_attribute_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_queue_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_queue_attribute_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_queue_attribute_result__isset {
  _sai_rpc_sai_thrift_set_queue_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_queue_attribute_result__isset;

class sai_rpc_sai_thrift_set_queue_attribute_result {
 public:

  sai_rpc_sai_thrift_set_queue_attribute_result(const sai_rpc_sai_thrift_set_queue_attribute_result&);
  sai_rpc_sai_thrift_set_queue_attribute_result& operator=(const sai_rpc_sai_thrift_set_queue_attribute_result&);
  sai_rpc_sai_thrift_set_queue_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_queue_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_queue_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_queue_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_queue_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_queue_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_queue_attribute_presult__isset;

class sai_rpc_sai_thrift_set_queue_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_queue_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_queue_attribute_args__isset {
  _sai_rpc_sai_thrift_get_queue_attribute_args__isset() : queue_oid(false), attr_list(false) {}
  bool queue_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_queue_attribute_args__isset;

class sai_rpc_sai_thrift_get_queue_attribute_args {
 public:

  sai_rpc_sai_thrift_get_queue_attribute_args(const sai_rpc_sai_thrift_get_queue_attribute_args&);
  sai_rpc_sai_thrift_get_queue_attribute_args& operator=(const sai_rpc_sai_thrift_get_queue_attribute_args&);
  sai_rpc_sai_thrift_get_queue_attribute_args() : queue_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_attribute_args() throw();
  sai_thrift_object_id_t queue_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_queue_attribute_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_attribute_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_queue_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_attribute_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_attribute_result__isset {
  _sai_rpc_sai_thrift_get_queue_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_attribute_result__isset;

class sai_rpc_sai_thrift_get_queue_attribute_result {
 public:

  sai_rpc_sai_thrift_get_queue_attribute_result(const sai_rpc_sai_thrift_get_queue_attribute_result&);
  sai_rpc_sai_thrift_get_queue_attribute_result& operator=(const sai_rpc_sai_thrift_get_queue_attribute_result&);
  sai_rpc_sai_thrift_get_queue_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_queue_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_attribute_presult__isset;

class sai_rpc_sai_thrift_get_queue_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_args__isset {
  _sai_rpc_sai_thrift_get_queue_stats_args__isset() : queue_oid(false), counter_ids(false) {}
  bool queue_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_queue_stats_args__isset;

class sai_rpc_sai_thrift_get_queue_stats_args {
 public:

  sai_rpc_sai_thrift_get_queue_stats_args(const sai_rpc_sai_thrift_get_queue_stats_args&);
  sai_rpc_sai_thrift_get_queue_stats_args& operator=(const sai_rpc_sai_thrift_get_queue_stats_args&);
  sai_rpc_sai_thrift_get_queue_stats_args() : queue_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_stats_args() throw();
  sai_thrift_object_id_t queue_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_queue_stats_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_stats_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_queue_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_stats_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_result__isset {
  _sai_rpc_sai_thrift_get_queue_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_stats_result__isset;

class sai_rpc_sai_thrift_get_queue_stats_result {
 public:

  sai_rpc_sai_thrift_get_queue_stats_result(const sai_rpc_sai_thrift_get_queue_stats_result&);
  sai_rpc_sai_thrift_get_queue_stats_result& operator=(const sai_rpc_sai_thrift_get_queue_stats_result&);
  sai_rpc_sai_thrift_get_queue_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_presult__isset {
  _sai_rpc_sai_thrift_get_queue_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_stats_presult__isset;

class sai_rpc_sai_thrift_get_queue_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_queue_stats_ext_args__isset() : queue_oid(false), counter_ids(false), mode(false) {}
  bool queue_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_queue_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_queue_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_queue_stats_ext_args(const sai_rpc_sai_thrift_get_queue_stats_ext_args&);
  sai_rpc_sai_thrift_get_queue_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_queue_stats_ext_args&);
  sai_rpc_sai_thrift_get_queue_stats_ext_args() : queue_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_stats_ext_args() throw();
  sai_thrift_object_id_t queue_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_queue_stats_ext_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_stats_ext_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_queue_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_queue_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_queue_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_queue_stats_ext_result(const sai_rpc_sai_thrift_get_queue_stats_ext_result&);
  sai_rpc_sai_thrift_get_queue_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_queue_stats_ext_result&);
  sai_rpc_sai_thrift_get_queue_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_queue_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_queue_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_queue_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_queue_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_queue_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_queue_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_queue_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_queue_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_queue_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_queue_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_queue_stats_args__isset {
  _sai_rpc_sai_thrift_clear_queue_stats_args__isset() : queue_oid(false), counter_ids(false) {}
  bool queue_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_queue_stats_args__isset;

class sai_rpc_sai_thrift_clear_queue_stats_args {
 public:

  sai_rpc_sai_thrift_clear_queue_stats_args(const sai_rpc_sai_thrift_clear_queue_stats_args&);
  sai_rpc_sai_thrift_clear_queue_stats_args& operator=(const sai_rpc_sai_thrift_clear_queue_stats_args&);
  sai_rpc_sai_thrift_clear_queue_stats_args() : queue_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_queue_stats_args() throw();
  sai_thrift_object_id_t queue_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_queue_stats_args__isset __isset;

  void __set_queue_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_queue_stats_args & rhs) const
  {
    if (!(queue_oid == rhs.queue_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_queue_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_queue_stats_pargs() throw();
  const sai_thrift_object_id_t* queue_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_queue_stats_result__isset {
  _sai_rpc_sai_thrift_clear_queue_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_queue_stats_result__isset;

class sai_rpc_sai_thrift_clear_queue_stats_result {
 public:

  sai_rpc_sai_thrift_clear_queue_stats_result(const sai_rpc_sai_thrift_clear_queue_stats_result&);
  sai_rpc_sai_thrift_clear_queue_stats_result& operator=(const sai_rpc_sai_thrift_clear_queue_stats_result&);
  sai_rpc_sai_thrift_clear_queue_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_queue_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_queue_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_queue_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_queue_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_queue_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_queue_stats_presult__isset;

class sai_rpc_sai_thrift_clear_queue_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_queue_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_route_entry_args__isset {
  _sai_rpc_sai_thrift_create_route_entry_args__isset() : route_entry(false), attr_list(false) {}
  bool route_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_route_entry_args__isset;

class sai_rpc_sai_thrift_create_route_entry_args {
 public:

  sai_rpc_sai_thrift_create_route_entry_args(const sai_rpc_sai_thrift_create_route_entry_args&);
  sai_rpc_sai_thrift_create_route_entry_args& operator=(const sai_rpc_sai_thrift_create_route_entry_args&);
  sai_rpc_sai_thrift_create_route_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_route_entry_args() throw();
  sai_thrift_route_entry_t route_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_route_entry_args__isset __isset;

  void __set_route_entry(const sai_thrift_route_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_route_entry_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_route_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_route_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_route_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_route_entry_pargs() throw();
  const sai_thrift_route_entry_t* route_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_route_entry_result__isset {
  _sai_rpc_sai_thrift_create_route_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_route_entry_result__isset;

class sai_rpc_sai_thrift_create_route_entry_result {
 public:

  sai_rpc_sai_thrift_create_route_entry_result(const sai_rpc_sai_thrift_create_route_entry_result&);
  sai_rpc_sai_thrift_create_route_entry_result& operator=(const sai_rpc_sai_thrift_create_route_entry_result&);
  sai_rpc_sai_thrift_create_route_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_route_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_route_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_route_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_route_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_route_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_route_entry_presult__isset {
  _sai_rpc_sai_thrift_create_route_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_route_entry_presult__isset;

class sai_rpc_sai_thrift_create_route_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_route_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_route_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_route_entry_args__isset {
  _sai_rpc_sai_thrift_remove_route_entry_args__isset() : route_entry(false) {}
  bool route_entry :1;
} _sai_rpc_sai_thrift_remove_route_entry_args__isset;

class sai_rpc_sai_thrift_remove_route_entry_args {
 public:

  sai_rpc_sai_thrift_remove_route_entry_args(const sai_rpc_sai_thrift_remove_route_entry_args&);
  sai_rpc_sai_thrift_remove_route_entry_args& operator=(const sai_rpc_sai_thrift_remove_route_entry_args&);
  sai_rpc_sai_thrift_remove_route_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_route_entry_args() throw();
  sai_thrift_route_entry_t route_entry;

  _sai_rpc_sai_thrift_remove_route_entry_args__isset __isset;

  void __set_route_entry(const sai_thrift_route_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_route_entry_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_route_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_route_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_route_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_route_entry_pargs() throw();
  const sai_thrift_route_entry_t* route_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_route_entry_result__isset {
  _sai_rpc_sai_thrift_remove_route_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_route_entry_result__isset;

class sai_rpc_sai_thrift_remove_route_entry_result {
 public:

  sai_rpc_sai_thrift_remove_route_entry_result(const sai_rpc_sai_thrift_remove_route_entry_result&);
  sai_rpc_sai_thrift_remove_route_entry_result& operator=(const sai_rpc_sai_thrift_remove_route_entry_result&);
  sai_rpc_sai_thrift_remove_route_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_route_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_route_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_route_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_route_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_route_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_route_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_route_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_route_entry_presult__isset;

class sai_rpc_sai_thrift_remove_route_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_route_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_route_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_route_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_route_entry_attribute_args__isset() : route_entry(false), attr(false) {}
  bool route_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_route_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_route_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_route_entry_attribute_args(const sai_rpc_sai_thrift_set_route_entry_attribute_args&);
  sai_rpc_sai_thrift_set_route_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_route_entry_attribute_args&);
  sai_rpc_sai_thrift_set_route_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_route_entry_attribute_args() throw();
  sai_thrift_route_entry_t route_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_route_entry_attribute_args__isset __isset;

  void __set_route_entry(const sai_thrift_route_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_route_entry_attribute_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_route_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_route_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_route_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_route_entry_attribute_pargs() throw();
  const sai_thrift_route_entry_t* route_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_route_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_route_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_route_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_route_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_route_entry_attribute_result(const sai_rpc_sai_thrift_set_route_entry_attribute_result&);
  sai_rpc_sai_thrift_set_route_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_route_entry_attribute_result&);
  sai_rpc_sai_thrift_set_route_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_route_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_route_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_route_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_route_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_route_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_route_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_route_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_route_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_route_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_route_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_route_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_route_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_route_entry_attribute_args__isset() : route_entry(false), attr_list(false) {}
  bool route_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_route_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_route_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_route_entry_attribute_args(const sai_rpc_sai_thrift_get_route_entry_attribute_args&);
  sai_rpc_sai_thrift_get_route_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_route_entry_attribute_args&);
  sai_rpc_sai_thrift_get_route_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_route_entry_attribute_args() throw();
  sai_thrift_route_entry_t route_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_route_entry_attribute_args__isset __isset;

  void __set_route_entry(const sai_thrift_route_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_route_entry_attribute_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_route_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_route_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_route_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_route_entry_attribute_pargs() throw();
  const sai_thrift_route_entry_t* route_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_route_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_route_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_route_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_route_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_route_entry_attribute_result(const sai_rpc_sai_thrift_get_route_entry_attribute_result&);
  sai_rpc_sai_thrift_get_route_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_route_entry_attribute_result&);
  sai_rpc_sai_thrift_get_route_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_route_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_route_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_route_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_route_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_route_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_route_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_route_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_route_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_route_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_route_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_route_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_route_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_route_entry_args__isset() : route_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool route_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_route_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_route_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_route_entry_args(const sai_rpc_sai_thrift_bulk_create_route_entry_args&);
  sai_rpc_sai_thrift_bulk_create_route_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_route_entry_args&);
  sai_rpc_sai_thrift_bulk_create_route_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_route_entry_args() throw();
  std::vector<sai_thrift_route_entry_t>  route_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_route_entry_args__isset __isset;

  void __set_route_entry(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_route_entry_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_route_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_route_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_route_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_route_entry_pargs() throw();
  const std::vector<sai_thrift_route_entry_t> * route_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_route_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_route_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_route_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_route_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_route_entry_result(const sai_rpc_sai_thrift_bulk_create_route_entry_result&);
  sai_rpc_sai_thrift_bulk_create_route_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_route_entry_result&);
  sai_rpc_sai_thrift_bulk_create_route_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_route_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_route_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_route_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_route_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_route_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_route_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_route_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_route_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_route_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_route_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_route_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_route_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_route_entry_args__isset() : route_entry(false), mode(false) {}
  bool route_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_route_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_route_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_route_entry_args(const sai_rpc_sai_thrift_bulk_remove_route_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_route_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_route_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_route_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_route_entry_args() throw();
  std::vector<sai_thrift_route_entry_t>  route_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_route_entry_args__isset __isset;

  void __set_route_entry(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_route_entry_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_route_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_route_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_route_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_route_entry_pargs() throw();
  const std::vector<sai_thrift_route_entry_t> * route_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_route_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_route_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_route_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_route_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_route_entry_result(const sai_rpc_sai_thrift_bulk_remove_route_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_route_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_route_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_route_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_route_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_route_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_route_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_route_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_route_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_route_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_route_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_route_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_route_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_route_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_route_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args__isset() : route_entry(false), attr_list(false), mode(false) {}
  bool route_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args() throw();
  std::vector<sai_thrift_route_entry_t>  route_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args__isset __isset;

  void __set_route_entry(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_route_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_route_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_route_entry_t> * route_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_route_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_route_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args__isset() : route_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool route_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args() throw();
  std::vector<sai_thrift_route_entry_t>  route_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args__isset __isset;

  void __set_route_entry(const std::vector<sai_thrift_route_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args & rhs) const
  {
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_route_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_route_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_route_entry_t> * route_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_route_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_route_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_router_interface_args__isset {
  _sai_rpc_sai_thrift_create_router_interface_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_router_interface_args__isset;

class sai_rpc_sai_thrift_create_router_interface_args {
 public:

  sai_rpc_sai_thrift_create_router_interface_args(const sai_rpc_sai_thrift_create_router_interface_args&);
  sai_rpc_sai_thrift_create_router_interface_args& operator=(const sai_rpc_sai_thrift_create_router_interface_args&);
  sai_rpc_sai_thrift_create_router_interface_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_router_interface_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_router_interface_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_router_interface_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_router_interface_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_router_interface_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_router_interface_result__isset {
  _sai_rpc_sai_thrift_create_router_interface_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_router_interface_result__isset;

class sai_rpc_sai_thrift_create_router_interface_result {
 public:

  sai_rpc_sai_thrift_create_router_interface_result(const sai_rpc_sai_thrift_create_router_interface_result&);
  sai_rpc_sai_thrift_create_router_interface_result& operator=(const sai_rpc_sai_thrift_create_router_interface_result&);
  sai_rpc_sai_thrift_create_router_interface_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_router_interface_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_router_interface_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_router_interface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_router_interface_presult__isset {
  _sai_rpc_sai_thrift_create_router_interface_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_router_interface_presult__isset;

class sai_rpc_sai_thrift_create_router_interface_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_router_interface_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_router_interface_args__isset {
  _sai_rpc_sai_thrift_remove_router_interface_args__isset() : router_interface_oid(false) {}
  bool router_interface_oid :1;
} _sai_rpc_sai_thrift_remove_router_interface_args__isset;

class sai_rpc_sai_thrift_remove_router_interface_args {
 public:

  sai_rpc_sai_thrift_remove_router_interface_args(const sai_rpc_sai_thrift_remove_router_interface_args&);
  sai_rpc_sai_thrift_remove_router_interface_args& operator=(const sai_rpc_sai_thrift_remove_router_interface_args&);
  sai_rpc_sai_thrift_remove_router_interface_args() : router_interface_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_router_interface_args() throw();
  sai_thrift_object_id_t router_interface_oid;

  _sai_rpc_sai_thrift_remove_router_interface_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_router_interface_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_router_interface_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_router_interface_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_router_interface_result__isset {
  _sai_rpc_sai_thrift_remove_router_interface_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_router_interface_result__isset;

class sai_rpc_sai_thrift_remove_router_interface_result {
 public:

  sai_rpc_sai_thrift_remove_router_interface_result(const sai_rpc_sai_thrift_remove_router_interface_result&);
  sai_rpc_sai_thrift_remove_router_interface_result& operator=(const sai_rpc_sai_thrift_remove_router_interface_result&);
  sai_rpc_sai_thrift_remove_router_interface_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_router_interface_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_router_interface_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_router_interface_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_router_interface_presult__isset {
  _sai_rpc_sai_thrift_remove_router_interface_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_router_interface_presult__isset;

class sai_rpc_sai_thrift_remove_router_interface_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_router_interface_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_router_interface_attribute_args__isset {
  _sai_rpc_sai_thrift_set_router_interface_attribute_args__isset() : router_interface_oid(false), attr(false) {}
  bool router_interface_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_router_interface_attribute_args__isset;

class sai_rpc_sai_thrift_set_router_interface_attribute_args {
 public:

  sai_rpc_sai_thrift_set_router_interface_attribute_args(const sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  sai_rpc_sai_thrift_set_router_interface_attribute_args& operator=(const sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  sai_rpc_sai_thrift_set_router_interface_attribute_args() : router_interface_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_router_interface_attribute_args() throw();
  sai_thrift_object_id_t router_interface_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_router_interface_attribute_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_router_interface_attribute_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_router_interface_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_router_interface_attribute_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_router_interface_attribute_result__isset {
  _sai_rpc_sai_thrift_set_router_interface_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_router_interface_attribute_result__isset;

class sai_rpc_sai_thrift_set_router_interface_attribute_result {
 public:

  sai_rpc_sai_thrift_set_router_interface_attribute_result(const sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  sai_rpc_sai_thrift_set_router_interface_attribute_result& operator=(const sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  sai_rpc_sai_thrift_set_router_interface_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_router_interface_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_router_interface_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_router_interface_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset;

class sai_rpc_sai_thrift_set_router_interface_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_router_interface_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_attribute_args__isset {
  _sai_rpc_sai_thrift_get_router_interface_attribute_args__isset() : router_interface_oid(false), attr_list(false) {}
  bool router_interface_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_router_interface_attribute_args__isset;

class sai_rpc_sai_thrift_get_router_interface_attribute_args {
 public:

  sai_rpc_sai_thrift_get_router_interface_attribute_args(const sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  sai_rpc_sai_thrift_get_router_interface_attribute_args& operator=(const sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  sai_rpc_sai_thrift_get_router_interface_attribute_args() : router_interface_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_attribute_args() throw();
  sai_thrift_object_id_t router_interface_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_router_interface_attribute_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_attribute_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_router_interface_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_attribute_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_attribute_result__isset {
  _sai_rpc_sai_thrift_get_router_interface_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_attribute_result__isset;

class sai_rpc_sai_thrift_get_router_interface_attribute_result {
 public:

  sai_rpc_sai_thrift_get_router_interface_attribute_result(const sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  sai_rpc_sai_thrift_get_router_interface_attribute_result& operator=(const sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  sai_rpc_sai_thrift_get_router_interface_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset;

class sai_rpc_sai_thrift_get_router_interface_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_args__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_args__isset() : router_interface_oid(false), counter_ids(false) {}
  bool router_interface_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_args__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_args {
 public:

  sai_rpc_sai_thrift_get_router_interface_stats_args(const sai_rpc_sai_thrift_get_router_interface_stats_args&);
  sai_rpc_sai_thrift_get_router_interface_stats_args& operator=(const sai_rpc_sai_thrift_get_router_interface_stats_args&);
  sai_rpc_sai_thrift_get_router_interface_stats_args() : router_interface_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_args() throw();
  sai_thrift_object_id_t router_interface_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_router_interface_stats_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_stats_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_router_interface_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_result__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_result__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_result {
 public:

  sai_rpc_sai_thrift_get_router_interface_stats_result(const sai_rpc_sai_thrift_get_router_interface_stats_result&);
  sai_rpc_sai_thrift_get_router_interface_stats_result& operator=(const sai_rpc_sai_thrift_get_router_interface_stats_result&);
  sai_rpc_sai_thrift_get_router_interface_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_presult__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_presult__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_ext_args__isset() : router_interface_oid(false), counter_ids(false), mode(false) {}
  bool router_interface_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_router_interface_stats_ext_args(const sai_rpc_sai_thrift_get_router_interface_stats_ext_args&);
  sai_rpc_sai_thrift_get_router_interface_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_router_interface_stats_ext_args&);
  sai_rpc_sai_thrift_get_router_interface_stats_ext_args() : router_interface_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_ext_args() throw();
  sai_thrift_object_id_t router_interface_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_router_interface_stats_ext_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_stats_ext_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_router_interface_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_router_interface_stats_ext_result(const sai_rpc_sai_thrift_get_router_interface_stats_ext_result&);
  sai_rpc_sai_thrift_get_router_interface_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_router_interface_stats_ext_result&);
  sai_rpc_sai_thrift_get_router_interface_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_router_interface_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_router_interface_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_router_interface_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_router_interface_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_router_interface_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_router_interface_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_router_interface_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_router_interface_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_router_interface_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_router_interface_stats_args__isset {
  _sai_rpc_sai_thrift_clear_router_interface_stats_args__isset() : router_interface_oid(false), counter_ids(false) {}
  bool router_interface_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_router_interface_stats_args__isset;

class sai_rpc_sai_thrift_clear_router_interface_stats_args {
 public:

  sai_rpc_sai_thrift_clear_router_interface_stats_args(const sai_rpc_sai_thrift_clear_router_interface_stats_args&);
  sai_rpc_sai_thrift_clear_router_interface_stats_args& operator=(const sai_rpc_sai_thrift_clear_router_interface_stats_args&);
  sai_rpc_sai_thrift_clear_router_interface_stats_args() : router_interface_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_router_interface_stats_args() throw();
  sai_thrift_object_id_t router_interface_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_router_interface_stats_args__isset __isset;

  void __set_router_interface_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_router_interface_stats_args & rhs) const
  {
    if (!(router_interface_oid == rhs.router_interface_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_router_interface_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_router_interface_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_router_interface_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_router_interface_stats_pargs() throw();
  const sai_thrift_object_id_t* router_interface_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_router_interface_stats_result__isset {
  _sai_rpc_sai_thrift_clear_router_interface_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_router_interface_stats_result__isset;

class sai_rpc_sai_thrift_clear_router_interface_stats_result {
 public:

  sai_rpc_sai_thrift_clear_router_interface_stats_result(const sai_rpc_sai_thrift_clear_router_interface_stats_result&);
  sai_rpc_sai_thrift_clear_router_interface_stats_result& operator=(const sai_rpc_sai_thrift_clear_router_interface_stats_result&);
  sai_rpc_sai_thrift_clear_router_interface_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_router_interface_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_router_interface_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_router_interface_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_router_interface_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_router_interface_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_router_interface_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_router_interface_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_router_interface_stats_presult__isset;

class sai_rpc_sai_thrift_clear_router_interface_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_router_interface_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_router_interface_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_args__isset {
  _sai_rpc_sai_thrift_create_rpf_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_rpf_group_args__isset;

class sai_rpc_sai_thrift_create_rpf_group_args {
 public:

  sai_rpc_sai_thrift_create_rpf_group_args(const sai_rpc_sai_thrift_create_rpf_group_args&);
  sai_rpc_sai_thrift_create_rpf_group_args& operator=(const sai_rpc_sai_thrift_create_rpf_group_args&);
  sai_rpc_sai_thrift_create_rpf_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_rpf_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_rpf_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_rpf_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_rpf_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_rpf_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_result__isset {
  _sai_rpc_sai_thrift_create_rpf_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_rpf_group_result__isset;

class sai_rpc_sai_thrift_create_rpf_group_result {
 public:

  sai_rpc_sai_thrift_create_rpf_group_result(const sai_rpc_sai_thrift_create_rpf_group_result&);
  sai_rpc_sai_thrift_create_rpf_group_result& operator=(const sai_rpc_sai_thrift_create_rpf_group_result&);
  sai_rpc_sai_thrift_create_rpf_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_rpf_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_rpf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_rpf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_presult__isset {
  _sai_rpc_sai_thrift_create_rpf_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_rpf_group_presult__isset;

class sai_rpc_sai_thrift_create_rpf_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_rpf_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_args__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_args__isset() : rpf_group_oid(false) {}
  bool rpf_group_oid :1;
} _sai_rpc_sai_thrift_remove_rpf_group_args__isset;

class sai_rpc_sai_thrift_remove_rpf_group_args {
 public:

  sai_rpc_sai_thrift_remove_rpf_group_args(const sai_rpc_sai_thrift_remove_rpf_group_args&);
  sai_rpc_sai_thrift_remove_rpf_group_args& operator=(const sai_rpc_sai_thrift_remove_rpf_group_args&);
  sai_rpc_sai_thrift_remove_rpf_group_args() : rpf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_rpf_group_args() throw();
  sai_thrift_object_id_t rpf_group_oid;

  _sai_rpc_sai_thrift_remove_rpf_group_args__isset __isset;

  void __set_rpf_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_rpf_group_args & rhs) const
  {
    if (!(rpf_group_oid == rhs.rpf_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_rpf_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_rpf_group_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_result__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_rpf_group_result__isset;

class sai_rpc_sai_thrift_remove_rpf_group_result {
 public:

  sai_rpc_sai_thrift_remove_rpf_group_result(const sai_rpc_sai_thrift_remove_rpf_group_result&);
  sai_rpc_sai_thrift_remove_rpf_group_result& operator=(const sai_rpc_sai_thrift_remove_rpf_group_result&);
  sai_rpc_sai_thrift_remove_rpf_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_rpf_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_rpf_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_rpf_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_presult__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_rpf_group_presult__isset;

class sai_rpc_sai_thrift_remove_rpf_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_rpf_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_rpf_group_attribute_args__isset() : rpf_group_oid(false), attr(false) {}
  bool rpf_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_rpf_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_rpf_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_rpf_group_attribute_args(const sai_rpc_sai_thrift_set_rpf_group_attribute_args&);
  sai_rpc_sai_thrift_set_rpf_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_rpf_group_attribute_args&);
  sai_rpc_sai_thrift_set_rpf_group_attribute_args() : rpf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_rpf_group_attribute_args() throw();
  sai_thrift_object_id_t rpf_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_rpf_group_attribute_args__isset __isset;

  void __set_rpf_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_rpf_group_attribute_args & rhs) const
  {
    if (!(rpf_group_oid == rhs.rpf_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_rpf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_rpf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_rpf_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_rpf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_rpf_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_rpf_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_rpf_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_rpf_group_attribute_result(const sai_rpc_sai_thrift_set_rpf_group_attribute_result&);
  sai_rpc_sai_thrift_set_rpf_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_rpf_group_attribute_result&);
  sai_rpc_sai_thrift_set_rpf_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_rpf_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_rpf_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_rpf_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_rpf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_rpf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_rpf_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_rpf_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_rpf_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_rpf_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_rpf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset() : rpf_group_oid(false), attr_list(false) {}
  bool rpf_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_rpf_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_rpf_group_attribute_args(const sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  sai_rpc_sai_thrift_get_rpf_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  sai_rpc_sai_thrift_get_rpf_group_attribute_args() : rpf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_rpf_group_attribute_args() throw();
  sai_thrift_object_id_t rpf_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset __isset;

  void __set_rpf_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_rpf_group_attribute_args & rhs) const
  {
    if (!(rpf_group_oid == rhs.rpf_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_rpf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_rpf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_rpf_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_rpf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_rpf_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_rpf_group_attribute_result(const sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  sai_rpc_sai_thrift_get_rpf_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  sai_rpc_sai_thrift_get_rpf_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_rpf_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_rpf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_rpf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_rpf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_rpf_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_rpf_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_member_args__isset {
  _sai_rpc_sai_thrift_create_rpf_group_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_rpf_group_member_args__isset;

class sai_rpc_sai_thrift_create_rpf_group_member_args {
 public:

  sai_rpc_sai_thrift_create_rpf_group_member_args(const sai_rpc_sai_thrift_create_rpf_group_member_args&);
  sai_rpc_sai_thrift_create_rpf_group_member_args& operator=(const sai_rpc_sai_thrift_create_rpf_group_member_args&);
  sai_rpc_sai_thrift_create_rpf_group_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_rpf_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_rpf_group_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_rpf_group_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_rpf_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_rpf_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_member_result__isset {
  _sai_rpc_sai_thrift_create_rpf_group_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_rpf_group_member_result__isset;

class sai_rpc_sai_thrift_create_rpf_group_member_result {
 public:

  sai_rpc_sai_thrift_create_rpf_group_member_result(const sai_rpc_sai_thrift_create_rpf_group_member_result&);
  sai_rpc_sai_thrift_create_rpf_group_member_result& operator=(const sai_rpc_sai_thrift_create_rpf_group_member_result&);
  sai_rpc_sai_thrift_create_rpf_group_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_rpf_group_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_rpf_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_rpf_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_rpf_group_member_presult__isset {
  _sai_rpc_sai_thrift_create_rpf_group_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_rpf_group_member_presult__isset;

class sai_rpc_sai_thrift_create_rpf_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_rpf_group_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_member_args__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_member_args__isset() : rpf_group_member_oid(false) {}
  bool rpf_group_member_oid :1;
} _sai_rpc_sai_thrift_remove_rpf_group_member_args__isset;

class sai_rpc_sai_thrift_remove_rpf_group_member_args {
 public:

  sai_rpc_sai_thrift_remove_rpf_group_member_args(const sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  sai_rpc_sai_thrift_remove_rpf_group_member_args& operator=(const sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  sai_rpc_sai_thrift_remove_rpf_group_member_args() : rpf_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_rpf_group_member_args() throw();
  sai_thrift_object_id_t rpf_group_member_oid;

  _sai_rpc_sai_thrift_remove_rpf_group_member_args__isset __isset;

  void __set_rpf_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_rpf_group_member_args & rhs) const
  {
    if (!(rpf_group_member_oid == rhs.rpf_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_rpf_group_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_rpf_group_member_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_member_result__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_rpf_group_member_result__isset;

class sai_rpc_sai_thrift_remove_rpf_group_member_result {
 public:

  sai_rpc_sai_thrift_remove_rpf_group_member_result(const sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  sai_rpc_sai_thrift_remove_rpf_group_member_result& operator=(const sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  sai_rpc_sai_thrift_remove_rpf_group_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_rpf_group_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_rpf_group_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_rpf_group_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset {
  _sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset;

class sai_rpc_sai_thrift_remove_rpf_group_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_rpf_group_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset() : rpf_group_member_oid(false), attr(false) {}
  bool rpf_group_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_rpf_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_rpf_group_member_attribute_args(const sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_rpf_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() : rpf_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() throw();
  sai_thrift_object_id_t rpf_group_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset __isset;

  void __set_rpf_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & rhs) const
  {
    if (!(rpf_group_member_oid == rhs.rpf_group_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_rpf_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_rpf_group_member_attribute_result(const sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_rpf_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset() : rpf_group_member_oid(false), attr_list(false) {}
  bool rpf_group_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_rpf_group_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_rpf_group_member_attribute_args(const sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_rpf_group_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() : rpf_group_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() throw();
  sai_thrift_object_id_t rpf_group_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset __isset;

  void __set_rpf_group_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & rhs) const
  {
    if (!(rpf_group_member_oid == rhs.rpf_group_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* rpf_group_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_rpf_group_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_rpf_group_member_attribute_result(const sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_rpf_group_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_samplepacket_args__isset {
  _sai_rpc_sai_thrift_create_samplepacket_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_samplepacket_args__isset;

class sai_rpc_sai_thrift_create_samplepacket_args {
 public:

  sai_rpc_sai_thrift_create_samplepacket_args(const sai_rpc_sai_thrift_create_samplepacket_args&);
  sai_rpc_sai_thrift_create_samplepacket_args& operator=(const sai_rpc_sai_thrift_create_samplepacket_args&);
  sai_rpc_sai_thrift_create_samplepacket_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_samplepacket_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_samplepacket_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_samplepacket_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_samplepacket_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_samplepacket_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_samplepacket_result__isset {
  _sai_rpc_sai_thrift_create_samplepacket_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_samplepacket_result__isset;

class sai_rpc_sai_thrift_create_samplepacket_result {
 public:

  sai_rpc_sai_thrift_create_samplepacket_result(const sai_rpc_sai_thrift_create_samplepacket_result&);
  sai_rpc_sai_thrift_create_samplepacket_result& operator=(const sai_rpc_sai_thrift_create_samplepacket_result&);
  sai_rpc_sai_thrift_create_samplepacket_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_samplepacket_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_samplepacket_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_samplepacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_samplepacket_presult__isset {
  _sai_rpc_sai_thrift_create_samplepacket_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_samplepacket_presult__isset;

class sai_rpc_sai_thrift_create_samplepacket_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_samplepacket_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_samplepacket_args__isset {
  _sai_rpc_sai_thrift_remove_samplepacket_args__isset() : samplepacket_oid(false) {}
  bool samplepacket_oid :1;
} _sai_rpc_sai_thrift_remove_samplepacket_args__isset;

class sai_rpc_sai_thrift_remove_samplepacket_args {
 public:

  sai_rpc_sai_thrift_remove_samplepacket_args(const sai_rpc_sai_thrift_remove_samplepacket_args&);
  sai_rpc_sai_thrift_remove_samplepacket_args& operator=(const sai_rpc_sai_thrift_remove_samplepacket_args&);
  sai_rpc_sai_thrift_remove_samplepacket_args() : samplepacket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_samplepacket_args() throw();
  sai_thrift_object_id_t samplepacket_oid;

  _sai_rpc_sai_thrift_remove_samplepacket_args__isset __isset;

  void __set_samplepacket_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_samplepacket_args & rhs) const
  {
    if (!(samplepacket_oid == rhs.samplepacket_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_samplepacket_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_samplepacket_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_samplepacket_result__isset {
  _sai_rpc_sai_thrift_remove_samplepacket_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_samplepacket_result__isset;

class sai_rpc_sai_thrift_remove_samplepacket_result {
 public:

  sai_rpc_sai_thrift_remove_samplepacket_result(const sai_rpc_sai_thrift_remove_samplepacket_result&);
  sai_rpc_sai_thrift_remove_samplepacket_result& operator=(const sai_rpc_sai_thrift_remove_samplepacket_result&);
  sai_rpc_sai_thrift_remove_samplepacket_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_samplepacket_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_samplepacket_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_samplepacket_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_samplepacket_presult__isset {
  _sai_rpc_sai_thrift_remove_samplepacket_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_samplepacket_presult__isset;

class sai_rpc_sai_thrift_remove_samplepacket_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_samplepacket_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset {
  _sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset() : samplepacket_oid(false), attr(false) {}
  bool samplepacket_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset;

class sai_rpc_sai_thrift_set_samplepacket_attribute_args {
 public:

  sai_rpc_sai_thrift_set_samplepacket_attribute_args(const sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  sai_rpc_sai_thrift_set_samplepacket_attribute_args& operator=(const sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  sai_rpc_sai_thrift_set_samplepacket_attribute_args() : samplepacket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_samplepacket_attribute_args() throw();
  sai_thrift_object_id_t samplepacket_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_oid == rhs.samplepacket_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_samplepacket_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_samplepacket_attribute_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset {
  _sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset;

class sai_rpc_sai_thrift_set_samplepacket_attribute_result {
 public:

  sai_rpc_sai_thrift_set_samplepacket_attribute_result(const sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  sai_rpc_sai_thrift_set_samplepacket_attribute_result& operator=(const sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  sai_rpc_sai_thrift_set_samplepacket_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_samplepacket_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_samplepacket_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset;

class sai_rpc_sai_thrift_set_samplepacket_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_samplepacket_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset {
  _sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset() : samplepacket_oid(false), attr_list(false) {}
  bool samplepacket_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset;

class sai_rpc_sai_thrift_get_samplepacket_attribute_args {
 public:

  sai_rpc_sai_thrift_get_samplepacket_attribute_args(const sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  sai_rpc_sai_thrift_get_samplepacket_attribute_args& operator=(const sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  sai_rpc_sai_thrift_get_samplepacket_attribute_args() : samplepacket_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_samplepacket_attribute_args() throw();
  sai_thrift_object_id_t samplepacket_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_oid == rhs.samplepacket_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_samplepacket_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_samplepacket_attribute_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset {
  _sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset;

class sai_rpc_sai_thrift_get_samplepacket_attribute_result {
 public:

  sai_rpc_sai_thrift_get_samplepacket_attribute_result(const sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  sai_rpc_sai_thrift_get_samplepacket_attribute_result& operator=(const sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  sai_rpc_sai_thrift_get_samplepacket_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_samplepacket_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_samplepacket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset;

class sai_rpc_sai_thrift_get_samplepacket_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_samplepacket_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_args__isset {
  _sai_rpc_sai_thrift_create_scheduler_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_scheduler_args__isset;

class sai_rpc_sai_thrift_create_scheduler_args {
 public:

  sai_rpc_sai_thrift_create_scheduler_args(const sai_rpc_sai_thrift_create_scheduler_args&);
  sai_rpc_sai_thrift_create_scheduler_args& operator=(const sai_rpc_sai_thrift_create_scheduler_args&);
  sai_rpc_sai_thrift_create_scheduler_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_scheduler_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_scheduler_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_scheduler_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_scheduler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_scheduler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_scheduler_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_scheduler_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_result__isset {
  _sai_rpc_sai_thrift_create_scheduler_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_scheduler_result__isset;

class sai_rpc_sai_thrift_create_scheduler_result {
 public:

  sai_rpc_sai_thrift_create_scheduler_result(const sai_rpc_sai_thrift_create_scheduler_result&);
  sai_rpc_sai_thrift_create_scheduler_result& operator=(const sai_rpc_sai_thrift_create_scheduler_result&);
  sai_rpc_sai_thrift_create_scheduler_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_scheduler_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_scheduler_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_scheduler_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_scheduler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_scheduler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_presult__isset {
  _sai_rpc_sai_thrift_create_scheduler_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_scheduler_presult__isset;

class sai_rpc_sai_thrift_create_scheduler_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_scheduler_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_scheduler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_args__isset {
  _sai_rpc_sai_thrift_remove_scheduler_args__isset() : scheduler_oid(false) {}
  bool scheduler_oid :1;
} _sai_rpc_sai_thrift_remove_scheduler_args__isset;

class sai_rpc_sai_thrift_remove_scheduler_args {
 public:

  sai_rpc_sai_thrift_remove_scheduler_args(const sai_rpc_sai_thrift_remove_scheduler_args&);
  sai_rpc_sai_thrift_remove_scheduler_args& operator=(const sai_rpc_sai_thrift_remove_scheduler_args&);
  sai_rpc_sai_thrift_remove_scheduler_args() : scheduler_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_scheduler_args() throw();
  sai_thrift_object_id_t scheduler_oid;

  _sai_rpc_sai_thrift_remove_scheduler_args__isset __isset;

  void __set_scheduler_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_scheduler_args & rhs) const
  {
    if (!(scheduler_oid == rhs.scheduler_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_scheduler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_scheduler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_scheduler_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_scheduler_pargs() throw();
  const sai_thrift_object_id_t* scheduler_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_result__isset {
  _sai_rpc_sai_thrift_remove_scheduler_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_scheduler_result__isset;

class sai_rpc_sai_thrift_remove_scheduler_result {
 public:

  sai_rpc_sai_thrift_remove_scheduler_result(const sai_rpc_sai_thrift_remove_scheduler_result&);
  sai_rpc_sai_thrift_remove_scheduler_result& operator=(const sai_rpc_sai_thrift_remove_scheduler_result&);
  sai_rpc_sai_thrift_remove_scheduler_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_scheduler_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_scheduler_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_scheduler_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_scheduler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_scheduler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_presult__isset {
  _sai_rpc_sai_thrift_remove_scheduler_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_scheduler_presult__isset;

class sai_rpc_sai_thrift_remove_scheduler_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_scheduler_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_scheduler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_attribute_args__isset {
  _sai_rpc_sai_thrift_set_scheduler_attribute_args__isset() : scheduler_oid(false), attr(false) {}
  bool scheduler_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_scheduler_attribute_args__isset;

class sai_rpc_sai_thrift_set_scheduler_attribute_args {
 public:

  sai_rpc_sai_thrift_set_scheduler_attribute_args(const sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  sai_rpc_sai_thrift_set_scheduler_attribute_args& operator=(const sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  sai_rpc_sai_thrift_set_scheduler_attribute_args() : scheduler_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_scheduler_attribute_args() throw();
  sai_thrift_object_id_t scheduler_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_scheduler_attribute_args__isset __isset;

  void __set_scheduler_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_scheduler_attribute_args & rhs) const
  {
    if (!(scheduler_oid == rhs.scheduler_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_scheduler_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_scheduler_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_attribute_result__isset {
  _sai_rpc_sai_thrift_set_scheduler_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_scheduler_attribute_result__isset;

class sai_rpc_sai_thrift_set_scheduler_attribute_result {
 public:

  sai_rpc_sai_thrift_set_scheduler_attribute_result(const sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  sai_rpc_sai_thrift_set_scheduler_attribute_result& operator=(const sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  sai_rpc_sai_thrift_set_scheduler_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_scheduler_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_scheduler_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_scheduler_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset;

class sai_rpc_sai_thrift_set_scheduler_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_scheduler_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_attribute_args__isset {
  _sai_rpc_sai_thrift_get_scheduler_attribute_args__isset() : scheduler_oid(false), attr_list(false) {}
  bool scheduler_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_scheduler_attribute_args__isset;

class sai_rpc_sai_thrift_get_scheduler_attribute_args {
 public:

  sai_rpc_sai_thrift_get_scheduler_attribute_args(const sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  sai_rpc_sai_thrift_get_scheduler_attribute_args& operator=(const sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  sai_rpc_sai_thrift_get_scheduler_attribute_args() : scheduler_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_scheduler_attribute_args() throw();
  sai_thrift_object_id_t scheduler_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_scheduler_attribute_args__isset __isset;

  void __set_scheduler_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_scheduler_attribute_args & rhs) const
  {
    if (!(scheduler_oid == rhs.scheduler_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_scheduler_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_scheduler_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_attribute_result__isset {
  _sai_rpc_sai_thrift_get_scheduler_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_scheduler_attribute_result__isset;

class sai_rpc_sai_thrift_get_scheduler_attribute_result {
 public:

  sai_rpc_sai_thrift_get_scheduler_attribute_result(const sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  sai_rpc_sai_thrift_get_scheduler_attribute_result& operator=(const sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  sai_rpc_sai_thrift_get_scheduler_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_scheduler_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_scheduler_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_scheduler_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset;

class sai_rpc_sai_thrift_get_scheduler_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_scheduler_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_group_args__isset {
  _sai_rpc_sai_thrift_create_scheduler_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_scheduler_group_args__isset;

class sai_rpc_sai_thrift_create_scheduler_group_args {
 public:

  sai_rpc_sai_thrift_create_scheduler_group_args(const sai_rpc_sai_thrift_create_scheduler_group_args&);
  sai_rpc_sai_thrift_create_scheduler_group_args& operator=(const sai_rpc_sai_thrift_create_scheduler_group_args&);
  sai_rpc_sai_thrift_create_scheduler_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_scheduler_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_scheduler_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_scheduler_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_scheduler_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_scheduler_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_group_result__isset {
  _sai_rpc_sai_thrift_create_scheduler_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_scheduler_group_result__isset;

class sai_rpc_sai_thrift_create_scheduler_group_result {
 public:

  sai_rpc_sai_thrift_create_scheduler_group_result(const sai_rpc_sai_thrift_create_scheduler_group_result&);
  sai_rpc_sai_thrift_create_scheduler_group_result& operator=(const sai_rpc_sai_thrift_create_scheduler_group_result&);
  sai_rpc_sai_thrift_create_scheduler_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_scheduler_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_scheduler_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_scheduler_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_scheduler_group_presult__isset {
  _sai_rpc_sai_thrift_create_scheduler_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_scheduler_group_presult__isset;

class sai_rpc_sai_thrift_create_scheduler_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_scheduler_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_group_args__isset {
  _sai_rpc_sai_thrift_remove_scheduler_group_args__isset() : scheduler_group_oid(false) {}
  bool scheduler_group_oid :1;
} _sai_rpc_sai_thrift_remove_scheduler_group_args__isset;

class sai_rpc_sai_thrift_remove_scheduler_group_args {
 public:

  sai_rpc_sai_thrift_remove_scheduler_group_args(const sai_rpc_sai_thrift_remove_scheduler_group_args&);
  sai_rpc_sai_thrift_remove_scheduler_group_args& operator=(const sai_rpc_sai_thrift_remove_scheduler_group_args&);
  sai_rpc_sai_thrift_remove_scheduler_group_args() : scheduler_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_scheduler_group_args() throw();
  sai_thrift_object_id_t scheduler_group_oid;

  _sai_rpc_sai_thrift_remove_scheduler_group_args__isset __isset;

  void __set_scheduler_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_scheduler_group_args & rhs) const
  {
    if (!(scheduler_group_oid == rhs.scheduler_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_scheduler_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_scheduler_group_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_group_result__isset {
  _sai_rpc_sai_thrift_remove_scheduler_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_scheduler_group_result__isset;

class sai_rpc_sai_thrift_remove_scheduler_group_result {
 public:

  sai_rpc_sai_thrift_remove_scheduler_group_result(const sai_rpc_sai_thrift_remove_scheduler_group_result&);
  sai_rpc_sai_thrift_remove_scheduler_group_result& operator=(const sai_rpc_sai_thrift_remove_scheduler_group_result&);
  sai_rpc_sai_thrift_remove_scheduler_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_scheduler_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_scheduler_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_scheduler_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_scheduler_group_presult__isset {
  _sai_rpc_sai_thrift_remove_scheduler_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_scheduler_group_presult__isset;

class sai_rpc_sai_thrift_remove_scheduler_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_scheduler_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset() : scheduler_group_oid(false), attr(false) {}
  bool scheduler_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_scheduler_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_scheduler_group_attribute_args(const sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  sai_rpc_sai_thrift_set_scheduler_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  sai_rpc_sai_thrift_set_scheduler_group_attribute_args() : scheduler_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_scheduler_group_attribute_args() throw();
  sai_thrift_object_id_t scheduler_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_oid == rhs.scheduler_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_scheduler_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_scheduler_group_attribute_result(const sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  sai_rpc_sai_thrift_set_scheduler_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  sai_rpc_sai_thrift_set_scheduler_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_scheduler_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_scheduler_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_scheduler_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_scheduler_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset() : scheduler_group_oid(false), attr_list(false) {}
  bool scheduler_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_scheduler_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_scheduler_group_attribute_args(const sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  sai_rpc_sai_thrift_get_scheduler_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  sai_rpc_sai_thrift_get_scheduler_group_attribute_args() : scheduler_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_scheduler_group_attribute_args() throw();
  sai_thrift_object_id_t scheduler_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_oid == rhs.scheduler_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_scheduler_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_scheduler_group_attribute_result(const sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  sai_rpc_sai_thrift_get_scheduler_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  sai_rpc_sai_thrift_get_scheduler_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_scheduler_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_scheduler_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_scheduler_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_scheduler_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_srv6_sidlist_args__isset {
  _sai_rpc_sai_thrift_create_srv6_sidlist_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_srv6_sidlist_args__isset;

class sai_rpc_sai_thrift_create_srv6_sidlist_args {
 public:

  sai_rpc_sai_thrift_create_srv6_sidlist_args(const sai_rpc_sai_thrift_create_srv6_sidlist_args&);
  sai_rpc_sai_thrift_create_srv6_sidlist_args& operator=(const sai_rpc_sai_thrift_create_srv6_sidlist_args&);
  sai_rpc_sai_thrift_create_srv6_sidlist_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_srv6_sidlist_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_srv6_sidlist_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_srv6_sidlist_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_srv6_sidlist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_srv6_sidlist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_srv6_sidlist_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_srv6_sidlist_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_srv6_sidlist_result__isset {
  _sai_rpc_sai_thrift_create_srv6_sidlist_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_srv6_sidlist_result__isset;

class sai_rpc_sai_thrift_create_srv6_sidlist_result {
 public:

  sai_rpc_sai_thrift_create_srv6_sidlist_result(const sai_rpc_sai_thrift_create_srv6_sidlist_result&);
  sai_rpc_sai_thrift_create_srv6_sidlist_result& operator=(const sai_rpc_sai_thrift_create_srv6_sidlist_result&);
  sai_rpc_sai_thrift_create_srv6_sidlist_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_srv6_sidlist_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_srv6_sidlist_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_srv6_sidlist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_srv6_sidlist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_srv6_sidlist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_srv6_sidlist_presult__isset {
  _sai_rpc_sai_thrift_create_srv6_sidlist_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_srv6_sidlist_presult__isset;

class sai_rpc_sai_thrift_create_srv6_sidlist_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_srv6_sidlist_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_srv6_sidlist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_srv6_sidlist_args__isset {
  _sai_rpc_sai_thrift_remove_srv6_sidlist_args__isset() : srv6_sidlist_oid(false) {}
  bool srv6_sidlist_oid :1;
} _sai_rpc_sai_thrift_remove_srv6_sidlist_args__isset;

class sai_rpc_sai_thrift_remove_srv6_sidlist_args {
 public:

  sai_rpc_sai_thrift_remove_srv6_sidlist_args(const sai_rpc_sai_thrift_remove_srv6_sidlist_args&);
  sai_rpc_sai_thrift_remove_srv6_sidlist_args& operator=(const sai_rpc_sai_thrift_remove_srv6_sidlist_args&);
  sai_rpc_sai_thrift_remove_srv6_sidlist_args() : srv6_sidlist_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_srv6_sidlist_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;

  _sai_rpc_sai_thrift_remove_srv6_sidlist_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_srv6_sidlist_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_srv6_sidlist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_srv6_sidlist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_srv6_sidlist_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_srv6_sidlist_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_srv6_sidlist_result__isset {
  _sai_rpc_sai_thrift_remove_srv6_sidlist_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_srv6_sidlist_result__isset;

class sai_rpc_sai_thrift_remove_srv6_sidlist_result {
 public:

  sai_rpc_sai_thrift_remove_srv6_sidlist_result(const sai_rpc_sai_thrift_remove_srv6_sidlist_result&);
  sai_rpc_sai_thrift_remove_srv6_sidlist_result& operator=(const sai_rpc_sai_thrift_remove_srv6_sidlist_result&);
  sai_rpc_sai_thrift_remove_srv6_sidlist_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_srv6_sidlist_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_srv6_sidlist_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_srv6_sidlist_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_srv6_sidlist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_srv6_sidlist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_srv6_sidlist_presult__isset {
  _sai_rpc_sai_thrift_remove_srv6_sidlist_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_srv6_sidlist_presult__isset;

class sai_rpc_sai_thrift_remove_srv6_sidlist_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_srv6_sidlist_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_srv6_sidlist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args__isset {
  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args__isset() : srv6_sidlist_oid(false), attr(false) {}
  bool srv6_sidlist_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args__isset;

class sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args {
 public:

  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args(const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args&);
  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args& operator=(const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args&);
  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args() : srv6_sidlist_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_srv6_sidlist_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_srv6_sidlist_attribute_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result__isset {
  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result__isset;

class sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result {
 public:

  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result(const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result&);
  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result& operator=(const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result&);
  sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_srv6_sidlist_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult__isset;

class sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_srv6_sidlist_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args__isset() : srv6_sidlist_oid(false), attr_list(false) {}
  bool srv6_sidlist_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args(const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args() : srv6_sidlist_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_srv6_sidlist_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_attribute_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result(const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_args__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_args__isset() : srv6_sidlist_oid(false), counter_ids(false) {}
  bool srv6_sidlist_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_args__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_args {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_stats_args(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_args& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_args() : srv6_sidlist_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_srv6_sidlist_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_result__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_result__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_result {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_stats_result(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_result& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args__isset() : srv6_sidlist_oid(false), counter_ids(false), mode(false) {}
  bool srv6_sidlist_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args() : srv6_sidlist_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result&);
  sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_srv6_sidlist_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args__isset {
  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args__isset() : srv6_sidlist_oid(false), counter_ids(false) {}
  bool srv6_sidlist_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args__isset;

class sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args {
 public:

  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args(const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args&);
  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args& operator=(const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args&);
  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args() : srv6_sidlist_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args() throw();
  sai_thrift_object_id_t srv6_sidlist_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args__isset __isset;

  void __set_srv6_sidlist_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args & rhs) const
  {
    if (!(srv6_sidlist_oid == rhs.srv6_sidlist_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_srv6_sidlist_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_srv6_sidlist_stats_pargs() throw();
  const sai_thrift_object_id_t* srv6_sidlist_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result__isset {
  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result__isset;

class sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result {
 public:

  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result(const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result&);
  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result& operator=(const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result&);
  sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_srv6_sidlist_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult__isset;

class sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_srv6_sidlist_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_my_sid_entry_args__isset {
  _sai_rpc_sai_thrift_create_my_sid_entry_args__isset() : my_sid_entry(false), attr_list(false) {}
  bool my_sid_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_my_sid_entry_args__isset;

class sai_rpc_sai_thrift_create_my_sid_entry_args {
 public:

  sai_rpc_sai_thrift_create_my_sid_entry_args(const sai_rpc_sai_thrift_create_my_sid_entry_args&);
  sai_rpc_sai_thrift_create_my_sid_entry_args& operator=(const sai_rpc_sai_thrift_create_my_sid_entry_args&);
  sai_rpc_sai_thrift_create_my_sid_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_my_sid_entry_args() throw();
  sai_thrift_my_sid_entry_t my_sid_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_my_sid_entry_args__isset __isset;

  void __set_my_sid_entry(const sai_thrift_my_sid_entry_t& val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_my_sid_entry_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_my_sid_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_my_sid_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_my_sid_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_my_sid_entry_pargs() throw();
  const sai_thrift_my_sid_entry_t* my_sid_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_my_sid_entry_result__isset {
  _sai_rpc_sai_thrift_create_my_sid_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_my_sid_entry_result__isset;

class sai_rpc_sai_thrift_create_my_sid_entry_result {
 public:

  sai_rpc_sai_thrift_create_my_sid_entry_result(const sai_rpc_sai_thrift_create_my_sid_entry_result&);
  sai_rpc_sai_thrift_create_my_sid_entry_result& operator=(const sai_rpc_sai_thrift_create_my_sid_entry_result&);
  sai_rpc_sai_thrift_create_my_sid_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_create_my_sid_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_my_sid_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_my_sid_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_my_sid_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_my_sid_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_my_sid_entry_presult__isset {
  _sai_rpc_sai_thrift_create_my_sid_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_create_my_sid_entry_presult__isset;

class sai_rpc_sai_thrift_create_my_sid_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_my_sid_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_my_sid_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_my_sid_entry_args__isset {
  _sai_rpc_sai_thrift_remove_my_sid_entry_args__isset() : my_sid_entry(false) {}
  bool my_sid_entry :1;
} _sai_rpc_sai_thrift_remove_my_sid_entry_args__isset;

class sai_rpc_sai_thrift_remove_my_sid_entry_args {
 public:

  sai_rpc_sai_thrift_remove_my_sid_entry_args(const sai_rpc_sai_thrift_remove_my_sid_entry_args&);
  sai_rpc_sai_thrift_remove_my_sid_entry_args& operator=(const sai_rpc_sai_thrift_remove_my_sid_entry_args&);
  sai_rpc_sai_thrift_remove_my_sid_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_my_sid_entry_args() throw();
  sai_thrift_my_sid_entry_t my_sid_entry;

  _sai_rpc_sai_thrift_remove_my_sid_entry_args__isset __isset;

  void __set_my_sid_entry(const sai_thrift_my_sid_entry_t& val);

  bool operator == (const sai_rpc_sai_thrift_remove_my_sid_entry_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_my_sid_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_my_sid_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_my_sid_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_my_sid_entry_pargs() throw();
  const sai_thrift_my_sid_entry_t* my_sid_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_my_sid_entry_result__isset {
  _sai_rpc_sai_thrift_remove_my_sid_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_my_sid_entry_result__isset;

class sai_rpc_sai_thrift_remove_my_sid_entry_result {
 public:

  sai_rpc_sai_thrift_remove_my_sid_entry_result(const sai_rpc_sai_thrift_remove_my_sid_entry_result&);
  sai_rpc_sai_thrift_remove_my_sid_entry_result& operator=(const sai_rpc_sai_thrift_remove_my_sid_entry_result&);
  sai_rpc_sai_thrift_remove_my_sid_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_my_sid_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_my_sid_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_my_sid_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_my_sid_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_my_sid_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_my_sid_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_my_sid_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_my_sid_entry_presult__isset;

class sai_rpc_sai_thrift_remove_my_sid_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_my_sid_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_my_sid_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_my_sid_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_args__isset() : my_sid_entry(false), attr(false) {}
  bool my_sid_entry :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_my_sid_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_my_sid_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_my_sid_entry_attribute_args(const sai_rpc_sai_thrift_set_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_set_my_sid_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_set_my_sid_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_my_sid_entry_attribute_args() throw();
  sai_thrift_my_sid_entry_t my_sid_entry;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_args__isset __isset;

  void __set_my_sid_entry(const sai_thrift_my_sid_entry_t& val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_my_sid_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_my_sid_entry_attribute_pargs() throw();
  const sai_thrift_my_sid_entry_t* my_sid_entry;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_my_sid_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_my_sid_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_my_sid_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_my_sid_entry_attribute_result(const sai_rpc_sai_thrift_set_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_set_my_sid_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_set_my_sid_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_my_sid_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_my_sid_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_my_sid_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_my_sid_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_args__isset() : my_sid_entry(false), attr_list(false) {}
  bool my_sid_entry :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_my_sid_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_my_sid_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_my_sid_entry_attribute_args(const sai_rpc_sai_thrift_get_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_get_my_sid_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_get_my_sid_entry_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_my_sid_entry_attribute_args() throw();
  sai_thrift_my_sid_entry_t my_sid_entry;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_args__isset __isset;

  void __set_my_sid_entry(const sai_thrift_my_sid_entry_t& val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_my_sid_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_my_sid_entry_attribute_pargs() throw();
  const sai_thrift_my_sid_entry_t* my_sid_entry;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_my_sid_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_my_sid_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_my_sid_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_my_sid_entry_attribute_result(const sai_rpc_sai_thrift_get_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_get_my_sid_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_get_my_sid_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_my_sid_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_my_sid_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_my_sid_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_create_my_sid_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_args__isset() : my_sid_entry(false), attr_count(false), attr_list(false), mode(false) {}
  bool my_sid_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_create_my_sid_entry_args__isset;

class sai_rpc_sai_thrift_bulk_create_my_sid_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_create_my_sid_entry_args(const sai_rpc_sai_thrift_bulk_create_my_sid_entry_args&);
  sai_rpc_sai_thrift_bulk_create_my_sid_entry_args& operator=(const sai_rpc_sai_thrift_bulk_create_my_sid_entry_args&);
  sai_rpc_sai_thrift_bulk_create_my_sid_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_my_sid_entry_args() throw();
  std::vector<sai_thrift_my_sid_entry_t>  my_sid_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_args__isset __isset;

  void __set_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_create_my_sid_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_my_sid_entry_pargs() throw();
  const std::vector<sai_thrift_my_sid_entry_t> * my_sid_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_my_sid_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_my_sid_entry_result__isset;

class sai_rpc_sai_thrift_bulk_create_my_sid_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_create_my_sid_entry_result(const sai_rpc_sai_thrift_bulk_create_my_sid_entry_result&);
  sai_rpc_sai_thrift_bulk_create_my_sid_entry_result& operator=(const sai_rpc_sai_thrift_bulk_create_my_sid_entry_result&);
  sai_rpc_sai_thrift_bulk_create_my_sid_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_create_my_sid_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_create_my_sid_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_create_my_sid_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args__isset {
  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args__isset() : my_sid_entry(false), mode(false) {}
  bool my_sid_entry :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args__isset;

class sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args {
 public:

  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args(const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args& operator=(const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args&);
  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args() throw();
  std::vector<sai_thrift_my_sid_entry_t>  my_sid_entry;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args__isset __isset;

  void __set_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_remove_my_sid_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_my_sid_entry_pargs() throw();
  const std::vector<sai_thrift_my_sid_entry_t> * my_sid_entry;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result__isset {
  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result__isset;

class sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result {
 public:

  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result(const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result& operator=(const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result&);
  sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_remove_my_sid_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult__isset {
  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult__isset;

class sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_remove_my_sid_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args__isset() : my_sid_entry(false), attr_list(false), mode(false) {}
  bool my_sid_entry :1;
  bool attr_list :1;
  bool mode :1;
} _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args(const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args() throw();
  std::vector<sai_thrift_my_sid_entry_t>  my_sid_entry;
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_bulk_op_error_mode_t mode;

  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args__isset __isset;

  void __set_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & val);

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_my_sid_entry_t> * my_sid_entry;
  const std::vector<sai_thrift_attribute_t> * attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result(const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result() throw();
  std::vector<sai_thrift_status_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_status_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult() throw();
  std::vector<sai_thrift_status_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_set_my_sid_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args__isset() : my_sid_entry(false), attr_count(false), attr_list(false), mode(false), object_statuses(false) {}
  bool my_sid_entry :1;
  bool attr_count :1;
  bool attr_list :1;
  bool mode :1;
  bool object_statuses :1;
} _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args__isset;

class sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args(const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args& operator=(const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args&);
  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args() throw();
  std::vector<sai_thrift_my_sid_entry_t>  my_sid_entry;
  std::vector<sai_thrift_uint32_t>  attr_count;
  sai_thrift_attribute_list_t attr_list;
  sai_thrift_bulk_op_error_mode_t mode;
  std::vector<sai_thrift_status_t>  object_statuses;

  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args__isset __isset;

  void __set_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & val);

  void __set_attr_count(const std::vector<sai_thrift_uint32_t> & val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  void __set_mode(const sai_thrift_bulk_op_error_mode_t val);

  void __set_object_statuses(const std::vector<sai_thrift_status_t> & val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args & rhs) const
  {
    if (!(my_sid_entry == rhs.my_sid_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(object_statuses == rhs.object_statuses))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_pargs() throw();
  const std::vector<sai_thrift_my_sid_entry_t> * my_sid_entry;
  const std::vector<sai_thrift_uint32_t> * attr_count;
  const sai_thrift_attribute_list_t* attr_list;
  const sai_thrift_bulk_op_error_mode_t* mode;
  const std::vector<sai_thrift_status_t> * object_statuses;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result__isset;

class sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result(const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result& operator=(const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result&);
  sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_bulk_get_my_sid_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_stp_args__isset {
  _sai_rpc_sai_thrift_create_stp_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_stp_args__isset;

class sai_rpc_sai_thrift_create_stp_args {
 public:

  sai_rpc_sai_thrift_create_stp_args(const sai_rpc_sai_thrift_create_stp_args&);
  sai_rpc_sai_thrift_create_stp_args& operator=(const sai_rpc_sai_thrift_create_stp_args&);
  sai_rpc_sai_thrift_create_stp_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_stp_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_stp_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_stp_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_stp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_stp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_stp_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_stp_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_stp_result__isset {
  _sai_rpc_sai_thrift_create_stp_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_stp_result__isset;

class sai_rpc_sai_thrift_create_stp_result {
 public:

  sai_rpc_sai_thrift_create_stp_result(const sai_rpc_sai_thrift_create_stp_result&);
  sai_rpc_sai_thrift_create_stp_result& operator=(const sai_rpc_sai_thrift_create_stp_result&);
  sai_rpc_sai_thrift_create_stp_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_stp_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_stp_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_stp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_stp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_stp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_stp_presult__isset {
  _sai_rpc_sai_thrift_create_stp_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_stp_presult__isset;

class sai_rpc_sai_thrift_create_stp_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_stp_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_stp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_stp_args__isset {
  _sai_rpc_sai_thrift_remove_stp_args__isset() : stp_oid(false) {}
  bool stp_oid :1;
} _sai_rpc_sai_thrift_remove_stp_args__isset;

class sai_rpc_sai_thrift_remove_stp_args {
 public:

  sai_rpc_sai_thrift_remove_stp_args(const sai_rpc_sai_thrift_remove_stp_args&);
  sai_rpc_sai_thrift_remove_stp_args& operator=(const sai_rpc_sai_thrift_remove_stp_args&);
  sai_rpc_sai_thrift_remove_stp_args() : stp_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_stp_args() throw();
  sai_thrift_object_id_t stp_oid;

  _sai_rpc_sai_thrift_remove_stp_args__isset __isset;

  void __set_stp_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_stp_args & rhs) const
  {
    if (!(stp_oid == rhs.stp_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_stp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_stp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_stp_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_stp_pargs() throw();
  const sai_thrift_object_id_t* stp_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_stp_result__isset {
  _sai_rpc_sai_thrift_remove_stp_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_stp_result__isset;

class sai_rpc_sai_thrift_remove_stp_result {
 public:

  sai_rpc_sai_thrift_remove_stp_result(const sai_rpc_sai_thrift_remove_stp_result&);
  sai_rpc_sai_thrift_remove_stp_result& operator=(const sai_rpc_sai_thrift_remove_stp_result&);
  sai_rpc_sai_thrift_remove_stp_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_stp_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_stp_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_stp_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_stp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_stp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_stp_presult__isset {
  _sai_rpc_sai_thrift_remove_stp_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_stp_presult__isset;

class sai_rpc_sai_thrift_remove_stp_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_stp_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_stp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_stp_attribute_args__isset {
  _sai_rpc_sai_thrift_set_stp_attribute_args__isset() : stp_oid(false), attr(false) {}
  bool stp_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_stp_attribute_args__isset;

class sai_rpc_sai_thrift_set_stp_attribute_args {
 public:

  sai_rpc_sai_thrift_set_stp_attribute_args(const sai_rpc_sai_thrift_set_stp_attribute_args&);
  sai_rpc_sai_thrift_set_stp_attribute_args& operator=(const sai_rpc_sai_thrift_set_stp_attribute_args&);
  sai_rpc_sai_thrift_set_stp_attribute_args() : stp_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_stp_attribute_args() throw();
  sai_thrift_object_id_t stp_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_stp_attribute_args__isset __isset;

  void __set_stp_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_stp_attribute_args & rhs) const
  {
    if (!(stp_oid == rhs.stp_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_stp_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_stp_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_stp_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_stp_attribute_pargs() throw();
  const sai_thrift_object_id_t* stp_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_stp_attribute_result__isset {
  _sai_rpc_sai_thrift_set_stp_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_stp_attribute_result__isset;

class sai_rpc_sai_thrift_set_stp_attribute_result {
 public:

  sai_rpc_sai_thrift_set_stp_attribute_result(const sai_rpc_sai_thrift_set_stp_attribute_result&);
  sai_rpc_sai_thrift_set_stp_attribute_result& operator=(const sai_rpc_sai_thrift_set_stp_attribute_result&);
  sai_rpc_sai_thrift_set_stp_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_stp_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_stp_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_stp_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_stp_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_stp_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_stp_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_stp_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_stp_attribute_presult__isset;

class sai_rpc_sai_thrift_set_stp_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_stp_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_stp_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_stp_attribute_args__isset {
  _sai_rpc_sai_thrift_get_stp_attribute_args__isset() : stp_oid(false), attr_list(false) {}
  bool stp_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_stp_attribute_args__isset;

class sai_rpc_sai_thrift_get_stp_attribute_args {
 public:

  sai_rpc_sai_thrift_get_stp_attribute_args(const sai_rpc_sai_thrift_get_stp_attribute_args&);
  sai_rpc_sai_thrift_get_stp_attribute_args& operator=(const sai_rpc_sai_thrift_get_stp_attribute_args&);
  sai_rpc_sai_thrift_get_stp_attribute_args() : stp_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_stp_attribute_args() throw();
  sai_thrift_object_id_t stp_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_stp_attribute_args__isset __isset;

  void __set_stp_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_stp_attribute_args & rhs) const
  {
    if (!(stp_oid == rhs.stp_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_stp_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_stp_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_stp_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_stp_attribute_pargs() throw();
  const sai_thrift_object_id_t* stp_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_stp_attribute_result__isset {
  _sai_rpc_sai_thrift_get_stp_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_stp_attribute_result__isset;

class sai_rpc_sai_thrift_get_stp_attribute_result {
 public:

  sai_rpc_sai_thrift_get_stp_attribute_result(const sai_rpc_sai_thrift_get_stp_attribute_result&);
  sai_rpc_sai_thrift_get_stp_attribute_result& operator=(const sai_rpc_sai_thrift_get_stp_attribute_result&);
  sai_rpc_sai_thrift_get_stp_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_stp_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_stp_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_stp_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_stp_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_stp_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_stp_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_stp_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_stp_attribute_presult__isset;

class sai_rpc_sai_thrift_get_stp_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_stp_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_stp_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_stp_port_args__isset {
  _sai_rpc_sai_thrift_create_stp_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_stp_port_args__isset;

class sai_rpc_sai_thrift_create_stp_port_args {
 public:

  sai_rpc_sai_thrift_create_stp_port_args(const sai_rpc_sai_thrift_create_stp_port_args&);
  sai_rpc_sai_thrift_create_stp_port_args& operator=(const sai_rpc_sai_thrift_create_stp_port_args&);
  sai_rpc_sai_thrift_create_stp_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_stp_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_stp_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_stp_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_stp_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_stp_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_stp_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_stp_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_stp_port_result__isset {
  _sai_rpc_sai_thrift_create_stp_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_stp_port_result__isset;

class sai_rpc_sai_thrift_create_stp_port_result {
 public:

  sai_rpc_sai_thrift_create_stp_port_result(const sai_rpc_sai_thrift_create_stp_port_result&);
  sai_rpc_sai_thrift_create_stp_port_result& operator=(const sai_rpc_sai_thrift_create_stp_port_result&);
  sai_rpc_sai_thrift_create_stp_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_stp_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_stp_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_stp_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_stp_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_stp_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_stp_port_presult__isset {
  _sai_rpc_sai_thrift_create_stp_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_stp_port_presult__isset;

class sai_rpc_sai_thrift_create_stp_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_stp_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_stp_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_stp_port_args__isset {
  _sai_rpc_sai_thrift_remove_stp_port_args__isset() : stp_port_oid(false) {}
  bool stp_port_oid :1;
} _sai_rpc_sai_thrift_remove_stp_port_args__isset;

class sai_rpc_sai_thrift_remove_stp_port_args {
 public:

  sai_rpc_sai_thrift_remove_stp_port_args(const sai_rpc_sai_thrift_remove_stp_port_args&);
  sai_rpc_sai_thrift_remove_stp_port_args& operator=(const sai_rpc_sai_thrift_remove_stp_port_args&);
  sai_rpc_sai_thrift_remove_stp_port_args() : stp_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_stp_port_args() throw();
  sai_thrift_object_id_t stp_port_oid;

  _sai_rpc_sai_thrift_remove_stp_port_args__isset __isset;

  void __set_stp_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_stp_port_args & rhs) const
  {
    if (!(stp_port_oid == rhs.stp_port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_stp_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_stp_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_stp_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_stp_port_pargs() throw();
  const sai_thrift_object_id_t* stp_port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_stp_port_result__isset {
  _sai_rpc_sai_thrift_remove_stp_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_stp_port_result__isset;

class sai_rpc_sai_thrift_remove_stp_port_result {
 public:

  sai_rpc_sai_thrift_remove_stp_port_result(const sai_rpc_sai_thrift_remove_stp_port_result&);
  sai_rpc_sai_thrift_remove_stp_port_result& operator=(const sai_rpc_sai_thrift_remove_stp_port_result&);
  sai_rpc_sai_thrift_remove_stp_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_stp_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_stp_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_stp_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_stp_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_stp_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_stp_port_presult__isset {
  _sai_rpc_sai_thrift_remove_stp_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_stp_port_presult__isset;

class sai_rpc_sai_thrift_remove_stp_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_stp_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_stp_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_stp_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_stp_port_attribute_args__isset() : stp_port_oid(false), attr(false) {}
  bool stp_port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_stp_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_stp_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_stp_port_attribute_args(const sai_rpc_sai_thrift_set_stp_port_attribute_args&);
  sai_rpc_sai_thrift_set_stp_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_stp_port_attribute_args&);
  sai_rpc_sai_thrift_set_stp_port_attribute_args() : stp_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_stp_port_attribute_args() throw();
  sai_thrift_object_id_t stp_port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_stp_port_attribute_args__isset __isset;

  void __set_stp_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_stp_port_attribute_args & rhs) const
  {
    if (!(stp_port_oid == rhs.stp_port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_stp_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_stp_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_stp_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_stp_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* stp_port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_stp_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_stp_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_stp_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_stp_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_stp_port_attribute_result(const sai_rpc_sai_thrift_set_stp_port_attribute_result&);
  sai_rpc_sai_thrift_set_stp_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_stp_port_attribute_result&);
  sai_rpc_sai_thrift_set_stp_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_stp_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_stp_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_stp_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_stp_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_stp_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_stp_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_stp_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_stp_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_stp_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_stp_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_stp_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_stp_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_stp_port_attribute_args__isset() : stp_port_oid(false), attr_list(false) {}
  bool stp_port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_stp_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_stp_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_stp_port_attribute_args(const sai_rpc_sai_thrift_get_stp_port_attribute_args&);
  sai_rpc_sai_thrift_get_stp_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_stp_port_attribute_args&);
  sai_rpc_sai_thrift_get_stp_port_attribute_args() : stp_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_stp_port_attribute_args() throw();
  sai_thrift_object_id_t stp_port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_stp_port_attribute_args__isset __isset;

  void __set_stp_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_stp_port_attribute_args & rhs) const
  {
    if (!(stp_port_oid == rhs.stp_port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_stp_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_stp_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_stp_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_stp_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* stp_port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_stp_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_stp_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_stp_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_stp_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_stp_port_attribute_result(const sai_rpc_sai_thrift_get_stp_port_attribute_result&);
  sai_rpc_sai_thrift_get_stp_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_stp_port_attribute_result&);
  sai_rpc_sai_thrift_get_stp_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_stp_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_stp_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_stp_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_stp_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_stp_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_stp_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_stp_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_stp_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_register_read_args__isset {
  _sai_rpc_sai_thrift_switch_register_read_args__isset() : platform_context(false), device_addr(false), start_reg_addr(false) {}
  bool platform_context :1;
  bool device_addr :1;
  bool start_reg_addr :1;
} _sai_rpc_sai_thrift_switch_register_read_args__isset;

class sai_rpc_sai_thrift_switch_register_read_args {
 public:

  sai_rpc_sai_thrift_switch_register_read_args(const sai_rpc_sai_thrift_switch_register_read_args&);
  sai_rpc_sai_thrift_switch_register_read_args& operator=(const sai_rpc_sai_thrift_switch_register_read_args&);
  sai_rpc_sai_thrift_switch_register_read_args() : platform_context(0), device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_register_read_args() throw();
  sai_thrift_uint64_t platform_context;
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;

  _sai_rpc_sai_thrift_switch_register_read_args__isset __isset;

  void __set_platform_context(const sai_thrift_uint64_t val);

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  bool operator == (const sai_rpc_sai_thrift_switch_register_read_args & rhs) const
  {
    if (!(platform_context == rhs.platform_context))
      return false;
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_register_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_register_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_register_read_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_register_read_pargs() throw();
  const sai_thrift_uint64_t* platform_context;
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_register_read_result__isset {
  _sai_rpc_sai_thrift_switch_register_read_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_register_read_result__isset;

class sai_rpc_sai_thrift_switch_register_read_result {
 public:

  sai_rpc_sai_thrift_switch_register_read_result(const sai_rpc_sai_thrift_switch_register_read_result&);
  sai_rpc_sai_thrift_switch_register_read_result& operator=(const sai_rpc_sai_thrift_switch_register_read_result&);
  sai_rpc_sai_thrift_switch_register_read_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_register_read_result() throw();
  std::vector<sai_thrift_uint32_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_register_read_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint32_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_register_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_register_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_register_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_register_read_presult__isset {
  _sai_rpc_sai_thrift_switch_register_read_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_register_read_presult__isset;

class sai_rpc_sai_thrift_switch_register_read_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_register_read_presult() throw();
  std::vector<sai_thrift_uint32_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_register_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_register_write_args__isset {
  _sai_rpc_sai_thrift_switch_register_write_args__isset() : platform_context(false), device_addr(false), start_reg_addr(false), reg_val(false) {}
  bool platform_context :1;
  bool device_addr :1;
  bool start_reg_addr :1;
  bool reg_val :1;
} _sai_rpc_sai_thrift_switch_register_write_args__isset;

class sai_rpc_sai_thrift_switch_register_write_args {
 public:

  sai_rpc_sai_thrift_switch_register_write_args(const sai_rpc_sai_thrift_switch_register_write_args&);
  sai_rpc_sai_thrift_switch_register_write_args& operator=(const sai_rpc_sai_thrift_switch_register_write_args&);
  sai_rpc_sai_thrift_switch_register_write_args() : platform_context(0), device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_register_write_args() throw();
  sai_thrift_uint64_t platform_context;
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;
  std::vector<sai_thrift_uint32_t>  reg_val;

  _sai_rpc_sai_thrift_switch_register_write_args__isset __isset;

  void __set_platform_context(const sai_thrift_uint64_t val);

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  void __set_reg_val(const std::vector<sai_thrift_uint32_t> & val);

  bool operator == (const sai_rpc_sai_thrift_switch_register_write_args & rhs) const
  {
    if (!(platform_context == rhs.platform_context))
      return false;
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    if (!(reg_val == rhs.reg_val))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_register_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_register_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_register_write_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_register_write_pargs() throw();
  const sai_thrift_uint64_t* platform_context;
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;
  const std::vector<sai_thrift_uint32_t> * reg_val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_register_write_result__isset {
  _sai_rpc_sai_thrift_switch_register_write_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_register_write_result__isset;

class sai_rpc_sai_thrift_switch_register_write_result {
 public:

  sai_rpc_sai_thrift_switch_register_write_result(const sai_rpc_sai_thrift_switch_register_write_result&);
  sai_rpc_sai_thrift_switch_register_write_result& operator=(const sai_rpc_sai_thrift_switch_register_write_result&);
  sai_rpc_sai_thrift_switch_register_write_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_register_write_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_register_write_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_register_write_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_register_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_register_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_register_write_presult__isset {
  _sai_rpc_sai_thrift_switch_register_write_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_register_write_presult__isset;

class sai_rpc_sai_thrift_switch_register_write_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_register_write_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_register_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_read_args__isset {
  _sai_rpc_sai_thrift_switch_mdio_read_args__isset() : device_addr(false), start_reg_addr(false) {}
  bool device_addr :1;
  bool start_reg_addr :1;
} _sai_rpc_sai_thrift_switch_mdio_read_args__isset;

class sai_rpc_sai_thrift_switch_mdio_read_args {
 public:

  sai_rpc_sai_thrift_switch_mdio_read_args(const sai_rpc_sai_thrift_switch_mdio_read_args&);
  sai_rpc_sai_thrift_switch_mdio_read_args& operator=(const sai_rpc_sai_thrift_switch_mdio_read_args&);
  sai_rpc_sai_thrift_switch_mdio_read_args() : device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_read_args() throw();
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;

  _sai_rpc_sai_thrift_switch_mdio_read_args__isset __isset;

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_read_args & rhs) const
  {
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_mdio_read_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_read_pargs() throw();
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_read_result__isset {
  _sai_rpc_sai_thrift_switch_mdio_read_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_read_result__isset;

class sai_rpc_sai_thrift_switch_mdio_read_result {
 public:

  sai_rpc_sai_thrift_switch_mdio_read_result(const sai_rpc_sai_thrift_switch_mdio_read_result&);
  sai_rpc_sai_thrift_switch_mdio_read_result& operator=(const sai_rpc_sai_thrift_switch_mdio_read_result&);
  sai_rpc_sai_thrift_switch_mdio_read_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_read_result() throw();
  std::vector<sai_thrift_uint32_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_read_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint32_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_read_presult__isset {
  _sai_rpc_sai_thrift_switch_mdio_read_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_read_presult__isset;

class sai_rpc_sai_thrift_switch_mdio_read_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_read_presult() throw();
  std::vector<sai_thrift_uint32_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_write_args__isset {
  _sai_rpc_sai_thrift_switch_mdio_write_args__isset() : device_addr(false), start_reg_addr(false), reg_val(false) {}
  bool device_addr :1;
  bool start_reg_addr :1;
  bool reg_val :1;
} _sai_rpc_sai_thrift_switch_mdio_write_args__isset;

class sai_rpc_sai_thrift_switch_mdio_write_args {
 public:

  sai_rpc_sai_thrift_switch_mdio_write_args(const sai_rpc_sai_thrift_switch_mdio_write_args&);
  sai_rpc_sai_thrift_switch_mdio_write_args& operator=(const sai_rpc_sai_thrift_switch_mdio_write_args&);
  sai_rpc_sai_thrift_switch_mdio_write_args() : device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_write_args() throw();
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;
  std::vector<sai_thrift_uint32_t>  reg_val;

  _sai_rpc_sai_thrift_switch_mdio_write_args__isset __isset;

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  void __set_reg_val(const std::vector<sai_thrift_uint32_t> & val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_write_args & rhs) const
  {
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    if (!(reg_val == rhs.reg_val))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_mdio_write_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_write_pargs() throw();
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;
  const std::vector<sai_thrift_uint32_t> * reg_val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_write_result__isset {
  _sai_rpc_sai_thrift_switch_mdio_write_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_write_result__isset;

class sai_rpc_sai_thrift_switch_mdio_write_result {
 public:

  sai_rpc_sai_thrift_switch_mdio_write_result(const sai_rpc_sai_thrift_switch_mdio_write_result&);
  sai_rpc_sai_thrift_switch_mdio_write_result& operator=(const sai_rpc_sai_thrift_switch_mdio_write_result&);
  sai_rpc_sai_thrift_switch_mdio_write_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_write_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_write_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_write_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_write_presult__isset {
  _sai_rpc_sai_thrift_switch_mdio_write_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_write_presult__isset;

class sai_rpc_sai_thrift_switch_mdio_write_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_write_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_read_args__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_read_args__isset() : device_addr(false), start_reg_addr(false) {}
  bool device_addr :1;
  bool start_reg_addr :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_read_args__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_read_args {
 public:

  sai_rpc_sai_thrift_switch_mdio_cl22_read_args(const sai_rpc_sai_thrift_switch_mdio_cl22_read_args&);
  sai_rpc_sai_thrift_switch_mdio_cl22_read_args& operator=(const sai_rpc_sai_thrift_switch_mdio_cl22_read_args&);
  sai_rpc_sai_thrift_switch_mdio_cl22_read_args() : device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_read_args() throw();
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;

  _sai_rpc_sai_thrift_switch_mdio_cl22_read_args__isset __isset;

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_cl22_read_args & rhs) const
  {
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_cl22_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_cl22_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_mdio_cl22_read_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_read_pargs() throw();
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_read_result__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_read_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_read_result__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_read_result {
 public:

  sai_rpc_sai_thrift_switch_mdio_cl22_read_result(const sai_rpc_sai_thrift_switch_mdio_cl22_read_result&);
  sai_rpc_sai_thrift_switch_mdio_cl22_read_result& operator=(const sai_rpc_sai_thrift_switch_mdio_cl22_read_result&);
  sai_rpc_sai_thrift_switch_mdio_cl22_read_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_read_result() throw();
  std::vector<sai_thrift_uint32_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_cl22_read_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint32_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_cl22_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_cl22_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_cl22_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_read_presult__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_read_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_read_presult__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_read_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_read_presult() throw();
  std::vector<sai_thrift_uint32_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_cl22_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_write_args__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_write_args__isset() : device_addr(false), start_reg_addr(false), reg_val(false) {}
  bool device_addr :1;
  bool start_reg_addr :1;
  bool reg_val :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_write_args__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_write_args {
 public:

  sai_rpc_sai_thrift_switch_mdio_cl22_write_args(const sai_rpc_sai_thrift_switch_mdio_cl22_write_args&);
  sai_rpc_sai_thrift_switch_mdio_cl22_write_args& operator=(const sai_rpc_sai_thrift_switch_mdio_cl22_write_args&);
  sai_rpc_sai_thrift_switch_mdio_cl22_write_args() : device_addr(0), start_reg_addr(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_write_args() throw();
  sai_thrift_uint32_t device_addr;
  sai_thrift_uint32_t start_reg_addr;
  std::vector<sai_thrift_uint32_t>  reg_val;

  _sai_rpc_sai_thrift_switch_mdio_cl22_write_args__isset __isset;

  void __set_device_addr(const sai_thrift_uint32_t val);

  void __set_start_reg_addr(const sai_thrift_uint32_t val);

  void __set_reg_val(const std::vector<sai_thrift_uint32_t> & val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_cl22_write_args & rhs) const
  {
    if (!(device_addr == rhs.device_addr))
      return false;
    if (!(start_reg_addr == rhs.start_reg_addr))
      return false;
    if (!(reg_val == rhs.reg_val))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_cl22_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_cl22_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_mdio_cl22_write_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_write_pargs() throw();
  const sai_thrift_uint32_t* device_addr;
  const sai_thrift_uint32_t* start_reg_addr;
  const std::vector<sai_thrift_uint32_t> * reg_val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_write_result__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_write_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_write_result__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_write_result {
 public:

  sai_rpc_sai_thrift_switch_mdio_cl22_write_result(const sai_rpc_sai_thrift_switch_mdio_cl22_write_result&);
  sai_rpc_sai_thrift_switch_mdio_cl22_write_result& operator=(const sai_rpc_sai_thrift_switch_mdio_cl22_write_result&);
  sai_rpc_sai_thrift_switch_mdio_cl22_write_result() {
  }

  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_write_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_cl22_write_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_switch_mdio_cl22_write_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_mdio_cl22_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_mdio_cl22_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_mdio_cl22_write_presult__isset {
  _sai_rpc_sai_thrift_switch_mdio_cl22_write_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_switch_mdio_cl22_write_presult__isset;

class sai_rpc_sai_thrift_switch_mdio_cl22_write_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_mdio_cl22_write_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_switch_mdio_cl22_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_switch_args__isset {
  _sai_rpc_sai_thrift_create_switch_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_switch_args__isset;

class sai_rpc_sai_thrift_create_switch_args {
 public:

  sai_rpc_sai_thrift_create_switch_args(const sai_rpc_sai_thrift_create_switch_args&);
  sai_rpc_sai_thrift_create_switch_args& operator=(const sai_rpc_sai_thrift_create_switch_args&);
  sai_rpc_sai_thrift_create_switch_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_switch_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_switch_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_switch_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_switch_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_switch_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_switch_result__isset {
  _sai_rpc_sai_thrift_create_switch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_switch_result__isset;

class sai_rpc_sai_thrift_create_switch_result {
 public:

  sai_rpc_sai_thrift_create_switch_result(const sai_rpc_sai_thrift_create_switch_result&);
  sai_rpc_sai_thrift_create_switch_result& operator=(const sai_rpc_sai_thrift_create_switch_result&);
  sai_rpc_sai_thrift_create_switch_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_switch_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_switch_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_switch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_switch_presult__isset {
  _sai_rpc_sai_thrift_create_switch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_switch_presult__isset;

class sai_rpc_sai_thrift_create_switch_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_switch_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sai_rpc_sai_thrift_remove_switch_args {
 public:

  sai_rpc_sai_thrift_remove_switch_args(const sai_rpc_sai_thrift_remove_switch_args&);
  sai_rpc_sai_thrift_remove_switch_args& operator=(const sai_rpc_sai_thrift_remove_switch_args&);
  sai_rpc_sai_thrift_remove_switch_args() {
  }

  virtual ~sai_rpc_sai_thrift_remove_switch_args() throw();

  bool operator == (const sai_rpc_sai_thrift_remove_switch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_switch_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_switch_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_switch_result__isset {
  _sai_rpc_sai_thrift_remove_switch_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_switch_result__isset;

class sai_rpc_sai_thrift_remove_switch_result {
 public:

  sai_rpc_sai_thrift_remove_switch_result(const sai_rpc_sai_thrift_remove_switch_result&);
  sai_rpc_sai_thrift_remove_switch_result& operator=(const sai_rpc_sai_thrift_remove_switch_result&);
  sai_rpc_sai_thrift_remove_switch_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_switch_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_switch_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_switch_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_switch_presult__isset {
  _sai_rpc_sai_thrift_remove_switch_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_switch_presult__isset;

class sai_rpc_sai_thrift_remove_switch_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_switch_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_switch_attribute_args__isset {
  _sai_rpc_sai_thrift_set_switch_attribute_args__isset() : attr(false) {}
  bool attr :1;
} _sai_rpc_sai_thrift_set_switch_attribute_args__isset;

class sai_rpc_sai_thrift_set_switch_attribute_args {
 public:

  sai_rpc_sai_thrift_set_switch_attribute_args(const sai_rpc_sai_thrift_set_switch_attribute_args&);
  sai_rpc_sai_thrift_set_switch_attribute_args& operator=(const sai_rpc_sai_thrift_set_switch_attribute_args&);
  sai_rpc_sai_thrift_set_switch_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_set_switch_attribute_args() throw();
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_switch_attribute_args__isset __isset;

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_switch_attribute_args & rhs) const
  {
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_switch_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_switch_attribute_pargs() throw();
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_switch_attribute_result__isset {
  _sai_rpc_sai_thrift_set_switch_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_switch_attribute_result__isset;

class sai_rpc_sai_thrift_set_switch_attribute_result {
 public:

  sai_rpc_sai_thrift_set_switch_attribute_result(const sai_rpc_sai_thrift_set_switch_attribute_result&);
  sai_rpc_sai_thrift_set_switch_attribute_result& operator=(const sai_rpc_sai_thrift_set_switch_attribute_result&);
  sai_rpc_sai_thrift_set_switch_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_switch_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_switch_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_switch_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_switch_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_switch_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_switch_attribute_presult__isset;

class sai_rpc_sai_thrift_set_switch_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_switch_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_switch_attribute_args__isset {
  _sai_rpc_sai_thrift_get_switch_attribute_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_switch_attribute_args__isset;

class sai_rpc_sai_thrift_get_switch_attribute_args {
 public:

  sai_rpc_sai_thrift_get_switch_attribute_args(const sai_rpc_sai_thrift_get_switch_attribute_args&);
  sai_rpc_sai_thrift_get_switch_attribute_args& operator=(const sai_rpc_sai_thrift_get_switch_attribute_args&);
  sai_rpc_sai_thrift_get_switch_attribute_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_attribute_args() throw();
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_switch_attribute_args__isset __isset;

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_attribute_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_switch_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_attribute_pargs() throw();
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_attribute_result__isset {
  _sai_rpc_sai_thrift_get_switch_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_attribute_result__isset;

class sai_rpc_sai_thrift_get_switch_attribute_result {
 public:

  sai_rpc_sai_thrift_get_switch_attribute_result(const sai_rpc_sai_thrift_get_switch_attribute_result&);
  sai_rpc_sai_thrift_get_switch_attribute_result& operator=(const sai_rpc_sai_thrift_get_switch_attribute_result&);
  sai_rpc_sai_thrift_get_switch_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_switch_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_attribute_presult__isset;

class sai_rpc_sai_thrift_get_switch_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_args__isset {
  _sai_rpc_sai_thrift_get_switch_stats_args__isset() : counter_ids(false) {}
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_switch_stats_args__isset;

class sai_rpc_sai_thrift_get_switch_stats_args {
 public:

  sai_rpc_sai_thrift_get_switch_stats_args(const sai_rpc_sai_thrift_get_switch_stats_args&);
  sai_rpc_sai_thrift_get_switch_stats_args& operator=(const sai_rpc_sai_thrift_get_switch_stats_args&);
  sai_rpc_sai_thrift_get_switch_stats_args() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_stats_args() throw();
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_switch_stats_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_stats_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_switch_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_stats_pargs() throw();
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_result__isset {
  _sai_rpc_sai_thrift_get_switch_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_stats_result__isset;

class sai_rpc_sai_thrift_get_switch_stats_result {
 public:

  sai_rpc_sai_thrift_get_switch_stats_result(const sai_rpc_sai_thrift_get_switch_stats_result&);
  sai_rpc_sai_thrift_get_switch_stats_result& operator=(const sai_rpc_sai_thrift_get_switch_stats_result&);
  sai_rpc_sai_thrift_get_switch_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_presult__isset {
  _sai_rpc_sai_thrift_get_switch_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_stats_presult__isset;

class sai_rpc_sai_thrift_get_switch_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_switch_stats_ext_args__isset() : counter_ids(false), mode(false) {}
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_switch_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_switch_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_switch_stats_ext_args(const sai_rpc_sai_thrift_get_switch_stats_ext_args&);
  sai_rpc_sai_thrift_get_switch_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_switch_stats_ext_args&);
  sai_rpc_sai_thrift_get_switch_stats_ext_args() : mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_stats_ext_args() throw();
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_switch_stats_ext_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_stats_ext_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_switch_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_stats_ext_pargs() throw();
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_switch_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_switch_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_switch_stats_ext_result(const sai_rpc_sai_thrift_get_switch_stats_ext_result&);
  sai_rpc_sai_thrift_get_switch_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_switch_stats_ext_result&);
  sai_rpc_sai_thrift_get_switch_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_switch_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_switch_stats_args__isset {
  _sai_rpc_sai_thrift_clear_switch_stats_args__isset() : counter_ids(false) {}
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_switch_stats_args__isset;

class sai_rpc_sai_thrift_clear_switch_stats_args {
 public:

  sai_rpc_sai_thrift_clear_switch_stats_args(const sai_rpc_sai_thrift_clear_switch_stats_args&);
  sai_rpc_sai_thrift_clear_switch_stats_args& operator=(const sai_rpc_sai_thrift_clear_switch_stats_args&);
  sai_rpc_sai_thrift_clear_switch_stats_args() {
  }

  virtual ~sai_rpc_sai_thrift_clear_switch_stats_args() throw();
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_switch_stats_args__isset __isset;

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_switch_stats_args & rhs) const
  {
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_switch_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_switch_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_switch_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_switch_stats_pargs() throw();
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_switch_stats_result__isset {
  _sai_rpc_sai_thrift_clear_switch_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_switch_stats_result__isset;

class sai_rpc_sai_thrift_clear_switch_stats_result {
 public:

  sai_rpc_sai_thrift_clear_switch_stats_result(const sai_rpc_sai_thrift_clear_switch_stats_result&);
  sai_rpc_sai_thrift_clear_switch_stats_result& operator=(const sai_rpc_sai_thrift_clear_switch_stats_result&);
  sai_rpc_sai_thrift_clear_switch_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_switch_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_switch_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_switch_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_switch_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_switch_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_switch_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_switch_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_switch_stats_presult__isset;

class sai_rpc_sai_thrift_clear_switch_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_switch_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_switch_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_switch_tunnel_args__isset {
  _sai_rpc_sai_thrift_create_switch_tunnel_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_switch_tunnel_args__isset;

class sai_rpc_sai_thrift_create_switch_tunnel_args {
 public:

  sai_rpc_sai_thrift_create_switch_tunnel_args(const sai_rpc_sai_thrift_create_switch_tunnel_args&);
  sai_rpc_sai_thrift_create_switch_tunnel_args& operator=(const sai_rpc_sai_thrift_create_switch_tunnel_args&);
  sai_rpc_sai_thrift_create_switch_tunnel_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_switch_tunnel_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_switch_tunnel_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_switch_tunnel_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_switch_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_switch_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_switch_tunnel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_switch_tunnel_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_switch_tunnel_result__isset {
  _sai_rpc_sai_thrift_create_switch_tunnel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_switch_tunnel_result__isset;

class sai_rpc_sai_thrift_create_switch_tunnel_result {
 public:

  sai_rpc_sai_thrift_create_switch_tunnel_result(const sai_rpc_sai_thrift_create_switch_tunnel_result&);
  sai_rpc_sai_thrift_create_switch_tunnel_result& operator=(const sai_rpc_sai_thrift_create_switch_tunnel_result&);
  sai_rpc_sai_thrift_create_switch_tunnel_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_switch_tunnel_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_switch_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_switch_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_switch_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_switch_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_switch_tunnel_presult__isset {
  _sai_rpc_sai_thrift_create_switch_tunnel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_switch_tunnel_presult__isset;

class sai_rpc_sai_thrift_create_switch_tunnel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_switch_tunnel_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_switch_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_switch_tunnel_args__isset {
  _sai_rpc_sai_thrift_remove_switch_tunnel_args__isset() : switch_tunnel_oid(false) {}
  bool switch_tunnel_oid :1;
} _sai_rpc_sai_thrift_remove_switch_tunnel_args__isset;

class sai_rpc_sai_thrift_remove_switch_tunnel_args {
 public:

  sai_rpc_sai_thrift_remove_switch_tunnel_args(const sai_rpc_sai_thrift_remove_switch_tunnel_args&);
  sai_rpc_sai_thrift_remove_switch_tunnel_args& operator=(const sai_rpc_sai_thrift_remove_switch_tunnel_args&);
  sai_rpc_sai_thrift_remove_switch_tunnel_args() : switch_tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_switch_tunnel_args() throw();
  sai_thrift_object_id_t switch_tunnel_oid;

  _sai_rpc_sai_thrift_remove_switch_tunnel_args__isset __isset;

  void __set_switch_tunnel_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_switch_tunnel_args & rhs) const
  {
    if (!(switch_tunnel_oid == rhs.switch_tunnel_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_switch_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_switch_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_switch_tunnel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_switch_tunnel_pargs() throw();
  const sai_thrift_object_id_t* switch_tunnel_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_switch_tunnel_result__isset {
  _sai_rpc_sai_thrift_remove_switch_tunnel_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_switch_tunnel_result__isset;

class sai_rpc_sai_thrift_remove_switch_tunnel_result {
 public:

  sai_rpc_sai_thrift_remove_switch_tunnel_result(const sai_rpc_sai_thrift_remove_switch_tunnel_result&);
  sai_rpc_sai_thrift_remove_switch_tunnel_result& operator=(const sai_rpc_sai_thrift_remove_switch_tunnel_result&);
  sai_rpc_sai_thrift_remove_switch_tunnel_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_switch_tunnel_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_switch_tunnel_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_switch_tunnel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_switch_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_switch_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_switch_tunnel_presult__isset {
  _sai_rpc_sai_thrift_remove_switch_tunnel_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_switch_tunnel_presult__isset;

class sai_rpc_sai_thrift_remove_switch_tunnel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_switch_tunnel_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_switch_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_switch_tunnel_attribute_args__isset {
  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_args__isset() : switch_tunnel_oid(false), attr(false) {}
  bool switch_tunnel_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_switch_tunnel_attribute_args__isset;

class sai_rpc_sai_thrift_set_switch_tunnel_attribute_args {
 public:

  sai_rpc_sai_thrift_set_switch_tunnel_attribute_args(const sai_rpc_sai_thrift_set_switch_tunnel_attribute_args&);
  sai_rpc_sai_thrift_set_switch_tunnel_attribute_args& operator=(const sai_rpc_sai_thrift_set_switch_tunnel_attribute_args&);
  sai_rpc_sai_thrift_set_switch_tunnel_attribute_args() : switch_tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_switch_tunnel_attribute_args() throw();
  sai_thrift_object_id_t switch_tunnel_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_args__isset __isset;

  void __set_switch_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_args & rhs) const
  {
    if (!(switch_tunnel_oid == rhs.switch_tunnel_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_switch_tunnel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_switch_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* switch_tunnel_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_switch_tunnel_attribute_result__isset {
  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_switch_tunnel_attribute_result__isset;

class sai_rpc_sai_thrift_set_switch_tunnel_attribute_result {
 public:

  sai_rpc_sai_thrift_set_switch_tunnel_attribute_result(const sai_rpc_sai_thrift_set_switch_tunnel_attribute_result&);
  sai_rpc_sai_thrift_set_switch_tunnel_attribute_result& operator=(const sai_rpc_sai_thrift_set_switch_tunnel_attribute_result&);
  sai_rpc_sai_thrift_set_switch_tunnel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_switch_tunnel_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_switch_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult__isset;

class sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_switch_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_switch_tunnel_attribute_args__isset {
  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_args__isset() : switch_tunnel_oid(false), attr_list(false) {}
  bool switch_tunnel_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_switch_tunnel_attribute_args__isset;

class sai_rpc_sai_thrift_get_switch_tunnel_attribute_args {
 public:

  sai_rpc_sai_thrift_get_switch_tunnel_attribute_args(const sai_rpc_sai_thrift_get_switch_tunnel_attribute_args&);
  sai_rpc_sai_thrift_get_switch_tunnel_attribute_args& operator=(const sai_rpc_sai_thrift_get_switch_tunnel_attribute_args&);
  sai_rpc_sai_thrift_get_switch_tunnel_attribute_args() : switch_tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_tunnel_attribute_args() throw();
  sai_thrift_object_id_t switch_tunnel_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_args__isset __isset;

  void __set_switch_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_args & rhs) const
  {
    if (!(switch_tunnel_oid == rhs.switch_tunnel_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_switch_tunnel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* switch_tunnel_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_tunnel_attribute_result__isset {
  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_tunnel_attribute_result__isset;

class sai_rpc_sai_thrift_get_switch_tunnel_attribute_result {
 public:

  sai_rpc_sai_thrift_get_switch_tunnel_attribute_result(const sai_rpc_sai_thrift_get_switch_tunnel_attribute_result&);
  sai_rpc_sai_thrift_get_switch_tunnel_attribute_result& operator=(const sai_rpc_sai_thrift_get_switch_tunnel_attribute_result&);
  sai_rpc_sai_thrift_get_switch_tunnel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_switch_tunnel_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_switch_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult__isset;

class sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_switch_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_system_port_args__isset {
  _sai_rpc_sai_thrift_create_system_port_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_system_port_args__isset;

class sai_rpc_sai_thrift_create_system_port_args {
 public:

  sai_rpc_sai_thrift_create_system_port_args(const sai_rpc_sai_thrift_create_system_port_args&);
  sai_rpc_sai_thrift_create_system_port_args& operator=(const sai_rpc_sai_thrift_create_system_port_args&);
  sai_rpc_sai_thrift_create_system_port_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_system_port_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_system_port_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_system_port_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_system_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_system_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_system_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_system_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_system_port_result__isset {
  _sai_rpc_sai_thrift_create_system_port_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_system_port_result__isset;

class sai_rpc_sai_thrift_create_system_port_result {
 public:

  sai_rpc_sai_thrift_create_system_port_result(const sai_rpc_sai_thrift_create_system_port_result&);
  sai_rpc_sai_thrift_create_system_port_result& operator=(const sai_rpc_sai_thrift_create_system_port_result&);
  sai_rpc_sai_thrift_create_system_port_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_system_port_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_system_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_system_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_system_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_system_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_system_port_presult__isset {
  _sai_rpc_sai_thrift_create_system_port_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_system_port_presult__isset;

class sai_rpc_sai_thrift_create_system_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_system_port_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_system_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_system_port_args__isset {
  _sai_rpc_sai_thrift_remove_system_port_args__isset() : system_port_oid(false) {}
  bool system_port_oid :1;
} _sai_rpc_sai_thrift_remove_system_port_args__isset;

class sai_rpc_sai_thrift_remove_system_port_args {
 public:

  sai_rpc_sai_thrift_remove_system_port_args(const sai_rpc_sai_thrift_remove_system_port_args&);
  sai_rpc_sai_thrift_remove_system_port_args& operator=(const sai_rpc_sai_thrift_remove_system_port_args&);
  sai_rpc_sai_thrift_remove_system_port_args() : system_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_system_port_args() throw();
  sai_thrift_object_id_t system_port_oid;

  _sai_rpc_sai_thrift_remove_system_port_args__isset __isset;

  void __set_system_port_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_system_port_args & rhs) const
  {
    if (!(system_port_oid == rhs.system_port_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_system_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_system_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_system_port_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_system_port_pargs() throw();
  const sai_thrift_object_id_t* system_port_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_system_port_result__isset {
  _sai_rpc_sai_thrift_remove_system_port_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_system_port_result__isset;

class sai_rpc_sai_thrift_remove_system_port_result {
 public:

  sai_rpc_sai_thrift_remove_system_port_result(const sai_rpc_sai_thrift_remove_system_port_result&);
  sai_rpc_sai_thrift_remove_system_port_result& operator=(const sai_rpc_sai_thrift_remove_system_port_result&);
  sai_rpc_sai_thrift_remove_system_port_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_system_port_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_system_port_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_system_port_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_system_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_system_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_system_port_presult__isset {
  _sai_rpc_sai_thrift_remove_system_port_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_system_port_presult__isset;

class sai_rpc_sai_thrift_remove_system_port_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_system_port_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_system_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_system_port_attribute_args__isset {
  _sai_rpc_sai_thrift_set_system_port_attribute_args__isset() : system_port_oid(false), attr(false) {}
  bool system_port_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_system_port_attribute_args__isset;

class sai_rpc_sai_thrift_set_system_port_attribute_args {
 public:

  sai_rpc_sai_thrift_set_system_port_attribute_args(const sai_rpc_sai_thrift_set_system_port_attribute_args&);
  sai_rpc_sai_thrift_set_system_port_attribute_args& operator=(const sai_rpc_sai_thrift_set_system_port_attribute_args&);
  sai_rpc_sai_thrift_set_system_port_attribute_args() : system_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_system_port_attribute_args() throw();
  sai_thrift_object_id_t system_port_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_system_port_attribute_args__isset __isset;

  void __set_system_port_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_system_port_attribute_args & rhs) const
  {
    if (!(system_port_oid == rhs.system_port_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_system_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_system_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_system_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_system_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* system_port_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_system_port_attribute_result__isset {
  _sai_rpc_sai_thrift_set_system_port_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_system_port_attribute_result__isset;

class sai_rpc_sai_thrift_set_system_port_attribute_result {
 public:

  sai_rpc_sai_thrift_set_system_port_attribute_result(const sai_rpc_sai_thrift_set_system_port_attribute_result&);
  sai_rpc_sai_thrift_set_system_port_attribute_result& operator=(const sai_rpc_sai_thrift_set_system_port_attribute_result&);
  sai_rpc_sai_thrift_set_system_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_system_port_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_system_port_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_system_port_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_system_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_system_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_system_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_system_port_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_system_port_attribute_presult__isset;

class sai_rpc_sai_thrift_set_system_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_system_port_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_system_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_system_port_attribute_args__isset {
  _sai_rpc_sai_thrift_get_system_port_attribute_args__isset() : system_port_oid(false), attr_list(false) {}
  bool system_port_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_system_port_attribute_args__isset;

class sai_rpc_sai_thrift_get_system_port_attribute_args {
 public:

  sai_rpc_sai_thrift_get_system_port_attribute_args(const sai_rpc_sai_thrift_get_system_port_attribute_args&);
  sai_rpc_sai_thrift_get_system_port_attribute_args& operator=(const sai_rpc_sai_thrift_get_system_port_attribute_args&);
  sai_rpc_sai_thrift_get_system_port_attribute_args() : system_port_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_system_port_attribute_args() throw();
  sai_thrift_object_id_t system_port_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_system_port_attribute_args__isset __isset;

  void __set_system_port_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_system_port_attribute_args & rhs) const
  {
    if (!(system_port_oid == rhs.system_port_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_system_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_system_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_system_port_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_system_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* system_port_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_system_port_attribute_result__isset {
  _sai_rpc_sai_thrift_get_system_port_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_system_port_attribute_result__isset;

class sai_rpc_sai_thrift_get_system_port_attribute_result {
 public:

  sai_rpc_sai_thrift_get_system_port_attribute_result(const sai_rpc_sai_thrift_get_system_port_attribute_result&);
  sai_rpc_sai_thrift_get_system_port_attribute_result& operator=(const sai_rpc_sai_thrift_get_system_port_attribute_result&);
  sai_rpc_sai_thrift_get_system_port_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_system_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_system_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_system_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_system_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_system_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_system_port_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_system_port_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_system_port_attribute_presult__isset;

class sai_rpc_sai_thrift_get_system_port_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_system_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_system_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_args__isset {
  _sai_rpc_sai_thrift_create_tam_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_args__isset;

class sai_rpc_sai_thrift_create_tam_args {
 public:

  sai_rpc_sai_thrift_create_tam_args(const sai_rpc_sai_thrift_create_tam_args&);
  sai_rpc_sai_thrift_create_tam_args& operator=(const sai_rpc_sai_thrift_create_tam_args&);
  sai_rpc_sai_thrift_create_tam_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_result__isset {
  _sai_rpc_sai_thrift_create_tam_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_result__isset;

class sai_rpc_sai_thrift_create_tam_result {
 public:

  sai_rpc_sai_thrift_create_tam_result(const sai_rpc_sai_thrift_create_tam_result&);
  sai_rpc_sai_thrift_create_tam_result& operator=(const sai_rpc_sai_thrift_create_tam_result&);
  sai_rpc_sai_thrift_create_tam_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_presult__isset {
  _sai_rpc_sai_thrift_create_tam_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_presult__isset;

class sai_rpc_sai_thrift_create_tam_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_args__isset {
  _sai_rpc_sai_thrift_remove_tam_args__isset() : tam_oid(false) {}
  bool tam_oid :1;
} _sai_rpc_sai_thrift_remove_tam_args__isset;

class sai_rpc_sai_thrift_remove_tam_args {
 public:

  sai_rpc_sai_thrift_remove_tam_args(const sai_rpc_sai_thrift_remove_tam_args&);
  sai_rpc_sai_thrift_remove_tam_args& operator=(const sai_rpc_sai_thrift_remove_tam_args&);
  sai_rpc_sai_thrift_remove_tam_args() : tam_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_args() throw();
  sai_thrift_object_id_t tam_oid;

  _sai_rpc_sai_thrift_remove_tam_args__isset __isset;

  void __set_tam_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_args & rhs) const
  {
    if (!(tam_oid == rhs.tam_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_pargs() throw();
  const sai_thrift_object_id_t* tam_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_result__isset {
  _sai_rpc_sai_thrift_remove_tam_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_result__isset;

class sai_rpc_sai_thrift_remove_tam_result {
 public:

  sai_rpc_sai_thrift_remove_tam_result(const sai_rpc_sai_thrift_remove_tam_result&);
  sai_rpc_sai_thrift_remove_tam_result& operator=(const sai_rpc_sai_thrift_remove_tam_result&);
  sai_rpc_sai_thrift_remove_tam_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_presult__isset;

class sai_rpc_sai_thrift_remove_tam_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_attribute_args__isset() : tam_oid(false), attr(false) {}
  bool tam_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_attribute_args(const sai_rpc_sai_thrift_set_tam_attribute_args&);
  sai_rpc_sai_thrift_set_tam_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_attribute_args&);
  sai_rpc_sai_thrift_set_tam_attribute_args() : tam_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_attribute_args() throw();
  sai_thrift_object_id_t tam_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_attribute_args__isset __isset;

  void __set_tam_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_attribute_args & rhs) const
  {
    if (!(tam_oid == rhs.tam_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_attribute_result(const sai_rpc_sai_thrift_set_tam_attribute_result&);
  sai_rpc_sai_thrift_set_tam_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_attribute_result&);
  sai_rpc_sai_thrift_set_tam_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_attribute_args__isset() : tam_oid(false), attr_list(false) {}
  bool tam_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_attribute_args(const sai_rpc_sai_thrift_get_tam_attribute_args&);
  sai_rpc_sai_thrift_get_tam_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_attribute_args&);
  sai_rpc_sai_thrift_get_tam_attribute_args() : tam_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_attribute_args() throw();
  sai_thrift_object_id_t tam_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_attribute_args__isset __isset;

  void __set_tam_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_attribute_args & rhs) const
  {
    if (!(tam_oid == rhs.tam_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_attribute_result(const sai_rpc_sai_thrift_get_tam_attribute_result&);
  sai_rpc_sai_thrift_get_tam_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_attribute_result&);
  sai_rpc_sai_thrift_get_tam_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_math_func_args__isset {
  _sai_rpc_sai_thrift_create_tam_math_func_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_math_func_args__isset;

class sai_rpc_sai_thrift_create_tam_math_func_args {
 public:

  sai_rpc_sai_thrift_create_tam_math_func_args(const sai_rpc_sai_thrift_create_tam_math_func_args&);
  sai_rpc_sai_thrift_create_tam_math_func_args& operator=(const sai_rpc_sai_thrift_create_tam_math_func_args&);
  sai_rpc_sai_thrift_create_tam_math_func_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_math_func_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_math_func_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_math_func_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_math_func_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_math_func_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_math_func_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_math_func_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_math_func_result__isset {
  _sai_rpc_sai_thrift_create_tam_math_func_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_math_func_result__isset;

class sai_rpc_sai_thrift_create_tam_math_func_result {
 public:

  sai_rpc_sai_thrift_create_tam_math_func_result(const sai_rpc_sai_thrift_create_tam_math_func_result&);
  sai_rpc_sai_thrift_create_tam_math_func_result& operator=(const sai_rpc_sai_thrift_create_tam_math_func_result&);
  sai_rpc_sai_thrift_create_tam_math_func_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_math_func_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_math_func_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_math_func_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_math_func_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_math_func_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_math_func_presult__isset {
  _sai_rpc_sai_thrift_create_tam_math_func_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_math_func_presult__isset;

class sai_rpc_sai_thrift_create_tam_math_func_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_math_func_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_math_func_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_math_func_args__isset {
  _sai_rpc_sai_thrift_remove_tam_math_func_args__isset() : tam_math_func_oid(false) {}
  bool tam_math_func_oid :1;
} _sai_rpc_sai_thrift_remove_tam_math_func_args__isset;

class sai_rpc_sai_thrift_remove_tam_math_func_args {
 public:

  sai_rpc_sai_thrift_remove_tam_math_func_args(const sai_rpc_sai_thrift_remove_tam_math_func_args&);
  sai_rpc_sai_thrift_remove_tam_math_func_args& operator=(const sai_rpc_sai_thrift_remove_tam_math_func_args&);
  sai_rpc_sai_thrift_remove_tam_math_func_args() : tam_math_func_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_math_func_args() throw();
  sai_thrift_object_id_t tam_math_func_oid;

  _sai_rpc_sai_thrift_remove_tam_math_func_args__isset __isset;

  void __set_tam_math_func_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_math_func_args & rhs) const
  {
    if (!(tam_math_func_oid == rhs.tam_math_func_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_math_func_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_math_func_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_math_func_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_math_func_pargs() throw();
  const sai_thrift_object_id_t* tam_math_func_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_math_func_result__isset {
  _sai_rpc_sai_thrift_remove_tam_math_func_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_math_func_result__isset;

class sai_rpc_sai_thrift_remove_tam_math_func_result {
 public:

  sai_rpc_sai_thrift_remove_tam_math_func_result(const sai_rpc_sai_thrift_remove_tam_math_func_result&);
  sai_rpc_sai_thrift_remove_tam_math_func_result& operator=(const sai_rpc_sai_thrift_remove_tam_math_func_result&);
  sai_rpc_sai_thrift_remove_tam_math_func_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_math_func_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_math_func_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_math_func_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_math_func_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_math_func_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_math_func_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_math_func_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_math_func_presult__isset;

class sai_rpc_sai_thrift_remove_tam_math_func_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_math_func_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_math_func_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_math_func_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_math_func_attribute_args__isset() : tam_math_func_oid(false), attr_list(false) {}
  bool tam_math_func_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_math_func_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_math_func_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_math_func_attribute_args(const sai_rpc_sai_thrift_get_tam_math_func_attribute_args&);
  sai_rpc_sai_thrift_get_tam_math_func_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_math_func_attribute_args&);
  sai_rpc_sai_thrift_get_tam_math_func_attribute_args() : tam_math_func_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_math_func_attribute_args() throw();
  sai_thrift_object_id_t tam_math_func_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_math_func_attribute_args__isset __isset;

  void __set_tam_math_func_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_math_func_attribute_args & rhs) const
  {
    if (!(tam_math_func_oid == rhs.tam_math_func_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_math_func_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_math_func_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_math_func_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_math_func_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_math_func_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_math_func_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_math_func_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_math_func_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_math_func_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_math_func_attribute_result(const sai_rpc_sai_thrift_get_tam_math_func_attribute_result&);
  sai_rpc_sai_thrift_get_tam_math_func_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_math_func_attribute_result&);
  sai_rpc_sai_thrift_get_tam_math_func_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_math_func_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_math_func_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_math_func_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_math_func_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_math_func_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_math_func_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_math_func_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_math_func_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_math_func_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_math_func_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_math_func_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_math_func_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_math_func_attribute_args__isset() : tam_math_func_oid(false), attr(false) {}
  bool tam_math_func_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_math_func_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_math_func_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_math_func_attribute_args(const sai_rpc_sai_thrift_set_tam_math_func_attribute_args&);
  sai_rpc_sai_thrift_set_tam_math_func_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_math_func_attribute_args&);
  sai_rpc_sai_thrift_set_tam_math_func_attribute_args() : tam_math_func_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_math_func_attribute_args() throw();
  sai_thrift_object_id_t tam_math_func_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_math_func_attribute_args__isset __isset;

  void __set_tam_math_func_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_math_func_attribute_args & rhs) const
  {
    if (!(tam_math_func_oid == rhs.tam_math_func_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_math_func_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_math_func_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_math_func_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_math_func_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_math_func_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_math_func_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_math_func_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_math_func_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_math_func_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_math_func_attribute_result(const sai_rpc_sai_thrift_set_tam_math_func_attribute_result&);
  sai_rpc_sai_thrift_set_tam_math_func_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_math_func_attribute_result&);
  sai_rpc_sai_thrift_set_tam_math_func_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_math_func_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_math_func_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_math_func_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_math_func_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_math_func_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_math_func_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_math_func_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_math_func_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_math_func_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_math_func_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_math_func_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_threshold_args__isset {
  _sai_rpc_sai_thrift_create_tam_event_threshold_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_event_threshold_args__isset;

class sai_rpc_sai_thrift_create_tam_event_threshold_args {
 public:

  sai_rpc_sai_thrift_create_tam_event_threshold_args(const sai_rpc_sai_thrift_create_tam_event_threshold_args&);
  sai_rpc_sai_thrift_create_tam_event_threshold_args& operator=(const sai_rpc_sai_thrift_create_tam_event_threshold_args&);
  sai_rpc_sai_thrift_create_tam_event_threshold_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_threshold_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_event_threshold_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_threshold_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_threshold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_threshold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_event_threshold_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_threshold_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_threshold_result__isset {
  _sai_rpc_sai_thrift_create_tam_event_threshold_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_threshold_result__isset;

class sai_rpc_sai_thrift_create_tam_event_threshold_result {
 public:

  sai_rpc_sai_thrift_create_tam_event_threshold_result(const sai_rpc_sai_thrift_create_tam_event_threshold_result&);
  sai_rpc_sai_thrift_create_tam_event_threshold_result& operator=(const sai_rpc_sai_thrift_create_tam_event_threshold_result&);
  sai_rpc_sai_thrift_create_tam_event_threshold_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_threshold_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_threshold_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_threshold_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_threshold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_threshold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_threshold_presult__isset {
  _sai_rpc_sai_thrift_create_tam_event_threshold_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_threshold_presult__isset;

class sai_rpc_sai_thrift_create_tam_event_threshold_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_threshold_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_threshold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_threshold_args__isset {
  _sai_rpc_sai_thrift_remove_tam_event_threshold_args__isset() : tam_event_threshold_oid(false) {}
  bool tam_event_threshold_oid :1;
} _sai_rpc_sai_thrift_remove_tam_event_threshold_args__isset;

class sai_rpc_sai_thrift_remove_tam_event_threshold_args {
 public:

  sai_rpc_sai_thrift_remove_tam_event_threshold_args(const sai_rpc_sai_thrift_remove_tam_event_threshold_args&);
  sai_rpc_sai_thrift_remove_tam_event_threshold_args& operator=(const sai_rpc_sai_thrift_remove_tam_event_threshold_args&);
  sai_rpc_sai_thrift_remove_tam_event_threshold_args() : tam_event_threshold_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_threshold_args() throw();
  sai_thrift_object_id_t tam_event_threshold_oid;

  _sai_rpc_sai_thrift_remove_tam_event_threshold_args__isset __isset;

  void __set_tam_event_threshold_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_threshold_args & rhs) const
  {
    if (!(tam_event_threshold_oid == rhs.tam_event_threshold_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_threshold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_threshold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_event_threshold_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_threshold_pargs() throw();
  const sai_thrift_object_id_t* tam_event_threshold_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_threshold_result__isset {
  _sai_rpc_sai_thrift_remove_tam_event_threshold_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_threshold_result__isset;

class sai_rpc_sai_thrift_remove_tam_event_threshold_result {
 public:

  sai_rpc_sai_thrift_remove_tam_event_threshold_result(const sai_rpc_sai_thrift_remove_tam_event_threshold_result&);
  sai_rpc_sai_thrift_remove_tam_event_threshold_result& operator=(const sai_rpc_sai_thrift_remove_tam_event_threshold_result&);
  sai_rpc_sai_thrift_remove_tam_event_threshold_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_threshold_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_threshold_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_threshold_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_threshold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_threshold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_threshold_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_event_threshold_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_threshold_presult__isset;

class sai_rpc_sai_thrift_remove_tam_event_threshold_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_threshold_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_threshold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args__isset() : tam_event_threshold_oid(false), attr_list(false) {}
  bool tam_event_threshold_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args(const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args() : tam_event_threshold_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args() throw();
  sai_thrift_object_id_t tam_event_threshold_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args__isset __isset;

  void __set_tam_event_threshold_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args & rhs) const
  {
    if (!(tam_event_threshold_oid == rhs.tam_event_threshold_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_event_threshold_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_threshold_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_threshold_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result(const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_threshold_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_threshold_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args__isset() : tam_event_threshold_oid(false), attr(false) {}
  bool tam_event_threshold_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args(const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args() : tam_event_threshold_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args() throw();
  sai_thrift_object_id_t tam_event_threshold_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args__isset __isset;

  void __set_tam_event_threshold_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args & rhs) const
  {
    if (!(tam_event_threshold_oid == rhs.tam_event_threshold_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_event_threshold_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_threshold_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_threshold_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result(const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_threshold_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_threshold_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_int_args__isset {
  _sai_rpc_sai_thrift_create_tam_int_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_int_args__isset;

class sai_rpc_sai_thrift_create_tam_int_args {
 public:

  sai_rpc_sai_thrift_create_tam_int_args(const sai_rpc_sai_thrift_create_tam_int_args&);
  sai_rpc_sai_thrift_create_tam_int_args& operator=(const sai_rpc_sai_thrift_create_tam_int_args&);
  sai_rpc_sai_thrift_create_tam_int_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_int_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_int_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_int_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_int_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_int_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_int_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_int_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_int_result__isset {
  _sai_rpc_sai_thrift_create_tam_int_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_int_result__isset;

class sai_rpc_sai_thrift_create_tam_int_result {
 public:

  sai_rpc_sai_thrift_create_tam_int_result(const sai_rpc_sai_thrift_create_tam_int_result&);
  sai_rpc_sai_thrift_create_tam_int_result& operator=(const sai_rpc_sai_thrift_create_tam_int_result&);
  sai_rpc_sai_thrift_create_tam_int_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_int_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_int_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_int_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_int_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_int_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_int_presult__isset {
  _sai_rpc_sai_thrift_create_tam_int_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_int_presult__isset;

class sai_rpc_sai_thrift_create_tam_int_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_int_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_int_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_int_args__isset {
  _sai_rpc_sai_thrift_remove_tam_int_args__isset() : tam_int_oid(false) {}
  bool tam_int_oid :1;
} _sai_rpc_sai_thrift_remove_tam_int_args__isset;

class sai_rpc_sai_thrift_remove_tam_int_args {
 public:

  sai_rpc_sai_thrift_remove_tam_int_args(const sai_rpc_sai_thrift_remove_tam_int_args&);
  sai_rpc_sai_thrift_remove_tam_int_args& operator=(const sai_rpc_sai_thrift_remove_tam_int_args&);
  sai_rpc_sai_thrift_remove_tam_int_args() : tam_int_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_int_args() throw();
  sai_thrift_object_id_t tam_int_oid;

  _sai_rpc_sai_thrift_remove_tam_int_args__isset __isset;

  void __set_tam_int_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_int_args & rhs) const
  {
    if (!(tam_int_oid == rhs.tam_int_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_int_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_int_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_int_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_int_pargs() throw();
  const sai_thrift_object_id_t* tam_int_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_int_result__isset {
  _sai_rpc_sai_thrift_remove_tam_int_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_int_result__isset;

class sai_rpc_sai_thrift_remove_tam_int_result {
 public:

  sai_rpc_sai_thrift_remove_tam_int_result(const sai_rpc_sai_thrift_remove_tam_int_result&);
  sai_rpc_sai_thrift_remove_tam_int_result& operator=(const sai_rpc_sai_thrift_remove_tam_int_result&);
  sai_rpc_sai_thrift_remove_tam_int_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_int_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_int_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_int_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_int_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_int_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_int_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_int_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_int_presult__isset;

class sai_rpc_sai_thrift_remove_tam_int_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_int_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_int_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_int_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_int_attribute_args__isset() : tam_int_oid(false), attr_list(false) {}
  bool tam_int_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_int_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_int_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_int_attribute_args(const sai_rpc_sai_thrift_get_tam_int_attribute_args&);
  sai_rpc_sai_thrift_get_tam_int_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_int_attribute_args&);
  sai_rpc_sai_thrift_get_tam_int_attribute_args() : tam_int_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_int_attribute_args() throw();
  sai_thrift_object_id_t tam_int_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_int_attribute_args__isset __isset;

  void __set_tam_int_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_int_attribute_args & rhs) const
  {
    if (!(tam_int_oid == rhs.tam_int_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_int_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_int_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_int_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_int_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_int_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_int_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_int_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_int_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_int_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_int_attribute_result(const sai_rpc_sai_thrift_get_tam_int_attribute_result&);
  sai_rpc_sai_thrift_get_tam_int_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_int_attribute_result&);
  sai_rpc_sai_thrift_get_tam_int_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_int_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_int_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_int_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_int_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_int_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_int_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_int_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_int_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_int_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_int_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_int_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_int_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_int_attribute_args__isset() : tam_int_oid(false), attr(false) {}
  bool tam_int_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_int_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_int_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_int_attribute_args(const sai_rpc_sai_thrift_set_tam_int_attribute_args&);
  sai_rpc_sai_thrift_set_tam_int_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_int_attribute_args&);
  sai_rpc_sai_thrift_set_tam_int_attribute_args() : tam_int_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_int_attribute_args() throw();
  sai_thrift_object_id_t tam_int_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_int_attribute_args__isset __isset;

  void __set_tam_int_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_int_attribute_args & rhs) const
  {
    if (!(tam_int_oid == rhs.tam_int_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_int_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_int_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_int_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_int_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_int_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_int_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_int_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_int_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_int_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_int_attribute_result(const sai_rpc_sai_thrift_set_tam_int_attribute_result&);
  sai_rpc_sai_thrift_set_tam_int_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_int_attribute_result&);
  sai_rpc_sai_thrift_set_tam_int_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_int_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_int_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_int_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_int_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_int_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_int_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_int_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_int_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_int_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_int_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_int_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_tel_type_args__isset {
  _sai_rpc_sai_thrift_create_tam_tel_type_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_tel_type_args__isset;

class sai_rpc_sai_thrift_create_tam_tel_type_args {
 public:

  sai_rpc_sai_thrift_create_tam_tel_type_args(const sai_rpc_sai_thrift_create_tam_tel_type_args&);
  sai_rpc_sai_thrift_create_tam_tel_type_args& operator=(const sai_rpc_sai_thrift_create_tam_tel_type_args&);
  sai_rpc_sai_thrift_create_tam_tel_type_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_tel_type_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_tel_type_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_tel_type_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_tel_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_tel_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_tel_type_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_tel_type_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_tel_type_result__isset {
  _sai_rpc_sai_thrift_create_tam_tel_type_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_tel_type_result__isset;

class sai_rpc_sai_thrift_create_tam_tel_type_result {
 public:

  sai_rpc_sai_thrift_create_tam_tel_type_result(const sai_rpc_sai_thrift_create_tam_tel_type_result&);
  sai_rpc_sai_thrift_create_tam_tel_type_result& operator=(const sai_rpc_sai_thrift_create_tam_tel_type_result&);
  sai_rpc_sai_thrift_create_tam_tel_type_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_tel_type_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_tel_type_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_tel_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_tel_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_tel_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_tel_type_presult__isset {
  _sai_rpc_sai_thrift_create_tam_tel_type_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_tel_type_presult__isset;

class sai_rpc_sai_thrift_create_tam_tel_type_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_tel_type_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_tel_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_tel_type_args__isset {
  _sai_rpc_sai_thrift_remove_tam_tel_type_args__isset() : tam_tel_type_oid(false) {}
  bool tam_tel_type_oid :1;
} _sai_rpc_sai_thrift_remove_tam_tel_type_args__isset;

class sai_rpc_sai_thrift_remove_tam_tel_type_args {
 public:

  sai_rpc_sai_thrift_remove_tam_tel_type_args(const sai_rpc_sai_thrift_remove_tam_tel_type_args&);
  sai_rpc_sai_thrift_remove_tam_tel_type_args& operator=(const sai_rpc_sai_thrift_remove_tam_tel_type_args&);
  sai_rpc_sai_thrift_remove_tam_tel_type_args() : tam_tel_type_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_tel_type_args() throw();
  sai_thrift_object_id_t tam_tel_type_oid;

  _sai_rpc_sai_thrift_remove_tam_tel_type_args__isset __isset;

  void __set_tam_tel_type_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_tel_type_args & rhs) const
  {
    if (!(tam_tel_type_oid == rhs.tam_tel_type_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_tel_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_tel_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_tel_type_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_tel_type_pargs() throw();
  const sai_thrift_object_id_t* tam_tel_type_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_tel_type_result__isset {
  _sai_rpc_sai_thrift_remove_tam_tel_type_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_tel_type_result__isset;

class sai_rpc_sai_thrift_remove_tam_tel_type_result {
 public:

  sai_rpc_sai_thrift_remove_tam_tel_type_result(const sai_rpc_sai_thrift_remove_tam_tel_type_result&);
  sai_rpc_sai_thrift_remove_tam_tel_type_result& operator=(const sai_rpc_sai_thrift_remove_tam_tel_type_result&);
  sai_rpc_sai_thrift_remove_tam_tel_type_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_tel_type_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_tel_type_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_tel_type_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_tel_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_tel_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_tel_type_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_tel_type_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_tel_type_presult__isset;

class sai_rpc_sai_thrift_remove_tam_tel_type_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_tel_type_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_tel_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_tel_type_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_args__isset() : tam_tel_type_oid(false), attr_list(false) {}
  bool tam_tel_type_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_tel_type_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_tel_type_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_tel_type_attribute_args(const sai_rpc_sai_thrift_get_tam_tel_type_attribute_args&);
  sai_rpc_sai_thrift_get_tam_tel_type_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_tel_type_attribute_args&);
  sai_rpc_sai_thrift_get_tam_tel_type_attribute_args() : tam_tel_type_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_tel_type_attribute_args() throw();
  sai_thrift_object_id_t tam_tel_type_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_args__isset __isset;

  void __set_tam_tel_type_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_args & rhs) const
  {
    if (!(tam_tel_type_oid == rhs.tam_tel_type_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_tel_type_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_tel_type_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_tel_type_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_tel_type_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_tel_type_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_tel_type_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_tel_type_attribute_result(const sai_rpc_sai_thrift_get_tam_tel_type_attribute_result&);
  sai_rpc_sai_thrift_get_tam_tel_type_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_tel_type_attribute_result&);
  sai_rpc_sai_thrift_get_tam_tel_type_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_tel_type_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_tel_type_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_tel_type_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_tel_type_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_args__isset() : tam_tel_type_oid(false), attr(false) {}
  bool tam_tel_type_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_tel_type_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_tel_type_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_tel_type_attribute_args(const sai_rpc_sai_thrift_set_tam_tel_type_attribute_args&);
  sai_rpc_sai_thrift_set_tam_tel_type_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_tel_type_attribute_args&);
  sai_rpc_sai_thrift_set_tam_tel_type_attribute_args() : tam_tel_type_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_tel_type_attribute_args() throw();
  sai_thrift_object_id_t tam_tel_type_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_args__isset __isset;

  void __set_tam_tel_type_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_args & rhs) const
  {
    if (!(tam_tel_type_oid == rhs.tam_tel_type_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_tel_type_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_tel_type_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_tel_type_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_tel_type_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_tel_type_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_tel_type_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_tel_type_attribute_result(const sai_rpc_sai_thrift_set_tam_tel_type_attribute_result&);
  sai_rpc_sai_thrift_set_tam_tel_type_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_tel_type_attribute_result&);
  sai_rpc_sai_thrift_set_tam_tel_type_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_tel_type_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_tel_type_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_tel_type_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_report_args__isset {
  _sai_rpc_sai_thrift_create_tam_report_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_report_args__isset;

class sai_rpc_sai_thrift_create_tam_report_args {
 public:

  sai_rpc_sai_thrift_create_tam_report_args(const sai_rpc_sai_thrift_create_tam_report_args&);
  sai_rpc_sai_thrift_create_tam_report_args& operator=(const sai_rpc_sai_thrift_create_tam_report_args&);
  sai_rpc_sai_thrift_create_tam_report_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_report_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_report_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_report_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_report_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_report_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_report_result__isset {
  _sai_rpc_sai_thrift_create_tam_report_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_report_result__isset;

class sai_rpc_sai_thrift_create_tam_report_result {
 public:

  sai_rpc_sai_thrift_create_tam_report_result(const sai_rpc_sai_thrift_create_tam_report_result&);
  sai_rpc_sai_thrift_create_tam_report_result& operator=(const sai_rpc_sai_thrift_create_tam_report_result&);
  sai_rpc_sai_thrift_create_tam_report_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_report_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_report_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_report_presult__isset {
  _sai_rpc_sai_thrift_create_tam_report_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_report_presult__isset;

class sai_rpc_sai_thrift_create_tam_report_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_report_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_report_args__isset {
  _sai_rpc_sai_thrift_remove_tam_report_args__isset() : tam_report_oid(false) {}
  bool tam_report_oid :1;
} _sai_rpc_sai_thrift_remove_tam_report_args__isset;

class sai_rpc_sai_thrift_remove_tam_report_args {
 public:

  sai_rpc_sai_thrift_remove_tam_report_args(const sai_rpc_sai_thrift_remove_tam_report_args&);
  sai_rpc_sai_thrift_remove_tam_report_args& operator=(const sai_rpc_sai_thrift_remove_tam_report_args&);
  sai_rpc_sai_thrift_remove_tam_report_args() : tam_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_report_args() throw();
  sai_thrift_object_id_t tam_report_oid;

  _sai_rpc_sai_thrift_remove_tam_report_args__isset __isset;

  void __set_tam_report_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_report_args & rhs) const
  {
    if (!(tam_report_oid == rhs.tam_report_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_report_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_report_pargs() throw();
  const sai_thrift_object_id_t* tam_report_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_report_result__isset {
  _sai_rpc_sai_thrift_remove_tam_report_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_report_result__isset;

class sai_rpc_sai_thrift_remove_tam_report_result {
 public:

  sai_rpc_sai_thrift_remove_tam_report_result(const sai_rpc_sai_thrift_remove_tam_report_result&);
  sai_rpc_sai_thrift_remove_tam_report_result& operator=(const sai_rpc_sai_thrift_remove_tam_report_result&);
  sai_rpc_sai_thrift_remove_tam_report_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_report_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_report_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_report_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_report_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_report_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_report_presult__isset;

class sai_rpc_sai_thrift_remove_tam_report_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_report_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_report_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_report_attribute_args__isset() : tam_report_oid(false), attr_list(false) {}
  bool tam_report_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_report_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_report_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_report_attribute_args(const sai_rpc_sai_thrift_get_tam_report_attribute_args&);
  sai_rpc_sai_thrift_get_tam_report_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_report_attribute_args&);
  sai_rpc_sai_thrift_get_tam_report_attribute_args() : tam_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_report_attribute_args() throw();
  sai_thrift_object_id_t tam_report_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_report_attribute_args__isset __isset;

  void __set_tam_report_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_report_attribute_args & rhs) const
  {
    if (!(tam_report_oid == rhs.tam_report_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_report_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_report_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_report_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_report_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_report_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_report_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_report_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_report_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_report_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_report_attribute_result(const sai_rpc_sai_thrift_get_tam_report_attribute_result&);
  sai_rpc_sai_thrift_get_tam_report_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_report_attribute_result&);
  sai_rpc_sai_thrift_get_tam_report_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_report_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_report_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_report_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_report_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_report_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_report_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_report_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_report_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_report_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_report_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_report_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_report_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_report_attribute_args__isset() : tam_report_oid(false), attr(false) {}
  bool tam_report_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_report_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_report_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_report_attribute_args(const sai_rpc_sai_thrift_set_tam_report_attribute_args&);
  sai_rpc_sai_thrift_set_tam_report_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_report_attribute_args&);
  sai_rpc_sai_thrift_set_tam_report_attribute_args() : tam_report_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_report_attribute_args() throw();
  sai_thrift_object_id_t tam_report_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_report_attribute_args__isset __isset;

  void __set_tam_report_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_report_attribute_args & rhs) const
  {
    if (!(tam_report_oid == rhs.tam_report_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_report_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_report_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_report_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_report_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_report_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_report_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_report_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_report_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_report_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_report_attribute_result(const sai_rpc_sai_thrift_set_tam_report_attribute_result&);
  sai_rpc_sai_thrift_set_tam_report_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_report_attribute_result&);
  sai_rpc_sai_thrift_set_tam_report_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_report_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_report_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_report_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_report_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_report_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_report_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_report_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_report_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_report_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_report_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_report_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_telemetry_args__isset {
  _sai_rpc_sai_thrift_create_tam_telemetry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_telemetry_args__isset;

class sai_rpc_sai_thrift_create_tam_telemetry_args {
 public:

  sai_rpc_sai_thrift_create_tam_telemetry_args(const sai_rpc_sai_thrift_create_tam_telemetry_args&);
  sai_rpc_sai_thrift_create_tam_telemetry_args& operator=(const sai_rpc_sai_thrift_create_tam_telemetry_args&);
  sai_rpc_sai_thrift_create_tam_telemetry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_telemetry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_telemetry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_telemetry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_telemetry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_telemetry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_telemetry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_telemetry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_telemetry_result__isset {
  _sai_rpc_sai_thrift_create_tam_telemetry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_telemetry_result__isset;

class sai_rpc_sai_thrift_create_tam_telemetry_result {
 public:

  sai_rpc_sai_thrift_create_tam_telemetry_result(const sai_rpc_sai_thrift_create_tam_telemetry_result&);
  sai_rpc_sai_thrift_create_tam_telemetry_result& operator=(const sai_rpc_sai_thrift_create_tam_telemetry_result&);
  sai_rpc_sai_thrift_create_tam_telemetry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_telemetry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_telemetry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_telemetry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_telemetry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_telemetry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_telemetry_presult__isset {
  _sai_rpc_sai_thrift_create_tam_telemetry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_telemetry_presult__isset;

class sai_rpc_sai_thrift_create_tam_telemetry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_telemetry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_telemetry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_telemetry_args__isset {
  _sai_rpc_sai_thrift_remove_tam_telemetry_args__isset() : tam_telemetry_oid(false) {}
  bool tam_telemetry_oid :1;
} _sai_rpc_sai_thrift_remove_tam_telemetry_args__isset;

class sai_rpc_sai_thrift_remove_tam_telemetry_args {
 public:

  sai_rpc_sai_thrift_remove_tam_telemetry_args(const sai_rpc_sai_thrift_remove_tam_telemetry_args&);
  sai_rpc_sai_thrift_remove_tam_telemetry_args& operator=(const sai_rpc_sai_thrift_remove_tam_telemetry_args&);
  sai_rpc_sai_thrift_remove_tam_telemetry_args() : tam_telemetry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_telemetry_args() throw();
  sai_thrift_object_id_t tam_telemetry_oid;

  _sai_rpc_sai_thrift_remove_tam_telemetry_args__isset __isset;

  void __set_tam_telemetry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_telemetry_args & rhs) const
  {
    if (!(tam_telemetry_oid == rhs.tam_telemetry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_telemetry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_telemetry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_telemetry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_telemetry_pargs() throw();
  const sai_thrift_object_id_t* tam_telemetry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_telemetry_result__isset {
  _sai_rpc_sai_thrift_remove_tam_telemetry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_telemetry_result__isset;

class sai_rpc_sai_thrift_remove_tam_telemetry_result {
 public:

  sai_rpc_sai_thrift_remove_tam_telemetry_result(const sai_rpc_sai_thrift_remove_tam_telemetry_result&);
  sai_rpc_sai_thrift_remove_tam_telemetry_result& operator=(const sai_rpc_sai_thrift_remove_tam_telemetry_result&);
  sai_rpc_sai_thrift_remove_tam_telemetry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_telemetry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_telemetry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_telemetry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_telemetry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_telemetry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_telemetry_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_telemetry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_telemetry_presult__isset;

class sai_rpc_sai_thrift_remove_tam_telemetry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_telemetry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_telemetry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_telemetry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_args__isset() : tam_telemetry_oid(false), attr_list(false) {}
  bool tam_telemetry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_telemetry_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_telemetry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_telemetry_attribute_args(const sai_rpc_sai_thrift_get_tam_telemetry_attribute_args&);
  sai_rpc_sai_thrift_get_tam_telemetry_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_telemetry_attribute_args&);
  sai_rpc_sai_thrift_get_tam_telemetry_attribute_args() : tam_telemetry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_telemetry_attribute_args() throw();
  sai_thrift_object_id_t tam_telemetry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_args__isset __isset;

  void __set_tam_telemetry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_args & rhs) const
  {
    if (!(tam_telemetry_oid == rhs.tam_telemetry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_telemetry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_telemetry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_telemetry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_telemetry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_telemetry_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_telemetry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_telemetry_attribute_result(const sai_rpc_sai_thrift_get_tam_telemetry_attribute_result&);
  sai_rpc_sai_thrift_get_tam_telemetry_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_telemetry_attribute_result&);
  sai_rpc_sai_thrift_get_tam_telemetry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_telemetry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_telemetry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_telemetry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_telemetry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_args__isset() : tam_telemetry_oid(false), attr(false) {}
  bool tam_telemetry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_telemetry_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_telemetry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_telemetry_attribute_args(const sai_rpc_sai_thrift_set_tam_telemetry_attribute_args&);
  sai_rpc_sai_thrift_set_tam_telemetry_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_telemetry_attribute_args&);
  sai_rpc_sai_thrift_set_tam_telemetry_attribute_args() : tam_telemetry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_telemetry_attribute_args() throw();
  sai_thrift_object_id_t tam_telemetry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_args__isset __isset;

  void __set_tam_telemetry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_args & rhs) const
  {
    if (!(tam_telemetry_oid == rhs.tam_telemetry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_telemetry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_telemetry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_telemetry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_telemetry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_telemetry_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_telemetry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_telemetry_attribute_result(const sai_rpc_sai_thrift_set_tam_telemetry_attribute_result&);
  sai_rpc_sai_thrift_set_tam_telemetry_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_telemetry_attribute_result&);
  sai_rpc_sai_thrift_set_tam_telemetry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_telemetry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_telemetry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_telemetry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_transport_args__isset {
  _sai_rpc_sai_thrift_create_tam_transport_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_transport_args__isset;

class sai_rpc_sai_thrift_create_tam_transport_args {
 public:

  sai_rpc_sai_thrift_create_tam_transport_args(const sai_rpc_sai_thrift_create_tam_transport_args&);
  sai_rpc_sai_thrift_create_tam_transport_args& operator=(const sai_rpc_sai_thrift_create_tam_transport_args&);
  sai_rpc_sai_thrift_create_tam_transport_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_transport_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_transport_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_transport_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_transport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_transport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_transport_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_transport_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_transport_result__isset {
  _sai_rpc_sai_thrift_create_tam_transport_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_transport_result__isset;

class sai_rpc_sai_thrift_create_tam_transport_result {
 public:

  sai_rpc_sai_thrift_create_tam_transport_result(const sai_rpc_sai_thrift_create_tam_transport_result&);
  sai_rpc_sai_thrift_create_tam_transport_result& operator=(const sai_rpc_sai_thrift_create_tam_transport_result&);
  sai_rpc_sai_thrift_create_tam_transport_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_transport_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_transport_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_transport_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_transport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_transport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_transport_presult__isset {
  _sai_rpc_sai_thrift_create_tam_transport_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_transport_presult__isset;

class sai_rpc_sai_thrift_create_tam_transport_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_transport_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_transport_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_transport_args__isset {
  _sai_rpc_sai_thrift_remove_tam_transport_args__isset() : tam_transport_oid(false) {}
  bool tam_transport_oid :1;
} _sai_rpc_sai_thrift_remove_tam_transport_args__isset;

class sai_rpc_sai_thrift_remove_tam_transport_args {
 public:

  sai_rpc_sai_thrift_remove_tam_transport_args(const sai_rpc_sai_thrift_remove_tam_transport_args&);
  sai_rpc_sai_thrift_remove_tam_transport_args& operator=(const sai_rpc_sai_thrift_remove_tam_transport_args&);
  sai_rpc_sai_thrift_remove_tam_transport_args() : tam_transport_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_transport_args() throw();
  sai_thrift_object_id_t tam_transport_oid;

  _sai_rpc_sai_thrift_remove_tam_transport_args__isset __isset;

  void __set_tam_transport_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_transport_args & rhs) const
  {
    if (!(tam_transport_oid == rhs.tam_transport_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_transport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_transport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_transport_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_transport_pargs() throw();
  const sai_thrift_object_id_t* tam_transport_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_transport_result__isset {
  _sai_rpc_sai_thrift_remove_tam_transport_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_transport_result__isset;

class sai_rpc_sai_thrift_remove_tam_transport_result {
 public:

  sai_rpc_sai_thrift_remove_tam_transport_result(const sai_rpc_sai_thrift_remove_tam_transport_result&);
  sai_rpc_sai_thrift_remove_tam_transport_result& operator=(const sai_rpc_sai_thrift_remove_tam_transport_result&);
  sai_rpc_sai_thrift_remove_tam_transport_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_transport_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_transport_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_transport_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_transport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_transport_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_transport_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_transport_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_transport_presult__isset;

class sai_rpc_sai_thrift_remove_tam_transport_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_transport_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_transport_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_transport_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_transport_attribute_args__isset() : tam_transport_oid(false), attr_list(false) {}
  bool tam_transport_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_transport_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_transport_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_transport_attribute_args(const sai_rpc_sai_thrift_get_tam_transport_attribute_args&);
  sai_rpc_sai_thrift_get_tam_transport_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_transport_attribute_args&);
  sai_rpc_sai_thrift_get_tam_transport_attribute_args() : tam_transport_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_transport_attribute_args() throw();
  sai_thrift_object_id_t tam_transport_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_transport_attribute_args__isset __isset;

  void __set_tam_transport_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_transport_attribute_args & rhs) const
  {
    if (!(tam_transport_oid == rhs.tam_transport_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_transport_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_transport_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_transport_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_transport_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_transport_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_transport_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_transport_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_transport_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_transport_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_transport_attribute_result(const sai_rpc_sai_thrift_get_tam_transport_attribute_result&);
  sai_rpc_sai_thrift_get_tam_transport_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_transport_attribute_result&);
  sai_rpc_sai_thrift_get_tam_transport_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_transport_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_transport_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_transport_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_transport_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_transport_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_transport_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_transport_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_transport_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_transport_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_transport_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_transport_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_transport_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_transport_attribute_args__isset() : tam_transport_oid(false), attr(false) {}
  bool tam_transport_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_transport_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_transport_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_transport_attribute_args(const sai_rpc_sai_thrift_set_tam_transport_attribute_args&);
  sai_rpc_sai_thrift_set_tam_transport_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_transport_attribute_args&);
  sai_rpc_sai_thrift_set_tam_transport_attribute_args() : tam_transport_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_transport_attribute_args() throw();
  sai_thrift_object_id_t tam_transport_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_transport_attribute_args__isset __isset;

  void __set_tam_transport_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_transport_attribute_args & rhs) const
  {
    if (!(tam_transport_oid == rhs.tam_transport_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_transport_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_transport_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_transport_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_transport_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_transport_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_transport_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_transport_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_transport_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_transport_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_transport_attribute_result(const sai_rpc_sai_thrift_set_tam_transport_attribute_result&);
  sai_rpc_sai_thrift_set_tam_transport_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_transport_attribute_result&);
  sai_rpc_sai_thrift_set_tam_transport_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_transport_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_transport_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_transport_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_transport_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_transport_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_transport_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_transport_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_transport_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_transport_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_transport_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_transport_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_collector_args__isset {
  _sai_rpc_sai_thrift_create_tam_collector_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_collector_args__isset;

class sai_rpc_sai_thrift_create_tam_collector_args {
 public:

  sai_rpc_sai_thrift_create_tam_collector_args(const sai_rpc_sai_thrift_create_tam_collector_args&);
  sai_rpc_sai_thrift_create_tam_collector_args& operator=(const sai_rpc_sai_thrift_create_tam_collector_args&);
  sai_rpc_sai_thrift_create_tam_collector_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_collector_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_collector_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_collector_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_collector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_collector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_collector_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_collector_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_collector_result__isset {
  _sai_rpc_sai_thrift_create_tam_collector_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_collector_result__isset;

class sai_rpc_sai_thrift_create_tam_collector_result {
 public:

  sai_rpc_sai_thrift_create_tam_collector_result(const sai_rpc_sai_thrift_create_tam_collector_result&);
  sai_rpc_sai_thrift_create_tam_collector_result& operator=(const sai_rpc_sai_thrift_create_tam_collector_result&);
  sai_rpc_sai_thrift_create_tam_collector_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_collector_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_collector_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_collector_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_collector_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_collector_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_collector_presult__isset {
  _sai_rpc_sai_thrift_create_tam_collector_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_collector_presult__isset;

class sai_rpc_sai_thrift_create_tam_collector_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_collector_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_collector_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_collector_args__isset {
  _sai_rpc_sai_thrift_remove_tam_collector_args__isset() : tam_collector_oid(false) {}
  bool tam_collector_oid :1;
} _sai_rpc_sai_thrift_remove_tam_collector_args__isset;

class sai_rpc_sai_thrift_remove_tam_collector_args {
 public:

  sai_rpc_sai_thrift_remove_tam_collector_args(const sai_rpc_sai_thrift_remove_tam_collector_args&);
  sai_rpc_sai_thrift_remove_tam_collector_args& operator=(const sai_rpc_sai_thrift_remove_tam_collector_args&);
  sai_rpc_sai_thrift_remove_tam_collector_args() : tam_collector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_collector_args() throw();
  sai_thrift_object_id_t tam_collector_oid;

  _sai_rpc_sai_thrift_remove_tam_collector_args__isset __isset;

  void __set_tam_collector_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_collector_args & rhs) const
  {
    if (!(tam_collector_oid == rhs.tam_collector_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_collector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_collector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_collector_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_collector_pargs() throw();
  const sai_thrift_object_id_t* tam_collector_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_collector_result__isset {
  _sai_rpc_sai_thrift_remove_tam_collector_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_collector_result__isset;

class sai_rpc_sai_thrift_remove_tam_collector_result {
 public:

  sai_rpc_sai_thrift_remove_tam_collector_result(const sai_rpc_sai_thrift_remove_tam_collector_result&);
  sai_rpc_sai_thrift_remove_tam_collector_result& operator=(const sai_rpc_sai_thrift_remove_tam_collector_result&);
  sai_rpc_sai_thrift_remove_tam_collector_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_collector_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_collector_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_collector_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_collector_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_collector_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_collector_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_collector_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_collector_presult__isset;

class sai_rpc_sai_thrift_remove_tam_collector_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_collector_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_collector_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_collector_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_collector_attribute_args__isset() : tam_collector_oid(false), attr_list(false) {}
  bool tam_collector_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_collector_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_collector_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_collector_attribute_args(const sai_rpc_sai_thrift_get_tam_collector_attribute_args&);
  sai_rpc_sai_thrift_get_tam_collector_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_collector_attribute_args&);
  sai_rpc_sai_thrift_get_tam_collector_attribute_args() : tam_collector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_collector_attribute_args() throw();
  sai_thrift_object_id_t tam_collector_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_collector_attribute_args__isset __isset;

  void __set_tam_collector_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_collector_attribute_args & rhs) const
  {
    if (!(tam_collector_oid == rhs.tam_collector_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_collector_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_collector_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_collector_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_collector_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_collector_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_collector_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_collector_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_collector_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_collector_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_collector_attribute_result(const sai_rpc_sai_thrift_get_tam_collector_attribute_result&);
  sai_rpc_sai_thrift_get_tam_collector_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_collector_attribute_result&);
  sai_rpc_sai_thrift_get_tam_collector_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_collector_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_collector_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_collector_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_collector_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_collector_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_collector_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_collector_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_collector_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_collector_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_collector_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_collector_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_collector_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_collector_attribute_args__isset() : tam_collector_oid(false), attr(false) {}
  bool tam_collector_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_collector_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_collector_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_collector_attribute_args(const sai_rpc_sai_thrift_set_tam_collector_attribute_args&);
  sai_rpc_sai_thrift_set_tam_collector_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_collector_attribute_args&);
  sai_rpc_sai_thrift_set_tam_collector_attribute_args() : tam_collector_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_collector_attribute_args() throw();
  sai_thrift_object_id_t tam_collector_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_collector_attribute_args__isset __isset;

  void __set_tam_collector_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_collector_attribute_args & rhs) const
  {
    if (!(tam_collector_oid == rhs.tam_collector_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_collector_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_collector_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_collector_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_collector_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_collector_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_collector_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_collector_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_collector_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_collector_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_collector_attribute_result(const sai_rpc_sai_thrift_set_tam_collector_attribute_result&);
  sai_rpc_sai_thrift_set_tam_collector_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_collector_attribute_result&);
  sai_rpc_sai_thrift_set_tam_collector_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_collector_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_collector_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_collector_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_collector_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_collector_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_collector_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_collector_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_collector_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_collector_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_collector_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_collector_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_action_args__isset {
  _sai_rpc_sai_thrift_create_tam_event_action_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_event_action_args__isset;

class sai_rpc_sai_thrift_create_tam_event_action_args {
 public:

  sai_rpc_sai_thrift_create_tam_event_action_args(const sai_rpc_sai_thrift_create_tam_event_action_args&);
  sai_rpc_sai_thrift_create_tam_event_action_args& operator=(const sai_rpc_sai_thrift_create_tam_event_action_args&);
  sai_rpc_sai_thrift_create_tam_event_action_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_action_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_event_action_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_action_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_event_action_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_action_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_action_result__isset {
  _sai_rpc_sai_thrift_create_tam_event_action_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_action_result__isset;

class sai_rpc_sai_thrift_create_tam_event_action_result {
 public:

  sai_rpc_sai_thrift_create_tam_event_action_result(const sai_rpc_sai_thrift_create_tam_event_action_result&);
  sai_rpc_sai_thrift_create_tam_event_action_result& operator=(const sai_rpc_sai_thrift_create_tam_event_action_result&);
  sai_rpc_sai_thrift_create_tam_event_action_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_action_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_action_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_action_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_action_presult__isset {
  _sai_rpc_sai_thrift_create_tam_event_action_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_action_presult__isset;

class sai_rpc_sai_thrift_create_tam_event_action_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_action_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_action_args__isset {
  _sai_rpc_sai_thrift_remove_tam_event_action_args__isset() : tam_event_action_oid(false) {}
  bool tam_event_action_oid :1;
} _sai_rpc_sai_thrift_remove_tam_event_action_args__isset;

class sai_rpc_sai_thrift_remove_tam_event_action_args {
 public:

  sai_rpc_sai_thrift_remove_tam_event_action_args(const sai_rpc_sai_thrift_remove_tam_event_action_args&);
  sai_rpc_sai_thrift_remove_tam_event_action_args& operator=(const sai_rpc_sai_thrift_remove_tam_event_action_args&);
  sai_rpc_sai_thrift_remove_tam_event_action_args() : tam_event_action_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_action_args() throw();
  sai_thrift_object_id_t tam_event_action_oid;

  _sai_rpc_sai_thrift_remove_tam_event_action_args__isset __isset;

  void __set_tam_event_action_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_action_args & rhs) const
  {
    if (!(tam_event_action_oid == rhs.tam_event_action_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_event_action_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_action_pargs() throw();
  const sai_thrift_object_id_t* tam_event_action_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_action_result__isset {
  _sai_rpc_sai_thrift_remove_tam_event_action_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_action_result__isset;

class sai_rpc_sai_thrift_remove_tam_event_action_result {
 public:

  sai_rpc_sai_thrift_remove_tam_event_action_result(const sai_rpc_sai_thrift_remove_tam_event_action_result&);
  sai_rpc_sai_thrift_remove_tam_event_action_result& operator=(const sai_rpc_sai_thrift_remove_tam_event_action_result&);
  sai_rpc_sai_thrift_remove_tam_event_action_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_action_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_action_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_action_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_action_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_event_action_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_action_presult__isset;

class sai_rpc_sai_thrift_remove_tam_event_action_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_action_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_action_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_event_action_attribute_args__isset() : tam_event_action_oid(false), attr_list(false) {}
  bool tam_event_action_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_event_action_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_event_action_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_event_action_attribute_args(const sai_rpc_sai_thrift_get_tam_event_action_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_action_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_event_action_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_action_attribute_args() : tam_event_action_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_action_attribute_args() throw();
  sai_thrift_object_id_t tam_event_action_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_event_action_attribute_args__isset __isset;

  void __set_tam_event_action_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_action_attribute_args & rhs) const
  {
    if (!(tam_event_action_oid == rhs.tam_event_action_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_action_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_action_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_event_action_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_action_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_action_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_action_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_event_action_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_action_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_event_action_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_event_action_attribute_result(const sai_rpc_sai_thrift_get_tam_event_action_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_action_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_event_action_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_action_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_action_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_action_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_action_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_action_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_action_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_action_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_event_action_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_action_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_event_action_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_action_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_action_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_action_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_event_action_attribute_args__isset() : tam_event_action_oid(false), attr(false) {}
  bool tam_event_action_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_event_action_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_event_action_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_event_action_attribute_args(const sai_rpc_sai_thrift_set_tam_event_action_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_action_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_event_action_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_action_attribute_args() : tam_event_action_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_action_attribute_args() throw();
  sai_thrift_object_id_t tam_event_action_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_event_action_attribute_args__isset __isset;

  void __set_tam_event_action_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_action_attribute_args & rhs) const
  {
    if (!(tam_event_action_oid == rhs.tam_event_action_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_action_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_action_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_event_action_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_action_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_action_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_action_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_event_action_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_action_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_event_action_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_event_action_attribute_result(const sai_rpc_sai_thrift_set_tam_event_action_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_action_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_event_action_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_action_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_action_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_action_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_action_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_action_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_action_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_action_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_event_action_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_action_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_event_action_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_action_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_action_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_args__isset {
  _sai_rpc_sai_thrift_create_tam_event_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tam_event_args__isset;

class sai_rpc_sai_thrift_create_tam_event_args {
 public:

  sai_rpc_sai_thrift_create_tam_event_args(const sai_rpc_sai_thrift_create_tam_event_args&);
  sai_rpc_sai_thrift_create_tam_event_args& operator=(const sai_rpc_sai_thrift_create_tam_event_args&);
  sai_rpc_sai_thrift_create_tam_event_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tam_event_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tam_event_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_result__isset {
  _sai_rpc_sai_thrift_create_tam_event_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_result__isset;

class sai_rpc_sai_thrift_create_tam_event_result {
 public:

  sai_rpc_sai_thrift_create_tam_event_result(const sai_rpc_sai_thrift_create_tam_event_result&);
  sai_rpc_sai_thrift_create_tam_event_result& operator=(const sai_rpc_sai_thrift_create_tam_event_result&);
  sai_rpc_sai_thrift_create_tam_event_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tam_event_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tam_event_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tam_event_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tam_event_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tam_event_presult__isset {
  _sai_rpc_sai_thrift_create_tam_event_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tam_event_presult__isset;

class sai_rpc_sai_thrift_create_tam_event_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tam_event_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tam_event_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_args__isset {
  _sai_rpc_sai_thrift_remove_tam_event_args__isset() : tam_event_oid(false) {}
  bool tam_event_oid :1;
} _sai_rpc_sai_thrift_remove_tam_event_args__isset;

class sai_rpc_sai_thrift_remove_tam_event_args {
 public:

  sai_rpc_sai_thrift_remove_tam_event_args(const sai_rpc_sai_thrift_remove_tam_event_args&);
  sai_rpc_sai_thrift_remove_tam_event_args& operator=(const sai_rpc_sai_thrift_remove_tam_event_args&);
  sai_rpc_sai_thrift_remove_tam_event_args() : tam_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_args() throw();
  sai_thrift_object_id_t tam_event_oid;

  _sai_rpc_sai_thrift_remove_tam_event_args__isset __isset;

  void __set_tam_event_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_args & rhs) const
  {
    if (!(tam_event_oid == rhs.tam_event_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tam_event_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_pargs() throw();
  const sai_thrift_object_id_t* tam_event_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_result__isset {
  _sai_rpc_sai_thrift_remove_tam_event_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_result__isset;

class sai_rpc_sai_thrift_remove_tam_event_result {
 public:

  sai_rpc_sai_thrift_remove_tam_event_result(const sai_rpc_sai_thrift_remove_tam_event_result&);
  sai_rpc_sai_thrift_remove_tam_event_result& operator=(const sai_rpc_sai_thrift_remove_tam_event_result&);
  sai_rpc_sai_thrift_remove_tam_event_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tam_event_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tam_event_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tam_event_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tam_event_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tam_event_presult__isset {
  _sai_rpc_sai_thrift_remove_tam_event_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tam_event_presult__isset;

class sai_rpc_sai_thrift_remove_tam_event_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tam_event_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tam_event_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tam_event_attribute_args__isset() : tam_event_oid(false), attr_list(false) {}
  bool tam_event_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tam_event_attribute_args__isset;

class sai_rpc_sai_thrift_get_tam_event_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tam_event_attribute_args(const sai_rpc_sai_thrift_get_tam_event_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_attribute_args& operator=(const sai_rpc_sai_thrift_get_tam_event_attribute_args&);
  sai_rpc_sai_thrift_get_tam_event_attribute_args() : tam_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_attribute_args() throw();
  sai_thrift_object_id_t tam_event_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tam_event_attribute_args__isset __isset;

  void __set_tam_event_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_attribute_args & rhs) const
  {
    if (!(tam_event_oid == rhs.tam_event_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tam_event_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tam_event_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_attribute_result__isset;

class sai_rpc_sai_thrift_get_tam_event_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tam_event_attribute_result(const sai_rpc_sai_thrift_get_tam_event_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_attribute_result& operator=(const sai_rpc_sai_thrift_get_tam_event_attribute_result&);
  sai_rpc_sai_thrift_get_tam_event_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tam_event_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tam_event_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tam_event_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tam_event_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tam_event_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tam_event_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tam_event_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tam_event_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tam_event_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tam_event_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tam_event_attribute_args__isset() : tam_event_oid(false), attr(false) {}
  bool tam_event_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tam_event_attribute_args__isset;

class sai_rpc_sai_thrift_set_tam_event_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tam_event_attribute_args(const sai_rpc_sai_thrift_set_tam_event_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_attribute_args& operator=(const sai_rpc_sai_thrift_set_tam_event_attribute_args&);
  sai_rpc_sai_thrift_set_tam_event_attribute_args() : tam_event_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_attribute_args() throw();
  sai_thrift_object_id_t tam_event_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tam_event_attribute_args__isset __isset;

  void __set_tam_event_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_attribute_args & rhs) const
  {
    if (!(tam_event_oid == rhs.tam_event_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tam_event_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_attribute_pargs() throw();
  const sai_thrift_object_id_t* tam_event_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tam_event_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_attribute_result__isset;

class sai_rpc_sai_thrift_set_tam_event_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tam_event_attribute_result(const sai_rpc_sai_thrift_set_tam_event_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_attribute_result& operator=(const sai_rpc_sai_thrift_set_tam_event_attribute_result&);
  sai_rpc_sai_thrift_set_tam_event_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tam_event_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tam_event_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tam_event_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tam_event_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tam_event_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tam_event_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tam_event_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tam_event_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tam_event_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tam_event_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_args__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tunnel_map_args__isset;

class sai_rpc_sai_thrift_create_tunnel_map_args {
 public:

  sai_rpc_sai_thrift_create_tunnel_map_args(const sai_rpc_sai_thrift_create_tunnel_map_args&);
  sai_rpc_sai_thrift_create_tunnel_map_args& operator=(const sai_rpc_sai_thrift_create_tunnel_map_args&);
  sai_rpc_sai_thrift_create_tunnel_map_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_map_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tunnel_map_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_map_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tunnel_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_map_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_result__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_map_result__isset;

class sai_rpc_sai_thrift_create_tunnel_map_result {
 public:

  sai_rpc_sai_thrift_create_tunnel_map_result(const sai_rpc_sai_thrift_create_tunnel_map_result&);
  sai_rpc_sai_thrift_create_tunnel_map_result& operator=(const sai_rpc_sai_thrift_create_tunnel_map_result&);
  sai_rpc_sai_thrift_create_tunnel_map_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_map_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_presult__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_map_presult__isset;

class sai_rpc_sai_thrift_create_tunnel_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_map_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_args__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_args__isset() : tunnel_map_oid(false) {}
  bool tunnel_map_oid :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_args__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_args {
 public:

  sai_rpc_sai_thrift_remove_tunnel_map_args(const sai_rpc_sai_thrift_remove_tunnel_map_args&);
  sai_rpc_sai_thrift_remove_tunnel_map_args& operator=(const sai_rpc_sai_thrift_remove_tunnel_map_args&);
  sai_rpc_sai_thrift_remove_tunnel_map_args() : tunnel_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_args() throw();
  sai_thrift_object_id_t tunnel_map_oid;

  _sai_rpc_sai_thrift_remove_tunnel_map_args__isset __isset;

  void __set_tunnel_map_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_map_args & rhs) const
  {
    if (!(tunnel_map_oid == rhs.tunnel_map_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tunnel_map_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_result__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_result__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_result {
 public:

  sai_rpc_sai_thrift_remove_tunnel_map_result(const sai_rpc_sai_thrift_remove_tunnel_map_result&);
  sai_rpc_sai_thrift_remove_tunnel_map_result& operator=(const sai_rpc_sai_thrift_remove_tunnel_map_result&);
  sai_rpc_sai_thrift_remove_tunnel_map_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_map_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_map_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_presult__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_presult__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset() : tunnel_map_oid(false), attr(false) {}
  bool tunnel_map_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset;

class sai_rpc_sai_thrift_set_tunnel_map_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tunnel_map_attribute_args(const sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_map_attribute_args& operator=(const sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_map_attribute_args() : tunnel_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_map_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_oid == rhs.tunnel_map_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset;

class sai_rpc_sai_thrift_set_tunnel_map_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tunnel_map_attribute_result(const sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_map_attribute_result& operator=(const sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_map_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_map_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tunnel_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_map_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset() : tunnel_map_oid(false), attr_list(false) {}
  bool tunnel_map_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset;

class sai_rpc_sai_thrift_get_tunnel_map_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_map_attribute_args(const sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_map_attribute_args& operator=(const sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_map_attribute_args() : tunnel_map_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_map_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_oid == rhs.tunnel_map_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset;

class sai_rpc_sai_thrift_get_tunnel_map_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_map_attribute_result(const sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_map_attribute_result& operator=(const sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_map_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_map_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_map_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_map_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_args__isset {
  _sai_rpc_sai_thrift_create_tunnel_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tunnel_args__isset;

class sai_rpc_sai_thrift_create_tunnel_args {
 public:

  sai_rpc_sai_thrift_create_tunnel_args(const sai_rpc_sai_thrift_create_tunnel_args&);
  sai_rpc_sai_thrift_create_tunnel_args& operator=(const sai_rpc_sai_thrift_create_tunnel_args&);
  sai_rpc_sai_thrift_create_tunnel_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tunnel_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tunnel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_result__isset {
  _sai_rpc_sai_thrift_create_tunnel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_result__isset;

class sai_rpc_sai_thrift_create_tunnel_result {
 public:

  sai_rpc_sai_thrift_create_tunnel_result(const sai_rpc_sai_thrift_create_tunnel_result&);
  sai_rpc_sai_thrift_create_tunnel_result& operator=(const sai_rpc_sai_thrift_create_tunnel_result&);
  sai_rpc_sai_thrift_create_tunnel_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_presult__isset {
  _sai_rpc_sai_thrift_create_tunnel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_presult__isset;

class sai_rpc_sai_thrift_create_tunnel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_args__isset {
  _sai_rpc_sai_thrift_remove_tunnel_args__isset() : tunnel_oid(false) {}
  bool tunnel_oid :1;
} _sai_rpc_sai_thrift_remove_tunnel_args__isset;

class sai_rpc_sai_thrift_remove_tunnel_args {
 public:

  sai_rpc_sai_thrift_remove_tunnel_args(const sai_rpc_sai_thrift_remove_tunnel_args&);
  sai_rpc_sai_thrift_remove_tunnel_args& operator=(const sai_rpc_sai_thrift_remove_tunnel_args&);
  sai_rpc_sai_thrift_remove_tunnel_args() : tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_args() throw();
  sai_thrift_object_id_t tunnel_oid;

  _sai_rpc_sai_thrift_remove_tunnel_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tunnel_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_result__isset {
  _sai_rpc_sai_thrift_remove_tunnel_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_result__isset;

class sai_rpc_sai_thrift_remove_tunnel_result {
 public:

  sai_rpc_sai_thrift_remove_tunnel_result(const sai_rpc_sai_thrift_remove_tunnel_result&);
  sai_rpc_sai_thrift_remove_tunnel_result& operator=(const sai_rpc_sai_thrift_remove_tunnel_result&);
  sai_rpc_sai_thrift_remove_tunnel_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_presult__isset {
  _sai_rpc_sai_thrift_remove_tunnel_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_presult__isset;

class sai_rpc_sai_thrift_remove_tunnel_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tunnel_attribute_args__isset() : tunnel_oid(false), attr(false) {}
  bool tunnel_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tunnel_attribute_args__isset;

class sai_rpc_sai_thrift_set_tunnel_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tunnel_attribute_args(const sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_attribute_args& operator=(const sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_attribute_args() : tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_attribute_args() throw();
  sai_thrift_object_id_t tunnel_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tunnel_attribute_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tunnel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tunnel_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_attribute_result__isset;

class sai_rpc_sai_thrift_set_tunnel_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tunnel_attribute_result(const sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_attribute_result& operator=(const sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tunnel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_attribute_args__isset() : tunnel_oid(false), attr_list(false) {}
  bool tunnel_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tunnel_attribute_args__isset;

class sai_rpc_sai_thrift_get_tunnel_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_attribute_args(const sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_attribute_args& operator=(const sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_attribute_args() : tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_attribute_args() throw();
  sai_thrift_object_id_t tunnel_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tunnel_attribute_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_attribute_result__isset;

class sai_rpc_sai_thrift_get_tunnel_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_attribute_result(const sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_attribute_result& operator=(const sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_args__isset() : tunnel_oid(false), counter_ids(false) {}
  bool tunnel_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_args__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_stats_args(const sai_rpc_sai_thrift_get_tunnel_stats_args&);
  sai_rpc_sai_thrift_get_tunnel_stats_args& operator=(const sai_rpc_sai_thrift_get_tunnel_stats_args&);
  sai_rpc_sai_thrift_get_tunnel_stats_args() : tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_args() throw();
  sai_thrift_object_id_t tunnel_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_tunnel_stats_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_result__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_stats_result(const sai_rpc_sai_thrift_get_tunnel_stats_result&);
  sai_rpc_sai_thrift_get_tunnel_stats_result& operator=(const sai_rpc_sai_thrift_get_tunnel_stats_result&);
  sai_rpc_sai_thrift_get_tunnel_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_ext_args__isset() : tunnel_oid(false), counter_ids(false), mode(false) {}
  bool tunnel_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_stats_ext_args(const sai_rpc_sai_thrift_get_tunnel_stats_ext_args&);
  sai_rpc_sai_thrift_get_tunnel_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_tunnel_stats_ext_args&);
  sai_rpc_sai_thrift_get_tunnel_stats_ext_args() : tunnel_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_ext_args() throw();
  sai_thrift_object_id_t tunnel_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_tunnel_stats_ext_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_stats_ext_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_stats_ext_result(const sai_rpc_sai_thrift_get_tunnel_stats_ext_result&);
  sai_rpc_sai_thrift_get_tunnel_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_tunnel_stats_ext_result&);
  sai_rpc_sai_thrift_get_tunnel_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_tunnel_stats_args__isset {
  _sai_rpc_sai_thrift_clear_tunnel_stats_args__isset() : tunnel_oid(false), counter_ids(false) {}
  bool tunnel_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_tunnel_stats_args__isset;

class sai_rpc_sai_thrift_clear_tunnel_stats_args {
 public:

  sai_rpc_sai_thrift_clear_tunnel_stats_args(const sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  sai_rpc_sai_thrift_clear_tunnel_stats_args& operator=(const sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  sai_rpc_sai_thrift_clear_tunnel_stats_args() : tunnel_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_tunnel_stats_args() throw();
  sai_thrift_object_id_t tunnel_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_tunnel_stats_args__isset __isset;

  void __set_tunnel_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_oid == rhs.tunnel_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_tunnel_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_tunnel_stats_pargs() throw();
  const sai_thrift_object_id_t* tunnel_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_tunnel_stats_result__isset {
  _sai_rpc_sai_thrift_clear_tunnel_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_tunnel_stats_result__isset;

class sai_rpc_sai_thrift_clear_tunnel_stats_result {
 public:

  sai_rpc_sai_thrift_clear_tunnel_stats_result(const sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  sai_rpc_sai_thrift_clear_tunnel_stats_result& operator=(const sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  sai_rpc_sai_thrift_clear_tunnel_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_tunnel_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_tunnel_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_tunnel_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset;

class sai_rpc_sai_thrift_clear_tunnel_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_tunnel_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset {
  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset;

class sai_rpc_sai_thrift_create_tunnel_term_table_entry_args {
 public:

  sai_rpc_sai_thrift_create_tunnel_term_table_entry_args(const sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  sai_rpc_sai_thrift_create_tunnel_term_table_entry_args& operator=(const sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset {
  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset;

class sai_rpc_sai_thrift_create_tunnel_term_table_entry_result {
 public:

  sai_rpc_sai_thrift_create_tunnel_term_table_entry_result(const sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  sai_rpc_sai_thrift_create_tunnel_term_table_entry_result& operator=(const sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset {
  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset;

class sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset {
  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset() : tunnel_term_table_entry_oid(false) {}
  bool tunnel_term_table_entry_oid :1;
} _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset;

class sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args {
 public:

  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args(const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args& operator=(const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() : tunnel_term_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_oid;

  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset __isset;

  void __set_tunnel_term_table_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & rhs) const
  {
    if (!(tunnel_term_table_entry_oid == rhs.tunnel_term_table_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset {
  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset;

class sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result {
 public:

  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result(const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result& operator=(const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset;

class sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_oid(false), attr(false) {}
  bool tunnel_term_table_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args(const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_oid == rhs.tunnel_term_table_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result(const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_oid(false), attr_list(false) {}
  bool tunnel_term_table_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args(const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_oid == rhs.tunnel_term_table_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result(const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset;

class sai_rpc_sai_thrift_create_tunnel_map_entry_args {
 public:

  sai_rpc_sai_thrift_create_tunnel_map_entry_args(const sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  sai_rpc_sai_thrift_create_tunnel_map_entry_args& operator=(const sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  sai_rpc_sai_thrift_create_tunnel_map_entry_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_map_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_map_entry_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_tunnel_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_map_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset;

class sai_rpc_sai_thrift_create_tunnel_map_entry_result {
 public:

  sai_rpc_sai_thrift_create_tunnel_map_entry_result(const sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  sai_rpc_sai_thrift_create_tunnel_map_entry_result& operator=(const sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  sai_rpc_sai_thrift_create_tunnel_map_entry_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_tunnel_map_entry_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_tunnel_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset {
  _sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset;

class sai_rpc_sai_thrift_create_tunnel_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_tunnel_map_entry_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset() : tunnel_map_entry_oid(false) {}
  bool tunnel_map_entry_oid :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_entry_args {
 public:

  sai_rpc_sai_thrift_remove_tunnel_map_entry_args(const sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  sai_rpc_sai_thrift_remove_tunnel_map_entry_args& operator=(const sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  sai_rpc_sai_thrift_remove_tunnel_map_entry_args() : tunnel_map_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_entry_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_oid;

  _sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset __isset;

  void __set_tunnel_map_entry_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_map_entry_args & rhs) const
  {
    if (!(tunnel_map_entry_oid == rhs.tunnel_map_entry_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_entry_result {
 public:

  sai_rpc_sai_thrift_remove_tunnel_map_entry_result(const sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  sai_rpc_sai_thrift_remove_tunnel_map_entry_result& operator=(const sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  sai_rpc_sai_thrift_remove_tunnel_map_entry_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_entry_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_tunnel_map_entry_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset {
  _sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset;

class sai_rpc_sai_thrift_remove_tunnel_map_entry_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_tunnel_map_entry_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_oid(false), attr(false) {}
  bool tunnel_map_entry_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset;

class sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args(const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args& operator=(const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() : tunnel_map_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_oid == rhs.tunnel_map_entry_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset;

class sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result(const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result& operator=(const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_oid(false), attr_list(false) {}
  bool tunnel_map_entry_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset;

class sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args {
 public:

  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args(const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args& operator=(const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() : tunnel_map_entry_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_oid == rhs.tunnel_map_entry_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset;

class sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result {
 public:

  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result(const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result& operator=(const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset;

class sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_udf_args__isset {
  _sai_rpc_sai_thrift_create_udf_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_udf_args__isset;

class sai_rpc_sai_thrift_create_udf_args {
 public:

  sai_rpc_sai_thrift_create_udf_args(const sai_rpc_sai_thrift_create_udf_args&);
  sai_rpc_sai_thrift_create_udf_args& operator=(const sai_rpc_sai_thrift_create_udf_args&);
  sai_rpc_sai_thrift_create_udf_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_udf_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_udf_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_result__isset {
  _sai_rpc_sai_thrift_create_udf_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_result__isset;

class sai_rpc_sai_thrift_create_udf_result {
 public:

  sai_rpc_sai_thrift_create_udf_result(const sai_rpc_sai_thrift_create_udf_result&);
  sai_rpc_sai_thrift_create_udf_result& operator=(const sai_rpc_sai_thrift_create_udf_result&);
  sai_rpc_sai_thrift_create_udf_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_presult__isset {
  _sai_rpc_sai_thrift_create_udf_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_presult__isset;

class sai_rpc_sai_thrift_create_udf_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_udf_args__isset {
  _sai_rpc_sai_thrift_remove_udf_args__isset() : udf_oid(false) {}
  bool udf_oid :1;
} _sai_rpc_sai_thrift_remove_udf_args__isset;

class sai_rpc_sai_thrift_remove_udf_args {
 public:

  sai_rpc_sai_thrift_remove_udf_args(const sai_rpc_sai_thrift_remove_udf_args&);
  sai_rpc_sai_thrift_remove_udf_args& operator=(const sai_rpc_sai_thrift_remove_udf_args&);
  sai_rpc_sai_thrift_remove_udf_args() : udf_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_args() throw();
  sai_thrift_object_id_t udf_oid;

  _sai_rpc_sai_thrift_remove_udf_args__isset __isset;

  void __set_udf_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_args & rhs) const
  {
    if (!(udf_oid == rhs.udf_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_udf_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_pargs() throw();
  const sai_thrift_object_id_t* udf_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_result__isset {
  _sai_rpc_sai_thrift_remove_udf_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_result__isset;

class sai_rpc_sai_thrift_remove_udf_result {
 public:

  sai_rpc_sai_thrift_remove_udf_result(const sai_rpc_sai_thrift_remove_udf_result&);
  sai_rpc_sai_thrift_remove_udf_result& operator=(const sai_rpc_sai_thrift_remove_udf_result&);
  sai_rpc_sai_thrift_remove_udf_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_presult__isset {
  _sai_rpc_sai_thrift_remove_udf_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_presult__isset;

class sai_rpc_sai_thrift_remove_udf_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_udf_attribute_args__isset {
  _sai_rpc_sai_thrift_set_udf_attribute_args__isset() : udf_oid(false), attr(false) {}
  bool udf_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_udf_attribute_args__isset;

class sai_rpc_sai_thrift_set_udf_attribute_args {
 public:

  sai_rpc_sai_thrift_set_udf_attribute_args(const sai_rpc_sai_thrift_set_udf_attribute_args&);
  sai_rpc_sai_thrift_set_udf_attribute_args& operator=(const sai_rpc_sai_thrift_set_udf_attribute_args&);
  sai_rpc_sai_thrift_set_udf_attribute_args() : udf_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_attribute_args() throw();
  sai_thrift_object_id_t udf_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_udf_attribute_args__isset __isset;

  void __set_udf_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_attribute_args & rhs) const
  {
    if (!(udf_oid == rhs.udf_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_udf_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_attribute_result__isset {
  _sai_rpc_sai_thrift_set_udf_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_attribute_result__isset;

class sai_rpc_sai_thrift_set_udf_attribute_result {
 public:

  sai_rpc_sai_thrift_set_udf_attribute_result(const sai_rpc_sai_thrift_set_udf_attribute_result&);
  sai_rpc_sai_thrift_set_udf_attribute_result& operator=(const sai_rpc_sai_thrift_set_udf_attribute_result&);
  sai_rpc_sai_thrift_set_udf_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_udf_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_attribute_presult__isset;

class sai_rpc_sai_thrift_set_udf_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_udf_attribute_args__isset {
  _sai_rpc_sai_thrift_get_udf_attribute_args__isset() : udf_oid(false), attr_list(false) {}
  bool udf_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_udf_attribute_args__isset;

class sai_rpc_sai_thrift_get_udf_attribute_args {
 public:

  sai_rpc_sai_thrift_get_udf_attribute_args(const sai_rpc_sai_thrift_get_udf_attribute_args&);
  sai_rpc_sai_thrift_get_udf_attribute_args& operator=(const sai_rpc_sai_thrift_get_udf_attribute_args&);
  sai_rpc_sai_thrift_get_udf_attribute_args() : udf_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_attribute_args() throw();
  sai_thrift_object_id_t udf_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_udf_attribute_args__isset __isset;

  void __set_udf_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_attribute_args & rhs) const
  {
    if (!(udf_oid == rhs.udf_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_udf_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_attribute_result__isset {
  _sai_rpc_sai_thrift_get_udf_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_attribute_result__isset;

class sai_rpc_sai_thrift_get_udf_attribute_result {
 public:

  sai_rpc_sai_thrift_get_udf_attribute_result(const sai_rpc_sai_thrift_get_udf_attribute_result&);
  sai_rpc_sai_thrift_get_udf_attribute_result& operator=(const sai_rpc_sai_thrift_get_udf_attribute_result&);
  sai_rpc_sai_thrift_get_udf_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_udf_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_attribute_presult__isset;

class sai_rpc_sai_thrift_get_udf_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_udf_match_args__isset {
  _sai_rpc_sai_thrift_create_udf_match_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_udf_match_args__isset;

class sai_rpc_sai_thrift_create_udf_match_args {
 public:

  sai_rpc_sai_thrift_create_udf_match_args(const sai_rpc_sai_thrift_create_udf_match_args&);
  sai_rpc_sai_thrift_create_udf_match_args& operator=(const sai_rpc_sai_thrift_create_udf_match_args&);
  sai_rpc_sai_thrift_create_udf_match_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_match_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_udf_match_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_match_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_udf_match_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_match_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_match_result__isset {
  _sai_rpc_sai_thrift_create_udf_match_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_match_result__isset;

class sai_rpc_sai_thrift_create_udf_match_result {
 public:

  sai_rpc_sai_thrift_create_udf_match_result(const sai_rpc_sai_thrift_create_udf_match_result&);
  sai_rpc_sai_thrift_create_udf_match_result& operator=(const sai_rpc_sai_thrift_create_udf_match_result&);
  sai_rpc_sai_thrift_create_udf_match_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_match_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_match_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_match_presult__isset {
  _sai_rpc_sai_thrift_create_udf_match_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_match_presult__isset;

class sai_rpc_sai_thrift_create_udf_match_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_match_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_udf_match_args__isset {
  _sai_rpc_sai_thrift_remove_udf_match_args__isset() : udf_match_oid(false) {}
  bool udf_match_oid :1;
} _sai_rpc_sai_thrift_remove_udf_match_args__isset;

class sai_rpc_sai_thrift_remove_udf_match_args {
 public:

  sai_rpc_sai_thrift_remove_udf_match_args(const sai_rpc_sai_thrift_remove_udf_match_args&);
  sai_rpc_sai_thrift_remove_udf_match_args& operator=(const sai_rpc_sai_thrift_remove_udf_match_args&);
  sai_rpc_sai_thrift_remove_udf_match_args() : udf_match_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_match_args() throw();
  sai_thrift_object_id_t udf_match_oid;

  _sai_rpc_sai_thrift_remove_udf_match_args__isset __isset;

  void __set_udf_match_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_match_args & rhs) const
  {
    if (!(udf_match_oid == rhs.udf_match_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_udf_match_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_match_pargs() throw();
  const sai_thrift_object_id_t* udf_match_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_match_result__isset {
  _sai_rpc_sai_thrift_remove_udf_match_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_match_result__isset;

class sai_rpc_sai_thrift_remove_udf_match_result {
 public:

  sai_rpc_sai_thrift_remove_udf_match_result(const sai_rpc_sai_thrift_remove_udf_match_result&);
  sai_rpc_sai_thrift_remove_udf_match_result& operator=(const sai_rpc_sai_thrift_remove_udf_match_result&);
  sai_rpc_sai_thrift_remove_udf_match_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_match_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_match_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_match_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_match_presult__isset {
  _sai_rpc_sai_thrift_remove_udf_match_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_match_presult__isset;

class sai_rpc_sai_thrift_remove_udf_match_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_match_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_udf_match_attribute_args__isset {
  _sai_rpc_sai_thrift_set_udf_match_attribute_args__isset() : udf_match_oid(false), attr(false) {}
  bool udf_match_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_udf_match_attribute_args__isset;

class sai_rpc_sai_thrift_set_udf_match_attribute_args {
 public:

  sai_rpc_sai_thrift_set_udf_match_attribute_args(const sai_rpc_sai_thrift_set_udf_match_attribute_args&);
  sai_rpc_sai_thrift_set_udf_match_attribute_args& operator=(const sai_rpc_sai_thrift_set_udf_match_attribute_args&);
  sai_rpc_sai_thrift_set_udf_match_attribute_args() : udf_match_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_match_attribute_args() throw();
  sai_thrift_object_id_t udf_match_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_udf_match_attribute_args__isset __isset;

  void __set_udf_match_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_match_attribute_args & rhs) const
  {
    if (!(udf_match_oid == rhs.udf_match_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_match_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_match_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_udf_match_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_match_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_match_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_match_attribute_result__isset {
  _sai_rpc_sai_thrift_set_udf_match_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_match_attribute_result__isset;

class sai_rpc_sai_thrift_set_udf_match_attribute_result {
 public:

  sai_rpc_sai_thrift_set_udf_match_attribute_result(const sai_rpc_sai_thrift_set_udf_match_attribute_result&);
  sai_rpc_sai_thrift_set_udf_match_attribute_result& operator=(const sai_rpc_sai_thrift_set_udf_match_attribute_result&);
  sai_rpc_sai_thrift_set_udf_match_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_match_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_match_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_match_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_match_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_match_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_match_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_udf_match_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_match_attribute_presult__isset;

class sai_rpc_sai_thrift_set_udf_match_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_match_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_match_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_udf_match_attribute_args__isset {
  _sai_rpc_sai_thrift_get_udf_match_attribute_args__isset() : udf_match_oid(false), attr_list(false) {}
  bool udf_match_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_udf_match_attribute_args__isset;

class sai_rpc_sai_thrift_get_udf_match_attribute_args {
 public:

  sai_rpc_sai_thrift_get_udf_match_attribute_args(const sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  sai_rpc_sai_thrift_get_udf_match_attribute_args& operator=(const sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  sai_rpc_sai_thrift_get_udf_match_attribute_args() : udf_match_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_match_attribute_args() throw();
  sai_thrift_object_id_t udf_match_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_udf_match_attribute_args__isset __isset;

  void __set_udf_match_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_match_attribute_args & rhs) const
  {
    if (!(udf_match_oid == rhs.udf_match_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_match_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_match_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_udf_match_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_match_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_match_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_match_attribute_result__isset {
  _sai_rpc_sai_thrift_get_udf_match_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_match_attribute_result__isset;

class sai_rpc_sai_thrift_get_udf_match_attribute_result {
 public:

  sai_rpc_sai_thrift_get_udf_match_attribute_result(const sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  sai_rpc_sai_thrift_get_udf_match_attribute_result& operator=(const sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  sai_rpc_sai_thrift_get_udf_match_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_match_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_match_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_match_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_match_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_match_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset;

class sai_rpc_sai_thrift_get_udf_match_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_match_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_udf_group_args__isset {
  _sai_rpc_sai_thrift_create_udf_group_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_udf_group_args__isset;

class sai_rpc_sai_thrift_create_udf_group_args {
 public:

  sai_rpc_sai_thrift_create_udf_group_args(const sai_rpc_sai_thrift_create_udf_group_args&);
  sai_rpc_sai_thrift_create_udf_group_args& operator=(const sai_rpc_sai_thrift_create_udf_group_args&);
  sai_rpc_sai_thrift_create_udf_group_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_group_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_udf_group_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_group_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_udf_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_group_result__isset {
  _sai_rpc_sai_thrift_create_udf_group_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_group_result__isset;

class sai_rpc_sai_thrift_create_udf_group_result {
 public:

  sai_rpc_sai_thrift_create_udf_group_result(const sai_rpc_sai_thrift_create_udf_group_result&);
  sai_rpc_sai_thrift_create_udf_group_result& operator=(const sai_rpc_sai_thrift_create_udf_group_result&);
  sai_rpc_sai_thrift_create_udf_group_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_udf_group_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_udf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_udf_group_presult__isset {
  _sai_rpc_sai_thrift_create_udf_group_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_udf_group_presult__isset;

class sai_rpc_sai_thrift_create_udf_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_udf_group_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_udf_group_args__isset {
  _sai_rpc_sai_thrift_remove_udf_group_args__isset() : udf_group_oid(false) {}
  bool udf_group_oid :1;
} _sai_rpc_sai_thrift_remove_udf_group_args__isset;

class sai_rpc_sai_thrift_remove_udf_group_args {
 public:

  sai_rpc_sai_thrift_remove_udf_group_args(const sai_rpc_sai_thrift_remove_udf_group_args&);
  sai_rpc_sai_thrift_remove_udf_group_args& operator=(const sai_rpc_sai_thrift_remove_udf_group_args&);
  sai_rpc_sai_thrift_remove_udf_group_args() : udf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_group_args() throw();
  sai_thrift_object_id_t udf_group_oid;

  _sai_rpc_sai_thrift_remove_udf_group_args__isset __isset;

  void __set_udf_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_group_args & rhs) const
  {
    if (!(udf_group_oid == rhs.udf_group_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_udf_group_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_group_pargs() throw();
  const sai_thrift_object_id_t* udf_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_group_result__isset {
  _sai_rpc_sai_thrift_remove_udf_group_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_group_result__isset;

class sai_rpc_sai_thrift_remove_udf_group_result {
 public:

  sai_rpc_sai_thrift_remove_udf_group_result(const sai_rpc_sai_thrift_remove_udf_group_result&);
  sai_rpc_sai_thrift_remove_udf_group_result& operator=(const sai_rpc_sai_thrift_remove_udf_group_result&);
  sai_rpc_sai_thrift_remove_udf_group_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_udf_group_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_group_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_udf_group_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_udf_group_presult__isset {
  _sai_rpc_sai_thrift_remove_udf_group_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_udf_group_presult__isset;

class sai_rpc_sai_thrift_remove_udf_group_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_udf_group_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_udf_group_attribute_args__isset {
  _sai_rpc_sai_thrift_set_udf_group_attribute_args__isset() : udf_group_oid(false), attr(false) {}
  bool udf_group_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_udf_group_attribute_args__isset;

class sai_rpc_sai_thrift_set_udf_group_attribute_args {
 public:

  sai_rpc_sai_thrift_set_udf_group_attribute_args(const sai_rpc_sai_thrift_set_udf_group_attribute_args&);
  sai_rpc_sai_thrift_set_udf_group_attribute_args& operator=(const sai_rpc_sai_thrift_set_udf_group_attribute_args&);
  sai_rpc_sai_thrift_set_udf_group_attribute_args() : udf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_group_attribute_args() throw();
  sai_thrift_object_id_t udf_group_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_udf_group_attribute_args__isset __isset;

  void __set_udf_group_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_group_attribute_args & rhs) const
  {
    if (!(udf_group_oid == rhs.udf_group_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_udf_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_group_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_group_attribute_result__isset {
  _sai_rpc_sai_thrift_set_udf_group_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_group_attribute_result__isset;

class sai_rpc_sai_thrift_set_udf_group_attribute_result {
 public:

  sai_rpc_sai_thrift_set_udf_group_attribute_result(const sai_rpc_sai_thrift_set_udf_group_attribute_result&);
  sai_rpc_sai_thrift_set_udf_group_attribute_result& operator=(const sai_rpc_sai_thrift_set_udf_group_attribute_result&);
  sai_rpc_sai_thrift_set_udf_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_udf_group_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_group_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_udf_group_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_udf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_udf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_udf_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_udf_group_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_udf_group_attribute_presult__isset;

class sai_rpc_sai_thrift_set_udf_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_udf_group_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_udf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_udf_group_attribute_args__isset {
  _sai_rpc_sai_thrift_get_udf_group_attribute_args__isset() : udf_group_oid(false), attr_list(false) {}
  bool udf_group_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_udf_group_attribute_args__isset;

class sai_rpc_sai_thrift_get_udf_group_attribute_args {
 public:

  sai_rpc_sai_thrift_get_udf_group_attribute_args(const sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  sai_rpc_sai_thrift_get_udf_group_attribute_args& operator=(const sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  sai_rpc_sai_thrift_get_udf_group_attribute_args() : udf_group_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_group_attribute_args() throw();
  sai_thrift_object_id_t udf_group_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_udf_group_attribute_args__isset __isset;

  void __set_udf_group_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_group_attribute_args & rhs) const
  {
    if (!(udf_group_oid == rhs.udf_group_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_udf_group_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* udf_group_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_group_attribute_result__isset {
  _sai_rpc_sai_thrift_get_udf_group_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_group_attribute_result__isset;

class sai_rpc_sai_thrift_get_udf_group_attribute_result {
 public:

  sai_rpc_sai_thrift_get_udf_group_attribute_result(const sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  sai_rpc_sai_thrift_get_udf_group_attribute_result& operator=(const sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  sai_rpc_sai_thrift_get_udf_group_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_udf_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_udf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_udf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_udf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset;

class sai_rpc_sai_thrift_get_udf_group_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_udf_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_virtual_router_args__isset {
  _sai_rpc_sai_thrift_create_virtual_router_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_virtual_router_args__isset;

class sai_rpc_sai_thrift_create_virtual_router_args {
 public:

  sai_rpc_sai_thrift_create_virtual_router_args(const sai_rpc_sai_thrift_create_virtual_router_args&);
  sai_rpc_sai_thrift_create_virtual_router_args& operator=(const sai_rpc_sai_thrift_create_virtual_router_args&);
  sai_rpc_sai_thrift_create_virtual_router_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_virtual_router_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_virtual_router_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_virtual_router_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_virtual_router_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_virtual_router_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_virtual_router_result__isset {
  _sai_rpc_sai_thrift_create_virtual_router_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_virtual_router_result__isset;

class sai_rpc_sai_thrift_create_virtual_router_result {
 public:

  sai_rpc_sai_thrift_create_virtual_router_result(const sai_rpc_sai_thrift_create_virtual_router_result&);
  sai_rpc_sai_thrift_create_virtual_router_result& operator=(const sai_rpc_sai_thrift_create_virtual_router_result&);
  sai_rpc_sai_thrift_create_virtual_router_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_virtual_router_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_virtual_router_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_virtual_router_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_virtual_router_presult__isset {
  _sai_rpc_sai_thrift_create_virtual_router_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_virtual_router_presult__isset;

class sai_rpc_sai_thrift_create_virtual_router_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_virtual_router_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_virtual_router_args__isset {
  _sai_rpc_sai_thrift_remove_virtual_router_args__isset() : virtual_router_oid(false) {}
  bool virtual_router_oid :1;
} _sai_rpc_sai_thrift_remove_virtual_router_args__isset;

class sai_rpc_sai_thrift_remove_virtual_router_args {
 public:

  sai_rpc_sai_thrift_remove_virtual_router_args(const sai_rpc_sai_thrift_remove_virtual_router_args&);
  sai_rpc_sai_thrift_remove_virtual_router_args& operator=(const sai_rpc_sai_thrift_remove_virtual_router_args&);
  sai_rpc_sai_thrift_remove_virtual_router_args() : virtual_router_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_virtual_router_args() throw();
  sai_thrift_object_id_t virtual_router_oid;

  _sai_rpc_sai_thrift_remove_virtual_router_args__isset __isset;

  void __set_virtual_router_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_virtual_router_args & rhs) const
  {
    if (!(virtual_router_oid == rhs.virtual_router_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_virtual_router_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_virtual_router_pargs() throw();
  const sai_thrift_object_id_t* virtual_router_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_virtual_router_result__isset {
  _sai_rpc_sai_thrift_remove_virtual_router_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_virtual_router_result__isset;

class sai_rpc_sai_thrift_remove_virtual_router_result {
 public:

  sai_rpc_sai_thrift_remove_virtual_router_result(const sai_rpc_sai_thrift_remove_virtual_router_result&);
  sai_rpc_sai_thrift_remove_virtual_router_result& operator=(const sai_rpc_sai_thrift_remove_virtual_router_result&);
  sai_rpc_sai_thrift_remove_virtual_router_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_virtual_router_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_virtual_router_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_virtual_router_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_virtual_router_presult__isset {
  _sai_rpc_sai_thrift_remove_virtual_router_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_virtual_router_presult__isset;

class sai_rpc_sai_thrift_remove_virtual_router_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_virtual_router_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset {
  _sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset() : virtual_router_oid(false), attr(false) {}
  bool virtual_router_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset;

class sai_rpc_sai_thrift_set_virtual_router_attribute_args {
 public:

  sai_rpc_sai_thrift_set_virtual_router_attribute_args(const sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  sai_rpc_sai_thrift_set_virtual_router_attribute_args& operator=(const sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  sai_rpc_sai_thrift_set_virtual_router_attribute_args() : virtual_router_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_virtual_router_attribute_args() throw();
  sai_thrift_object_id_t virtual_router_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset __isset;

  void __set_virtual_router_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_virtual_router_attribute_args & rhs) const
  {
    if (!(virtual_router_oid == rhs.virtual_router_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_virtual_router_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_virtual_router_attribute_pargs() throw();
  const sai_thrift_object_id_t* virtual_router_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset {
  _sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset;

class sai_rpc_sai_thrift_set_virtual_router_attribute_result {
 public:

  sai_rpc_sai_thrift_set_virtual_router_attribute_result(const sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  sai_rpc_sai_thrift_set_virtual_router_attribute_result& operator=(const sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  sai_rpc_sai_thrift_set_virtual_router_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_virtual_router_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_virtual_router_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset;

class sai_rpc_sai_thrift_set_virtual_router_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_virtual_router_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset {
  _sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset() : virtual_router_oid(false), attr_list(false) {}
  bool virtual_router_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset;

class sai_rpc_sai_thrift_get_virtual_router_attribute_args {
 public:

  sai_rpc_sai_thrift_get_virtual_router_attribute_args(const sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  sai_rpc_sai_thrift_get_virtual_router_attribute_args& operator=(const sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  sai_rpc_sai_thrift_get_virtual_router_attribute_args() : virtual_router_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_virtual_router_attribute_args() throw();
  sai_thrift_object_id_t virtual_router_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset __isset;

  void __set_virtual_router_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_virtual_router_attribute_args & rhs) const
  {
    if (!(virtual_router_oid == rhs.virtual_router_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_virtual_router_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_virtual_router_attribute_pargs() throw();
  const sai_thrift_object_id_t* virtual_router_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset {
  _sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset;

class sai_rpc_sai_thrift_get_virtual_router_attribute_result {
 public:

  sai_rpc_sai_thrift_get_virtual_router_attribute_result(const sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  sai_rpc_sai_thrift_get_virtual_router_attribute_result& operator=(const sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  sai_rpc_sai_thrift_get_virtual_router_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_virtual_router_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_virtual_router_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset;

class sai_rpc_sai_thrift_get_virtual_router_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_virtual_router_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_vlan_args__isset {
  _sai_rpc_sai_thrift_create_vlan_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_vlan_args__isset;

class sai_rpc_sai_thrift_create_vlan_args {
 public:

  sai_rpc_sai_thrift_create_vlan_args(const sai_rpc_sai_thrift_create_vlan_args&);
  sai_rpc_sai_thrift_create_vlan_args& operator=(const sai_rpc_sai_thrift_create_vlan_args&);
  sai_rpc_sai_thrift_create_vlan_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_vlan_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_vlan_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_vlan_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_vlan_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_vlan_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vlan_result__isset {
  _sai_rpc_sai_thrift_create_vlan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vlan_result__isset;

class sai_rpc_sai_thrift_create_vlan_result {
 public:

  sai_rpc_sai_thrift_create_vlan_result(const sai_rpc_sai_thrift_create_vlan_result&);
  sai_rpc_sai_thrift_create_vlan_result& operator=(const sai_rpc_sai_thrift_create_vlan_result&);
  sai_rpc_sai_thrift_create_vlan_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_vlan_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vlan_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_vlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vlan_presult__isset {
  _sai_rpc_sai_thrift_create_vlan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vlan_presult__isset;

class sai_rpc_sai_thrift_create_vlan_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_vlan_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_args__isset {
  _sai_rpc_sai_thrift_remove_vlan_args__isset() : vlan_oid(false) {}
  bool vlan_oid :1;
} _sai_rpc_sai_thrift_remove_vlan_args__isset;

class sai_rpc_sai_thrift_remove_vlan_args {
 public:

  sai_rpc_sai_thrift_remove_vlan_args(const sai_rpc_sai_thrift_remove_vlan_args&);
  sai_rpc_sai_thrift_remove_vlan_args& operator=(const sai_rpc_sai_thrift_remove_vlan_args&);
  sai_rpc_sai_thrift_remove_vlan_args() : vlan_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_vlan_args() throw();
  sai_thrift_object_id_t vlan_oid;

  _sai_rpc_sai_thrift_remove_vlan_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_vlan_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_vlan_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vlan_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_result__isset {
  _sai_rpc_sai_thrift_remove_vlan_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vlan_result__isset;

class sai_rpc_sai_thrift_remove_vlan_result {
 public:

  sai_rpc_sai_thrift_remove_vlan_result(const sai_rpc_sai_thrift_remove_vlan_result&);
  sai_rpc_sai_thrift_remove_vlan_result& operator=(const sai_rpc_sai_thrift_remove_vlan_result&);
  sai_rpc_sai_thrift_remove_vlan_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_vlan_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vlan_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_vlan_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_presult__isset {
  _sai_rpc_sai_thrift_remove_vlan_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vlan_presult__isset;

class sai_rpc_sai_thrift_remove_vlan_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vlan_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_vlan_attribute_args__isset {
  _sai_rpc_sai_thrift_set_vlan_attribute_args__isset() : vlan_oid(false), attr(false) {}
  bool vlan_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_vlan_attribute_args__isset;

class sai_rpc_sai_thrift_set_vlan_attribute_args {
 public:

  sai_rpc_sai_thrift_set_vlan_attribute_args(const sai_rpc_sai_thrift_set_vlan_attribute_args&);
  sai_rpc_sai_thrift_set_vlan_attribute_args& operator=(const sai_rpc_sai_thrift_set_vlan_attribute_args&);
  sai_rpc_sai_thrift_set_vlan_attribute_args() : vlan_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_vlan_attribute_args() throw();
  sai_thrift_object_id_t vlan_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_vlan_attribute_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_vlan_attribute_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_vlan_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_vlan_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vlan_attribute_result__isset {
  _sai_rpc_sai_thrift_set_vlan_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vlan_attribute_result__isset;

class sai_rpc_sai_thrift_set_vlan_attribute_result {
 public:

  sai_rpc_sai_thrift_set_vlan_attribute_result(const sai_rpc_sai_thrift_set_vlan_attribute_result&);
  sai_rpc_sai_thrift_set_vlan_attribute_result& operator=(const sai_rpc_sai_thrift_set_vlan_attribute_result&);
  sai_rpc_sai_thrift_set_vlan_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_vlan_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vlan_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_vlan_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vlan_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_vlan_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vlan_attribute_presult__isset;

class sai_rpc_sai_thrift_set_vlan_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_vlan_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vlan_attribute_args__isset {
  _sai_rpc_sai_thrift_get_vlan_attribute_args__isset() : vlan_oid(false), attr_list(false) {}
  bool vlan_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_vlan_attribute_args__isset;

class sai_rpc_sai_thrift_get_vlan_attribute_args {
 public:

  sai_rpc_sai_thrift_get_vlan_attribute_args(const sai_rpc_sai_thrift_get_vlan_attribute_args&);
  sai_rpc_sai_thrift_get_vlan_attribute_args& operator=(const sai_rpc_sai_thrift_get_vlan_attribute_args&);
  sai_rpc_sai_thrift_get_vlan_attribute_args() : vlan_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_attribute_args() throw();
  sai_thrift_object_id_t vlan_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_vlan_attribute_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_attribute_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vlan_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_attribute_result__isset {
  _sai_rpc_sai_thrift_get_vlan_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_attribute_result__isset;

class sai_rpc_sai_thrift_get_vlan_attribute_result {
 public:

  sai_rpc_sai_thrift_get_vlan_attribute_result(const sai_rpc_sai_thrift_get_vlan_attribute_result&);
  sai_rpc_sai_thrift_get_vlan_attribute_result& operator=(const sai_rpc_sai_thrift_get_vlan_attribute_result&);
  sai_rpc_sai_thrift_get_vlan_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_vlan_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_attribute_presult__isset;

class sai_rpc_sai_thrift_get_vlan_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_vlan_member_args__isset {
  _sai_rpc_sai_thrift_create_vlan_member_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_vlan_member_args__isset;

class sai_rpc_sai_thrift_create_vlan_member_args {
 public:

  sai_rpc_sai_thrift_create_vlan_member_args(const sai_rpc_sai_thrift_create_vlan_member_args&);
  sai_rpc_sai_thrift_create_vlan_member_args& operator=(const sai_rpc_sai_thrift_create_vlan_member_args&);
  sai_rpc_sai_thrift_create_vlan_member_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_vlan_member_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_vlan_member_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_vlan_member_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_vlan_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_vlan_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vlan_member_result__isset {
  _sai_rpc_sai_thrift_create_vlan_member_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vlan_member_result__isset;

class sai_rpc_sai_thrift_create_vlan_member_result {
 public:

  sai_rpc_sai_thrift_create_vlan_member_result(const sai_rpc_sai_thrift_create_vlan_member_result&);
  sai_rpc_sai_thrift_create_vlan_member_result& operator=(const sai_rpc_sai_thrift_create_vlan_member_result&);
  sai_rpc_sai_thrift_create_vlan_member_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_vlan_member_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vlan_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_vlan_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_vlan_member_presult__isset {
  _sai_rpc_sai_thrift_create_vlan_member_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_vlan_member_presult__isset;

class sai_rpc_sai_thrift_create_vlan_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_vlan_member_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_member_args__isset {
  _sai_rpc_sai_thrift_remove_vlan_member_args__isset() : vlan_member_oid(false) {}
  bool vlan_member_oid :1;
} _sai_rpc_sai_thrift_remove_vlan_member_args__isset;

class sai_rpc_sai_thrift_remove_vlan_member_args {
 public:

  sai_rpc_sai_thrift_remove_vlan_member_args(const sai_rpc_sai_thrift_remove_vlan_member_args&);
  sai_rpc_sai_thrift_remove_vlan_member_args& operator=(const sai_rpc_sai_thrift_remove_vlan_member_args&);
  sai_rpc_sai_thrift_remove_vlan_member_args() : vlan_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_vlan_member_args() throw();
  sai_thrift_object_id_t vlan_member_oid;

  _sai_rpc_sai_thrift_remove_vlan_member_args__isset __isset;

  void __set_vlan_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_vlan_member_args & rhs) const
  {
    if (!(vlan_member_oid == rhs.vlan_member_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_vlan_member_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vlan_member_pargs() throw();
  const sai_thrift_object_id_t* vlan_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_member_result__isset {
  _sai_rpc_sai_thrift_remove_vlan_member_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vlan_member_result__isset;

class sai_rpc_sai_thrift_remove_vlan_member_result {
 public:

  sai_rpc_sai_thrift_remove_vlan_member_result(const sai_rpc_sai_thrift_remove_vlan_member_result&);
  sai_rpc_sai_thrift_remove_vlan_member_result& operator=(const sai_rpc_sai_thrift_remove_vlan_member_result&);
  sai_rpc_sai_thrift_remove_vlan_member_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_vlan_member_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vlan_member_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_vlan_member_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_vlan_member_presult__isset {
  _sai_rpc_sai_thrift_remove_vlan_member_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_vlan_member_presult__isset;

class sai_rpc_sai_thrift_remove_vlan_member_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_vlan_member_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset {
  _sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset() : vlan_member_oid(false), attr(false) {}
  bool vlan_member_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset;

class sai_rpc_sai_thrift_set_vlan_member_attribute_args {
 public:

  sai_rpc_sai_thrift_set_vlan_member_attribute_args(const sai_rpc_sai_thrift_set_vlan_member_attribute_args&);
  sai_rpc_sai_thrift_set_vlan_member_attribute_args& operator=(const sai_rpc_sai_thrift_set_vlan_member_attribute_args&);
  sai_rpc_sai_thrift_set_vlan_member_attribute_args() : vlan_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_vlan_member_attribute_args() throw();
  sai_thrift_object_id_t vlan_member_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_vlan_member_attribute_args__isset __isset;

  void __set_vlan_member_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_vlan_member_attribute_args & rhs) const
  {
    if (!(vlan_member_oid == rhs.vlan_member_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vlan_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vlan_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_vlan_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_vlan_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_member_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset {
  _sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset;

class sai_rpc_sai_thrift_set_vlan_member_attribute_result {
 public:

  sai_rpc_sai_thrift_set_vlan_member_attribute_result(const sai_rpc_sai_thrift_set_vlan_member_attribute_result&);
  sai_rpc_sai_thrift_set_vlan_member_attribute_result& operator=(const sai_rpc_sai_thrift_set_vlan_member_attribute_result&);
  sai_rpc_sai_thrift_set_vlan_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_vlan_member_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vlan_member_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_vlan_member_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_vlan_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_vlan_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset;

class sai_rpc_sai_thrift_set_vlan_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_vlan_member_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_vlan_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset {
  _sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset() : vlan_member_oid(false), attr_list(false) {}
  bool vlan_member_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset;

class sai_rpc_sai_thrift_get_vlan_member_attribute_args {
 public:

  sai_rpc_sai_thrift_get_vlan_member_attribute_args(const sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  sai_rpc_sai_thrift_get_vlan_member_attribute_args& operator=(const sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  sai_rpc_sai_thrift_get_vlan_member_attribute_args() : vlan_member_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_member_attribute_args() throw();
  sai_thrift_object_id_t vlan_member_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset __isset;

  void __set_vlan_member_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_member_attribute_args & rhs) const
  {
    if (!(vlan_member_oid == rhs.vlan_member_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vlan_member_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_member_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset {
  _sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset;

class sai_rpc_sai_thrift_get_vlan_member_attribute_result {
 public:

  sai_rpc_sai_thrift_get_vlan_member_attribute_result(const sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  sai_rpc_sai_thrift_get_vlan_member_attribute_result& operator=(const sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  sai_rpc_sai_thrift_get_vlan_member_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset;

class sai_rpc_sai_thrift_get_vlan_member_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_args__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_args__isset() : vlan_oid(false), counter_ids(false) {}
  bool vlan_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_get_vlan_stats_args__isset;

class sai_rpc_sai_thrift_get_vlan_stats_args {
 public:

  sai_rpc_sai_thrift_get_vlan_stats_args(const sai_rpc_sai_thrift_get_vlan_stats_args&);
  sai_rpc_sai_thrift_get_vlan_stats_args& operator=(const sai_rpc_sai_thrift_get_vlan_stats_args&);
  sai_rpc_sai_thrift_get_vlan_stats_args() : vlan_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_stats_args() throw();
  sai_thrift_object_id_t vlan_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_get_vlan_stats_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_stats_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vlan_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_stats_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_result__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_stats_result__isset;

class sai_rpc_sai_thrift_get_vlan_stats_result {
 public:

  sai_rpc_sai_thrift_get_vlan_stats_result(const sai_rpc_sai_thrift_get_vlan_stats_result&);
  sai_rpc_sai_thrift_get_vlan_stats_result& operator=(const sai_rpc_sai_thrift_get_vlan_stats_result&);
  sai_rpc_sai_thrift_get_vlan_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_presult__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_stats_presult__isset;

class sai_rpc_sai_thrift_get_vlan_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset() : vlan_oid(false), counter_ids(false), mode(false) {}
  bool vlan_oid :1;
  bool counter_ids :1;
  bool mode :1;
} _sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset;

class sai_rpc_sai_thrift_get_vlan_stats_ext_args {
 public:

  sai_rpc_sai_thrift_get_vlan_stats_ext_args(const sai_rpc_sai_thrift_get_vlan_stats_ext_args&);
  sai_rpc_sai_thrift_get_vlan_stats_ext_args& operator=(const sai_rpc_sai_thrift_get_vlan_stats_ext_args&);
  sai_rpc_sai_thrift_get_vlan_stats_ext_args() : vlan_oid(0), mode(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_stats_ext_args() throw();
  sai_thrift_object_id_t vlan_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;
  sai_thrift_stats_mode_t mode;

  _sai_rpc_sai_thrift_get_vlan_stats_ext_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  void __set_mode(const sai_thrift_stats_mode_t val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_stats_ext_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_stats_ext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_stats_ext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_vlan_stats_ext_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_stats_ext_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;
  const sai_thrift_stats_mode_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset;

class sai_rpc_sai_thrift_get_vlan_stats_ext_result {
 public:

  sai_rpc_sai_thrift_get_vlan_stats_ext_result(const sai_rpc_sai_thrift_get_vlan_stats_ext_result&);
  sai_rpc_sai_thrift_get_vlan_stats_ext_result& operator=(const sai_rpc_sai_thrift_get_vlan_stats_ext_result&);
  sai_rpc_sai_thrift_get_vlan_stats_ext_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_vlan_stats_ext_result() throw();
  std::vector<sai_thrift_uint64_t>  success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_stats_ext_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_vlan_stats_ext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_vlan_stats_ext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_vlan_stats_ext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset {
  _sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset;

class sai_rpc_sai_thrift_get_vlan_stats_ext_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_vlan_stats_ext_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_vlan_stats_ext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_clear_vlan_stats_args__isset {
  _sai_rpc_sai_thrift_clear_vlan_stats_args__isset() : vlan_oid(false), counter_ids(false) {}
  bool vlan_oid :1;
  bool counter_ids :1;
} _sai_rpc_sai_thrift_clear_vlan_stats_args__isset;

class sai_rpc_sai_thrift_clear_vlan_stats_args {
 public:

  sai_rpc_sai_thrift_clear_vlan_stats_args(const sai_rpc_sai_thrift_clear_vlan_stats_args&);
  sai_rpc_sai_thrift_clear_vlan_stats_args& operator=(const sai_rpc_sai_thrift_clear_vlan_stats_args&);
  sai_rpc_sai_thrift_clear_vlan_stats_args() : vlan_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_clear_vlan_stats_args() throw();
  sai_thrift_object_id_t vlan_oid;
  std::vector<sai_thrift_stat_id_t>  counter_ids;

  _sai_rpc_sai_thrift_clear_vlan_stats_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_stat_id_t> & val);

  bool operator == (const sai_rpc_sai_thrift_clear_vlan_stats_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_vlan_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_vlan_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_clear_vlan_stats_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_clear_vlan_stats_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;
  const std::vector<sai_thrift_stat_id_t> * counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_vlan_stats_result__isset {
  _sai_rpc_sai_thrift_clear_vlan_stats_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_vlan_stats_result__isset;

class sai_rpc_sai_thrift_clear_vlan_stats_result {
 public:

  sai_rpc_sai_thrift_clear_vlan_stats_result(const sai_rpc_sai_thrift_clear_vlan_stats_result&);
  sai_rpc_sai_thrift_clear_vlan_stats_result& operator=(const sai_rpc_sai_thrift_clear_vlan_stats_result&);
  sai_rpc_sai_thrift_clear_vlan_stats_result() {
  }

  virtual ~sai_rpc_sai_thrift_clear_vlan_stats_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_vlan_stats_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_clear_vlan_stats_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_clear_vlan_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_clear_vlan_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_clear_vlan_stats_presult__isset {
  _sai_rpc_sai_thrift_clear_vlan_stats_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_clear_vlan_stats_presult__isset;

class sai_rpc_sai_thrift_clear_vlan_stats_presult {
 public:


  virtual ~sai_rpc_sai_thrift_clear_vlan_stats_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_clear_vlan_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_create_wred_args__isset {
  _sai_rpc_sai_thrift_create_wred_args__isset() : attr_list(false) {}
  bool attr_list :1;
} _sai_rpc_sai_thrift_create_wred_args__isset;

class sai_rpc_sai_thrift_create_wred_args {
 public:

  sai_rpc_sai_thrift_create_wred_args(const sai_rpc_sai_thrift_create_wred_args&);
  sai_rpc_sai_thrift_create_wred_args& operator=(const sai_rpc_sai_thrift_create_wred_args&);
  sai_rpc_sai_thrift_create_wred_args() {
  }

  virtual ~sai_rpc_sai_thrift_create_wred_args() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;

  _sai_rpc_sai_thrift_create_wred_args__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_rpc_sai_thrift_create_wred_args & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_wred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_wred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_create_wred_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_create_wred_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_wred_result__isset {
  _sai_rpc_sai_thrift_create_wred_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_wred_result__isset;

class sai_rpc_sai_thrift_create_wred_result {
 public:

  sai_rpc_sai_thrift_create_wred_result(const sai_rpc_sai_thrift_create_wred_result&);
  sai_rpc_sai_thrift_create_wred_result& operator=(const sai_rpc_sai_thrift_create_wred_result&);
  sai_rpc_sai_thrift_create_wred_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_create_wred_result() throw();
  sai_thrift_object_id_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_wred_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_create_wred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_create_wred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_create_wred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_create_wred_presult__isset {
  _sai_rpc_sai_thrift_create_wred_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_create_wred_presult__isset;

class sai_rpc_sai_thrift_create_wred_presult {
 public:


  virtual ~sai_rpc_sai_thrift_create_wred_presult() throw();
  sai_thrift_object_id_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_create_wred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_remove_wred_args__isset {
  _sai_rpc_sai_thrift_remove_wred_args__isset() : wred_oid(false) {}
  bool wred_oid :1;
} _sai_rpc_sai_thrift_remove_wred_args__isset;

class sai_rpc_sai_thrift_remove_wred_args {
 public:

  sai_rpc_sai_thrift_remove_wred_args(const sai_rpc_sai_thrift_remove_wred_args&);
  sai_rpc_sai_thrift_remove_wred_args& operator=(const sai_rpc_sai_thrift_remove_wred_args&);
  sai_rpc_sai_thrift_remove_wred_args() : wred_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_remove_wred_args() throw();
  sai_thrift_object_id_t wred_oid;

  _sai_rpc_sai_thrift_remove_wred_args__isset __isset;

  void __set_wred_oid(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_remove_wred_args & rhs) const
  {
    if (!(wred_oid == rhs.wred_oid))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_wred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_wred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_remove_wred_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_remove_wred_pargs() throw();
  const sai_thrift_object_id_t* wred_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_wred_result__isset {
  _sai_rpc_sai_thrift_remove_wred_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_wred_result__isset;

class sai_rpc_sai_thrift_remove_wred_result {
 public:

  sai_rpc_sai_thrift_remove_wred_result(const sai_rpc_sai_thrift_remove_wred_result&);
  sai_rpc_sai_thrift_remove_wred_result& operator=(const sai_rpc_sai_thrift_remove_wred_result&);
  sai_rpc_sai_thrift_remove_wred_result() {
  }

  virtual ~sai_rpc_sai_thrift_remove_wred_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_wred_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_remove_wred_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_remove_wred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_remove_wred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_remove_wred_presult__isset {
  _sai_rpc_sai_thrift_remove_wred_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_remove_wred_presult__isset;

class sai_rpc_sai_thrift_remove_wred_presult {
 public:


  virtual ~sai_rpc_sai_thrift_remove_wred_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_remove_wred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_set_wred_attribute_args__isset {
  _sai_rpc_sai_thrift_set_wred_attribute_args__isset() : wred_oid(false), attr(false) {}
  bool wred_oid :1;
  bool attr :1;
} _sai_rpc_sai_thrift_set_wred_attribute_args__isset;

class sai_rpc_sai_thrift_set_wred_attribute_args {
 public:

  sai_rpc_sai_thrift_set_wred_attribute_args(const sai_rpc_sai_thrift_set_wred_attribute_args&);
  sai_rpc_sai_thrift_set_wred_attribute_args& operator=(const sai_rpc_sai_thrift_set_wred_attribute_args&);
  sai_rpc_sai_thrift_set_wred_attribute_args() : wred_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_set_wred_attribute_args() throw();
  sai_thrift_object_id_t wred_oid;
  sai_thrift_attribute_t attr;

  _sai_rpc_sai_thrift_set_wred_attribute_args__isset __isset;

  void __set_wred_oid(const sai_thrift_object_id_t val);

  void __set_attr(const sai_thrift_attribute_t& val);

  bool operator == (const sai_rpc_sai_thrift_set_wred_attribute_args & rhs) const
  {
    if (!(wred_oid == rhs.wred_oid))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_wred_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_wred_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_set_wred_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_set_wred_attribute_pargs() throw();
  const sai_thrift_object_id_t* wred_oid;
  const sai_thrift_attribute_t* attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_wred_attribute_result__isset {
  _sai_rpc_sai_thrift_set_wred_attribute_result__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_wred_attribute_result__isset;

class sai_rpc_sai_thrift_set_wred_attribute_result {
 public:

  sai_rpc_sai_thrift_set_wred_attribute_result(const sai_rpc_sai_thrift_set_wred_attribute_result&);
  sai_rpc_sai_thrift_set_wred_attribute_result& operator=(const sai_rpc_sai_thrift_set_wred_attribute_result&);
  sai_rpc_sai_thrift_set_wred_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_set_wred_attribute_result() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_wred_attribute_result__isset __isset;

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_set_wred_attribute_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_set_wred_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_set_wred_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_set_wred_attribute_presult__isset {
  _sai_rpc_sai_thrift_set_wred_attribute_presult__isset() : e(false) {}
  bool e :1;
} _sai_rpc_sai_thrift_set_wred_attribute_presult__isset;

class sai_rpc_sai_thrift_set_wred_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_set_wred_attribute_presult() throw();
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_set_wred_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_get_wred_attribute_args__isset {
  _sai_rpc_sai_thrift_get_wred_attribute_args__isset() : wred_oid(false), attr_list(false) {}
  bool wred_oid :1;
  bool attr_list :1;
} _sai_rpc_sai_thrift_get_wred_attribute_args__isset;

class sai_rpc_sai_thrift_get_wred_attribute_args {
 public:

  sai_rpc_sai_thrift_get_wred_attribute_args(const sai_rpc_sai_thrift_get_wred_attribute_args&);
  sai_rpc_sai_thrift_get_wred_attribute_args& operator=(const sai_rpc_sai_thrift_get_wred_attribute_args&);
  sai_rpc_sai_thrift_get_wred_attribute_args() : wred_oid(0) {
  }

  virtual ~sai_rpc_sai_thrift_get_wred_attribute_args() throw();
  sai_thrift_object_id_t wred_oid;
  sai_thrift_attribute_list_t attr_list;

  _sai_rpc_sai_thrift_get_wred_attribute_args__isset __isset;

  void __set_wred_oid(const sai_thrift_object_id_t val);

  void __set_attr_list(const sai_thrift_attribute_list_t& val);

  bool operator == (const sai_rpc_sai_thrift_get_wred_attribute_args & rhs) const
  {
    if (!(wred_oid == rhs.wred_oid))
      return false;
    if (!(attr_list == rhs.attr_list))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_wred_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_wred_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_get_wred_attribute_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_get_wred_attribute_pargs() throw();
  const sai_thrift_object_id_t* wred_oid;
  const sai_thrift_attribute_list_t* attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_wred_attribute_result__isset {
  _sai_rpc_sai_thrift_get_wred_attribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_wred_attribute_result__isset;

class sai_rpc_sai_thrift_get_wred_attribute_result {
 public:

  sai_rpc_sai_thrift_get_wred_attribute_result(const sai_rpc_sai_thrift_get_wred_attribute_result&);
  sai_rpc_sai_thrift_get_wred_attribute_result& operator=(const sai_rpc_sai_thrift_get_wred_attribute_result&);
  sai_rpc_sai_thrift_get_wred_attribute_result() {
  }

  virtual ~sai_rpc_sai_thrift_get_wred_attribute_result() throw();
  sai_thrift_attribute_list_t success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_wred_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  void __set_e(const sai_thrift_exception& val);

  bool operator == (const sai_rpc_sai_thrift_get_wred_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_get_wred_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_get_wred_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_get_wred_attribute_presult__isset {
  _sai_rpc_sai_thrift_get_wred_attribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _sai_rpc_sai_thrift_get_wred_attribute_presult__isset;

class sai_rpc_sai_thrift_get_wred_attribute_presult {
 public:


  virtual ~sai_rpc_sai_thrift_get_wred_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;
  sai_thrift_exception e;

  _sai_rpc_sai_thrift_get_wred_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_query_attribute_enum_values_capability_args__isset {
  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_args__isset() : object_type(false), attr_id(false), caps_count(false) {}
  bool object_type :1;
  bool attr_id :1;
  bool caps_count :1;
} _sai_rpc_sai_thrift_query_attribute_enum_values_capability_args__isset;

class sai_rpc_sai_thrift_query_attribute_enum_values_capability_args {
 public:

  sai_rpc_sai_thrift_query_attribute_enum_values_capability_args(const sai_rpc_sai_thrift_query_attribute_enum_values_capability_args&);
  sai_rpc_sai_thrift_query_attribute_enum_values_capability_args& operator=(const sai_rpc_sai_thrift_query_attribute_enum_values_capability_args&);
  sai_rpc_sai_thrift_query_attribute_enum_values_capability_args() : object_type(0), attr_id(0), caps_count(0) {
  }

  virtual ~sai_rpc_sai_thrift_query_attribute_enum_values_capability_args() throw();
  sai_thrift_object_type_t object_type;
  sai_thrift_attr_id_t attr_id;
  int32_t caps_count;

  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_args__isset __isset;

  void __set_object_type(const sai_thrift_object_type_t val);

  void __set_attr_id(const sai_thrift_attr_id_t val);

  void __set_caps_count(const int32_t val);

  bool operator == (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_args & rhs) const
  {
    if (!(object_type == rhs.object_type))
      return false;
    if (!(attr_id == rhs.attr_id))
      return false;
    if (!(caps_count == rhs.caps_count))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_query_attribute_enum_values_capability_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_query_attribute_enum_values_capability_pargs() throw();
  const sai_thrift_object_type_t* object_type;
  const sai_thrift_attr_id_t* attr_id;
  const int32_t* caps_count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_query_attribute_enum_values_capability_result__isset {
  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_result__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_query_attribute_enum_values_capability_result__isset;

class sai_rpc_sai_thrift_query_attribute_enum_values_capability_result {
 public:

  sai_rpc_sai_thrift_query_attribute_enum_values_capability_result(const sai_rpc_sai_thrift_query_attribute_enum_values_capability_result&);
  sai_rpc_sai_thrift_query_attribute_enum_values_capability_result& operator=(const sai_rpc_sai_thrift_query_attribute_enum_values_capability_result&);
  sai_rpc_sai_thrift_query_attribute_enum_values_capability_result() {
  }

  virtual ~sai_rpc_sai_thrift_query_attribute_enum_values_capability_result() throw();
  std::vector<int32_t>  success;

  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_query_attribute_enum_values_capability_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult__isset {
  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult__isset;

class sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult {
 public:


  virtual ~sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult() throw();
  std::vector<int32_t> * success;

  _sai_rpc_sai_thrift_query_attribute_enum_values_capability_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_object_type_get_availability_args__isset {
  _sai_rpc_sai_thrift_object_type_get_availability_args__isset() : object_type(false), attr_id(false), attr_type(false) {}
  bool object_type :1;
  bool attr_id :1;
  bool attr_type :1;
} _sai_rpc_sai_thrift_object_type_get_availability_args__isset;

class sai_rpc_sai_thrift_object_type_get_availability_args {
 public:

  sai_rpc_sai_thrift_object_type_get_availability_args(const sai_rpc_sai_thrift_object_type_get_availability_args&);
  sai_rpc_sai_thrift_object_type_get_availability_args& operator=(const sai_rpc_sai_thrift_object_type_get_availability_args&);
  sai_rpc_sai_thrift_object_type_get_availability_args() : object_type(0), attr_id(0), attr_type(0) {
  }

  virtual ~sai_rpc_sai_thrift_object_type_get_availability_args() throw();
  sai_thrift_object_type_t object_type;
  sai_thrift_attr_id_t attr_id;
  int32_t attr_type;

  _sai_rpc_sai_thrift_object_type_get_availability_args__isset __isset;

  void __set_object_type(const sai_thrift_object_type_t val);

  void __set_attr_id(const sai_thrift_attr_id_t val);

  void __set_attr_type(const int32_t val);

  bool operator == (const sai_rpc_sai_thrift_object_type_get_availability_args & rhs) const
  {
    if (!(object_type == rhs.object_type))
      return false;
    if (!(attr_id == rhs.attr_id))
      return false;
    if (!(attr_type == rhs.attr_type))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_object_type_get_availability_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_object_type_get_availability_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_object_type_get_availability_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_object_type_get_availability_pargs() throw();
  const sai_thrift_object_type_t* object_type;
  const sai_thrift_attr_id_t* attr_id;
  const int32_t* attr_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_object_type_get_availability_result__isset {
  _sai_rpc_sai_thrift_object_type_get_availability_result__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_object_type_get_availability_result__isset;

class sai_rpc_sai_thrift_object_type_get_availability_result {
 public:

  sai_rpc_sai_thrift_object_type_get_availability_result(const sai_rpc_sai_thrift_object_type_get_availability_result&);
  sai_rpc_sai_thrift_object_type_get_availability_result& operator=(const sai_rpc_sai_thrift_object_type_get_availability_result&);
  sai_rpc_sai_thrift_object_type_get_availability_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_object_type_get_availability_result() throw();
  int64_t success;

  _sai_rpc_sai_thrift_object_type_get_availability_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const sai_rpc_sai_thrift_object_type_get_availability_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_object_type_get_availability_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_object_type_get_availability_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_object_type_get_availability_presult__isset {
  _sai_rpc_sai_thrift_object_type_get_availability_presult__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_object_type_get_availability_presult__isset;

class sai_rpc_sai_thrift_object_type_get_availability_presult {
 public:


  virtual ~sai_rpc_sai_thrift_object_type_get_availability_presult() throw();
  int64_t* success;

  _sai_rpc_sai_thrift_object_type_get_availability_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_switch_id_query_args__isset {
  _sai_rpc_sai_thrift_switch_id_query_args__isset() : object_id(false) {}
  bool object_id :1;
} _sai_rpc_sai_thrift_switch_id_query_args__isset;

class sai_rpc_sai_thrift_switch_id_query_args {
 public:

  sai_rpc_sai_thrift_switch_id_query_args(const sai_rpc_sai_thrift_switch_id_query_args&);
  sai_rpc_sai_thrift_switch_id_query_args& operator=(const sai_rpc_sai_thrift_switch_id_query_args&);
  sai_rpc_sai_thrift_switch_id_query_args() : object_id(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_id_query_args() throw();
  sai_thrift_object_id_t object_id;

  _sai_rpc_sai_thrift_switch_id_query_args__isset __isset;

  void __set_object_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_switch_id_query_args & rhs) const
  {
    if (!(object_id == rhs.object_id))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_id_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_id_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_switch_id_query_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_switch_id_query_pargs() throw();
  const sai_thrift_object_id_t* object_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_id_query_result__isset {
  _sai_rpc_sai_thrift_switch_id_query_result__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_switch_id_query_result__isset;

class sai_rpc_sai_thrift_switch_id_query_result {
 public:

  sai_rpc_sai_thrift_switch_id_query_result(const sai_rpc_sai_thrift_switch_id_query_result&);
  sai_rpc_sai_thrift_switch_id_query_result& operator=(const sai_rpc_sai_thrift_switch_id_query_result&);
  sai_rpc_sai_thrift_switch_id_query_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_switch_id_query_result() throw();
  sai_thrift_object_id_t success;

  _sai_rpc_sai_thrift_switch_id_query_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_switch_id_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_switch_id_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_switch_id_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_switch_id_query_presult__isset {
  _sai_rpc_sai_thrift_switch_id_query_presult__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_switch_id_query_presult__isset;

class sai_rpc_sai_thrift_switch_id_query_presult {
 public:


  virtual ~sai_rpc_sai_thrift_switch_id_query_presult() throw();
  sai_thrift_object_id_t* success;

  _sai_rpc_sai_thrift_switch_id_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sai_rpc_sai_thrift_object_type_query_args__isset {
  _sai_rpc_sai_thrift_object_type_query_args__isset() : object_id(false) {}
  bool object_id :1;
} _sai_rpc_sai_thrift_object_type_query_args__isset;

class sai_rpc_sai_thrift_object_type_query_args {
 public:

  sai_rpc_sai_thrift_object_type_query_args(const sai_rpc_sai_thrift_object_type_query_args&);
  sai_rpc_sai_thrift_object_type_query_args& operator=(const sai_rpc_sai_thrift_object_type_query_args&);
  sai_rpc_sai_thrift_object_type_query_args() : object_id(0) {
  }

  virtual ~sai_rpc_sai_thrift_object_type_query_args() throw();
  sai_thrift_object_id_t object_id;

  _sai_rpc_sai_thrift_object_type_query_args__isset __isset;

  void __set_object_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_rpc_sai_thrift_object_type_query_args & rhs) const
  {
    if (!(object_id == rhs.object_id))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_object_type_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_object_type_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_object_type_query_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_object_type_query_pargs() throw();
  const sai_thrift_object_id_t* object_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_object_type_query_result__isset {
  _sai_rpc_sai_thrift_object_type_query_result__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_object_type_query_result__isset;

class sai_rpc_sai_thrift_object_type_query_result {
 public:

  sai_rpc_sai_thrift_object_type_query_result(const sai_rpc_sai_thrift_object_type_query_result&);
  sai_rpc_sai_thrift_object_type_query_result& operator=(const sai_rpc_sai_thrift_object_type_query_result&);
  sai_rpc_sai_thrift_object_type_query_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_object_type_query_result() throw();
  sai_thrift_object_type_t success;

  _sai_rpc_sai_thrift_object_type_query_result__isset __isset;

  void __set_success(const sai_thrift_object_type_t val);

  bool operator == (const sai_rpc_sai_thrift_object_type_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_object_type_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_object_type_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_object_type_query_presult__isset {
  _sai_rpc_sai_thrift_object_type_query_presult__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_object_type_query_presult__isset;

class sai_rpc_sai_thrift_object_type_query_presult {
 public:


  virtual ~sai_rpc_sai_thrift_object_type_query_presult() throw();
  sai_thrift_object_type_t* success;

  _sai_rpc_sai_thrift_object_type_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sai_rpc_sai_thrift_api_uninitialize_args {
 public:

  sai_rpc_sai_thrift_api_uninitialize_args(const sai_rpc_sai_thrift_api_uninitialize_args&);
  sai_rpc_sai_thrift_api_uninitialize_args& operator=(const sai_rpc_sai_thrift_api_uninitialize_args&);
  sai_rpc_sai_thrift_api_uninitialize_args() {
  }

  virtual ~sai_rpc_sai_thrift_api_uninitialize_args() throw();

  bool operator == (const sai_rpc_sai_thrift_api_uninitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_api_uninitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_api_uninitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sai_rpc_sai_thrift_api_uninitialize_pargs {
 public:


  virtual ~sai_rpc_sai_thrift_api_uninitialize_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_api_uninitialize_result__isset {
  _sai_rpc_sai_thrift_api_uninitialize_result__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_api_uninitialize_result__isset;

class sai_rpc_sai_thrift_api_uninitialize_result {
 public:

  sai_rpc_sai_thrift_api_uninitialize_result(const sai_rpc_sai_thrift_api_uninitialize_result&);
  sai_rpc_sai_thrift_api_uninitialize_result& operator=(const sai_rpc_sai_thrift_api_uninitialize_result&);
  sai_rpc_sai_thrift_api_uninitialize_result() : success(0) {
  }

  virtual ~sai_rpc_sai_thrift_api_uninitialize_result() throw();
  sai_thrift_status_t success;

  _sai_rpc_sai_thrift_api_uninitialize_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const sai_rpc_sai_thrift_api_uninitialize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sai_rpc_sai_thrift_api_uninitialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_rpc_sai_thrift_api_uninitialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sai_rpc_sai_thrift_api_uninitialize_presult__isset {
  _sai_rpc_sai_thrift_api_uninitialize_presult__isset() : success(false) {}
  bool success :1;
} _sai_rpc_sai_thrift_api_uninitialize_presult__isset;

class sai_rpc_sai_thrift_api_uninitialize_presult {
 public:


  virtual ~sai_rpc_sai_thrift_api_uninitialize_presult() throw();
  sai_thrift_status_t* success;

  _sai_rpc_sai_thrift_api_uninitialize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class sai_rpcClient : virtual public sai_rpcIf {
 public:
  sai_rpcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  sai_rpcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table();
  void sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid);
  void send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid);
  void recv_sai_thrift_remove_acl_table();
  void sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_attribute();
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_entry();
  void sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid);
  void send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid);
  void recv_sai_thrift_remove_acl_entry();
  void sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_entry_attribute();
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_counter();
  void sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid);
  void send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid);
  void recv_sai_thrift_remove_acl_counter();
  void sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_counter_attribute();
  void sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_range();
  void sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid);
  void send_sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid);
  void recv_sai_thrift_remove_acl_range();
  void sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_range_attribute();
  void sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group();
  void sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid);
  void send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid);
  void recv_sai_thrift_remove_acl_table_group();
  void sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_group_attribute();
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group_member();
  void sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid);
  void send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid);
  void recv_sai_thrift_remove_acl_table_group_member();
  void sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_group_member_attribute();
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_chain_group();
  void sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid);
  void send_sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid);
  void recv_sai_thrift_remove_acl_table_chain_group();
  void sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_chain_group_attribute();
  void sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ars();
  void sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid);
  void send_sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid);
  void recv_sai_thrift_remove_ars();
  void sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ars_attribute();
  void sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ars_profile();
  void sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid);
  void send_sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid);
  void recv_sai_thrift_remove_ars_profile();
  void sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ars_profile_attribute();
  void sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bfd_session();
  void sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid);
  void send_sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid);
  void recv_sai_thrift_remove_bfd_session();
  void sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bfd_session_attribute();
  void sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_bfd_session_stats_ext(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bfd_session_stats();
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_bitmap_classification_entry();
  void sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid);
  void send_sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid);
  void recv_sai_thrift_remove_table_bitmap_classification_entry();
  void sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_bitmap_classification_entry_attribute();
  void sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_table_bitmap_classification_entry_stats_ext(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_bitmap_classification_entry_stats();
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_bitmap_router_entry();
  void sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid);
  void send_sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid);
  void recv_sai_thrift_remove_table_bitmap_router_entry();
  void sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_bitmap_router_entry_attribute();
  void sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_table_bitmap_router_entry_stats_ext(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_bitmap_router_entry_stats();
  sai_thrift_object_id_t sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_meta_tunnel_entry();
  void sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid);
  void send_sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid);
  void recv_sai_thrift_remove_table_meta_tunnel_entry();
  void sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_meta_tunnel_entry_attribute();
  void sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_table_meta_tunnel_entry_stats_ext(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_meta_tunnel_entry_stats();
  sai_thrift_object_id_t sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bridge_port();
  void sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid);
  void send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid);
  void recv_sai_thrift_remove_bridge_port();
  void sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bridge_port_attribute();
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_bridge_port_stats_ext(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bridge_port_stats();
  sai_thrift_object_id_t sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bridge();
  void sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid);
  void send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid);
  void recv_sai_thrift_remove_bridge();
  void sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bridge_attribute();
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_bridge_stats_ext(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bridge_stats();
  sai_thrift_object_id_t sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ingress_priority_group();
  void sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid);
  void send_sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid);
  void recv_sai_thrift_remove_ingress_priority_group();
  void sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ingress_priority_group_attribute();
  void sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_ingress_priority_group_stats_ext(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ingress_priority_group_stats();
  sai_thrift_object_id_t sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_pool();
  void sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid);
  void send_sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid);
  void recv_sai_thrift_remove_buffer_pool();
  void sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_buffer_pool_attribute();
  void sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_buffer_pool_stats_ext(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_buffer_pool_stats();
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_profile();
  void sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid);
  void send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid);
  void recv_sai_thrift_remove_buffer_profile();
  void sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_buffer_profile_attribute();
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_counter();
  void sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  void send_sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  void recv_sai_thrift_remove_counter();
  void sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_counter_attribute();
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_counter_stats_ext(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_counter_stats();
  sai_thrift_object_id_t sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dash_acl_group();
  void sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid);
  void send_sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid);
  void recv_sai_thrift_remove_dash_acl_group();
  void sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dash_acl_group_attribute();
  void sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dash_acl_rule();
  void sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid);
  void send_sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid);
  void recv_sai_thrift_remove_dash_acl_rule();
  void sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dash_acl_rule_attribute();
  void sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_direction_lookup_entry();
  void sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry);
  void send_sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry);
  void recv_sai_thrift_remove_direction_lookup_entry();
  void sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_direction_lookup_entry_attribute();
  void sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_eni_ether_address_map_entry();
  void sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry);
  void send_sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry);
  void recv_sai_thrift_remove_eni_ether_address_map_entry();
  void sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_eni_ether_address_map_entry_attribute();
  void sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_eni();
  void sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid);
  void send_sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid);
  void recv_sai_thrift_remove_eni();
  void sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_eni_attribute();
  void sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_inbound_routing_entry();
  void sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry);
  void send_sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry);
  void recv_sai_thrift_remove_inbound_routing_entry();
  void sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_inbound_routing_entry_attribute();
  void sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_bucket();
  void sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid);
  void send_sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid);
  void recv_sai_thrift_remove_meter_bucket();
  void sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_bucket_attribute();
  void sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_policy();
  void sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid);
  void send_sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid);
  void recv_sai_thrift_remove_meter_policy();
  void sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_policy_attribute();
  void sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_rule();
  void sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid);
  void send_sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid);
  void recv_sai_thrift_remove_meter_rule();
  void sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_rule_attribute();
  void sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_outbound_ca_to_pa_entry();
  void sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry);
  void send_sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry);
  void recv_sai_thrift_remove_outbound_ca_to_pa_entry();
  void sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_outbound_ca_to_pa_entry_attribute();
  void sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_outbound_routing_entry();
  void sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry);
  void send_sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry);
  void recv_sai_thrift_remove_outbound_routing_entry();
  void sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_outbound_routing_entry_attribute();
  void sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_pa_validation_entry();
  void sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry);
  void send_sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry);
  void recv_sai_thrift_remove_pa_validation_entry();
  void sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_pa_validation_entry_attribute();
  void sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_dst_tag_entry();
  void sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry);
  void send_sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry);
  void recv_sai_thrift_remove_dst_tag_entry();
  void sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dst_tag_entry_attribute();
  void sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_src_tag_entry();
  void sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry);
  void send_sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry);
  void recv_sai_thrift_remove_src_tag_entry();
  void sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_src_tag_entry_attribute();
  void sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_vip_entry();
  void sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry);
  void send_sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry);
  void recv_sai_thrift_remove_vip_entry();
  void sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vip_entry_attribute();
  void sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_vip_entry(const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_vip_entry(const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vnet();
  void sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid);
  void send_sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid);
  void recv_sai_thrift_remove_vnet();
  void sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vnet_attribute();
  void sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_debug_counter();
  void sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  void send_sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  void recv_sai_thrift_remove_debug_counter();
  void sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_debug_counter_attribute();
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel();
  void sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid);
  void send_sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid);
  void recv_sai_thrift_remove_dtel();
  void sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_attribute();
  void sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_queue_report();
  void sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid);
  void send_sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid);
  void recv_sai_thrift_remove_dtel_queue_report();
  void sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_queue_report_attribute();
  void sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_int_session();
  void sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid);
  void send_sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid);
  void recv_sai_thrift_remove_dtel_int_session();
  void sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_int_session_attribute();
  void sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_report_session();
  void sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid);
  void send_sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid);
  void recv_sai_thrift_remove_dtel_report_session();
  void sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_report_session_attribute();
  void sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_event();
  void sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid);
  void send_sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid);
  void recv_sai_thrift_remove_dtel_event();
  void sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_event_attribute();
  void sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_fdb_entry();
  void sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry);
  void send_sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry);
  void recv_sai_thrift_remove_fdb_entry();
  void sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_fdb_entry_attribute();
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_flush_fdb_entries();
  void sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_fdb_entry_attribute(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_fdb_entry_attribute(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_generic_programmable();
  void sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid);
  void send_sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid);
  void recv_sai_thrift_remove_generic_programmable();
  void sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_generic_programmable_attribute();
  void sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_fine_grained_hash_field();
  void sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid);
  void send_sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid);
  void recv_sai_thrift_remove_fine_grained_hash_field();
  void sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_fine_grained_hash_field_attribute();
  void sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hash();
  void sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid);
  void send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid);
  void recv_sai_thrift_remove_hash();
  void sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hash_attribute();
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap_group();
  void sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid);
  void send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid);
  void recv_sai_thrift_remove_hostif_trap_group();
  void sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_trap_group_attribute();
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap();
  void sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid);
  void send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid);
  void recv_sai_thrift_remove_hostif_trap();
  void sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_trap_attribute();
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_user_defined_trap();
  void sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid);
  void send_sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid);
  void recv_sai_thrift_remove_hostif_user_defined_trap();
  void sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_user_defined_trap_attribute();
  void sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif();
  void sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid);
  void send_sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid);
  void recv_sai_thrift_remove_hostif();
  void sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_attribute();
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_table_entry();
  void sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid);
  void send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid);
  void recv_sai_thrift_remove_hostif_table_entry();
  void sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_table_entry_attribute();
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_size_t sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_size_t recv_sai_thrift_recv_hostif_packet();
  void sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_send_hostif_packet();
  void sai_thrift_allocate_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_allocate_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_allocate_hostif_packet(std::string& _return);
  void sai_thrift_free_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const std::string& buffer);
  void send_sai_thrift_free_hostif_packet(const sai_thrift_object_id_t hostif_oid, const std::string& buffer);
  void recv_sai_thrift_free_hostif_packet(std::string& _return);
  void sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_ipmc_entry();
  void sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry);
  void send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry);
  void recv_sai_thrift_remove_ipmc_entry();
  void sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_entry_attribute();
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group();
  void sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid);
  void send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid);
  void recv_sai_thrift_remove_ipmc_group();
  void sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_group_attribute();
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group_member();
  void sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid);
  void send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid);
  void recv_sai_thrift_remove_ipmc_group_member();
  void sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_group_member_attribute();
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec();
  void sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid);
  void send_sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid);
  void recv_sai_thrift_remove_ipsec();
  void sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_attribute();
  void sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec_port();
  void sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid);
  void send_sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid);
  void recv_sai_thrift_remove_ipsec_port();
  void sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_port_attribute();
  void sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_ipsec_port_stats_ext(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ipsec_port_stats();
  sai_thrift_object_id_t sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec_sa();
  void sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid);
  void send_sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid);
  void recv_sai_thrift_remove_ipsec_sa();
  void sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_sa_attribute();
  void sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_ipsec_sa_stats_ext(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ipsec_sa_stats();
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group();
  void sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid);
  void send_sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid);
  void recv_sai_thrift_remove_isolation_group();
  void sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_isolation_group_attribute();
  void sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group_member();
  void sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid);
  void send_sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid);
  void recv_sai_thrift_remove_isolation_group_member();
  void sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_isolation_group_member_attribute();
  void sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_l2mc_entry();
  void sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry);
  void send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry);
  void recv_sai_thrift_remove_l2mc_entry();
  void sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_entry_attribute();
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group();
  void sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid);
  void send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid);
  void recv_sai_thrift_remove_l2mc_group();
  void sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_group_attribute();
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group_member();
  void sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid);
  void send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid);
  void recv_sai_thrift_remove_l2mc_group_member();
  void sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_group_member_attribute();
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag();
  void sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid);
  void send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid);
  void recv_sai_thrift_remove_lag();
  void sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_lag_attribute();
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag_member();
  void sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid);
  void send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid);
  void recv_sai_thrift_remove_lag_member();
  void sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_lag_member_attribute();
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec();
  void sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid);
  void send_sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid);
  void recv_sai_thrift_remove_macsec();
  void sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_attribute();
  void sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_port();
  void sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid);
  void send_sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid);
  void recv_sai_thrift_remove_macsec_port();
  void sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_port_attribute();
  void sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_macsec_port_stats_ext(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_port_stats();
  sai_thrift_object_id_t sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_flow();
  void sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid);
  void send_sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid);
  void recv_sai_thrift_remove_macsec_flow();
  void sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_flow_attribute();
  void sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_macsec_flow_stats_ext(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_flow_stats();
  sai_thrift_object_id_t sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_sc();
  void sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid);
  void send_sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid);
  void recv_sai_thrift_remove_macsec_sc();
  void sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_sc_attribute();
  void sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_macsec_sc_stats_ext(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_sc_stats();
  sai_thrift_object_id_t sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_sa();
  void sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid);
  void send_sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid);
  void recv_sai_thrift_remove_macsec_sa();
  void sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_sa_attribute();
  void sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_macsec_sa_stats_ext(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_sa_stats();
  void sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_mcast_fdb_entry();
  void sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry);
  void send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry);
  void recv_sai_thrift_remove_mcast_fdb_entry();
  void sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_mcast_fdb_entry_attribute();
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_mirror_session();
  void sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid);
  void send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid);
  void recv_sai_thrift_remove_mirror_session();
  void sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_mirror_session_attribute();
  void sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_inseg_entry();
  void sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry);
  void send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry);
  void recv_sai_thrift_remove_inseg_entry();
  void sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_inseg_entry_attribute();
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_inseg_entry_attribute(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_inseg_entry_attribute(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_my_mac();
  void sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid);
  void send_sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid);
  void recv_sai_thrift_remove_my_mac();
  void sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_my_mac_attribute();
  void sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_nat_entry();
  void sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry);
  void send_sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry);
  void recv_sai_thrift_remove_nat_entry();
  void sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_nat_entry_attribute();
  void sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_nat_entry(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_nat_entry(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_nat_entry_attribute(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_nat_entry_attribute(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_nat_zone_counter();
  void sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid);
  void send_sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid);
  void recv_sai_thrift_remove_nat_zone_counter();
  void sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_nat_zone_counter_attribute();
  void sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_neighbor_entry();
  void sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry);
  void send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry);
  void recv_sai_thrift_remove_neighbor_entry();
  void sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_neighbor_entry_attribute();
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_remove_all_neighbor_entries();
  void send_sai_thrift_remove_all_neighbor_entries();
  void recv_sai_thrift_remove_all_neighbor_entries();
  void sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_neighbor_entry_attribute(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_neighbor_entry_attribute(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop();
  void sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid);
  void send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid);
  void recv_sai_thrift_remove_next_hop();
  void sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_attribute();
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group();
  void sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid);
  void send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid);
  void recv_sai_thrift_remove_next_hop_group();
  void sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_attribute();
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_member();
  void sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid);
  void send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid);
  void recv_sai_thrift_remove_next_hop_group_member();
  void sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_member_attribute();
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_map();
  void sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid);
  void send_sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid);
  void recv_sai_thrift_remove_next_hop_group_map();
  void sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_map_attribute();
  void sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_policer();
  void sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid);
  void send_sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid);
  void recv_sai_thrift_remove_policer();
  void sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_policer_attribute();
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_policer_stats_ext(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_policer_stats();
  sai_thrift_object_id_t sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port();
  void sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  void send_sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  void recv_sai_thrift_remove_port();
  void sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_attribute();
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_port_stats_ext(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_port_stats();
  void sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid);
  void send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid);
  void recv_sai_thrift_clear_port_all_stats();
  sai_thrift_object_id_t sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_pool();
  void sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid);
  void send_sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid);
  void recv_sai_thrift_remove_port_pool();
  void sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_pool_attribute();
  void sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_port_pool_stats_ext(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_port_pool_stats();
  sai_thrift_object_id_t sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_serdes();
  void sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid);
  void send_sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid);
  void recv_sai_thrift_remove_port_serdes();
  void sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_serdes_attribute();
  void sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_connector();
  void sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid);
  void send_sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid);
  void recv_sai_thrift_remove_port_connector();
  void sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_connector_attribute();
  void sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_qos_map();
  void sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid);
  void send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid);
  void recv_sai_thrift_remove_qos_map();
  void sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_qos_map_attribute();
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_queue();
  void sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid);
  void send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid);
  void recv_sai_thrift_remove_queue();
  void sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_queue_attribute();
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_queue_stats_ext(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_queue_stats();
  void sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_route_entry();
  void sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry);
  void send_sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry);
  void recv_sai_thrift_remove_route_entry();
  void sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_route_entry_attribute();
  void sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_route_entry(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_route_entry(const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_route_entry_attribute(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_route_entry_attribute(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_router_interface();
  void sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid);
  void send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid);
  void recv_sai_thrift_remove_router_interface();
  void sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_router_interface_attribute();
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_router_interface_stats_ext(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_router_interface_stats();
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group();
  void sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid);
  void send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid);
  void recv_sai_thrift_remove_rpf_group();
  void sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_rpf_group_attribute();
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group_member();
  void sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid);
  void send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid);
  void recv_sai_thrift_remove_rpf_group_member();
  void sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_rpf_group_member_attribute();
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_samplepacket();
  void sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid);
  void send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid);
  void recv_sai_thrift_remove_samplepacket();
  void sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_samplepacket_attribute();
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler();
  void sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid);
  void send_sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid);
  void recv_sai_thrift_remove_scheduler();
  void sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_scheduler_attribute();
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_group();
  void sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid);
  void send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid);
  void recv_sai_thrift_remove_scheduler_group();
  void sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_scheduler_group_attribute();
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_srv6_sidlist();
  void sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid);
  void send_sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid);
  void recv_sai_thrift_remove_srv6_sidlist();
  void sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_srv6_sidlist_attribute();
  void sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_srv6_sidlist_stats_ext(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_srv6_sidlist_stats();
  void sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_my_sid_entry();
  void sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry);
  void send_sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry);
  void recv_sai_thrift_remove_my_sid_entry();
  void sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_my_sid_entry_attribute();
  void sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_create_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_remove_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void send_sai_thrift_bulk_set_my_sid_entry_attribute(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return);
  void sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void send_sai_thrift_bulk_get_my_sid_entry_attribute(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp();
  void sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid);
  void send_sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid);
  void recv_sai_thrift_remove_stp();
  void sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_stp_attribute();
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_port();
  void sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid);
  void send_sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid);
  void recv_sai_thrift_remove_stp_port();
  void sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_stp_port_attribute();
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void send_sai_thrift_switch_register_read(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return);
  void sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void send_sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_register_write();
  void sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void send_sai_thrift_switch_mdio_read(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return);
  void sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void send_sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_mdio_write();
  void sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void send_sai_thrift_switch_mdio_cl22_read(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return);
  void sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void send_sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_mdio_cl22_write();
  sai_thrift_object_id_t sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_switch();
  void sai_thrift_remove_switch();
  void send_sai_thrift_remove_switch();
  void recv_sai_thrift_remove_switch();
  void sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_switch_attribute();
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_switch_attribute(const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_switch_stats_ext(const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_switch_stats();
  sai_thrift_object_id_t sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_switch_tunnel();
  void sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid);
  void send_sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid);
  void recv_sai_thrift_remove_switch_tunnel();
  void sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_switch_tunnel_attribute();
  void sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_system_port();
  void sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid);
  void send_sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid);
  void recv_sai_thrift_remove_system_port();
  void sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_system_port_attribute();
  void sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam();
  void sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid);
  void send_sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid);
  void recv_sai_thrift_remove_tam();
  void sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_attribute();
  void sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_math_func();
  void sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid);
  void send_sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid);
  void recv_sai_thrift_remove_tam_math_func();
  void sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_math_func_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event_threshold();
  void sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid);
  void send_sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid);
  void recv_sai_thrift_remove_tam_event_threshold();
  void sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_threshold_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_int();
  void sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid);
  void send_sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid);
  void recv_sai_thrift_remove_tam_int();
  void sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_int_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_tel_type();
  void sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid);
  void send_sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid);
  void recv_sai_thrift_remove_tam_tel_type();
  void sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_tel_type_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_report();
  void sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid);
  void send_sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid);
  void recv_sai_thrift_remove_tam_report();
  void sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_report_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_telemetry();
  void sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid);
  void send_sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid);
  void recv_sai_thrift_remove_tam_telemetry();
  void sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_telemetry_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_transport();
  void sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid);
  void send_sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid);
  void recv_sai_thrift_remove_tam_transport();
  void sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_transport_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_collector();
  void sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid);
  void send_sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid);
  void recv_sai_thrift_remove_tam_collector();
  void sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_collector_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event_action();
  void sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid);
  void send_sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid);
  void recv_sai_thrift_remove_tam_event_action();
  void sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_action_attribute();
  sai_thrift_object_id_t sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event();
  void sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid);
  void send_sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid);
  void recv_sai_thrift_remove_tam_event();
  void sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map();
  void sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid);
  void send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid);
  void recv_sai_thrift_remove_tunnel_map();
  void sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_map_attribute();
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel();
  void sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid);
  void send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid);
  void recv_sai_thrift_remove_tunnel();
  void sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_attribute();
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_tunnel_stats_ext(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_tunnel_stats();
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_term_table_entry();
  void sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid);
  void send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid);
  void recv_sai_thrift_remove_tunnel_term_table_entry();
  void sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_term_table_entry_attribute();
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map_entry();
  void sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid);
  void send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid);
  void recv_sai_thrift_remove_tunnel_map_entry();
  void sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_map_entry_attribute();
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf();
  void sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid);
  void send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid);
  void recv_sai_thrift_remove_udf();
  void sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_attribute();
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_match();
  void sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid);
  void send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid);
  void recv_sai_thrift_remove_udf_match();
  void sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_match_attribute();
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_group();
  void sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid);
  void send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid);
  void recv_sai_thrift_remove_udf_group();
  void sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_group_attribute();
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_virtual_router();
  void sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid);
  void send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid);
  void recv_sai_thrift_remove_virtual_router();
  void sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_virtual_router_attribute();
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan();
  void sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  void send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  void recv_sai_thrift_remove_vlan();
  void sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vlan_attribute();
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan_member();
  void sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid);
  void send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid);
  void recv_sai_thrift_remove_vlan_member();
  void sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vlan_member_attribute();
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_get_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void send_sai_thrift_get_vlan_stats_ext(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return);
  void sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void send_sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_vlan_stats();
  sai_thrift_object_id_t sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list);
  void send_sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_wred();
  void sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid);
  void send_sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid);
  void recv_sai_thrift_remove_wred();
  void sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr);
  void send_sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_wred_attribute();
  void sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list);
  void send_sai_thrift_get_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return, const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count);
  void send_sai_thrift_query_attribute_enum_values_capability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count);
  void recv_sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return);
  int64_t sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type);
  void send_sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type);
  int64_t recv_sai_thrift_object_type_get_availability();
  sai_thrift_object_id_t sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id);
  void send_sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id);
  sai_thrift_object_id_t recv_sai_thrift_switch_id_query();
  sai_thrift_object_type_t sai_thrift_object_type_query(const sai_thrift_object_id_t object_id);
  void send_sai_thrift_object_type_query(const sai_thrift_object_id_t object_id);
  sai_thrift_object_type_t recv_sai_thrift_object_type_query();
  sai_thrift_status_t sai_thrift_api_uninitialize();
  void send_sai_thrift_api_uninitialize();
  sai_thrift_status_t recv_sai_thrift_api_uninitialize();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class sai_rpcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<sai_rpcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (sai_rpcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sai_thrift_create_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_table_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_range_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_range_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_table_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_table_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_chain_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_chain_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_table_chain_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_chain_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ars(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ars(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ars_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ars_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ars_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ars_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ars_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ars_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bfd_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bfd_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bfd_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bfd_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bfd_session_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bfd_session_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_bfd_session_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_table_bitmap_classification_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_table_bitmap_classification_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_table_bitmap_classification_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_classification_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_classification_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_classification_entry_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_table_bitmap_classification_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_table_bitmap_router_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_table_bitmap_router_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_table_bitmap_router_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_router_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_router_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_bitmap_router_entry_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_table_bitmap_router_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_table_meta_tunnel_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_table_meta_tunnel_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_table_meta_tunnel_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_meta_tunnel_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_meta_tunnel_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_table_meta_tunnel_entry_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_table_meta_tunnel_entry_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_bridge_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_bridge_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ingress_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ingress_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ingress_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ingress_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ingress_priority_group_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ingress_priority_group_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_ingress_priority_group_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_buffer_pool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_buffer_pool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_buffer_pool_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_pool_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_pool_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_pool_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_buffer_pool_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_counter_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_counter_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dash_acl_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dash_acl_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dash_acl_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dash_acl_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dash_acl_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dash_acl_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dash_acl_rule_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dash_acl_rule_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_direction_lookup_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_direction_lookup_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_direction_lookup_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_direction_lookup_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_direction_lookup_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_direction_lookup_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_eni_ether_address_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_eni_ether_address_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_eni_ether_address_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_eni_ether_address_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_eni_ether_address_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_eni_ether_address_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_eni(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_eni(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_eni_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_eni_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_inbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_inbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_inbound_routing_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_inbound_routing_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_inbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_inbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_meter_bucket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_meter_bucket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_meter_bucket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_meter_bucket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_meter_policy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_meter_policy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_meter_policy_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_meter_policy_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_meter_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_meter_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_meter_rule_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_meter_rule_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_outbound_ca_to_pa_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_outbound_ca_to_pa_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_outbound_ca_to_pa_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_outbound_ca_to_pa_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_outbound_ca_to_pa_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_outbound_ca_to_pa_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_outbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_outbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_outbound_routing_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_outbound_routing_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_outbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_outbound_routing_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_pa_validation_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_pa_validation_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_pa_validation_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_pa_validation_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_pa_validation_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_pa_validation_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dst_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dst_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dst_tag_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dst_tag_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_dst_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_dst_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_src_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_src_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_src_tag_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_src_tag_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_src_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_src_tag_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vip_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vip_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vip_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vip_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_vip_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_vip_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vnet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vnet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vnet_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vnet_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_debug_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_debug_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_debug_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_debug_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dtel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dtel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dtel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dtel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dtel_queue_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dtel_queue_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dtel_queue_report_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dtel_queue_report_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dtel_int_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dtel_int_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dtel_int_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dtel_int_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dtel_report_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dtel_report_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dtel_report_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dtel_report_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_dtel_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_dtel_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_dtel_event_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_dtel_event_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_flush_fdb_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_generic_programmable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_generic_programmable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_generic_programmable_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_generic_programmable_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_fine_grained_hash_field(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_fine_grained_hash_field(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_fine_grained_hash_field_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_fine_grained_hash_field_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_user_defined_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_user_defined_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_user_defined_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_user_defined_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_recv_hostif_packet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_send_hostif_packet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_allocate_hostif_packet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_free_hostif_packet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipsec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipsec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipsec_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipsec_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipsec_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipsec_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_ipsec_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipsec_sa(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipsec_sa(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipsec_sa_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_sa_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_sa_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipsec_sa_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_ipsec_sa_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_isolation_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_isolation_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_isolation_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_isolation_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_isolation_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_isolation_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_isolation_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_isolation_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_macsec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_macsec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_macsec_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_macsec_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_macsec_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_macsec_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_macsec_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_macsec_flow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_macsec_flow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_macsec_flow_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_flow_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_flow_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_flow_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_macsec_flow_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_macsec_sc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_macsec_sc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_macsec_sc_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sc_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sc_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sc_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_macsec_sc_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_macsec_sa(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_macsec_sa(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_macsec_sa_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sa_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sa_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_macsec_sa_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_macsec_sa_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mirror_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mirror_session_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_my_mac(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_my_mac(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_my_mac_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_my_mac_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_nat_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_nat_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_nat_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_nat_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_nat_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_nat_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_nat_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_nat_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_nat_zone_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_nat_zone_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_nat_zone_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_nat_zone_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_all_neighbor_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_group_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_all_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_port_pool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_port_pool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_port_pool_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_pool_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_pool_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_pool_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_pool_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_port_serdes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_port_serdes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_port_serdes_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_serdes_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_port_connector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_port_connector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_port_connector_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_connector_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_route_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_route_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_route_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_route_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_route_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_route_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_route_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_route_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_router_interface_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_router_interface_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_router_interface_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_rpf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_srv6_sidlist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_srv6_sidlist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_srv6_sidlist_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_srv6_sidlist_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_srv6_sidlist_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_srv6_sidlist_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_srv6_sidlist_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_my_sid_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_my_sid_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_my_sid_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_my_sid_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_create_my_sid_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_remove_my_sid_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_set_my_sid_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_bulk_get_my_sid_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_stp_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_stp_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_register_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_register_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_mdio_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_mdio_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_mdio_cl22_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_mdio_cl22_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_switch_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_switch_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_switch_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_switch_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_system_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_system_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_system_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_system_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_math_func(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_math_func(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_math_func_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_math_func_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_event_threshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_event_threshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_event_threshold_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_event_threshold_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_int(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_int_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_int_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_tel_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_tel_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_tel_type_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_tel_type_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_report_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_report_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_telemetry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_telemetry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_telemetry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_telemetry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_transport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_transport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_transport_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_transport_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_collector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_collector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_collector_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_collector_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_event_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_event_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_event_action_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_event_action_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tam_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tam_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tam_event_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tam_event_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_udf_match_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_match_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_udf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_stats_ext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_wred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_wred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_wred_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_wred_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_query_attribute_enum_values_capability(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_object_type_get_availability(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_switch_id_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_object_type_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_api_uninitialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  sai_rpcProcessor(::apache::thrift::stdcxx::shared_ptr<sai_rpcIf> iface) :
    iface_(iface) {
    processMap_["sai_thrift_create_acl_table"] = &sai_rpcProcessor::process_sai_thrift_create_acl_table;
    processMap_["sai_thrift_remove_acl_table"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_table;
    processMap_["sai_thrift_set_acl_table_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_table_attribute;
    processMap_["sai_thrift_get_acl_table_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_table_attribute;
    processMap_["sai_thrift_create_acl_entry"] = &sai_rpcProcessor::process_sai_thrift_create_acl_entry;
    processMap_["sai_thrift_remove_acl_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_entry;
    processMap_["sai_thrift_set_acl_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_entry_attribute;
    processMap_["sai_thrift_get_acl_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_entry_attribute;
    processMap_["sai_thrift_create_acl_counter"] = &sai_rpcProcessor::process_sai_thrift_create_acl_counter;
    processMap_["sai_thrift_remove_acl_counter"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_counter;
    processMap_["sai_thrift_set_acl_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_counter_attribute;
    processMap_["sai_thrift_get_acl_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_counter_attribute;
    processMap_["sai_thrift_create_acl_range"] = &sai_rpcProcessor::process_sai_thrift_create_acl_range;
    processMap_["sai_thrift_remove_acl_range"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_range;
    processMap_["sai_thrift_set_acl_range_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_range_attribute;
    processMap_["sai_thrift_get_acl_range_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_range_attribute;
    processMap_["sai_thrift_create_acl_table_group"] = &sai_rpcProcessor::process_sai_thrift_create_acl_table_group;
    processMap_["sai_thrift_remove_acl_table_group"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_table_group;
    processMap_["sai_thrift_set_acl_table_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_table_group_attribute;
    processMap_["sai_thrift_get_acl_table_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_table_group_attribute;
    processMap_["sai_thrift_create_acl_table_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_acl_table_group_member;
    processMap_["sai_thrift_remove_acl_table_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_table_group_member;
    processMap_["sai_thrift_set_acl_table_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_table_group_member_attribute;
    processMap_["sai_thrift_get_acl_table_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_table_group_member_attribute;
    processMap_["sai_thrift_create_acl_table_chain_group"] = &sai_rpcProcessor::process_sai_thrift_create_acl_table_chain_group;
    processMap_["sai_thrift_remove_acl_table_chain_group"] = &sai_rpcProcessor::process_sai_thrift_remove_acl_table_chain_group;
    processMap_["sai_thrift_set_acl_table_chain_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_acl_table_chain_group_attribute;
    processMap_["sai_thrift_get_acl_table_chain_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_acl_table_chain_group_attribute;
    processMap_["sai_thrift_create_ars"] = &sai_rpcProcessor::process_sai_thrift_create_ars;
    processMap_["sai_thrift_remove_ars"] = &sai_rpcProcessor::process_sai_thrift_remove_ars;
    processMap_["sai_thrift_set_ars_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ars_attribute;
    processMap_["sai_thrift_get_ars_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ars_attribute;
    processMap_["sai_thrift_create_ars_profile"] = &sai_rpcProcessor::process_sai_thrift_create_ars_profile;
    processMap_["sai_thrift_remove_ars_profile"] = &sai_rpcProcessor::process_sai_thrift_remove_ars_profile;
    processMap_["sai_thrift_set_ars_profile_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ars_profile_attribute;
    processMap_["sai_thrift_get_ars_profile_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ars_profile_attribute;
    processMap_["sai_thrift_create_bfd_session"] = &sai_rpcProcessor::process_sai_thrift_create_bfd_session;
    processMap_["sai_thrift_remove_bfd_session"] = &sai_rpcProcessor::process_sai_thrift_remove_bfd_session;
    processMap_["sai_thrift_set_bfd_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_bfd_session_attribute;
    processMap_["sai_thrift_get_bfd_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_bfd_session_attribute;
    processMap_["sai_thrift_get_bfd_session_stats"] = &sai_rpcProcessor::process_sai_thrift_get_bfd_session_stats;
    processMap_["sai_thrift_get_bfd_session_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_bfd_session_stats_ext;
    processMap_["sai_thrift_clear_bfd_session_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_bfd_session_stats;
    processMap_["sai_thrift_create_table_bitmap_classification_entry"] = &sai_rpcProcessor::process_sai_thrift_create_table_bitmap_classification_entry;
    processMap_["sai_thrift_remove_table_bitmap_classification_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_table_bitmap_classification_entry;
    processMap_["sai_thrift_set_table_bitmap_classification_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_table_bitmap_classification_entry_attribute;
    processMap_["sai_thrift_get_table_bitmap_classification_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_classification_entry_attribute;
    processMap_["sai_thrift_get_table_bitmap_classification_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_classification_entry_stats;
    processMap_["sai_thrift_get_table_bitmap_classification_entry_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_classification_entry_stats_ext;
    processMap_["sai_thrift_clear_table_bitmap_classification_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_table_bitmap_classification_entry_stats;
    processMap_["sai_thrift_create_table_bitmap_router_entry"] = &sai_rpcProcessor::process_sai_thrift_create_table_bitmap_router_entry;
    processMap_["sai_thrift_remove_table_bitmap_router_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_table_bitmap_router_entry;
    processMap_["sai_thrift_set_table_bitmap_router_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_table_bitmap_router_entry_attribute;
    processMap_["sai_thrift_get_table_bitmap_router_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_router_entry_attribute;
    processMap_["sai_thrift_get_table_bitmap_router_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_router_entry_stats;
    processMap_["sai_thrift_get_table_bitmap_router_entry_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_table_bitmap_router_entry_stats_ext;
    processMap_["sai_thrift_clear_table_bitmap_router_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_table_bitmap_router_entry_stats;
    processMap_["sai_thrift_create_table_meta_tunnel_entry"] = &sai_rpcProcessor::process_sai_thrift_create_table_meta_tunnel_entry;
    processMap_["sai_thrift_remove_table_meta_tunnel_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_table_meta_tunnel_entry;
    processMap_["sai_thrift_set_table_meta_tunnel_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_table_meta_tunnel_entry_attribute;
    processMap_["sai_thrift_get_table_meta_tunnel_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_table_meta_tunnel_entry_attribute;
    processMap_["sai_thrift_get_table_meta_tunnel_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_get_table_meta_tunnel_entry_stats;
    processMap_["sai_thrift_get_table_meta_tunnel_entry_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_table_meta_tunnel_entry_stats_ext;
    processMap_["sai_thrift_clear_table_meta_tunnel_entry_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_table_meta_tunnel_entry_stats;
    processMap_["sai_thrift_create_bridge_port"] = &sai_rpcProcessor::process_sai_thrift_create_bridge_port;
    processMap_["sai_thrift_remove_bridge_port"] = &sai_rpcProcessor::process_sai_thrift_remove_bridge_port;
    processMap_["sai_thrift_set_bridge_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_bridge_port_attribute;
    processMap_["sai_thrift_get_bridge_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_port_attribute;
    processMap_["sai_thrift_get_bridge_port_stats"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_port_stats;
    processMap_["sai_thrift_get_bridge_port_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_port_stats_ext;
    processMap_["sai_thrift_clear_bridge_port_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_bridge_port_stats;
    processMap_["sai_thrift_create_bridge"] = &sai_rpcProcessor::process_sai_thrift_create_bridge;
    processMap_["sai_thrift_remove_bridge"] = &sai_rpcProcessor::process_sai_thrift_remove_bridge;
    processMap_["sai_thrift_set_bridge_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_bridge_attribute;
    processMap_["sai_thrift_get_bridge_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_attribute;
    processMap_["sai_thrift_get_bridge_stats"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_stats;
    processMap_["sai_thrift_get_bridge_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_bridge_stats_ext;
    processMap_["sai_thrift_clear_bridge_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_bridge_stats;
    processMap_["sai_thrift_create_ingress_priority_group"] = &sai_rpcProcessor::process_sai_thrift_create_ingress_priority_group;
    processMap_["sai_thrift_remove_ingress_priority_group"] = &sai_rpcProcessor::process_sai_thrift_remove_ingress_priority_group;
    processMap_["sai_thrift_set_ingress_priority_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ingress_priority_group_attribute;
    processMap_["sai_thrift_get_ingress_priority_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ingress_priority_group_attribute;
    processMap_["sai_thrift_get_ingress_priority_group_stats"] = &sai_rpcProcessor::process_sai_thrift_get_ingress_priority_group_stats;
    processMap_["sai_thrift_get_ingress_priority_group_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_ingress_priority_group_stats_ext;
    processMap_["sai_thrift_clear_ingress_priority_group_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_ingress_priority_group_stats;
    processMap_["sai_thrift_create_buffer_pool"] = &sai_rpcProcessor::process_sai_thrift_create_buffer_pool;
    processMap_["sai_thrift_remove_buffer_pool"] = &sai_rpcProcessor::process_sai_thrift_remove_buffer_pool;
    processMap_["sai_thrift_set_buffer_pool_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_buffer_pool_attribute;
    processMap_["sai_thrift_get_buffer_pool_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_buffer_pool_attribute;
    processMap_["sai_thrift_get_buffer_pool_stats"] = &sai_rpcProcessor::process_sai_thrift_get_buffer_pool_stats;
    processMap_["sai_thrift_get_buffer_pool_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_buffer_pool_stats_ext;
    processMap_["sai_thrift_clear_buffer_pool_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_buffer_pool_stats;
    processMap_["sai_thrift_create_buffer_profile"] = &sai_rpcProcessor::process_sai_thrift_create_buffer_profile;
    processMap_["sai_thrift_remove_buffer_profile"] = &sai_rpcProcessor::process_sai_thrift_remove_buffer_profile;
    processMap_["sai_thrift_set_buffer_profile_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_buffer_profile_attribute;
    processMap_["sai_thrift_get_buffer_profile_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_buffer_profile_attribute;
    processMap_["sai_thrift_create_counter"] = &sai_rpcProcessor::process_sai_thrift_create_counter;
    processMap_["sai_thrift_remove_counter"] = &sai_rpcProcessor::process_sai_thrift_remove_counter;
    processMap_["sai_thrift_set_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_counter_attribute;
    processMap_["sai_thrift_get_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_counter_attribute;
    processMap_["sai_thrift_get_counter_stats"] = &sai_rpcProcessor::process_sai_thrift_get_counter_stats;
    processMap_["sai_thrift_get_counter_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_counter_stats_ext;
    processMap_["sai_thrift_clear_counter_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_counter_stats;
    processMap_["sai_thrift_create_dash_acl_group"] = &sai_rpcProcessor::process_sai_thrift_create_dash_acl_group;
    processMap_["sai_thrift_remove_dash_acl_group"] = &sai_rpcProcessor::process_sai_thrift_remove_dash_acl_group;
    processMap_["sai_thrift_set_dash_acl_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dash_acl_group_attribute;
    processMap_["sai_thrift_get_dash_acl_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dash_acl_group_attribute;
    processMap_["sai_thrift_create_dash_acl_rule"] = &sai_rpcProcessor::process_sai_thrift_create_dash_acl_rule;
    processMap_["sai_thrift_remove_dash_acl_rule"] = &sai_rpcProcessor::process_sai_thrift_remove_dash_acl_rule;
    processMap_["sai_thrift_set_dash_acl_rule_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dash_acl_rule_attribute;
    processMap_["sai_thrift_get_dash_acl_rule_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dash_acl_rule_attribute;
    processMap_["sai_thrift_create_direction_lookup_entry"] = &sai_rpcProcessor::process_sai_thrift_create_direction_lookup_entry;
    processMap_["sai_thrift_remove_direction_lookup_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_direction_lookup_entry;
    processMap_["sai_thrift_set_direction_lookup_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_direction_lookup_entry_attribute;
    processMap_["sai_thrift_get_direction_lookup_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_direction_lookup_entry_attribute;
    processMap_["sai_thrift_bulk_create_direction_lookup_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_direction_lookup_entry;
    processMap_["sai_thrift_bulk_remove_direction_lookup_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_direction_lookup_entry;
    processMap_["sai_thrift_create_eni_ether_address_map_entry"] = &sai_rpcProcessor::process_sai_thrift_create_eni_ether_address_map_entry;
    processMap_["sai_thrift_remove_eni_ether_address_map_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_eni_ether_address_map_entry;
    processMap_["sai_thrift_set_eni_ether_address_map_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_eni_ether_address_map_entry_attribute;
    processMap_["sai_thrift_get_eni_ether_address_map_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_eni_ether_address_map_entry_attribute;
    processMap_["sai_thrift_bulk_create_eni_ether_address_map_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_eni_ether_address_map_entry;
    processMap_["sai_thrift_bulk_remove_eni_ether_address_map_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_eni_ether_address_map_entry;
    processMap_["sai_thrift_create_eni"] = &sai_rpcProcessor::process_sai_thrift_create_eni;
    processMap_["sai_thrift_remove_eni"] = &sai_rpcProcessor::process_sai_thrift_remove_eni;
    processMap_["sai_thrift_set_eni_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_eni_attribute;
    processMap_["sai_thrift_get_eni_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_eni_attribute;
    processMap_["sai_thrift_create_inbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_create_inbound_routing_entry;
    processMap_["sai_thrift_remove_inbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_inbound_routing_entry;
    processMap_["sai_thrift_set_inbound_routing_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_inbound_routing_entry_attribute;
    processMap_["sai_thrift_get_inbound_routing_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_inbound_routing_entry_attribute;
    processMap_["sai_thrift_bulk_create_inbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_inbound_routing_entry;
    processMap_["sai_thrift_bulk_remove_inbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_inbound_routing_entry;
    processMap_["sai_thrift_create_meter_bucket"] = &sai_rpcProcessor::process_sai_thrift_create_meter_bucket;
    processMap_["sai_thrift_remove_meter_bucket"] = &sai_rpcProcessor::process_sai_thrift_remove_meter_bucket;
    processMap_["sai_thrift_set_meter_bucket_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_meter_bucket_attribute;
    processMap_["sai_thrift_get_meter_bucket_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_meter_bucket_attribute;
    processMap_["sai_thrift_create_meter_policy"] = &sai_rpcProcessor::process_sai_thrift_create_meter_policy;
    processMap_["sai_thrift_remove_meter_policy"] = &sai_rpcProcessor::process_sai_thrift_remove_meter_policy;
    processMap_["sai_thrift_set_meter_policy_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_meter_policy_attribute;
    processMap_["sai_thrift_get_meter_policy_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_meter_policy_attribute;
    processMap_["sai_thrift_create_meter_rule"] = &sai_rpcProcessor::process_sai_thrift_create_meter_rule;
    processMap_["sai_thrift_remove_meter_rule"] = &sai_rpcProcessor::process_sai_thrift_remove_meter_rule;
    processMap_["sai_thrift_set_meter_rule_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_meter_rule_attribute;
    processMap_["sai_thrift_get_meter_rule_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_meter_rule_attribute;
    processMap_["sai_thrift_create_outbound_ca_to_pa_entry"] = &sai_rpcProcessor::process_sai_thrift_create_outbound_ca_to_pa_entry;
    processMap_["sai_thrift_remove_outbound_ca_to_pa_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_outbound_ca_to_pa_entry;
    processMap_["sai_thrift_set_outbound_ca_to_pa_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_outbound_ca_to_pa_entry_attribute;
    processMap_["sai_thrift_get_outbound_ca_to_pa_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_outbound_ca_to_pa_entry_attribute;
    processMap_["sai_thrift_bulk_create_outbound_ca_to_pa_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_outbound_ca_to_pa_entry;
    processMap_["sai_thrift_bulk_remove_outbound_ca_to_pa_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_outbound_ca_to_pa_entry;
    processMap_["sai_thrift_create_outbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_create_outbound_routing_entry;
    processMap_["sai_thrift_remove_outbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_outbound_routing_entry;
    processMap_["sai_thrift_set_outbound_routing_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_outbound_routing_entry_attribute;
    processMap_["sai_thrift_get_outbound_routing_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_outbound_routing_entry_attribute;
    processMap_["sai_thrift_bulk_create_outbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_outbound_routing_entry;
    processMap_["sai_thrift_bulk_remove_outbound_routing_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_outbound_routing_entry;
    processMap_["sai_thrift_create_pa_validation_entry"] = &sai_rpcProcessor::process_sai_thrift_create_pa_validation_entry;
    processMap_["sai_thrift_remove_pa_validation_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_pa_validation_entry;
    processMap_["sai_thrift_set_pa_validation_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_pa_validation_entry_attribute;
    processMap_["sai_thrift_get_pa_validation_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_pa_validation_entry_attribute;
    processMap_["sai_thrift_bulk_create_pa_validation_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_pa_validation_entry;
    processMap_["sai_thrift_bulk_remove_pa_validation_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_pa_validation_entry;
    processMap_["sai_thrift_create_dst_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_create_dst_tag_entry;
    processMap_["sai_thrift_remove_dst_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_dst_tag_entry;
    processMap_["sai_thrift_set_dst_tag_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dst_tag_entry_attribute;
    processMap_["sai_thrift_get_dst_tag_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dst_tag_entry_attribute;
    processMap_["sai_thrift_bulk_create_dst_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_dst_tag_entry;
    processMap_["sai_thrift_bulk_remove_dst_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_dst_tag_entry;
    processMap_["sai_thrift_create_src_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_create_src_tag_entry;
    processMap_["sai_thrift_remove_src_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_src_tag_entry;
    processMap_["sai_thrift_set_src_tag_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_src_tag_entry_attribute;
    processMap_["sai_thrift_get_src_tag_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_src_tag_entry_attribute;
    processMap_["sai_thrift_bulk_create_src_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_src_tag_entry;
    processMap_["sai_thrift_bulk_remove_src_tag_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_src_tag_entry;
    processMap_["sai_thrift_create_vip_entry"] = &sai_rpcProcessor::process_sai_thrift_create_vip_entry;
    processMap_["sai_thrift_remove_vip_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_vip_entry;
    processMap_["sai_thrift_set_vip_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_vip_entry_attribute;
    processMap_["sai_thrift_get_vip_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_vip_entry_attribute;
    processMap_["sai_thrift_bulk_create_vip_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_vip_entry;
    processMap_["sai_thrift_bulk_remove_vip_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_vip_entry;
    processMap_["sai_thrift_create_vnet"] = &sai_rpcProcessor::process_sai_thrift_create_vnet;
    processMap_["sai_thrift_remove_vnet"] = &sai_rpcProcessor::process_sai_thrift_remove_vnet;
    processMap_["sai_thrift_set_vnet_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_vnet_attribute;
    processMap_["sai_thrift_get_vnet_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_vnet_attribute;
    processMap_["sai_thrift_create_debug_counter"] = &sai_rpcProcessor::process_sai_thrift_create_debug_counter;
    processMap_["sai_thrift_remove_debug_counter"] = &sai_rpcProcessor::process_sai_thrift_remove_debug_counter;
    processMap_["sai_thrift_set_debug_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_debug_counter_attribute;
    processMap_["sai_thrift_get_debug_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_debug_counter_attribute;
    processMap_["sai_thrift_create_dtel"] = &sai_rpcProcessor::process_sai_thrift_create_dtel;
    processMap_["sai_thrift_remove_dtel"] = &sai_rpcProcessor::process_sai_thrift_remove_dtel;
    processMap_["sai_thrift_set_dtel_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dtel_attribute;
    processMap_["sai_thrift_get_dtel_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dtel_attribute;
    processMap_["sai_thrift_create_dtel_queue_report"] = &sai_rpcProcessor::process_sai_thrift_create_dtel_queue_report;
    processMap_["sai_thrift_remove_dtel_queue_report"] = &sai_rpcProcessor::process_sai_thrift_remove_dtel_queue_report;
    processMap_["sai_thrift_set_dtel_queue_report_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dtel_queue_report_attribute;
    processMap_["sai_thrift_get_dtel_queue_report_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dtel_queue_report_attribute;
    processMap_["sai_thrift_create_dtel_int_session"] = &sai_rpcProcessor::process_sai_thrift_create_dtel_int_session;
    processMap_["sai_thrift_remove_dtel_int_session"] = &sai_rpcProcessor::process_sai_thrift_remove_dtel_int_session;
    processMap_["sai_thrift_set_dtel_int_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dtel_int_session_attribute;
    processMap_["sai_thrift_get_dtel_int_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dtel_int_session_attribute;
    processMap_["sai_thrift_create_dtel_report_session"] = &sai_rpcProcessor::process_sai_thrift_create_dtel_report_session;
    processMap_["sai_thrift_remove_dtel_report_session"] = &sai_rpcProcessor::process_sai_thrift_remove_dtel_report_session;
    processMap_["sai_thrift_set_dtel_report_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dtel_report_session_attribute;
    processMap_["sai_thrift_get_dtel_report_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dtel_report_session_attribute;
    processMap_["sai_thrift_create_dtel_event"] = &sai_rpcProcessor::process_sai_thrift_create_dtel_event;
    processMap_["sai_thrift_remove_dtel_event"] = &sai_rpcProcessor::process_sai_thrift_remove_dtel_event;
    processMap_["sai_thrift_set_dtel_event_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_dtel_event_attribute;
    processMap_["sai_thrift_get_dtel_event_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_dtel_event_attribute;
    processMap_["sai_thrift_create_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_create_fdb_entry;
    processMap_["sai_thrift_remove_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_fdb_entry;
    processMap_["sai_thrift_set_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_fdb_entry_attribute;
    processMap_["sai_thrift_get_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_fdb_entry_attribute;
    processMap_["sai_thrift_flush_fdb_entries"] = &sai_rpcProcessor::process_sai_thrift_flush_fdb_entries;
    processMap_["sai_thrift_bulk_create_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_fdb_entry;
    processMap_["sai_thrift_bulk_remove_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_fdb_entry;
    processMap_["sai_thrift_bulk_set_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_fdb_entry_attribute;
    processMap_["sai_thrift_bulk_get_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_fdb_entry_attribute;
    processMap_["sai_thrift_create_generic_programmable"] = &sai_rpcProcessor::process_sai_thrift_create_generic_programmable;
    processMap_["sai_thrift_remove_generic_programmable"] = &sai_rpcProcessor::process_sai_thrift_remove_generic_programmable;
    processMap_["sai_thrift_set_generic_programmable_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_generic_programmable_attribute;
    processMap_["sai_thrift_get_generic_programmable_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_generic_programmable_attribute;
    processMap_["sai_thrift_create_fine_grained_hash_field"] = &sai_rpcProcessor::process_sai_thrift_create_fine_grained_hash_field;
    processMap_["sai_thrift_remove_fine_grained_hash_field"] = &sai_rpcProcessor::process_sai_thrift_remove_fine_grained_hash_field;
    processMap_["sai_thrift_set_fine_grained_hash_field_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_fine_grained_hash_field_attribute;
    processMap_["sai_thrift_get_fine_grained_hash_field_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_fine_grained_hash_field_attribute;
    processMap_["sai_thrift_create_hash"] = &sai_rpcProcessor::process_sai_thrift_create_hash;
    processMap_["sai_thrift_remove_hash"] = &sai_rpcProcessor::process_sai_thrift_remove_hash;
    processMap_["sai_thrift_set_hash_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hash_attribute;
    processMap_["sai_thrift_get_hash_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hash_attribute;
    processMap_["sai_thrift_create_hostif_trap_group"] = &sai_rpcProcessor::process_sai_thrift_create_hostif_trap_group;
    processMap_["sai_thrift_remove_hostif_trap_group"] = &sai_rpcProcessor::process_sai_thrift_remove_hostif_trap_group;
    processMap_["sai_thrift_set_hostif_trap_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hostif_trap_group_attribute;
    processMap_["sai_thrift_get_hostif_trap_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hostif_trap_group_attribute;
    processMap_["sai_thrift_create_hostif_trap"] = &sai_rpcProcessor::process_sai_thrift_create_hostif_trap;
    processMap_["sai_thrift_remove_hostif_trap"] = &sai_rpcProcessor::process_sai_thrift_remove_hostif_trap;
    processMap_["sai_thrift_set_hostif_trap_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hostif_trap_attribute;
    processMap_["sai_thrift_get_hostif_trap_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hostif_trap_attribute;
    processMap_["sai_thrift_create_hostif_user_defined_trap"] = &sai_rpcProcessor::process_sai_thrift_create_hostif_user_defined_trap;
    processMap_["sai_thrift_remove_hostif_user_defined_trap"] = &sai_rpcProcessor::process_sai_thrift_remove_hostif_user_defined_trap;
    processMap_["sai_thrift_set_hostif_user_defined_trap_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hostif_user_defined_trap_attribute;
    processMap_["sai_thrift_get_hostif_user_defined_trap_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hostif_user_defined_trap_attribute;
    processMap_["sai_thrift_create_hostif"] = &sai_rpcProcessor::process_sai_thrift_create_hostif;
    processMap_["sai_thrift_remove_hostif"] = &sai_rpcProcessor::process_sai_thrift_remove_hostif;
    processMap_["sai_thrift_set_hostif_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hostif_attribute;
    processMap_["sai_thrift_get_hostif_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hostif_attribute;
    processMap_["sai_thrift_create_hostif_table_entry"] = &sai_rpcProcessor::process_sai_thrift_create_hostif_table_entry;
    processMap_["sai_thrift_remove_hostif_table_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_hostif_table_entry;
    processMap_["sai_thrift_set_hostif_table_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_hostif_table_entry_attribute;
    processMap_["sai_thrift_get_hostif_table_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_hostif_table_entry_attribute;
    processMap_["sai_thrift_recv_hostif_packet"] = &sai_rpcProcessor::process_sai_thrift_recv_hostif_packet;
    processMap_["sai_thrift_send_hostif_packet"] = &sai_rpcProcessor::process_sai_thrift_send_hostif_packet;
    processMap_["sai_thrift_allocate_hostif_packet"] = &sai_rpcProcessor::process_sai_thrift_allocate_hostif_packet;
    processMap_["sai_thrift_free_hostif_packet"] = &sai_rpcProcessor::process_sai_thrift_free_hostif_packet;
    processMap_["sai_thrift_create_ipmc_entry"] = &sai_rpcProcessor::process_sai_thrift_create_ipmc_entry;
    processMap_["sai_thrift_remove_ipmc_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_ipmc_entry;
    processMap_["sai_thrift_set_ipmc_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipmc_entry_attribute;
    processMap_["sai_thrift_get_ipmc_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipmc_entry_attribute;
    processMap_["sai_thrift_create_ipmc_group"] = &sai_rpcProcessor::process_sai_thrift_create_ipmc_group;
    processMap_["sai_thrift_remove_ipmc_group"] = &sai_rpcProcessor::process_sai_thrift_remove_ipmc_group;
    processMap_["sai_thrift_set_ipmc_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipmc_group_attribute;
    processMap_["sai_thrift_get_ipmc_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipmc_group_attribute;
    processMap_["sai_thrift_create_ipmc_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_ipmc_group_member;
    processMap_["sai_thrift_remove_ipmc_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_ipmc_group_member;
    processMap_["sai_thrift_set_ipmc_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipmc_group_member_attribute;
    processMap_["sai_thrift_get_ipmc_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipmc_group_member_attribute;
    processMap_["sai_thrift_create_ipsec"] = &sai_rpcProcessor::process_sai_thrift_create_ipsec;
    processMap_["sai_thrift_remove_ipsec"] = &sai_rpcProcessor::process_sai_thrift_remove_ipsec;
    processMap_["sai_thrift_set_ipsec_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipsec_attribute;
    processMap_["sai_thrift_get_ipsec_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_attribute;
    processMap_["sai_thrift_create_ipsec_port"] = &sai_rpcProcessor::process_sai_thrift_create_ipsec_port;
    processMap_["sai_thrift_remove_ipsec_port"] = &sai_rpcProcessor::process_sai_thrift_remove_ipsec_port;
    processMap_["sai_thrift_set_ipsec_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipsec_port_attribute;
    processMap_["sai_thrift_get_ipsec_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_port_attribute;
    processMap_["sai_thrift_get_ipsec_port_stats"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_port_stats;
    processMap_["sai_thrift_get_ipsec_port_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_port_stats_ext;
    processMap_["sai_thrift_clear_ipsec_port_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_ipsec_port_stats;
    processMap_["sai_thrift_create_ipsec_sa"] = &sai_rpcProcessor::process_sai_thrift_create_ipsec_sa;
    processMap_["sai_thrift_remove_ipsec_sa"] = &sai_rpcProcessor::process_sai_thrift_remove_ipsec_sa;
    processMap_["sai_thrift_set_ipsec_sa_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_ipsec_sa_attribute;
    processMap_["sai_thrift_get_ipsec_sa_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_sa_attribute;
    processMap_["sai_thrift_get_ipsec_sa_stats"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_sa_stats;
    processMap_["sai_thrift_get_ipsec_sa_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_ipsec_sa_stats_ext;
    processMap_["sai_thrift_clear_ipsec_sa_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_ipsec_sa_stats;
    processMap_["sai_thrift_create_isolation_group"] = &sai_rpcProcessor::process_sai_thrift_create_isolation_group;
    processMap_["sai_thrift_remove_isolation_group"] = &sai_rpcProcessor::process_sai_thrift_remove_isolation_group;
    processMap_["sai_thrift_set_isolation_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_isolation_group_attribute;
    processMap_["sai_thrift_get_isolation_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_isolation_group_attribute;
    processMap_["sai_thrift_create_isolation_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_isolation_group_member;
    processMap_["sai_thrift_remove_isolation_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_isolation_group_member;
    processMap_["sai_thrift_set_isolation_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_isolation_group_member_attribute;
    processMap_["sai_thrift_get_isolation_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_isolation_group_member_attribute;
    processMap_["sai_thrift_create_l2mc_entry"] = &sai_rpcProcessor::process_sai_thrift_create_l2mc_entry;
    processMap_["sai_thrift_remove_l2mc_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_l2mc_entry;
    processMap_["sai_thrift_set_l2mc_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_l2mc_entry_attribute;
    processMap_["sai_thrift_get_l2mc_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_l2mc_entry_attribute;
    processMap_["sai_thrift_create_l2mc_group"] = &sai_rpcProcessor::process_sai_thrift_create_l2mc_group;
    processMap_["sai_thrift_remove_l2mc_group"] = &sai_rpcProcessor::process_sai_thrift_remove_l2mc_group;
    processMap_["sai_thrift_set_l2mc_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_l2mc_group_attribute;
    processMap_["sai_thrift_get_l2mc_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_l2mc_group_attribute;
    processMap_["sai_thrift_create_l2mc_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_l2mc_group_member;
    processMap_["sai_thrift_remove_l2mc_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_l2mc_group_member;
    processMap_["sai_thrift_set_l2mc_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_l2mc_group_member_attribute;
    processMap_["sai_thrift_get_l2mc_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_l2mc_group_member_attribute;
    processMap_["sai_thrift_create_lag"] = &sai_rpcProcessor::process_sai_thrift_create_lag;
    processMap_["sai_thrift_remove_lag"] = &sai_rpcProcessor::process_sai_thrift_remove_lag;
    processMap_["sai_thrift_set_lag_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_lag_attribute;
    processMap_["sai_thrift_get_lag_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_lag_attribute;
    processMap_["sai_thrift_create_lag_member"] = &sai_rpcProcessor::process_sai_thrift_create_lag_member;
    processMap_["sai_thrift_remove_lag_member"] = &sai_rpcProcessor::process_sai_thrift_remove_lag_member;
    processMap_["sai_thrift_set_lag_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_lag_member_attribute;
    processMap_["sai_thrift_get_lag_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_lag_member_attribute;
    processMap_["sai_thrift_create_macsec"] = &sai_rpcProcessor::process_sai_thrift_create_macsec;
    processMap_["sai_thrift_remove_macsec"] = &sai_rpcProcessor::process_sai_thrift_remove_macsec;
    processMap_["sai_thrift_set_macsec_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_macsec_attribute;
    processMap_["sai_thrift_get_macsec_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_attribute;
    processMap_["sai_thrift_create_macsec_port"] = &sai_rpcProcessor::process_sai_thrift_create_macsec_port;
    processMap_["sai_thrift_remove_macsec_port"] = &sai_rpcProcessor::process_sai_thrift_remove_macsec_port;
    processMap_["sai_thrift_set_macsec_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_macsec_port_attribute;
    processMap_["sai_thrift_get_macsec_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_port_attribute;
    processMap_["sai_thrift_get_macsec_port_stats"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_port_stats;
    processMap_["sai_thrift_get_macsec_port_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_port_stats_ext;
    processMap_["sai_thrift_clear_macsec_port_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_macsec_port_stats;
    processMap_["sai_thrift_create_macsec_flow"] = &sai_rpcProcessor::process_sai_thrift_create_macsec_flow;
    processMap_["sai_thrift_remove_macsec_flow"] = &sai_rpcProcessor::process_sai_thrift_remove_macsec_flow;
    processMap_["sai_thrift_set_macsec_flow_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_macsec_flow_attribute;
    processMap_["sai_thrift_get_macsec_flow_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_flow_attribute;
    processMap_["sai_thrift_get_macsec_flow_stats"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_flow_stats;
    processMap_["sai_thrift_get_macsec_flow_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_flow_stats_ext;
    processMap_["sai_thrift_clear_macsec_flow_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_macsec_flow_stats;
    processMap_["sai_thrift_create_macsec_sc"] = &sai_rpcProcessor::process_sai_thrift_create_macsec_sc;
    processMap_["sai_thrift_remove_macsec_sc"] = &sai_rpcProcessor::process_sai_thrift_remove_macsec_sc;
    processMap_["sai_thrift_set_macsec_sc_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_macsec_sc_attribute;
    processMap_["sai_thrift_get_macsec_sc_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sc_attribute;
    processMap_["sai_thrift_get_macsec_sc_stats"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sc_stats;
    processMap_["sai_thrift_get_macsec_sc_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sc_stats_ext;
    processMap_["sai_thrift_clear_macsec_sc_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_macsec_sc_stats;
    processMap_["sai_thrift_create_macsec_sa"] = &sai_rpcProcessor::process_sai_thrift_create_macsec_sa;
    processMap_["sai_thrift_remove_macsec_sa"] = &sai_rpcProcessor::process_sai_thrift_remove_macsec_sa;
    processMap_["sai_thrift_set_macsec_sa_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_macsec_sa_attribute;
    processMap_["sai_thrift_get_macsec_sa_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sa_attribute;
    processMap_["sai_thrift_get_macsec_sa_stats"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sa_stats;
    processMap_["sai_thrift_get_macsec_sa_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_macsec_sa_stats_ext;
    processMap_["sai_thrift_clear_macsec_sa_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_macsec_sa_stats;
    processMap_["sai_thrift_create_mcast_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_create_mcast_fdb_entry;
    processMap_["sai_thrift_remove_mcast_fdb_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_mcast_fdb_entry;
    processMap_["sai_thrift_set_mcast_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_get_mcast_fdb_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_create_mirror_session"] = &sai_rpcProcessor::process_sai_thrift_create_mirror_session;
    processMap_["sai_thrift_remove_mirror_session"] = &sai_rpcProcessor::process_sai_thrift_remove_mirror_session;
    processMap_["sai_thrift_set_mirror_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_mirror_session_attribute;
    processMap_["sai_thrift_get_mirror_session_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_mirror_session_attribute;
    processMap_["sai_thrift_create_inseg_entry"] = &sai_rpcProcessor::process_sai_thrift_create_inseg_entry;
    processMap_["sai_thrift_remove_inseg_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_inseg_entry;
    processMap_["sai_thrift_set_inseg_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_inseg_entry_attribute;
    processMap_["sai_thrift_get_inseg_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_inseg_entry_attribute;
    processMap_["sai_thrift_bulk_create_inseg_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_inseg_entry;
    processMap_["sai_thrift_bulk_remove_inseg_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_inseg_entry;
    processMap_["sai_thrift_bulk_set_inseg_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_inseg_entry_attribute;
    processMap_["sai_thrift_bulk_get_inseg_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_inseg_entry_attribute;
    processMap_["sai_thrift_create_my_mac"] = &sai_rpcProcessor::process_sai_thrift_create_my_mac;
    processMap_["sai_thrift_remove_my_mac"] = &sai_rpcProcessor::process_sai_thrift_remove_my_mac;
    processMap_["sai_thrift_set_my_mac_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_my_mac_attribute;
    processMap_["sai_thrift_get_my_mac_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_my_mac_attribute;
    processMap_["sai_thrift_create_nat_entry"] = &sai_rpcProcessor::process_sai_thrift_create_nat_entry;
    processMap_["sai_thrift_remove_nat_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_nat_entry;
    processMap_["sai_thrift_set_nat_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_nat_entry_attribute;
    processMap_["sai_thrift_get_nat_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_nat_entry_attribute;
    processMap_["sai_thrift_bulk_create_nat_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_nat_entry;
    processMap_["sai_thrift_bulk_remove_nat_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_nat_entry;
    processMap_["sai_thrift_bulk_set_nat_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_nat_entry_attribute;
    processMap_["sai_thrift_bulk_get_nat_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_nat_entry_attribute;
    processMap_["sai_thrift_create_nat_zone_counter"] = &sai_rpcProcessor::process_sai_thrift_create_nat_zone_counter;
    processMap_["sai_thrift_remove_nat_zone_counter"] = &sai_rpcProcessor::process_sai_thrift_remove_nat_zone_counter;
    processMap_["sai_thrift_set_nat_zone_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_nat_zone_counter_attribute;
    processMap_["sai_thrift_get_nat_zone_counter_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_nat_zone_counter_attribute;
    processMap_["sai_thrift_create_neighbor_entry"] = &sai_rpcProcessor::process_sai_thrift_create_neighbor_entry;
    processMap_["sai_thrift_remove_neighbor_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_neighbor_entry;
    processMap_["sai_thrift_set_neighbor_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_neighbor_entry_attribute;
    processMap_["sai_thrift_get_neighbor_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_neighbor_entry_attribute;
    processMap_["sai_thrift_remove_all_neighbor_entries"] = &sai_rpcProcessor::process_sai_thrift_remove_all_neighbor_entries;
    processMap_["sai_thrift_bulk_create_neighbor_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_neighbor_entry;
    processMap_["sai_thrift_bulk_remove_neighbor_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_neighbor_entry;
    processMap_["sai_thrift_bulk_set_neighbor_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_neighbor_entry_attribute;
    processMap_["sai_thrift_bulk_get_neighbor_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_neighbor_entry_attribute;
    processMap_["sai_thrift_create_next_hop"] = &sai_rpcProcessor::process_sai_thrift_create_next_hop;
    processMap_["sai_thrift_remove_next_hop"] = &sai_rpcProcessor::process_sai_thrift_remove_next_hop;
    processMap_["sai_thrift_set_next_hop_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_next_hop_attribute;
    processMap_["sai_thrift_get_next_hop_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_next_hop_attribute;
    processMap_["sai_thrift_create_next_hop_group"] = &sai_rpcProcessor::process_sai_thrift_create_next_hop_group;
    processMap_["sai_thrift_remove_next_hop_group"] = &sai_rpcProcessor::process_sai_thrift_remove_next_hop_group;
    processMap_["sai_thrift_set_next_hop_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_next_hop_group_attribute;
    processMap_["sai_thrift_get_next_hop_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_next_hop_group_attribute;
    processMap_["sai_thrift_create_next_hop_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_next_hop_group_member;
    processMap_["sai_thrift_remove_next_hop_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_next_hop_group_member;
    processMap_["sai_thrift_set_next_hop_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_next_hop_group_member_attribute;
    processMap_["sai_thrift_get_next_hop_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_next_hop_group_member_attribute;
    processMap_["sai_thrift_create_next_hop_group_map"] = &sai_rpcProcessor::process_sai_thrift_create_next_hop_group_map;
    processMap_["sai_thrift_remove_next_hop_group_map"] = &sai_rpcProcessor::process_sai_thrift_remove_next_hop_group_map;
    processMap_["sai_thrift_set_next_hop_group_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_next_hop_group_map_attribute;
    processMap_["sai_thrift_get_next_hop_group_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_next_hop_group_map_attribute;
    processMap_["sai_thrift_create_policer"] = &sai_rpcProcessor::process_sai_thrift_create_policer;
    processMap_["sai_thrift_remove_policer"] = &sai_rpcProcessor::process_sai_thrift_remove_policer;
    processMap_["sai_thrift_set_policer_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_policer_attribute;
    processMap_["sai_thrift_get_policer_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_policer_attribute;
    processMap_["sai_thrift_get_policer_stats"] = &sai_rpcProcessor::process_sai_thrift_get_policer_stats;
    processMap_["sai_thrift_get_policer_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_policer_stats_ext;
    processMap_["sai_thrift_clear_policer_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_policer_stats;
    processMap_["sai_thrift_create_port"] = &sai_rpcProcessor::process_sai_thrift_create_port;
    processMap_["sai_thrift_remove_port"] = &sai_rpcProcessor::process_sai_thrift_remove_port;
    processMap_["sai_thrift_set_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_port_attribute;
    processMap_["sai_thrift_get_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_port_attribute;
    processMap_["sai_thrift_get_port_stats"] = &sai_rpcProcessor::process_sai_thrift_get_port_stats;
    processMap_["sai_thrift_get_port_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_port_stats_ext;
    processMap_["sai_thrift_clear_port_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_port_stats;
    processMap_["sai_thrift_clear_port_all_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_port_all_stats;
    processMap_["sai_thrift_create_port_pool"] = &sai_rpcProcessor::process_sai_thrift_create_port_pool;
    processMap_["sai_thrift_remove_port_pool"] = &sai_rpcProcessor::process_sai_thrift_remove_port_pool;
    processMap_["sai_thrift_set_port_pool_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_port_pool_attribute;
    processMap_["sai_thrift_get_port_pool_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_port_pool_attribute;
    processMap_["sai_thrift_get_port_pool_stats"] = &sai_rpcProcessor::process_sai_thrift_get_port_pool_stats;
    processMap_["sai_thrift_get_port_pool_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_port_pool_stats_ext;
    processMap_["sai_thrift_clear_port_pool_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_port_pool_stats;
    processMap_["sai_thrift_create_port_serdes"] = &sai_rpcProcessor::process_sai_thrift_create_port_serdes;
    processMap_["sai_thrift_remove_port_serdes"] = &sai_rpcProcessor::process_sai_thrift_remove_port_serdes;
    processMap_["sai_thrift_set_port_serdes_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_port_serdes_attribute;
    processMap_["sai_thrift_get_port_serdes_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_port_serdes_attribute;
    processMap_["sai_thrift_create_port_connector"] = &sai_rpcProcessor::process_sai_thrift_create_port_connector;
    processMap_["sai_thrift_remove_port_connector"] = &sai_rpcProcessor::process_sai_thrift_remove_port_connector;
    processMap_["sai_thrift_set_port_connector_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_port_connector_attribute;
    processMap_["sai_thrift_get_port_connector_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_port_connector_attribute;
    processMap_["sai_thrift_create_qos_map"] = &sai_rpcProcessor::process_sai_thrift_create_qos_map;
    processMap_["sai_thrift_remove_qos_map"] = &sai_rpcProcessor::process_sai_thrift_remove_qos_map;
    processMap_["sai_thrift_set_qos_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_qos_map_attribute;
    processMap_["sai_thrift_get_qos_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_qos_map_attribute;
    processMap_["sai_thrift_create_queue"] = &sai_rpcProcessor::process_sai_thrift_create_queue;
    processMap_["sai_thrift_remove_queue"] = &sai_rpcProcessor::process_sai_thrift_remove_queue;
    processMap_["sai_thrift_set_queue_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_queue_attribute;
    processMap_["sai_thrift_get_queue_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_queue_attribute;
    processMap_["sai_thrift_get_queue_stats"] = &sai_rpcProcessor::process_sai_thrift_get_queue_stats;
    processMap_["sai_thrift_get_queue_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_queue_stats_ext;
    processMap_["sai_thrift_clear_queue_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_queue_stats;
    processMap_["sai_thrift_create_route_entry"] = &sai_rpcProcessor::process_sai_thrift_create_route_entry;
    processMap_["sai_thrift_remove_route_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_route_entry;
    processMap_["sai_thrift_set_route_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_route_entry_attribute;
    processMap_["sai_thrift_get_route_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_route_entry_attribute;
    processMap_["sai_thrift_bulk_create_route_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_route_entry;
    processMap_["sai_thrift_bulk_remove_route_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_route_entry;
    processMap_["sai_thrift_bulk_set_route_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_route_entry_attribute;
    processMap_["sai_thrift_bulk_get_route_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_route_entry_attribute;
    processMap_["sai_thrift_create_router_interface"] = &sai_rpcProcessor::process_sai_thrift_create_router_interface;
    processMap_["sai_thrift_remove_router_interface"] = &sai_rpcProcessor::process_sai_thrift_remove_router_interface;
    processMap_["sai_thrift_set_router_interface_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_router_interface_attribute;
    processMap_["sai_thrift_get_router_interface_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_router_interface_attribute;
    processMap_["sai_thrift_get_router_interface_stats"] = &sai_rpcProcessor::process_sai_thrift_get_router_interface_stats;
    processMap_["sai_thrift_get_router_interface_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_router_interface_stats_ext;
    processMap_["sai_thrift_clear_router_interface_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_router_interface_stats;
    processMap_["sai_thrift_create_rpf_group"] = &sai_rpcProcessor::process_sai_thrift_create_rpf_group;
    processMap_["sai_thrift_remove_rpf_group"] = &sai_rpcProcessor::process_sai_thrift_remove_rpf_group;
    processMap_["sai_thrift_set_rpf_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_rpf_group_attribute;
    processMap_["sai_thrift_get_rpf_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_rpf_group_attribute;
    processMap_["sai_thrift_create_rpf_group_member"] = &sai_rpcProcessor::process_sai_thrift_create_rpf_group_member;
    processMap_["sai_thrift_remove_rpf_group_member"] = &sai_rpcProcessor::process_sai_thrift_remove_rpf_group_member;
    processMap_["sai_thrift_set_rpf_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_rpf_group_member_attribute;
    processMap_["sai_thrift_get_rpf_group_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_rpf_group_member_attribute;
    processMap_["sai_thrift_create_samplepacket"] = &sai_rpcProcessor::process_sai_thrift_create_samplepacket;
    processMap_["sai_thrift_remove_samplepacket"] = &sai_rpcProcessor::process_sai_thrift_remove_samplepacket;
    processMap_["sai_thrift_set_samplepacket_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_samplepacket_attribute;
    processMap_["sai_thrift_get_samplepacket_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_samplepacket_attribute;
    processMap_["sai_thrift_create_scheduler"] = &sai_rpcProcessor::process_sai_thrift_create_scheduler;
    processMap_["sai_thrift_remove_scheduler"] = &sai_rpcProcessor::process_sai_thrift_remove_scheduler;
    processMap_["sai_thrift_set_scheduler_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_scheduler_attribute;
    processMap_["sai_thrift_get_scheduler_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_scheduler_attribute;
    processMap_["sai_thrift_create_scheduler_group"] = &sai_rpcProcessor::process_sai_thrift_create_scheduler_group;
    processMap_["sai_thrift_remove_scheduler_group"] = &sai_rpcProcessor::process_sai_thrift_remove_scheduler_group;
    processMap_["sai_thrift_set_scheduler_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_scheduler_group_attribute;
    processMap_["sai_thrift_get_scheduler_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_scheduler_group_attribute;
    processMap_["sai_thrift_create_srv6_sidlist"] = &sai_rpcProcessor::process_sai_thrift_create_srv6_sidlist;
    processMap_["sai_thrift_remove_srv6_sidlist"] = &sai_rpcProcessor::process_sai_thrift_remove_srv6_sidlist;
    processMap_["sai_thrift_set_srv6_sidlist_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_srv6_sidlist_attribute;
    processMap_["sai_thrift_get_srv6_sidlist_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_srv6_sidlist_attribute;
    processMap_["sai_thrift_get_srv6_sidlist_stats"] = &sai_rpcProcessor::process_sai_thrift_get_srv6_sidlist_stats;
    processMap_["sai_thrift_get_srv6_sidlist_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_srv6_sidlist_stats_ext;
    processMap_["sai_thrift_clear_srv6_sidlist_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_srv6_sidlist_stats;
    processMap_["sai_thrift_create_my_sid_entry"] = &sai_rpcProcessor::process_sai_thrift_create_my_sid_entry;
    processMap_["sai_thrift_remove_my_sid_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_my_sid_entry;
    processMap_["sai_thrift_set_my_sid_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_my_sid_entry_attribute;
    processMap_["sai_thrift_get_my_sid_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_my_sid_entry_attribute;
    processMap_["sai_thrift_bulk_create_my_sid_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_create_my_sid_entry;
    processMap_["sai_thrift_bulk_remove_my_sid_entry"] = &sai_rpcProcessor::process_sai_thrift_bulk_remove_my_sid_entry;
    processMap_["sai_thrift_bulk_set_my_sid_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_set_my_sid_entry_attribute;
    processMap_["sai_thrift_bulk_get_my_sid_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_bulk_get_my_sid_entry_attribute;
    processMap_["sai_thrift_create_stp"] = &sai_rpcProcessor::process_sai_thrift_create_stp;
    processMap_["sai_thrift_remove_stp"] = &sai_rpcProcessor::process_sai_thrift_remove_stp;
    processMap_["sai_thrift_set_stp_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_stp_attribute;
    processMap_["sai_thrift_get_stp_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_stp_attribute;
    processMap_["sai_thrift_create_stp_port"] = &sai_rpcProcessor::process_sai_thrift_create_stp_port;
    processMap_["sai_thrift_remove_stp_port"] = &sai_rpcProcessor::process_sai_thrift_remove_stp_port;
    processMap_["sai_thrift_set_stp_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_stp_port_attribute;
    processMap_["sai_thrift_get_stp_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_stp_port_attribute;
    processMap_["sai_thrift_switch_register_read"] = &sai_rpcProcessor::process_sai_thrift_switch_register_read;
    processMap_["sai_thrift_switch_register_write"] = &sai_rpcProcessor::process_sai_thrift_switch_register_write;
    processMap_["sai_thrift_switch_mdio_read"] = &sai_rpcProcessor::process_sai_thrift_switch_mdio_read;
    processMap_["sai_thrift_switch_mdio_write"] = &sai_rpcProcessor::process_sai_thrift_switch_mdio_write;
    processMap_["sai_thrift_switch_mdio_cl22_read"] = &sai_rpcProcessor::process_sai_thrift_switch_mdio_cl22_read;
    processMap_["sai_thrift_switch_mdio_cl22_write"] = &sai_rpcProcessor::process_sai_thrift_switch_mdio_cl22_write;
    processMap_["sai_thrift_create_switch"] = &sai_rpcProcessor::process_sai_thrift_create_switch;
    processMap_["sai_thrift_remove_switch"] = &sai_rpcProcessor::process_sai_thrift_remove_switch;
    processMap_["sai_thrift_set_switch_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_switch_attribute;
    processMap_["sai_thrift_get_switch_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_switch_attribute;
    processMap_["sai_thrift_get_switch_stats"] = &sai_rpcProcessor::process_sai_thrift_get_switch_stats;
    processMap_["sai_thrift_get_switch_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_switch_stats_ext;
    processMap_["sai_thrift_clear_switch_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_switch_stats;
    processMap_["sai_thrift_create_switch_tunnel"] = &sai_rpcProcessor::process_sai_thrift_create_switch_tunnel;
    processMap_["sai_thrift_remove_switch_tunnel"] = &sai_rpcProcessor::process_sai_thrift_remove_switch_tunnel;
    processMap_["sai_thrift_set_switch_tunnel_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_switch_tunnel_attribute;
    processMap_["sai_thrift_get_switch_tunnel_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_switch_tunnel_attribute;
    processMap_["sai_thrift_create_system_port"] = &sai_rpcProcessor::process_sai_thrift_create_system_port;
    processMap_["sai_thrift_remove_system_port"] = &sai_rpcProcessor::process_sai_thrift_remove_system_port;
    processMap_["sai_thrift_set_system_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_system_port_attribute;
    processMap_["sai_thrift_get_system_port_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_system_port_attribute;
    processMap_["sai_thrift_create_tam"] = &sai_rpcProcessor::process_sai_thrift_create_tam;
    processMap_["sai_thrift_remove_tam"] = &sai_rpcProcessor::process_sai_thrift_remove_tam;
    processMap_["sai_thrift_set_tam_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_attribute;
    processMap_["sai_thrift_get_tam_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_attribute;
    processMap_["sai_thrift_create_tam_math_func"] = &sai_rpcProcessor::process_sai_thrift_create_tam_math_func;
    processMap_["sai_thrift_remove_tam_math_func"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_math_func;
    processMap_["sai_thrift_get_tam_math_func_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_math_func_attribute;
    processMap_["sai_thrift_set_tam_math_func_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_math_func_attribute;
    processMap_["sai_thrift_create_tam_event_threshold"] = &sai_rpcProcessor::process_sai_thrift_create_tam_event_threshold;
    processMap_["sai_thrift_remove_tam_event_threshold"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_event_threshold;
    processMap_["sai_thrift_get_tam_event_threshold_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_event_threshold_attribute;
    processMap_["sai_thrift_set_tam_event_threshold_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_event_threshold_attribute;
    processMap_["sai_thrift_create_tam_int"] = &sai_rpcProcessor::process_sai_thrift_create_tam_int;
    processMap_["sai_thrift_remove_tam_int"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_int;
    processMap_["sai_thrift_get_tam_int_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_int_attribute;
    processMap_["sai_thrift_set_tam_int_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_int_attribute;
    processMap_["sai_thrift_create_tam_tel_type"] = &sai_rpcProcessor::process_sai_thrift_create_tam_tel_type;
    processMap_["sai_thrift_remove_tam_tel_type"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_tel_type;
    processMap_["sai_thrift_get_tam_tel_type_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_tel_type_attribute;
    processMap_["sai_thrift_set_tam_tel_type_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_tel_type_attribute;
    processMap_["sai_thrift_create_tam_report"] = &sai_rpcProcessor::process_sai_thrift_create_tam_report;
    processMap_["sai_thrift_remove_tam_report"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_report;
    processMap_["sai_thrift_get_tam_report_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_report_attribute;
    processMap_["sai_thrift_set_tam_report_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_report_attribute;
    processMap_["sai_thrift_create_tam_telemetry"] = &sai_rpcProcessor::process_sai_thrift_create_tam_telemetry;
    processMap_["sai_thrift_remove_tam_telemetry"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_telemetry;
    processMap_["sai_thrift_get_tam_telemetry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_telemetry_attribute;
    processMap_["sai_thrift_set_tam_telemetry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_telemetry_attribute;
    processMap_["sai_thrift_create_tam_transport"] = &sai_rpcProcessor::process_sai_thrift_create_tam_transport;
    processMap_["sai_thrift_remove_tam_transport"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_transport;
    processMap_["sai_thrift_get_tam_transport_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_transport_attribute;
    processMap_["sai_thrift_set_tam_transport_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_transport_attribute;
    processMap_["sai_thrift_create_tam_collector"] = &sai_rpcProcessor::process_sai_thrift_create_tam_collector;
    processMap_["sai_thrift_remove_tam_collector"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_collector;
    processMap_["sai_thrift_get_tam_collector_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_collector_attribute;
    processMap_["sai_thrift_set_tam_collector_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_collector_attribute;
    processMap_["sai_thrift_create_tam_event_action"] = &sai_rpcProcessor::process_sai_thrift_create_tam_event_action;
    processMap_["sai_thrift_remove_tam_event_action"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_event_action;
    processMap_["sai_thrift_get_tam_event_action_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_event_action_attribute;
    processMap_["sai_thrift_set_tam_event_action_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_event_action_attribute;
    processMap_["sai_thrift_create_tam_event"] = &sai_rpcProcessor::process_sai_thrift_create_tam_event;
    processMap_["sai_thrift_remove_tam_event"] = &sai_rpcProcessor::process_sai_thrift_remove_tam_event;
    processMap_["sai_thrift_get_tam_event_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tam_event_attribute;
    processMap_["sai_thrift_set_tam_event_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tam_event_attribute;
    processMap_["sai_thrift_create_tunnel_map"] = &sai_rpcProcessor::process_sai_thrift_create_tunnel_map;
    processMap_["sai_thrift_remove_tunnel_map"] = &sai_rpcProcessor::process_sai_thrift_remove_tunnel_map;
    processMap_["sai_thrift_set_tunnel_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tunnel_map_attribute;
    processMap_["sai_thrift_get_tunnel_map_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_map_attribute;
    processMap_["sai_thrift_create_tunnel"] = &sai_rpcProcessor::process_sai_thrift_create_tunnel;
    processMap_["sai_thrift_remove_tunnel"] = &sai_rpcProcessor::process_sai_thrift_remove_tunnel;
    processMap_["sai_thrift_set_tunnel_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tunnel_attribute;
    processMap_["sai_thrift_get_tunnel_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_attribute;
    processMap_["sai_thrift_get_tunnel_stats"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_stats;
    processMap_["sai_thrift_get_tunnel_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_stats_ext;
    processMap_["sai_thrift_clear_tunnel_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_tunnel_stats;
    processMap_["sai_thrift_create_tunnel_term_table_entry"] = &sai_rpcProcessor::process_sai_thrift_create_tunnel_term_table_entry;
    processMap_["sai_thrift_remove_tunnel_term_table_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_tunnel_term_table_entry;
    processMap_["sai_thrift_set_tunnel_term_table_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_get_tunnel_term_table_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_create_tunnel_map_entry"] = &sai_rpcProcessor::process_sai_thrift_create_tunnel_map_entry;
    processMap_["sai_thrift_remove_tunnel_map_entry"] = &sai_rpcProcessor::process_sai_thrift_remove_tunnel_map_entry;
    processMap_["sai_thrift_set_tunnel_map_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_tunnel_map_entry_attribute;
    processMap_["sai_thrift_get_tunnel_map_entry_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_tunnel_map_entry_attribute;
    processMap_["sai_thrift_create_udf"] = &sai_rpcProcessor::process_sai_thrift_create_udf;
    processMap_["sai_thrift_remove_udf"] = &sai_rpcProcessor::process_sai_thrift_remove_udf;
    processMap_["sai_thrift_set_udf_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_udf_attribute;
    processMap_["sai_thrift_get_udf_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_udf_attribute;
    processMap_["sai_thrift_create_udf_match"] = &sai_rpcProcessor::process_sai_thrift_create_udf_match;
    processMap_["sai_thrift_remove_udf_match"] = &sai_rpcProcessor::process_sai_thrift_remove_udf_match;
    processMap_["sai_thrift_set_udf_match_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_udf_match_attribute;
    processMap_["sai_thrift_get_udf_match_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_udf_match_attribute;
    processMap_["sai_thrift_create_udf_group"] = &sai_rpcProcessor::process_sai_thrift_create_udf_group;
    processMap_["sai_thrift_remove_udf_group"] = &sai_rpcProcessor::process_sai_thrift_remove_udf_group;
    processMap_["sai_thrift_set_udf_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_udf_group_attribute;
    processMap_["sai_thrift_get_udf_group_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_udf_group_attribute;
    processMap_["sai_thrift_create_virtual_router"] = &sai_rpcProcessor::process_sai_thrift_create_virtual_router;
    processMap_["sai_thrift_remove_virtual_router"] = &sai_rpcProcessor::process_sai_thrift_remove_virtual_router;
    processMap_["sai_thrift_set_virtual_router_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_virtual_router_attribute;
    processMap_["sai_thrift_get_virtual_router_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_virtual_router_attribute;
    processMap_["sai_thrift_create_vlan"] = &sai_rpcProcessor::process_sai_thrift_create_vlan;
    processMap_["sai_thrift_remove_vlan"] = &sai_rpcProcessor::process_sai_thrift_remove_vlan;
    processMap_["sai_thrift_set_vlan_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_vlan_attribute;
    processMap_["sai_thrift_get_vlan_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_vlan_attribute;
    processMap_["sai_thrift_create_vlan_member"] = &sai_rpcProcessor::process_sai_thrift_create_vlan_member;
    processMap_["sai_thrift_remove_vlan_member"] = &sai_rpcProcessor::process_sai_thrift_remove_vlan_member;
    processMap_["sai_thrift_set_vlan_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_vlan_member_attribute;
    processMap_["sai_thrift_get_vlan_member_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_vlan_member_attribute;
    processMap_["sai_thrift_get_vlan_stats"] = &sai_rpcProcessor::process_sai_thrift_get_vlan_stats;
    processMap_["sai_thrift_get_vlan_stats_ext"] = &sai_rpcProcessor::process_sai_thrift_get_vlan_stats_ext;
    processMap_["sai_thrift_clear_vlan_stats"] = &sai_rpcProcessor::process_sai_thrift_clear_vlan_stats;
    processMap_["sai_thrift_create_wred"] = &sai_rpcProcessor::process_sai_thrift_create_wred;
    processMap_["sai_thrift_remove_wred"] = &sai_rpcProcessor::process_sai_thrift_remove_wred;
    processMap_["sai_thrift_set_wred_attribute"] = &sai_rpcProcessor::process_sai_thrift_set_wred_attribute;
    processMap_["sai_thrift_get_wred_attribute"] = &sai_rpcProcessor::process_sai_thrift_get_wred_attribute;
    processMap_["sai_thrift_query_attribute_enum_values_capability"] = &sai_rpcProcessor::process_sai_thrift_query_attribute_enum_values_capability;
    processMap_["sai_thrift_object_type_get_availability"] = &sai_rpcProcessor::process_sai_thrift_object_type_get_availability;
    processMap_["sai_thrift_switch_id_query"] = &sai_rpcProcessor::process_sai_thrift_switch_id_query;
    processMap_["sai_thrift_object_type_query"] = &sai_rpcProcessor::process_sai_thrift_object_type_query;
    processMap_["sai_thrift_api_uninitialize"] = &sai_rpcProcessor::process_sai_thrift_api_uninitialize;
  }

  virtual ~sai_rpcProcessor() {}
};

class sai_rpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  sai_rpcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< sai_rpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< sai_rpcIfFactory > handlerFactory_;
};

class sai_rpcMultiface : virtual public sai_rpcIf {
 public:
  sai_rpcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<sai_rpcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~sai_rpcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<sai_rpcIf> > ifaces_;
  sai_rpcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<sai_rpcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table(attr_list);
  }

  void sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table(acl_table_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_table(acl_table_oid);
  }

  void sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_table_attribute(acl_table_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_table_attribute(acl_table_oid, attr);
  }

  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_entry(attr_list);
  }

  void sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry_oid);
  }

  void sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_oid, attr);
  }

  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_counter(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_counter(attr_list);
  }

  void sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_oid);
  }

  void sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_counter_attribute(acl_counter_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_counter_attribute(acl_counter_oid, attr);
  }

  void sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_range(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_range(attr_list);
  }

  void sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_range(acl_range_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_range(acl_range_oid);
  }

  void sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_range_attribute(acl_range_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_range_attribute(acl_range_oid, attr);
  }

  void sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_range_attribute(_return, acl_range_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_range_attribute(_return, acl_range_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group(attr_list);
  }

  void sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_oid);
  }

  void sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_table_group_attribute(acl_table_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_table_group_attribute(acl_table_group_oid, attr);
  }

  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group_member(attr_list);
  }

  void sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid);
  }

  void sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_table_group_member_attribute(acl_table_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_table_group_member_attribute(acl_table_group_member_oid, attr);
  }

  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_chain_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_chain_group(attr_list);
  }

  void sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_chain_group(acl_table_chain_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_acl_table_chain_group(acl_table_chain_group_oid);
  }

  void sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_table_chain_group_attribute(acl_table_chain_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_acl_table_chain_group_attribute(acl_table_chain_group_oid, attr);
  }

  void sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_chain_group_attribute(_return, acl_table_chain_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_acl_table_chain_group_attribute(_return, acl_table_chain_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ars(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ars(attr_list);
  }

  void sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ars(ars_oid);
    }
    ifaces_[i]->sai_thrift_remove_ars(ars_oid);
  }

  void sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ars_attribute(ars_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ars_attribute(ars_oid, attr);
  }

  void sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ars_attribute(_return, ars_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ars_attribute(_return, ars_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ars_profile(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ars_profile(attr_list);
  }

  void sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ars_profile(ars_profile_oid);
    }
    ifaces_[i]->sai_thrift_remove_ars_profile(ars_profile_oid);
  }

  void sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ars_profile_attribute(ars_profile_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ars_profile_attribute(ars_profile_oid, attr);
  }

  void sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ars_profile_attribute(_return, ars_profile_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ars_profile_attribute(_return, ars_profile_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bfd_session(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_bfd_session(attr_list);
  }

  void sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bfd_session(bfd_session_oid);
    }
    ifaces_[i]->sai_thrift_remove_bfd_session(bfd_session_oid);
  }

  void sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bfd_session_attribute(bfd_session_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_bfd_session_attribute(bfd_session_oid, attr);
  }

  void sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bfd_session_attribute(_return, bfd_session_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_bfd_session_attribute(_return, bfd_session_oid, attr_list);
    return;
  }

  void sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bfd_session_stats(_return, bfd_session_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_bfd_session_stats(_return, bfd_session_oid, counter_ids);
    return;
  }

  void sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bfd_session_stats_ext(_return, bfd_session_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_bfd_session_stats_ext(_return, bfd_session_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_bfd_session_stats(bfd_session_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_bfd_session_stats(bfd_session_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_table_bitmap_classification_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_table_bitmap_classification_entry(attr_list);
  }

  void sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_table_bitmap_classification_entry(table_bitmap_classification_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_table_bitmap_classification_entry(table_bitmap_classification_entry_oid);
  }

  void sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_table_bitmap_classification_entry_attribute(table_bitmap_classification_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_table_bitmap_classification_entry_attribute(table_bitmap_classification_entry_oid, attr);
  }

  void sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_attribute(_return, table_bitmap_classification_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_attribute(_return, table_bitmap_classification_entry_oid, attr_list);
    return;
  }

  void sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_stats(_return, table_bitmap_classification_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_stats(_return, table_bitmap_classification_entry_oid, counter_ids);
    return;
  }

  void sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_stats_ext(_return, table_bitmap_classification_entry_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_classification_entry_stats_ext(_return, table_bitmap_classification_entry_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_table_bitmap_classification_entry_stats(table_bitmap_classification_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_table_bitmap_classification_entry_stats(table_bitmap_classification_entry_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_table_bitmap_router_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_table_bitmap_router_entry(attr_list);
  }

  void sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_table_bitmap_router_entry(table_bitmap_router_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_table_bitmap_router_entry(table_bitmap_router_entry_oid);
  }

  void sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_table_bitmap_router_entry_attribute(table_bitmap_router_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_table_bitmap_router_entry_attribute(table_bitmap_router_entry_oid, attr);
  }

  void sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_attribute(_return, table_bitmap_router_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_attribute(_return, table_bitmap_router_entry_oid, attr_list);
    return;
  }

  void sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_stats(_return, table_bitmap_router_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_stats(_return, table_bitmap_router_entry_oid, counter_ids);
    return;
  }

  void sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_stats_ext(_return, table_bitmap_router_entry_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_table_bitmap_router_entry_stats_ext(_return, table_bitmap_router_entry_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_table_bitmap_router_entry_stats(table_bitmap_router_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_table_bitmap_router_entry_stats(table_bitmap_router_entry_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_table_meta_tunnel_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_table_meta_tunnel_entry(attr_list);
  }

  void sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_table_meta_tunnel_entry(table_meta_tunnel_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_table_meta_tunnel_entry(table_meta_tunnel_entry_oid);
  }

  void sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_table_meta_tunnel_entry_attribute(table_meta_tunnel_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_table_meta_tunnel_entry_attribute(table_meta_tunnel_entry_oid, attr);
  }

  void sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_attribute(_return, table_meta_tunnel_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_attribute(_return, table_meta_tunnel_entry_oid, attr_list);
    return;
  }

  void sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_stats(_return, table_meta_tunnel_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_stats(_return, table_meta_tunnel_entry_oid, counter_ids);
    return;
  }

  void sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_stats_ext(_return, table_meta_tunnel_entry_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_table_meta_tunnel_entry_stats_ext(_return, table_meta_tunnel_entry_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_table_meta_tunnel_entry_stats(table_meta_tunnel_entry_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_table_meta_tunnel_entry_stats(table_meta_tunnel_entry_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_bridge_port(attr_list);
  }

  void sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_oid);
    }
    ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_oid);
  }

  void sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_oid, attr);
  }

  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_oid, attr_list);
    return;
  }

  void sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_stats(_return, bridge_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_stats(_return, bridge_port_oid, counter_ids);
    return;
  }

  void sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_stats_ext(_return, bridge_port_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_stats_ext(_return, bridge_port_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_bridge_port_stats(bridge_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_bridge_port_stats(bridge_port_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_bridge(attr_list);
  }

  void sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge(bridge_oid);
    }
    ifaces_[i]->sai_thrift_remove_bridge(bridge_oid);
  }

  void sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_oid, attr);
  }

  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_oid, attr_list);
    return;
  }

  void sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_stats(_return, bridge_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_bridge_stats(_return, bridge_oid, counter_ids);
    return;
  }

  void sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_stats_ext(_return, bridge_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_bridge_stats_ext(_return, bridge_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_bridge_stats(bridge_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_bridge_stats(bridge_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ingress_priority_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ingress_priority_group(attr_list);
  }

  void sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ingress_priority_group(ingress_priority_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_ingress_priority_group(ingress_priority_group_oid);
  }

  void sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ingress_priority_group_attribute(ingress_priority_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ingress_priority_group_attribute(ingress_priority_group_oid, attr);
  }

  void sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ingress_priority_group_attribute(_return, ingress_priority_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ingress_priority_group_attribute(_return, ingress_priority_group_oid, attr_list);
    return;
  }

  void sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ingress_priority_group_stats(_return, ingress_priority_group_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_ingress_priority_group_stats(_return, ingress_priority_group_oid, counter_ids);
    return;
  }

  void sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ingress_priority_group_stats_ext(_return, ingress_priority_group_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_ingress_priority_group_stats_ext(_return, ingress_priority_group_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_ingress_priority_group_stats(ingress_priority_group_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_ingress_priority_group_stats(ingress_priority_group_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_buffer_pool(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_buffer_pool(attr_list);
  }

  void sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_buffer_pool(buffer_pool_oid);
    }
    ifaces_[i]->sai_thrift_remove_buffer_pool(buffer_pool_oid);
  }

  void sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_buffer_pool_attribute(buffer_pool_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_buffer_pool_attribute(buffer_pool_oid, attr);
  }

  void sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_pool_attribute(_return, buffer_pool_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_buffer_pool_attribute(_return, buffer_pool_oid, attr_list);
    return;
  }

  void sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_pool_stats(_return, buffer_pool_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_buffer_pool_stats(_return, buffer_pool_oid, counter_ids);
    return;
  }

  void sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_pool_stats_ext(_return, buffer_pool_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_buffer_pool_stats_ext(_return, buffer_pool_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_buffer_pool_stats(buffer_pool_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_buffer_pool_stats(buffer_pool_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_buffer_profile(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_buffer_profile(attr_list);
  }

  void sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_oid);
    }
    ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_oid);
  }

  void sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_oid, attr);
  }

  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_counter(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_counter(attr_list);
  }

  void sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_counter(counter_oid);
    }
    ifaces_[i]->sai_thrift_remove_counter(counter_oid);
  }

  void sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_counter_attribute(counter_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_counter_attribute(counter_oid, attr);
  }

  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_attribute(_return, counter_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_counter_attribute(_return, counter_oid, attr_list);
    return;
  }

  void sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_stats(_return, counter_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_counter_stats(_return, counter_oid, counter_ids);
    return;
  }

  void sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_counter_stats_ext(_return, counter_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_counter_stats_ext(_return, counter_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_counter_stats(counter_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_counter_stats(counter_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dash_acl_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dash_acl_group(attr_list);
  }

  void sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dash_acl_group(dash_acl_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_dash_acl_group(dash_acl_group_oid);
  }

  void sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dash_acl_group_attribute(dash_acl_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dash_acl_group_attribute(dash_acl_group_oid, attr);
  }

  void sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dash_acl_group_attribute(_return, dash_acl_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dash_acl_group_attribute(_return, dash_acl_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dash_acl_rule(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dash_acl_rule(attr_list);
  }

  void sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dash_acl_rule(dash_acl_rule_oid);
    }
    ifaces_[i]->sai_thrift_remove_dash_acl_rule(dash_acl_rule_oid);
  }

  void sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dash_acl_rule_attribute(dash_acl_rule_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dash_acl_rule_attribute(dash_acl_rule_oid, attr);
  }

  void sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dash_acl_rule_attribute(_return, dash_acl_rule_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dash_acl_rule_attribute(_return, dash_acl_rule_oid, attr_list);
    return;
  }

  void sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_direction_lookup_entry(direction_lookup_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_direction_lookup_entry(direction_lookup_entry, attr_list);
  }

  void sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_direction_lookup_entry(direction_lookup_entry);
    }
    ifaces_[i]->sai_thrift_remove_direction_lookup_entry(direction_lookup_entry);
  }

  void sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_direction_lookup_entry_attribute(direction_lookup_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_direction_lookup_entry_attribute(direction_lookup_entry, attr);
  }

  void sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_direction_lookup_entry_attribute(_return, direction_lookup_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_direction_lookup_entry_attribute(_return, direction_lookup_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_direction_lookup_entry(_return, direction_lookup_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_direction_lookup_entry(_return, direction_lookup_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_direction_lookup_entry(_return, direction_lookup_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_direction_lookup_entry(_return, direction_lookup_entry, mode);
    return;
  }

  void sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_eni_ether_address_map_entry(eni_ether_address_map_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_eni_ether_address_map_entry(eni_ether_address_map_entry, attr_list);
  }

  void sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_eni_ether_address_map_entry(eni_ether_address_map_entry);
    }
    ifaces_[i]->sai_thrift_remove_eni_ether_address_map_entry(eni_ether_address_map_entry);
  }

  void sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_eni_ether_address_map_entry_attribute(eni_ether_address_map_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_eni_ether_address_map_entry_attribute(eni_ether_address_map_entry, attr);
  }

  void sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_eni_ether_address_map_entry_attribute(_return, eni_ether_address_map_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_eni_ether_address_map_entry_attribute(_return, eni_ether_address_map_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_eni_ether_address_map_entry(_return, eni_ether_address_map_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_eni_ether_address_map_entry(_return, eni_ether_address_map_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_eni_ether_address_map_entry(_return, eni_ether_address_map_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_eni_ether_address_map_entry(_return, eni_ether_address_map_entry, mode);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_eni(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_eni(attr_list);
  }

  void sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_eni(eni_oid);
    }
    ifaces_[i]->sai_thrift_remove_eni(eni_oid);
  }

  void sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_eni_attribute(eni_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_eni_attribute(eni_oid, attr);
  }

  void sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_eni_attribute(_return, eni_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_eni_attribute(_return, eni_oid, attr_list);
    return;
  }

  void sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_inbound_routing_entry(inbound_routing_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_inbound_routing_entry(inbound_routing_entry, attr_list);
  }

  void sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_inbound_routing_entry(inbound_routing_entry);
    }
    ifaces_[i]->sai_thrift_remove_inbound_routing_entry(inbound_routing_entry);
  }

  void sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_inbound_routing_entry_attribute(inbound_routing_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_inbound_routing_entry_attribute(inbound_routing_entry, attr);
  }

  void sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_inbound_routing_entry_attribute(_return, inbound_routing_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_inbound_routing_entry_attribute(_return, inbound_routing_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_inbound_routing_entry(_return, inbound_routing_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_inbound_routing_entry(_return, inbound_routing_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_inbound_routing_entry(_return, inbound_routing_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_inbound_routing_entry(_return, inbound_routing_entry, mode);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_meter_bucket(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_meter_bucket(attr_list);
  }

  void sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_meter_bucket(meter_bucket_oid);
    }
    ifaces_[i]->sai_thrift_remove_meter_bucket(meter_bucket_oid);
  }

  void sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_meter_bucket_attribute(meter_bucket_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_meter_bucket_attribute(meter_bucket_oid, attr);
  }

  void sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_meter_bucket_attribute(_return, meter_bucket_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_meter_bucket_attribute(_return, meter_bucket_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_meter_policy(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_meter_policy(attr_list);
  }

  void sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_meter_policy(meter_policy_oid);
    }
    ifaces_[i]->sai_thrift_remove_meter_policy(meter_policy_oid);
  }

  void sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_meter_policy_attribute(meter_policy_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_meter_policy_attribute(meter_policy_oid, attr);
  }

  void sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_meter_policy_attribute(_return, meter_policy_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_meter_policy_attribute(_return, meter_policy_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_meter_rule(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_meter_rule(attr_list);
  }

  void sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_meter_rule(meter_rule_oid);
    }
    ifaces_[i]->sai_thrift_remove_meter_rule(meter_rule_oid);
  }

  void sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_meter_rule_attribute(meter_rule_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_meter_rule_attribute(meter_rule_oid, attr);
  }

  void sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_meter_rule_attribute(_return, meter_rule_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_meter_rule_attribute(_return, meter_rule_oid, attr_list);
    return;
  }

  void sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_outbound_ca_to_pa_entry(outbound_ca_to_pa_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_outbound_ca_to_pa_entry(outbound_ca_to_pa_entry, attr_list);
  }

  void sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_outbound_ca_to_pa_entry(outbound_ca_to_pa_entry);
    }
    ifaces_[i]->sai_thrift_remove_outbound_ca_to_pa_entry(outbound_ca_to_pa_entry);
  }

  void sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_outbound_ca_to_pa_entry_attribute(outbound_ca_to_pa_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_outbound_ca_to_pa_entry_attribute(outbound_ca_to_pa_entry, attr);
  }

  void sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_outbound_ca_to_pa_entry_attribute(_return, outbound_ca_to_pa_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_outbound_ca_to_pa_entry_attribute(_return, outbound_ca_to_pa_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_outbound_ca_to_pa_entry(_return, outbound_ca_to_pa_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_outbound_ca_to_pa_entry(_return, outbound_ca_to_pa_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_outbound_ca_to_pa_entry(_return, outbound_ca_to_pa_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_outbound_ca_to_pa_entry(_return, outbound_ca_to_pa_entry, mode);
    return;
  }

  void sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_outbound_routing_entry(outbound_routing_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_outbound_routing_entry(outbound_routing_entry, attr_list);
  }

  void sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_outbound_routing_entry(outbound_routing_entry);
    }
    ifaces_[i]->sai_thrift_remove_outbound_routing_entry(outbound_routing_entry);
  }

  void sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_outbound_routing_entry_attribute(outbound_routing_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_outbound_routing_entry_attribute(outbound_routing_entry, attr);
  }

  void sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_outbound_routing_entry_attribute(_return, outbound_routing_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_outbound_routing_entry_attribute(_return, outbound_routing_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_outbound_routing_entry(_return, outbound_routing_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_outbound_routing_entry(_return, outbound_routing_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_outbound_routing_entry(_return, outbound_routing_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_outbound_routing_entry(_return, outbound_routing_entry, mode);
    return;
  }

  void sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_pa_validation_entry(pa_validation_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_pa_validation_entry(pa_validation_entry, attr_list);
  }

  void sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_pa_validation_entry(pa_validation_entry);
    }
    ifaces_[i]->sai_thrift_remove_pa_validation_entry(pa_validation_entry);
  }

  void sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_pa_validation_entry_attribute(pa_validation_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_pa_validation_entry_attribute(pa_validation_entry, attr);
  }

  void sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_pa_validation_entry_attribute(_return, pa_validation_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_pa_validation_entry_attribute(_return, pa_validation_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_pa_validation_entry(_return, pa_validation_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_pa_validation_entry(_return, pa_validation_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_pa_validation_entry(_return, pa_validation_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_pa_validation_entry(_return, pa_validation_entry, mode);
    return;
  }

  void sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dst_tag_entry(dst_tag_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_dst_tag_entry(dst_tag_entry, attr_list);
  }

  void sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dst_tag_entry(dst_tag_entry);
    }
    ifaces_[i]->sai_thrift_remove_dst_tag_entry(dst_tag_entry);
  }

  void sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dst_tag_entry_attribute(dst_tag_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_dst_tag_entry_attribute(dst_tag_entry, attr);
  }

  void sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dst_tag_entry_attribute(_return, dst_tag_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dst_tag_entry_attribute(_return, dst_tag_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_dst_tag_entry(_return, dst_tag_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_dst_tag_entry(_return, dst_tag_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_dst_tag_entry(_return, dst_tag_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_dst_tag_entry(_return, dst_tag_entry, mode);
    return;
  }

  void sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_src_tag_entry(src_tag_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_src_tag_entry(src_tag_entry, attr_list);
  }

  void sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_src_tag_entry(src_tag_entry);
    }
    ifaces_[i]->sai_thrift_remove_src_tag_entry(src_tag_entry);
  }

  void sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_src_tag_entry_attribute(src_tag_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_src_tag_entry_attribute(src_tag_entry, attr);
  }

  void sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_src_tag_entry_attribute(_return, src_tag_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_src_tag_entry_attribute(_return, src_tag_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_src_tag_entry(_return, src_tag_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_src_tag_entry(_return, src_tag_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_src_tag_entry(_return, src_tag_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_src_tag_entry(_return, src_tag_entry, mode);
    return;
  }

  void sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vip_entry(vip_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_vip_entry(vip_entry, attr_list);
  }

  void sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vip_entry(vip_entry);
    }
    ifaces_[i]->sai_thrift_remove_vip_entry(vip_entry);
  }

  void sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vip_entry_attribute(vip_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_vip_entry_attribute(vip_entry, attr);
  }

  void sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vip_entry_attribute(_return, vip_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_vip_entry_attribute(_return, vip_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_vip_entry(_return, vip_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_vip_entry(_return, vip_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_vip_entry(_return, vip_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_vip_entry(_return, vip_entry, mode);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vnet(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vnet(attr_list);
  }

  void sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vnet(vnet_oid);
    }
    ifaces_[i]->sai_thrift_remove_vnet(vnet_oid);
  }

  void sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vnet_attribute(vnet_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_vnet_attribute(vnet_oid, attr);
  }

  void sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vnet_attribute(_return, vnet_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_vnet_attribute(_return, vnet_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_debug_counter(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_debug_counter(attr_list);
  }

  void sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_debug_counter(debug_counter_oid);
    }
    ifaces_[i]->sai_thrift_remove_debug_counter(debug_counter_oid);
  }

  void sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_debug_counter_attribute(debug_counter_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_debug_counter_attribute(debug_counter_oid, attr);
  }

  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_debug_counter_attribute(_return, debug_counter_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_debug_counter_attribute(_return, debug_counter_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dtel(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dtel(attr_list);
  }

  void sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dtel(dtel_oid);
    }
    ifaces_[i]->sai_thrift_remove_dtel(dtel_oid);
  }

  void sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dtel_attribute(dtel_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dtel_attribute(dtel_oid, attr);
  }

  void sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dtel_attribute(_return, dtel_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dtel_attribute(_return, dtel_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dtel_queue_report(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dtel_queue_report(attr_list);
  }

  void sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dtel_queue_report(dtel_queue_report_oid);
    }
    ifaces_[i]->sai_thrift_remove_dtel_queue_report(dtel_queue_report_oid);
  }

  void sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dtel_queue_report_attribute(dtel_queue_report_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dtel_queue_report_attribute(dtel_queue_report_oid, attr);
  }

  void sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dtel_queue_report_attribute(_return, dtel_queue_report_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dtel_queue_report_attribute(_return, dtel_queue_report_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dtel_int_session(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dtel_int_session(attr_list);
  }

  void sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dtel_int_session(dtel_int_session_oid);
    }
    ifaces_[i]->sai_thrift_remove_dtel_int_session(dtel_int_session_oid);
  }

  void sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dtel_int_session_attribute(dtel_int_session_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dtel_int_session_attribute(dtel_int_session_oid, attr);
  }

  void sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dtel_int_session_attribute(_return, dtel_int_session_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dtel_int_session_attribute(_return, dtel_int_session_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dtel_report_session(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dtel_report_session(attr_list);
  }

  void sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dtel_report_session(dtel_report_session_oid);
    }
    ifaces_[i]->sai_thrift_remove_dtel_report_session(dtel_report_session_oid);
  }

  void sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dtel_report_session_attribute(dtel_report_session_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dtel_report_session_attribute(dtel_report_session_oid, attr);
  }

  void sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dtel_report_session_attribute(_return, dtel_report_session_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dtel_report_session_attribute(_return, dtel_report_session_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_dtel_event(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_dtel_event(attr_list);
  }

  void sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_dtel_event(dtel_event_oid);
    }
    ifaces_[i]->sai_thrift_remove_dtel_event(dtel_event_oid);
  }

  void sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_dtel_event_attribute(dtel_event_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_dtel_event_attribute(dtel_event_oid, attr);
  }

  void sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_dtel_event_attribute(_return, dtel_event_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_dtel_event_attribute(_return, dtel_event_oid, attr_list);
    return;
  }

  void sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_fdb_entry(fdb_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_fdb_entry(fdb_entry, attr_list);
  }

  void sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_fdb_entry(fdb_entry);
    }
    ifaces_[i]->sai_thrift_remove_fdb_entry(fdb_entry);
  }

  void sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_fdb_entry_attribute(fdb_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_fdb_entry_attribute(fdb_entry, attr);
  }

  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, fdb_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, fdb_entry, attr_list);
    return;
  }

  void sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_flush_fdb_entries(attr_list);
    }
    ifaces_[i]->sai_thrift_flush_fdb_entries(attr_list);
  }

  void sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_fdb_entry(_return, fdb_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_fdb_entry(_return, fdb_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_fdb_entry(_return, fdb_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_fdb_entry(_return, fdb_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_fdb_entry_attribute(_return, fdb_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_fdb_entry_attribute(_return, fdb_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_fdb_entry_attribute(_return, fdb_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_fdb_entry_attribute(_return, fdb_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_generic_programmable(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_generic_programmable(attr_list);
  }

  void sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_generic_programmable(generic_programmable_oid);
    }
    ifaces_[i]->sai_thrift_remove_generic_programmable(generic_programmable_oid);
  }

  void sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_generic_programmable_attribute(generic_programmable_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_generic_programmable_attribute(generic_programmable_oid, attr);
  }

  void sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_generic_programmable_attribute(_return, generic_programmable_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_generic_programmable_attribute(_return, generic_programmable_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_fine_grained_hash_field(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_fine_grained_hash_field(attr_list);
  }

  void sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_fine_grained_hash_field(fine_grained_hash_field_oid);
    }
    ifaces_[i]->sai_thrift_remove_fine_grained_hash_field(fine_grained_hash_field_oid);
  }

  void sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_fine_grained_hash_field_attribute(fine_grained_hash_field_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_fine_grained_hash_field_attribute(fine_grained_hash_field_oid, attr);
  }

  void sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_fine_grained_hash_field_attribute(_return, fine_grained_hash_field_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_fine_grained_hash_field_attribute(_return, fine_grained_hash_field_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hash(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hash(attr_list);
  }

  void sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hash(hash_oid);
    }
    ifaces_[i]->sai_thrift_remove_hash(hash_oid);
  }

  void sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hash_attribute(hash_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hash_attribute(hash_oid, attr);
  }

  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hash_attribute(_return, hash_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hash_attribute(_return, hash_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap_group(attr_list);
  }

  void sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap_group(hostif_trap_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_hostif_trap_group(hostif_trap_group_oid);
  }

  void sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(hostif_trap_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(hostif_trap_group_oid, attr);
  }

  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, hostif_trap_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, hostif_trap_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap(attr_list);
  }

  void sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap(hostif_trap_oid);
    }
    ifaces_[i]->sai_thrift_remove_hostif_trap(hostif_trap_oid);
  }

  void sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_attribute(hostif_trap_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hostif_trap_attribute(hostif_trap_oid, attr);
  }

  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, hostif_trap_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, hostif_trap_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_user_defined_trap(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_user_defined_trap(attr_list);
  }

  void sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_user_defined_trap(hostif_user_defined_trap_oid);
    }
    ifaces_[i]->sai_thrift_remove_hostif_user_defined_trap(hostif_user_defined_trap_oid);
  }

  void sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_user_defined_trap_attribute(hostif_user_defined_trap_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hostif_user_defined_trap_attribute(hostif_user_defined_trap_oid, attr);
  }

  void sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_user_defined_trap_attribute(_return, hostif_user_defined_trap_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hostif_user_defined_trap_attribute(_return, hostif_user_defined_trap_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif(attr_list);
  }

  void sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif(hostif_oid);
    }
    ifaces_[i]->sai_thrift_remove_hostif(hostif_oid);
  }

  void sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_attribute(hostif_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hostif_attribute(hostif_oid, attr);
  }

  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_attribute(_return, hostif_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hostif_attribute(_return, hostif_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_table_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_table_entry(attr_list);
  }

  void sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_table_entry(hostif_table_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_hostif_table_entry(hostif_table_entry_oid);
  }

  void sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(hostif_table_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(hostif_table_entry_oid, attr);
  }

  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, hostif_table_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, hostif_table_entry_oid, attr_list);
    return;
  }

  sai_thrift_size_t sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_recv_hostif_packet(hostif_oid, buffer_size, buffer, attr_list);
    }
    return ifaces_[i]->sai_thrift_recv_hostif_packet(hostif_oid, buffer_size, buffer, attr_list);
  }

  void sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_send_hostif_packet(hostif_oid, buffer_size, buffer, attr_list);
    }
    ifaces_[i]->sai_thrift_send_hostif_packet(hostif_oid, buffer_size, buffer, attr_list);
  }

  void sai_thrift_allocate_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_allocate_hostif_packet(_return, hostif_oid, buffer_size, attr_list);
    }
    ifaces_[i]->sai_thrift_allocate_hostif_packet(_return, hostif_oid, buffer_size, attr_list);
    return;
  }

  void sai_thrift_free_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const std::string& buffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_free_hostif_packet(_return, hostif_oid, buffer);
    }
    ifaces_[i]->sai_thrift_free_hostif_packet(_return, hostif_oid, buffer);
    return;
  }

  void sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_entry(ipmc_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_ipmc_entry(ipmc_entry, attr_list);
  }

  void sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_entry(ipmc_entry);
    }
    ifaces_[i]->sai_thrift_remove_ipmc_entry(ipmc_entry);
  }

  void sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(ipmc_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(ipmc_entry, attr);
  }

  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, ipmc_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, ipmc_entry, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group(attr_list);
  }

  void sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group(ipmc_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_ipmc_group(ipmc_group_oid);
  }

  void sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_group_attribute(ipmc_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ipmc_group_attribute(ipmc_group_oid, attr);
  }

  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, ipmc_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, ipmc_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group_member(attr_list);
  }

  void sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group_member(ipmc_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_ipmc_group_member(ipmc_group_member_oid);
  }

  void sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(ipmc_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(ipmc_group_member_oid, attr);
  }

  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, ipmc_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, ipmc_group_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipsec(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipsec(attr_list);
  }

  void sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipsec(ipsec_oid);
    }
    ifaces_[i]->sai_thrift_remove_ipsec(ipsec_oid);
  }

  void sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipsec_attribute(ipsec_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ipsec_attribute(ipsec_oid, attr);
  }

  void sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_attribute(_return, ipsec_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipsec_attribute(_return, ipsec_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipsec_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipsec_port(attr_list);
  }

  void sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipsec_port(ipsec_port_oid);
    }
    ifaces_[i]->sai_thrift_remove_ipsec_port(ipsec_port_oid);
  }

  void sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipsec_port_attribute(ipsec_port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ipsec_port_attribute(ipsec_port_oid, attr);
  }

  void sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_port_attribute(_return, ipsec_port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipsec_port_attribute(_return, ipsec_port_oid, attr_list);
    return;
  }

  void sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_port_stats(_return, ipsec_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_ipsec_port_stats(_return, ipsec_port_oid, counter_ids);
    return;
  }

  void sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_port_stats_ext(_return, ipsec_port_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_ipsec_port_stats_ext(_return, ipsec_port_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_ipsec_port_stats(ipsec_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_ipsec_port_stats(ipsec_port_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipsec_sa(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipsec_sa(attr_list);
  }

  void sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipsec_sa(ipsec_sa_oid);
    }
    ifaces_[i]->sai_thrift_remove_ipsec_sa(ipsec_sa_oid);
  }

  void sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipsec_sa_attribute(ipsec_sa_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_ipsec_sa_attribute(ipsec_sa_oid, attr);
  }

  void sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_sa_attribute(_return, ipsec_sa_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_ipsec_sa_attribute(_return, ipsec_sa_oid, attr_list);
    return;
  }

  void sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_sa_stats(_return, ipsec_sa_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_ipsec_sa_stats(_return, ipsec_sa_oid, counter_ids);
    return;
  }

  void sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipsec_sa_stats_ext(_return, ipsec_sa_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_ipsec_sa_stats_ext(_return, ipsec_sa_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_ipsec_sa_stats(ipsec_sa_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_ipsec_sa_stats(ipsec_sa_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_isolation_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_isolation_group(attr_list);
  }

  void sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_isolation_group(isolation_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_isolation_group(isolation_group_oid);
  }

  void sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_isolation_group_attribute(isolation_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_isolation_group_attribute(isolation_group_oid, attr);
  }

  void sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_isolation_group_attribute(_return, isolation_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_isolation_group_attribute(_return, isolation_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_isolation_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_isolation_group_member(attr_list);
  }

  void sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_isolation_group_member(isolation_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_isolation_group_member(isolation_group_member_oid);
  }

  void sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_isolation_group_member_attribute(isolation_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_isolation_group_member_attribute(isolation_group_member_oid, attr);
  }

  void sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_isolation_group_member_attribute(_return, isolation_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_isolation_group_member_attribute(_return, isolation_group_member_oid, attr_list);
    return;
  }

  void sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_entry(l2mc_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_l2mc_entry(l2mc_entry, attr_list);
  }

  void sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_entry(l2mc_entry);
    }
    ifaces_[i]->sai_thrift_remove_l2mc_entry(l2mc_entry);
  }

  void sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(l2mc_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(l2mc_entry, attr);
  }

  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, l2mc_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, l2mc_entry, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group(attr_list);
  }

  void sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group(l2mc_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_l2mc_group(l2mc_group_oid);
  }

  void sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_group_attribute(l2mc_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_l2mc_group_attribute(l2mc_group_oid, attr);
  }

  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, l2mc_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, l2mc_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group_member(attr_list);
  }

  void sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group_member(l2mc_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_l2mc_group_member(l2mc_group_member_oid);
  }

  void sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(l2mc_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(l2mc_group_member_oid, attr);
  }

  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, l2mc_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, l2mc_group_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag(attr_list);
  }

  void sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag(lag_oid);
    }
    ifaces_[i]->sai_thrift_remove_lag(lag_oid);
  }

  void sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_attribute(lag_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_lag_attribute(lag_oid, attr);
  }

  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag_member(attr_list);
  }

  void sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag_member(lag_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_lag_member(lag_member_oid);
  }

  void sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_oid, attr);
  }

  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_macsec(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_macsec(attr_list);
  }

  void sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_macsec(macsec_oid);
    }
    ifaces_[i]->sai_thrift_remove_macsec(macsec_oid);
  }

  void sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_macsec_attribute(macsec_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_macsec_attribute(macsec_oid, attr);
  }

  void sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_attribute(_return, macsec_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_macsec_attribute(_return, macsec_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_macsec_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_macsec_port(attr_list);
  }

  void sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_macsec_port(macsec_port_oid);
    }
    ifaces_[i]->sai_thrift_remove_macsec_port(macsec_port_oid);
  }

  void sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_macsec_port_attribute(macsec_port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_macsec_port_attribute(macsec_port_oid, attr);
  }

  void sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_port_attribute(_return, macsec_port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_macsec_port_attribute(_return, macsec_port_oid, attr_list);
    return;
  }

  void sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_port_stats(_return, macsec_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_macsec_port_stats(_return, macsec_port_oid, counter_ids);
    return;
  }

  void sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_port_stats_ext(_return, macsec_port_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_macsec_port_stats_ext(_return, macsec_port_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_macsec_port_stats(macsec_port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_macsec_port_stats(macsec_port_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_macsec_flow(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_macsec_flow(attr_list);
  }

  void sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_macsec_flow(macsec_flow_oid);
    }
    ifaces_[i]->sai_thrift_remove_macsec_flow(macsec_flow_oid);
  }

  void sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_macsec_flow_attribute(macsec_flow_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_macsec_flow_attribute(macsec_flow_oid, attr);
  }

  void sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_flow_attribute(_return, macsec_flow_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_macsec_flow_attribute(_return, macsec_flow_oid, attr_list);
    return;
  }

  void sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_flow_stats(_return, macsec_flow_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_macsec_flow_stats(_return, macsec_flow_oid, counter_ids);
    return;
  }

  void sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_flow_stats_ext(_return, macsec_flow_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_macsec_flow_stats_ext(_return, macsec_flow_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_macsec_flow_stats(macsec_flow_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_macsec_flow_stats(macsec_flow_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_macsec_sc(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_macsec_sc(attr_list);
  }

  void sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_macsec_sc(macsec_sc_oid);
    }
    ifaces_[i]->sai_thrift_remove_macsec_sc(macsec_sc_oid);
  }

  void sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_macsec_sc_attribute(macsec_sc_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_macsec_sc_attribute(macsec_sc_oid, attr);
  }

  void sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sc_attribute(_return, macsec_sc_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_macsec_sc_attribute(_return, macsec_sc_oid, attr_list);
    return;
  }

  void sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sc_stats(_return, macsec_sc_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_macsec_sc_stats(_return, macsec_sc_oid, counter_ids);
    return;
  }

  void sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sc_stats_ext(_return, macsec_sc_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_macsec_sc_stats_ext(_return, macsec_sc_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_macsec_sc_stats(macsec_sc_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_macsec_sc_stats(macsec_sc_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_macsec_sa(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_macsec_sa(attr_list);
  }

  void sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_macsec_sa(macsec_sa_oid);
    }
    ifaces_[i]->sai_thrift_remove_macsec_sa(macsec_sa_oid);
  }

  void sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_macsec_sa_attribute(macsec_sa_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_macsec_sa_attribute(macsec_sa_oid, attr);
  }

  void sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sa_attribute(_return, macsec_sa_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_macsec_sa_attribute(_return, macsec_sa_oid, attr_list);
    return;
  }

  void sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sa_stats(_return, macsec_sa_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_macsec_sa_stats(_return, macsec_sa_oid, counter_ids);
    return;
  }

  void sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_macsec_sa_stats_ext(_return, macsec_sa_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_macsec_sa_stats_ext(_return, macsec_sa_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_macsec_sa_stats(macsec_sa_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_macsec_sa_stats(macsec_sa_oid, counter_ids);
  }

  void sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mcast_fdb_entry(mcast_fdb_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_mcast_fdb_entry(mcast_fdb_entry, attr_list);
  }

  void sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(mcast_fdb_entry);
    }
    ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(mcast_fdb_entry);
  }

  void sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(mcast_fdb_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(mcast_fdb_entry, attr);
  }

  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, mcast_fdb_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, mcast_fdb_entry, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mirror_session(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_mirror_session(attr_list);
  }

  void sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mirror_session(mirror_session_oid);
    }
    ifaces_[i]->sai_thrift_remove_mirror_session(mirror_session_oid);
  }

  void sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mirror_session_attribute(mirror_session_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_mirror_session_attribute(mirror_session_oid, attr);
  }

  void sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mirror_session_attribute(_return, mirror_session_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_mirror_session_attribute(_return, mirror_session_oid, attr_list);
    return;
  }

  void sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_inseg_entry(inseg_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_inseg_entry(inseg_entry, attr_list);
  }

  void sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_inseg_entry(inseg_entry);
    }
    ifaces_[i]->sai_thrift_remove_inseg_entry(inseg_entry);
  }

  void sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_inseg_entry_attribute(inseg_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_inseg_entry_attribute(inseg_entry, attr);
  }

  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, inseg_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, inseg_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_inseg_entry(_return, inseg_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_inseg_entry(_return, inseg_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_inseg_entry(_return, inseg_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_inseg_entry(_return, inseg_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_inseg_entry_attribute(_return, inseg_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_inseg_entry_attribute(_return, inseg_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_inseg_entry_attribute(_return, inseg_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_inseg_entry_attribute(_return, inseg_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_my_mac(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_my_mac(attr_list);
  }

  void sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_my_mac(my_mac_oid);
    }
    ifaces_[i]->sai_thrift_remove_my_mac(my_mac_oid);
  }

  void sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_my_mac_attribute(my_mac_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_my_mac_attribute(my_mac_oid, attr);
  }

  void sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_my_mac_attribute(_return, my_mac_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_my_mac_attribute(_return, my_mac_oid, attr_list);
    return;
  }

  void sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_nat_entry(nat_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_nat_entry(nat_entry, attr_list);
  }

  void sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_nat_entry(nat_entry);
    }
    ifaces_[i]->sai_thrift_remove_nat_entry(nat_entry);
  }

  void sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_nat_entry_attribute(nat_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_nat_entry_attribute(nat_entry, attr);
  }

  void sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_nat_entry_attribute(_return, nat_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_nat_entry_attribute(_return, nat_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_nat_entry(_return, nat_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_nat_entry(_return, nat_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_nat_entry(_return, nat_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_nat_entry(_return, nat_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_nat_entry_attribute(_return, nat_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_nat_entry_attribute(_return, nat_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_nat_entry_attribute(_return, nat_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_nat_entry_attribute(_return, nat_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_nat_zone_counter(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_nat_zone_counter(attr_list);
  }

  void sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_nat_zone_counter(nat_zone_counter_oid);
    }
    ifaces_[i]->sai_thrift_remove_nat_zone_counter(nat_zone_counter_oid);
  }

  void sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_nat_zone_counter_attribute(nat_zone_counter_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_nat_zone_counter_attribute(nat_zone_counter_oid, attr);
  }

  void sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_nat_zone_counter_attribute(_return, nat_zone_counter_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_nat_zone_counter_attribute(_return, nat_zone_counter_oid, attr_list);
    return;
  }

  void sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_neighbor_entry(neighbor_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_neighbor_entry(neighbor_entry, attr_list);
  }

  void sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_neighbor_entry(neighbor_entry);
    }
    ifaces_[i]->sai_thrift_remove_neighbor_entry(neighbor_entry);
  }

  void sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(neighbor_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(neighbor_entry, attr);
  }

  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, neighbor_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, neighbor_entry, attr_list);
    return;
  }

  void sai_thrift_remove_all_neighbor_entries() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_all_neighbor_entries();
    }
    ifaces_[i]->sai_thrift_remove_all_neighbor_entries();
  }

  void sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_neighbor_entry(_return, neighbor_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_neighbor_entry(_return, neighbor_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_neighbor_entry(_return, neighbor_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_neighbor_entry(_return, neighbor_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_neighbor_entry_attribute(_return, neighbor_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_neighbor_entry_attribute(_return, neighbor_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_neighbor_entry_attribute(_return, neighbor_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_neighbor_entry_attribute(_return, neighbor_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop(attr_list);
  }

  void sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop(next_hop_oid);
    }
    ifaces_[i]->sai_thrift_remove_next_hop(next_hop_oid);
  }

  void sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_attribute(next_hop_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_next_hop_attribute(next_hop_oid, attr);
  }

  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group(attr_list);
  }

  void sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group(next_hop_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_next_hop_group(next_hop_group_oid);
  }

  void sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_group_attribute(next_hop_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_next_hop_group_attribute(next_hop_group_oid, attr);
  }

  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, next_hop_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, next_hop_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group_member(attr_list);
  }

  void sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group_member(next_hop_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_next_hop_group_member(next_hop_group_member_oid);
  }

  void sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_group_member_attribute(next_hop_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_next_hop_group_member_attribute(next_hop_group_member_oid, attr);
  }

  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, next_hop_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, next_hop_group_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group_map(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group_map(attr_list);
  }

  void sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group_map(next_hop_group_map_oid);
    }
    ifaces_[i]->sai_thrift_remove_next_hop_group_map(next_hop_group_map_oid);
  }

  void sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_group_map_attribute(next_hop_group_map_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_next_hop_group_map_attribute(next_hop_group_map_oid, attr);
  }

  void sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_map_attribute(_return, next_hop_group_map_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_map_attribute(_return, next_hop_group_map_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_policer(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_policer(attr_list);
  }

  void sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_policer(policer_oid);
    }
    ifaces_[i]->sai_thrift_remove_policer(policer_oid);
  }

  void sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_policer_attribute(policer_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_policer_attribute(policer_oid, attr);
  }

  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_attribute(_return, policer_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_policer_attribute(_return, policer_oid, attr_list);
    return;
  }

  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_stats(_return, policer_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_policer_stats(_return, policer_oid, counter_ids);
    return;
  }

  void sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_stats_ext(_return, policer_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_policer_stats_ext(_return, policer_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_policer_stats(policer_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_policer_stats(policer_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_port(attr_list);
  }

  void sai_thrift_remove_port(const sai_thrift_object_id_t port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_port(port_oid);
    }
    ifaces_[i]->sai_thrift_remove_port(port_oid);
  }

  void sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_attribute(port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_port_attribute(port_oid, attr);
  }

  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_attribute(_return, port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_port_attribute(_return, port_oid, attr_list);
    return;
  }

  void sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_stats(_return, port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_port_stats(_return, port_oid, counter_ids);
    return;
  }

  void sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_stats_ext(_return, port_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_port_stats_ext(_return, port_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_stats(port_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_port_stats(port_oid, counter_ids);
  }

  void sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_all_stats(port_oid);
    }
    ifaces_[i]->sai_thrift_clear_port_all_stats(port_oid);
  }

  sai_thrift_object_id_t sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_port_pool(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_port_pool(attr_list);
  }

  void sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_port_pool(port_pool_oid);
    }
    ifaces_[i]->sai_thrift_remove_port_pool(port_pool_oid);
  }

  void sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_pool_attribute(port_pool_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_port_pool_attribute(port_pool_oid, attr);
  }

  void sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_pool_attribute(_return, port_pool_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_port_pool_attribute(_return, port_pool_oid, attr_list);
    return;
  }

  void sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_pool_stats(_return, port_pool_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_port_pool_stats(_return, port_pool_oid, counter_ids);
    return;
  }

  void sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_pool_stats_ext(_return, port_pool_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_port_pool_stats_ext(_return, port_pool_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_pool_stats(port_pool_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_port_pool_stats(port_pool_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_port_serdes(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_port_serdes(attr_list);
  }

  void sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_port_serdes(port_serdes_oid);
    }
    ifaces_[i]->sai_thrift_remove_port_serdes(port_serdes_oid);
  }

  void sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_serdes_attribute(port_serdes_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_port_serdes_attribute(port_serdes_oid, attr);
  }

  void sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_serdes_attribute(_return, port_serdes_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_port_serdes_attribute(_return, port_serdes_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_port_connector(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_port_connector(attr_list);
  }

  void sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_port_connector(port_connector_oid);
    }
    ifaces_[i]->sai_thrift_remove_port_connector(port_connector_oid);
  }

  void sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_connector_attribute(port_connector_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_port_connector_attribute(port_connector_oid, attr);
  }

  void sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_connector_attribute(_return, port_connector_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_port_connector_attribute(_return, port_connector_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_qos_map(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_qos_map(attr_list);
  }

  void sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_qos_map(qos_map_oid);
    }
    ifaces_[i]->sai_thrift_remove_qos_map(qos_map_oid);
  }

  void sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_oid, attr);
  }

  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_queue(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_queue(attr_list);
  }

  void sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_queue(queue_oid);
    }
    ifaces_[i]->sai_thrift_remove_queue(queue_oid);
  }

  void sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_queue_attribute(queue_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_queue_attribute(queue_oid, attr);
  }

  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_oid, attr_list);
    return;
  }

  void sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_oid, counter_ids);
    return;
  }

  void sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_stats_ext(_return, queue_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_queue_stats_ext(_return, queue_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_queue_stats(queue_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_queue_stats(queue_oid, counter_ids);
  }

  void sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_route_entry(route_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_route_entry(route_entry, attr_list);
  }

  void sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_route_entry(route_entry);
    }
    ifaces_[i]->sai_thrift_remove_route_entry(route_entry);
  }

  void sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_route_entry_attribute(route_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_route_entry_attribute(route_entry, attr);
  }

  void sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_route_entry_attribute(_return, route_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_route_entry_attribute(_return, route_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_route_entry(_return, route_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_route_entry(_return, route_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_route_entry(_return, route_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_route_entry(_return, route_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_route_entry_attribute(_return, route_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_route_entry_attribute(_return, route_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_route_entry_attribute(_return, route_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_route_entry_attribute(_return, route_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_router_interface(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_router_interface(attr_list);
  }

  void sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_router_interface(router_interface_oid);
    }
    ifaces_[i]->sai_thrift_remove_router_interface(router_interface_oid);
  }

  void sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_router_interface_attribute(router_interface_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_router_interface_attribute(router_interface_oid, attr);
  }

  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, router_interface_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, router_interface_oid, attr_list);
    return;
  }

  void sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_router_interface_stats(_return, router_interface_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_router_interface_stats(_return, router_interface_oid, counter_ids);
    return;
  }

  void sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_router_interface_stats_ext(_return, router_interface_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_router_interface_stats_ext(_return, router_interface_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_router_interface_stats(router_interface_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_router_interface_stats(router_interface_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group(attr_list);
  }

  void sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group(rpf_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_rpf_group(rpf_group_oid);
  }

  void sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_rpf_group_attribute(rpf_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_rpf_group_attribute(rpf_group_oid, attr);
  }

  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, rpf_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, rpf_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group_member(attr_list);
  }

  void sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group_member(rpf_group_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_rpf_group_member(rpf_group_member_oid);
  }

  void sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(rpf_group_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(rpf_group_member_oid, attr);
  }

  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, rpf_group_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, rpf_group_member_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_samplepacket(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_samplepacket(attr_list);
  }

  void sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_oid);
    }
    ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_oid);
  }

  void sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_oid, attr);
  }

  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler(attr_list);
  }

  void sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler(scheduler_oid);
    }
    ifaces_[i]->sai_thrift_remove_scheduler(scheduler_oid);
  }

  void sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_attribute(scheduler_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_scheduler_attribute(scheduler_oid, attr);
  }

  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, scheduler_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, scheduler_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler_group(attr_list);
  }

  void sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_oid);
  }

  void sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_oid, attr);
  }

  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_srv6_sidlist(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_srv6_sidlist(attr_list);
  }

  void sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_srv6_sidlist(srv6_sidlist_oid);
    }
    ifaces_[i]->sai_thrift_remove_srv6_sidlist(srv6_sidlist_oid);
  }

  void sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_srv6_sidlist_attribute(srv6_sidlist_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_srv6_sidlist_attribute(srv6_sidlist_oid, attr);
  }

  void sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_srv6_sidlist_attribute(_return, srv6_sidlist_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_srv6_sidlist_attribute(_return, srv6_sidlist_oid, attr_list);
    return;
  }

  void sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_srv6_sidlist_stats(_return, srv6_sidlist_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_srv6_sidlist_stats(_return, srv6_sidlist_oid, counter_ids);
    return;
  }

  void sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_srv6_sidlist_stats_ext(_return, srv6_sidlist_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_srv6_sidlist_stats_ext(_return, srv6_sidlist_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_srv6_sidlist_stats(srv6_sidlist_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_srv6_sidlist_stats(srv6_sidlist_oid, counter_ids);
  }

  void sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_my_sid_entry(my_sid_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_create_my_sid_entry(my_sid_entry, attr_list);
  }

  void sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_my_sid_entry(my_sid_entry);
    }
    ifaces_[i]->sai_thrift_remove_my_sid_entry(my_sid_entry);
  }

  void sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_my_sid_entry_attribute(my_sid_entry, attr);
    }
    ifaces_[i]->sai_thrift_set_my_sid_entry_attribute(my_sid_entry, attr);
  }

  void sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_my_sid_entry_attribute(_return, my_sid_entry, attr_list);
    }
    ifaces_[i]->sai_thrift_get_my_sid_entry_attribute(_return, my_sid_entry, attr_list);
    return;
  }

  void sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_create_my_sid_entry(_return, my_sid_entry, attr_count, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_create_my_sid_entry(_return, my_sid_entry, attr_count, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_remove_my_sid_entry(_return, my_sid_entry, mode);
    }
    ifaces_[i]->sai_thrift_bulk_remove_my_sid_entry(_return, my_sid_entry, mode);
    return;
  }

  void sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_set_my_sid_entry_attribute(_return, my_sid_entry, attr_list, mode);
    }
    ifaces_[i]->sai_thrift_bulk_set_my_sid_entry_attribute(_return, my_sid_entry, attr_list, mode);
    return;
  }

  void sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_bulk_get_my_sid_entry_attribute(_return, my_sid_entry, attr_count, attr_list, mode, object_statuses);
    }
    ifaces_[i]->sai_thrift_bulk_get_my_sid_entry_attribute(_return, my_sid_entry, attr_count, attr_list, mode, object_statuses);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_stp(attr_list);
  }

  void sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp(stp_oid);
    }
    ifaces_[i]->sai_thrift_remove_stp(stp_oid);
  }

  void sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_stp_attribute(stp_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_stp_attribute(stp_oid, attr);
  }

  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_attribute(_return, stp_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_stp_attribute(_return, stp_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_stp_port(attr_list);
  }

  void sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp_port(stp_port_oid);
    }
    ifaces_[i]->sai_thrift_remove_stp_port(stp_port_oid);
  }

  void sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_stp_port_attribute(stp_port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_stp_port_attribute(stp_port_oid, attr);
  }

  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_port_attribute(_return, stp_port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_stp_port_attribute(_return, stp_port_oid, attr_list);
    return;
  }

  void sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_register_read(_return, platform_context, device_addr, start_reg_addr);
    }
    ifaces_[i]->sai_thrift_switch_register_read(_return, platform_context, device_addr, start_reg_addr);
    return;
  }

  void sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_register_write(platform_context, device_addr, start_reg_addr, reg_val);
    }
    ifaces_[i]->sai_thrift_switch_register_write(platform_context, device_addr, start_reg_addr, reg_val);
  }

  void sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_mdio_read(_return, device_addr, start_reg_addr);
    }
    ifaces_[i]->sai_thrift_switch_mdio_read(_return, device_addr, start_reg_addr);
    return;
  }

  void sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_mdio_write(device_addr, start_reg_addr, reg_val);
    }
    ifaces_[i]->sai_thrift_switch_mdio_write(device_addr, start_reg_addr, reg_val);
  }

  void sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_mdio_cl22_read(_return, device_addr, start_reg_addr);
    }
    ifaces_[i]->sai_thrift_switch_mdio_cl22_read(_return, device_addr, start_reg_addr);
    return;
  }

  void sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_mdio_cl22_write(device_addr, start_reg_addr, reg_val);
    }
    ifaces_[i]->sai_thrift_switch_mdio_cl22_write(device_addr, start_reg_addr, reg_val);
  }

  sai_thrift_object_id_t sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_switch(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_switch(attr_list);
  }

  void sai_thrift_remove_switch() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_switch();
    }
    ifaces_[i]->sai_thrift_remove_switch();
  }

  void sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_switch_attribute(attr);
    }
    ifaces_[i]->sai_thrift_set_switch_attribute(attr);
  }

  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_attribute(_return, attr_list);
    }
    ifaces_[i]->sai_thrift_get_switch_attribute(_return, attr_list);
    return;
  }

  void sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_stats(_return, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_switch_stats(_return, counter_ids);
    return;
  }

  void sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_stats_ext(_return, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_switch_stats_ext(_return, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_switch_stats(counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_switch_stats(counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_switch_tunnel(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_switch_tunnel(attr_list);
  }

  void sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_switch_tunnel(switch_tunnel_oid);
    }
    ifaces_[i]->sai_thrift_remove_switch_tunnel(switch_tunnel_oid);
  }

  void sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_switch_tunnel_attribute(switch_tunnel_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_switch_tunnel_attribute(switch_tunnel_oid, attr);
  }

  void sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_tunnel_attribute(_return, switch_tunnel_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_switch_tunnel_attribute(_return, switch_tunnel_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_system_port(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_system_port(attr_list);
  }

  void sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_system_port(system_port_oid);
    }
    ifaces_[i]->sai_thrift_remove_system_port(system_port_oid);
  }

  void sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_system_port_attribute(system_port_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_system_port_attribute(system_port_oid, attr);
  }

  void sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_system_port_attribute(_return, system_port_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_system_port_attribute(_return, system_port_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam(attr_list);
  }

  void sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam(tam_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam(tam_oid);
  }

  void sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_attribute(tam_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_attribute(tam_oid, attr);
  }

  void sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_attribute(_return, tam_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_attribute(_return, tam_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_math_func(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_math_func(attr_list);
  }

  void sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_math_func(tam_math_func_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_math_func(tam_math_func_oid);
  }

  void sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_math_func_attribute(_return, tam_math_func_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_math_func_attribute(_return, tam_math_func_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_math_func_attribute(tam_math_func_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_math_func_attribute(tam_math_func_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_event_threshold(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_event_threshold(attr_list);
  }

  void sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_event_threshold(tam_event_threshold_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_event_threshold(tam_event_threshold_oid);
  }

  void sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_event_threshold_attribute(_return, tam_event_threshold_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_event_threshold_attribute(_return, tam_event_threshold_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_event_threshold_attribute(tam_event_threshold_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_event_threshold_attribute(tam_event_threshold_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_int(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_int(attr_list);
  }

  void sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_int(tam_int_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_int(tam_int_oid);
  }

  void sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_int_attribute(_return, tam_int_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_int_attribute(_return, tam_int_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_int_attribute(tam_int_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_int_attribute(tam_int_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_tel_type(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_tel_type(attr_list);
  }

  void sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_tel_type(tam_tel_type_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_tel_type(tam_tel_type_oid);
  }

  void sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_tel_type_attribute(_return, tam_tel_type_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_tel_type_attribute(_return, tam_tel_type_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_tel_type_attribute(tam_tel_type_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_tel_type_attribute(tam_tel_type_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_report(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_report(attr_list);
  }

  void sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_report(tam_report_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_report(tam_report_oid);
  }

  void sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_report_attribute(_return, tam_report_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_report_attribute(_return, tam_report_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_report_attribute(tam_report_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_report_attribute(tam_report_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_telemetry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_telemetry(attr_list);
  }

  void sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_telemetry(tam_telemetry_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_telemetry(tam_telemetry_oid);
  }

  void sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_telemetry_attribute(_return, tam_telemetry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_telemetry_attribute(_return, tam_telemetry_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_telemetry_attribute(tam_telemetry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_telemetry_attribute(tam_telemetry_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_transport(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_transport(attr_list);
  }

  void sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_transport(tam_transport_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_transport(tam_transport_oid);
  }

  void sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_transport_attribute(_return, tam_transport_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_transport_attribute(_return, tam_transport_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_transport_attribute(tam_transport_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_transport_attribute(tam_transport_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_collector(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_collector(attr_list);
  }

  void sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_collector(tam_collector_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_collector(tam_collector_oid);
  }

  void sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_collector_attribute(_return, tam_collector_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_collector_attribute(_return, tam_collector_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_collector_attribute(tam_collector_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_collector_attribute(tam_collector_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_event_action(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_event_action(attr_list);
  }

  void sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_event_action(tam_event_action_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_event_action(tam_event_action_oid);
  }

  void sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_event_action_attribute(_return, tam_event_action_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_event_action_attribute(_return, tam_event_action_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_event_action_attribute(tam_event_action_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_event_action_attribute(tam_event_action_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tam_event(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tam_event(attr_list);
  }

  void sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tam_event(tam_event_oid);
    }
    ifaces_[i]->sai_thrift_remove_tam_event(tam_event_oid);
  }

  void sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tam_event_attribute(_return, tam_event_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tam_event_attribute(_return, tam_event_oid, attr_list);
    return;
  }

  void sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tam_event_attribute(tam_event_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tam_event_attribute(tam_event_oid, attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map(attr_list);
  }

  void sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_oid);
    }
    ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_oid);
  }

  void sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_oid, attr);
  }

  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel(attr_list);
  }

  void sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel(tunnel_oid);
    }
    ifaces_[i]->sai_thrift_remove_tunnel(tunnel_oid);
  }

  void sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_oid, attr);
  }

  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_oid, attr_list);
    return;
  }

  void sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_oid, counter_ids);
    return;
  }

  void sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_stats_ext(_return, tunnel_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_tunnel_stats_ext(_return, tunnel_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(attr_list);
  }

  void sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_oid);
  }

  void sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_oid, attr);
  }

  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map_entry(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map_entry(attr_list);
  }

  void sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_oid);
    }
    ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_oid);
  }

  void sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_oid, attr);
  }

  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf(attr_list);
  }

  void sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf(udf_oid);
    }
    ifaces_[i]->sai_thrift_remove_udf(udf_oid);
  }

  void sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_udf_attribute(udf_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_udf_attribute(udf_oid, attr);
  }

  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_attribute(_return, udf_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_udf_attribute(_return, udf_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_match(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_match(attr_list);
  }

  void sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_match(udf_match_oid);
    }
    ifaces_[i]->sai_thrift_remove_udf_match(udf_match_oid);
  }

  void sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_udf_match_attribute(udf_match_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_udf_match_attribute(udf_match_oid, attr);
  }

  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, udf_match_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, udf_match_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_group(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_group(attr_list);
  }

  void sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_group(udf_group_oid);
    }
    ifaces_[i]->sai_thrift_remove_udf_group(udf_group_oid);
  }

  void sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_udf_group_attribute(udf_group_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_udf_group_attribute(udf_group_oid, attr);
  }

  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, udf_group_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, udf_group_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_virtual_router(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_virtual_router(attr_list);
  }

  void sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_virtual_router(virtual_router_oid);
    }
    ifaces_[i]->sai_thrift_remove_virtual_router(virtual_router_oid);
  }

  void sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_virtual_router_attribute(virtual_router_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_virtual_router_attribute(virtual_router_oid, attr);
  }

  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, virtual_router_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, virtual_router_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan(attr_list);
  }

  void sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
    }
    ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
  }

  void sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_oid, attr);
  }

  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_oid, attr_list);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan_member(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan_member(attr_list);
  }

  void sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_oid);
    }
    ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_oid);
  }

  void sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vlan_member_attribute(vlan_member_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_vlan_member_attribute(vlan_member_oid, attr);
  }

  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_oid, attr_list);
    return;
  }

  void sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_oid, counter_ids);
    return;
  }

  void sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_stats_ext(_return, vlan_oid, counter_ids, mode);
    }
    ifaces_[i]->sai_thrift_get_vlan_stats_ext(_return, vlan_oid, counter_ids, mode);
    return;
  }

  void sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_vlan_stats(vlan_oid, counter_ids);
    }
    ifaces_[i]->sai_thrift_clear_vlan_stats(vlan_oid, counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_wred(attr_list);
    }
    return ifaces_[i]->sai_thrift_create_wred(attr_list);
  }

  void sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_wred(wred_oid);
    }
    ifaces_[i]->sai_thrift_remove_wred(wred_oid);
  }

  void sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_wred_attribute(wred_oid, attr);
    }
    ifaces_[i]->sai_thrift_set_wred_attribute(wred_oid, attr);
  }

  void sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_wred_attribute(_return, wred_oid, attr_list);
    }
    ifaces_[i]->sai_thrift_get_wred_attribute(_return, wred_oid, attr_list);
    return;
  }

  void sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return, const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_query_attribute_enum_values_capability(_return, object_type, attr_id, caps_count);
    }
    ifaces_[i]->sai_thrift_query_attribute_enum_values_capability(_return, object_type, attr_id, caps_count);
    return;
  }

  int64_t sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_object_type_get_availability(object_type, attr_id, attr_type);
    }
    return ifaces_[i]->sai_thrift_object_type_get_availability(object_type, attr_id, attr_type);
  }

  sai_thrift_object_id_t sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_switch_id_query(object_id);
    }
    return ifaces_[i]->sai_thrift_switch_id_query(object_id);
  }

  sai_thrift_object_type_t sai_thrift_object_type_query(const sai_thrift_object_id_t object_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_object_type_query(object_id);
    }
    return ifaces_[i]->sai_thrift_object_type_query(object_id);
  }

  sai_thrift_status_t sai_thrift_api_uninitialize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_api_uninitialize();
    }
    return ifaces_[i]->sai_thrift_api_uninitialize();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class sai_rpcConcurrentClient : virtual public sai_rpcIf {
 public:
  sai_rpcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  sai_rpcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table(const int32_t seqid);
  void sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid);
  int32_t send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_oid);
  void recv_sai_thrift_remove_acl_table(const int32_t seqid);
  void sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_attribute(const int32_t seqid);
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_entry(const int32_t seqid);
  void sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid);
  int32_t send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry_oid);
  void recv_sai_thrift_remove_acl_entry(const int32_t seqid);
  void sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_entry_attribute(const int32_t seqid);
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_counter(const int32_t seqid);
  void sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid);
  int32_t send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_oid);
  void recv_sai_thrift_remove_acl_counter(const int32_t seqid);
  void sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_counter_attribute(const int32_t seqid);
  void sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_range(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_range(const int32_t seqid);
  void sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid);
  int32_t send_sai_thrift_remove_acl_range(const sai_thrift_object_id_t acl_range_oid);
  void recv_sai_thrift_remove_acl_range(const int32_t seqid);
  void sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_range_attribute(const int32_t seqid);
  void sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_range_attribute(const sai_thrift_object_id_t acl_range_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_range_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group(const int32_t seqid);
  void sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid);
  int32_t send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_oid);
  void recv_sai_thrift_remove_acl_table_group(const int32_t seqid);
  void sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_group_attribute(const int32_t seqid);
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group_member(const int32_t seqid);
  void sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid);
  int32_t send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_oid);
  void recv_sai_thrift_remove_acl_table_group_member(const int32_t seqid);
  void sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_acl_table_chain_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_chain_group(const int32_t seqid);
  void sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid);
  int32_t send_sai_thrift_remove_acl_table_chain_group(const sai_thrift_object_id_t acl_table_chain_group_oid);
  void recv_sai_thrift_remove_acl_table_chain_group(const int32_t seqid);
  void sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_acl_table_chain_group_attribute(const int32_t seqid);
  void sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_acl_table_chain_group_attribute(const sai_thrift_object_id_t acl_table_chain_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_acl_table_chain_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ars(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ars(const int32_t seqid);
  void sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid);
  int32_t send_sai_thrift_remove_ars(const sai_thrift_object_id_t ars_oid);
  void recv_sai_thrift_remove_ars(const int32_t seqid);
  void sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ars_attribute(const int32_t seqid);
  void sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ars_attribute(const sai_thrift_object_id_t ars_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ars_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ars_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ars_profile(const int32_t seqid);
  void sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid);
  int32_t send_sai_thrift_remove_ars_profile(const sai_thrift_object_id_t ars_profile_oid);
  void recv_sai_thrift_remove_ars_profile(const int32_t seqid);
  void sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ars_profile_attribute(const int32_t seqid);
  void sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ars_profile_attribute(const sai_thrift_object_id_t ars_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ars_profile_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_bfd_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bfd_session(const int32_t seqid);
  void sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid);
  int32_t send_sai_thrift_remove_bfd_session(const sai_thrift_object_id_t bfd_session_oid);
  void recv_sai_thrift_remove_bfd_session(const int32_t seqid);
  void sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bfd_session_attribute(const int32_t seqid);
  void sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_bfd_session_attribute(const sai_thrift_object_id_t bfd_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bfd_session_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bfd_session_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_bfd_session_stats_ext(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bfd_session_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_bfd_session_stats(const sai_thrift_object_id_t bfd_session_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bfd_session_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_table_bitmap_classification_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_bitmap_classification_entry(const int32_t seqid);
  void sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid);
  int32_t send_sai_thrift_remove_table_bitmap_classification_entry(const sai_thrift_object_id_t table_bitmap_classification_entry_oid);
  void recv_sai_thrift_remove_table_bitmap_classification_entry(const int32_t seqid);
  void sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_bitmap_classification_entry_attribute(const int32_t seqid);
  void sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_table_bitmap_classification_entry_attribute(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_bitmap_classification_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_bitmap_classification_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_table_bitmap_classification_entry_stats_ext(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_bitmap_classification_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_table_bitmap_classification_entry_stats(const sai_thrift_object_id_t table_bitmap_classification_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_bitmap_classification_entry_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_table_bitmap_router_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_bitmap_router_entry(const int32_t seqid);
  void sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid);
  int32_t send_sai_thrift_remove_table_bitmap_router_entry(const sai_thrift_object_id_t table_bitmap_router_entry_oid);
  void recv_sai_thrift_remove_table_bitmap_router_entry(const int32_t seqid);
  void sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_bitmap_router_entry_attribute(const int32_t seqid);
  void sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_table_bitmap_router_entry_attribute(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_bitmap_router_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_bitmap_router_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_table_bitmap_router_entry_stats_ext(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_bitmap_router_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_table_bitmap_router_entry_stats(const sai_thrift_object_id_t table_bitmap_router_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_bitmap_router_entry_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_table_meta_tunnel_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_table_meta_tunnel_entry(const int32_t seqid);
  void sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid);
  int32_t send_sai_thrift_remove_table_meta_tunnel_entry(const sai_thrift_object_id_t table_meta_tunnel_entry_oid);
  void recv_sai_thrift_remove_table_meta_tunnel_entry(const int32_t seqid);
  void sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_table_meta_tunnel_entry_attribute(const int32_t seqid);
  void sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_table_meta_tunnel_entry_attribute(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_table_meta_tunnel_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_table_meta_tunnel_entry_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_table_meta_tunnel_entry_stats_ext(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_table_meta_tunnel_entry_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_table_meta_tunnel_entry_stats(const sai_thrift_object_id_t table_meta_tunnel_entry_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_table_meta_tunnel_entry_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bridge_port(const int32_t seqid);
  void sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid);
  int32_t send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_oid);
  void recv_sai_thrift_remove_bridge_port(const int32_t seqid);
  void sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bridge_port_attribute(const int32_t seqid);
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bridge_port_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_bridge_port_stats_ext(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bridge_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_bridge_port_stats(const sai_thrift_object_id_t bridge_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bridge_port_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_bridge(const int32_t seqid);
  void sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid);
  int32_t send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_oid);
  void recv_sai_thrift_remove_bridge(const int32_t seqid);
  void sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_bridge_attribute(const int32_t seqid);
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_bridge_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_bridge_stats_ext(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_bridge_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_bridge_stats(const sai_thrift_object_id_t bridge_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_bridge_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ingress_priority_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ingress_priority_group(const int32_t seqid);
  void sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid);
  int32_t send_sai_thrift_remove_ingress_priority_group(const sai_thrift_object_id_t ingress_priority_group_oid);
  void recv_sai_thrift_remove_ingress_priority_group(const int32_t seqid);
  void sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ingress_priority_group_attribute(const int32_t seqid);
  void sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ingress_priority_group_attribute(const sai_thrift_object_id_t ingress_priority_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ingress_priority_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ingress_priority_group_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_ingress_priority_group_stats_ext(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ingress_priority_group_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_ingress_priority_group_stats(const sai_thrift_object_id_t ingress_priority_group_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ingress_priority_group_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_buffer_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_pool(const int32_t seqid);
  void sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid);
  int32_t send_sai_thrift_remove_buffer_pool(const sai_thrift_object_id_t buffer_pool_oid);
  void recv_sai_thrift_remove_buffer_pool(const int32_t seqid);
  void sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_buffer_pool_attribute(const int32_t seqid);
  void sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_buffer_pool_attribute(const sai_thrift_object_id_t buffer_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_buffer_pool_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_buffer_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_buffer_pool_stats_ext(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_buffer_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_buffer_pool_stats(const sai_thrift_object_id_t buffer_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_buffer_pool_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_profile(const int32_t seqid);
  void sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid);
  int32_t send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_oid);
  void recv_sai_thrift_remove_buffer_profile(const int32_t seqid);
  void sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_buffer_profile_attribute(const int32_t seqid);
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_counter(const int32_t seqid);
  void sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  int32_t send_sai_thrift_remove_counter(const sai_thrift_object_id_t counter_oid);
  void recv_sai_thrift_remove_counter(const int32_t seqid);
  void sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_counter_attribute(const int32_t seqid);
  void sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_counter_attribute(const sai_thrift_object_id_t counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_counter_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_counter_stats_ext(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_counter_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_counter_stats(const sai_thrift_object_id_t counter_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_counter_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dash_acl_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dash_acl_group(const int32_t seqid);
  void sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid);
  int32_t send_sai_thrift_remove_dash_acl_group(const sai_thrift_object_id_t dash_acl_group_oid);
  void recv_sai_thrift_remove_dash_acl_group(const int32_t seqid);
  void sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dash_acl_group_attribute(const int32_t seqid);
  void sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dash_acl_group_attribute(const sai_thrift_object_id_t dash_acl_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dash_acl_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dash_acl_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dash_acl_rule(const int32_t seqid);
  void sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid);
  int32_t send_sai_thrift_remove_dash_acl_rule(const sai_thrift_object_id_t dash_acl_rule_oid);
  void recv_sai_thrift_remove_dash_acl_rule(const int32_t seqid);
  void sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dash_acl_rule_attribute(const int32_t seqid);
  void sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dash_acl_rule_attribute(const sai_thrift_object_id_t dash_acl_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dash_acl_rule_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_direction_lookup_entry(const int32_t seqid);
  void sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry);
  int32_t send_sai_thrift_remove_direction_lookup_entry(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry);
  void recv_sai_thrift_remove_direction_lookup_entry(const int32_t seqid);
  void sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_direction_lookup_entry_attribute(const int32_t seqid);
  void sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_direction_lookup_entry_attribute(const sai_thrift_direction_lookup_entry_t& direction_lookup_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_direction_lookup_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_direction_lookup_entry(const std::vector<sai_thrift_direction_lookup_entry_t> & direction_lookup_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_direction_lookup_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_eni_ether_address_map_entry(const int32_t seqid);
  void sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry);
  int32_t send_sai_thrift_remove_eni_ether_address_map_entry(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry);
  void recv_sai_thrift_remove_eni_ether_address_map_entry(const int32_t seqid);
  void sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_eni_ether_address_map_entry_attribute(const int32_t seqid);
  void sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_eni_ether_address_map_entry_attribute(const sai_thrift_eni_ether_address_map_entry_t& eni_ether_address_map_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_eni_ether_address_map_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_eni_ether_address_map_entry(const std::vector<sai_thrift_eni_ether_address_map_entry_t> & eni_ether_address_map_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_eni_ether_address_map_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_eni(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_eni(const int32_t seqid);
  void sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid);
  int32_t send_sai_thrift_remove_eni(const sai_thrift_object_id_t eni_oid);
  void recv_sai_thrift_remove_eni(const int32_t seqid);
  void sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_eni_attribute(const int32_t seqid);
  void sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_eni_attribute(const sai_thrift_object_id_t eni_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_eni_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_inbound_routing_entry(const int32_t seqid);
  void sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry);
  int32_t send_sai_thrift_remove_inbound_routing_entry(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry);
  void recv_sai_thrift_remove_inbound_routing_entry(const int32_t seqid);
  void sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_inbound_routing_entry_attribute(const int32_t seqid);
  void sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_inbound_routing_entry_attribute(const sai_thrift_inbound_routing_entry_t& inbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_inbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_inbound_routing_entry(const std::vector<sai_thrift_inbound_routing_entry_t> & inbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_inbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_meter_bucket(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_bucket(const int32_t seqid);
  void sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid);
  int32_t send_sai_thrift_remove_meter_bucket(const sai_thrift_object_id_t meter_bucket_oid);
  void recv_sai_thrift_remove_meter_bucket(const int32_t seqid);
  void sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_bucket_attribute(const int32_t seqid);
  void sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_meter_bucket_attribute(const sai_thrift_object_id_t meter_bucket_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_bucket_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_meter_policy(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_policy(const int32_t seqid);
  void sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid);
  int32_t send_sai_thrift_remove_meter_policy(const sai_thrift_object_id_t meter_policy_oid);
  void recv_sai_thrift_remove_meter_policy(const int32_t seqid);
  void sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_policy_attribute(const int32_t seqid);
  void sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_meter_policy_attribute(const sai_thrift_object_id_t meter_policy_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_policy_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_meter_rule(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_meter_rule(const int32_t seqid);
  void sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid);
  int32_t send_sai_thrift_remove_meter_rule(const sai_thrift_object_id_t meter_rule_oid);
  void recv_sai_thrift_remove_meter_rule(const int32_t seqid);
  void sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_meter_rule_attribute(const int32_t seqid);
  void sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_meter_rule_attribute(const sai_thrift_object_id_t meter_rule_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_meter_rule_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_outbound_ca_to_pa_entry(const int32_t seqid);
  void sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry);
  int32_t send_sai_thrift_remove_outbound_ca_to_pa_entry(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry);
  void recv_sai_thrift_remove_outbound_ca_to_pa_entry(const int32_t seqid);
  void sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_outbound_ca_to_pa_entry_attribute(const int32_t seqid);
  void sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_outbound_ca_to_pa_entry_attribute(const sai_thrift_outbound_ca_to_pa_entry_t& outbound_ca_to_pa_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_outbound_ca_to_pa_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_outbound_ca_to_pa_entry(const std::vector<sai_thrift_outbound_ca_to_pa_entry_t> & outbound_ca_to_pa_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_outbound_ca_to_pa_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_outbound_routing_entry(const int32_t seqid);
  void sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry);
  int32_t send_sai_thrift_remove_outbound_routing_entry(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry);
  void recv_sai_thrift_remove_outbound_routing_entry(const int32_t seqid);
  void sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_outbound_routing_entry_attribute(const int32_t seqid);
  void sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_outbound_routing_entry_attribute(const sai_thrift_outbound_routing_entry_t& outbound_routing_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_outbound_routing_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_outbound_routing_entry(const std::vector<sai_thrift_outbound_routing_entry_t> & outbound_routing_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_outbound_routing_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_pa_validation_entry(const int32_t seqid);
  void sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry);
  int32_t send_sai_thrift_remove_pa_validation_entry(const sai_thrift_pa_validation_entry_t& pa_validation_entry);
  void recv_sai_thrift_remove_pa_validation_entry(const int32_t seqid);
  void sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_pa_validation_entry_attribute(const int32_t seqid);
  void sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_pa_validation_entry_attribute(const sai_thrift_pa_validation_entry_t& pa_validation_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_pa_validation_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_pa_validation_entry(const std::vector<sai_thrift_pa_validation_entry_t> & pa_validation_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_pa_validation_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_dst_tag_entry(const int32_t seqid);
  void sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry);
  int32_t send_sai_thrift_remove_dst_tag_entry(const sai_thrift_dst_tag_entry_t& dst_tag_entry);
  void recv_sai_thrift_remove_dst_tag_entry(const int32_t seqid);
  void sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dst_tag_entry_attribute(const int32_t seqid);
  void sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dst_tag_entry_attribute(const sai_thrift_dst_tag_entry_t& dst_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dst_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_dst_tag_entry(const std::vector<sai_thrift_dst_tag_entry_t> & dst_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_dst_tag_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_src_tag_entry(const int32_t seqid);
  void sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry);
  int32_t send_sai_thrift_remove_src_tag_entry(const sai_thrift_src_tag_entry_t& src_tag_entry);
  void recv_sai_thrift_remove_src_tag_entry(const int32_t seqid);
  void sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_src_tag_entry_attribute(const int32_t seqid);
  void sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_src_tag_entry_attribute(const sai_thrift_src_tag_entry_t& src_tag_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_src_tag_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_src_tag_entry(const std::vector<sai_thrift_src_tag_entry_t> & src_tag_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_src_tag_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_vip_entry(const sai_thrift_vip_entry_t& vip_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_vip_entry(const int32_t seqid);
  void sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry);
  int32_t send_sai_thrift_remove_vip_entry(const sai_thrift_vip_entry_t& vip_entry);
  void recv_sai_thrift_remove_vip_entry(const int32_t seqid);
  void sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vip_entry_attribute(const int32_t seqid);
  void sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_vip_entry_attribute(const sai_thrift_vip_entry_t& vip_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vip_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_vip_entry(const std::vector<sai_thrift_vip_entry_t> & vip_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_vip_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_vip_entry(const std::vector<sai_thrift_vip_entry_t> & vip_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_vip_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_vnet(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vnet(const int32_t seqid);
  void sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid);
  int32_t send_sai_thrift_remove_vnet(const sai_thrift_object_id_t vnet_oid);
  void recv_sai_thrift_remove_vnet(const int32_t seqid);
  void sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vnet_attribute(const int32_t seqid);
  void sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_vnet_attribute(const sai_thrift_object_id_t vnet_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vnet_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_debug_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_debug_counter(const int32_t seqid);
  void sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  int32_t send_sai_thrift_remove_debug_counter(const sai_thrift_object_id_t debug_counter_oid);
  void recv_sai_thrift_remove_debug_counter(const int32_t seqid);
  void sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_debug_counter_attribute(const int32_t seqid);
  void sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_debug_counter_attribute(const sai_thrift_object_id_t debug_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_debug_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dtel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel(const int32_t seqid);
  void sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid);
  int32_t send_sai_thrift_remove_dtel(const sai_thrift_object_id_t dtel_oid);
  void recv_sai_thrift_remove_dtel(const int32_t seqid);
  void sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_attribute(const int32_t seqid);
  void sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dtel_attribute(const sai_thrift_object_id_t dtel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dtel_queue_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_queue_report(const int32_t seqid);
  void sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid);
  int32_t send_sai_thrift_remove_dtel_queue_report(const sai_thrift_object_id_t dtel_queue_report_oid);
  void recv_sai_thrift_remove_dtel_queue_report(const int32_t seqid);
  void sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_queue_report_attribute(const int32_t seqid);
  void sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dtel_queue_report_attribute(const sai_thrift_object_id_t dtel_queue_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_queue_report_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dtel_int_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_int_session(const int32_t seqid);
  void sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid);
  int32_t send_sai_thrift_remove_dtel_int_session(const sai_thrift_object_id_t dtel_int_session_oid);
  void recv_sai_thrift_remove_dtel_int_session(const int32_t seqid);
  void sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_int_session_attribute(const int32_t seqid);
  void sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dtel_int_session_attribute(const sai_thrift_object_id_t dtel_int_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_int_session_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dtel_report_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_report_session(const int32_t seqid);
  void sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid);
  int32_t send_sai_thrift_remove_dtel_report_session(const sai_thrift_object_id_t dtel_report_session_oid);
  void recv_sai_thrift_remove_dtel_report_session(const int32_t seqid);
  void sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_report_session_attribute(const int32_t seqid);
  void sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dtel_report_session_attribute(const sai_thrift_object_id_t dtel_report_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_report_session_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_dtel_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_dtel_event(const int32_t seqid);
  void sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid);
  int32_t send_sai_thrift_remove_dtel_event(const sai_thrift_object_id_t dtel_event_oid);
  void recv_sai_thrift_remove_dtel_event(const int32_t seqid);
  void sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_dtel_event_attribute(const int32_t seqid);
  void sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_dtel_event_attribute(const sai_thrift_object_id_t dtel_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_dtel_event_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_fdb_entry(const int32_t seqid);
  void sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry);
  int32_t send_sai_thrift_remove_fdb_entry(const sai_thrift_fdb_entry_t& fdb_entry);
  void recv_sai_thrift_remove_fdb_entry(const int32_t seqid);
  void sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_fdb_entry_attribute(const int32_t seqid);
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_flush_fdb_entries(const int32_t seqid);
  void sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_fdb_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_fdb_entry(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_fdb_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_fdb_entry_attribute(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_fdb_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_fdb_entry_attribute(const std::vector<sai_thrift_fdb_entry_t> & fdb_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_generic_programmable(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_generic_programmable(const int32_t seqid);
  void sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid);
  int32_t send_sai_thrift_remove_generic_programmable(const sai_thrift_object_id_t generic_programmable_oid);
  void recv_sai_thrift_remove_generic_programmable(const int32_t seqid);
  void sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_generic_programmable_attribute(const int32_t seqid);
  void sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_generic_programmable_attribute(const sai_thrift_object_id_t generic_programmable_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_generic_programmable_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_fine_grained_hash_field(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_fine_grained_hash_field(const int32_t seqid);
  void sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid);
  int32_t send_sai_thrift_remove_fine_grained_hash_field(const sai_thrift_object_id_t fine_grained_hash_field_oid);
  void recv_sai_thrift_remove_fine_grained_hash_field(const int32_t seqid);
  void sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_fine_grained_hash_field_attribute(const int32_t seqid);
  void sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_fine_grained_hash_field_attribute(const sai_thrift_object_id_t fine_grained_hash_field_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_fine_grained_hash_field_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hash(const int32_t seqid);
  void sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid);
  int32_t send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_oid);
  void recv_sai_thrift_remove_hash(const int32_t seqid);
  void sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hash_attribute(const int32_t seqid);
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t hash_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap_group(const int32_t seqid);
  void sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid);
  int32_t send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t hostif_trap_group_oid);
  void recv_sai_thrift_remove_hostif_trap_group(const int32_t seqid);
  void sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_trap_group_attribute(const int32_t seqid);
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t hostif_trap_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap(const int32_t seqid);
  void sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid);
  int32_t send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t hostif_trap_oid);
  void recv_sai_thrift_remove_hostif_trap(const int32_t seqid);
  void sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_trap_attribute(const int32_t seqid);
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t hostif_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hostif_user_defined_trap(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_user_defined_trap(const int32_t seqid);
  void sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid);
  int32_t send_sai_thrift_remove_hostif_user_defined_trap(const sai_thrift_object_id_t hostif_user_defined_trap_oid);
  void recv_sai_thrift_remove_hostif_user_defined_trap(const int32_t seqid);
  void sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_user_defined_trap_attribute(const int32_t seqid);
  void sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hostif_user_defined_trap_attribute(const sai_thrift_object_id_t hostif_user_defined_trap_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_user_defined_trap_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif(const int32_t seqid);
  void sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid);
  int32_t send_sai_thrift_remove_hostif(const sai_thrift_object_id_t hostif_oid);
  void recv_sai_thrift_remove_hostif(const int32_t seqid);
  void sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_attribute(const int32_t seqid);
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t hostif_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_table_entry(const int32_t seqid);
  void sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid);
  int32_t send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t hostif_table_entry_oid);
  void recv_sai_thrift_remove_hostif_table_entry(const int32_t seqid);
  void sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_hostif_table_entry_attribute(const int32_t seqid);
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t hostif_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_size_t sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_recv_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_size_t recv_sai_thrift_recv_hostif_packet(const int32_t seqid);
  void sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_send_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::string& buffer, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_send_hostif_packet(const int32_t seqid);
  void sai_thrift_allocate_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_allocate_hostif_packet(const sai_thrift_object_id_t hostif_oid, const sai_thrift_size_t buffer_size, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_allocate_hostif_packet(std::string& _return, const int32_t seqid);
  void sai_thrift_free_hostif_packet(std::string& _return, const sai_thrift_object_id_t hostif_oid, const std::string& buffer);
  int32_t send_sai_thrift_free_hostif_packet(const sai_thrift_object_id_t hostif_oid, const std::string& buffer);
  void recv_sai_thrift_free_hostif_packet(std::string& _return, const int32_t seqid);
  void sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_ipmc_entry(const int32_t seqid);
  void sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry);
  int32_t send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& ipmc_entry);
  void recv_sai_thrift_remove_ipmc_entry(const int32_t seqid);
  void sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_entry_attribute(const int32_t seqid);
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& ipmc_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group(const int32_t seqid);
  void sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid);
  int32_t send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t ipmc_group_oid);
  void recv_sai_thrift_remove_ipmc_group(const int32_t seqid);
  void sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_group_attribute(const int32_t seqid);
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t ipmc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group_member(const int32_t seqid);
  void sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid);
  int32_t send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t ipmc_group_member_oid);
  void recv_sai_thrift_remove_ipmc_group_member(const int32_t seqid);
  void sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipmc_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t ipmc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec(const int32_t seqid);
  void sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid);
  int32_t send_sai_thrift_remove_ipsec(const sai_thrift_object_id_t ipsec_oid);
  void recv_sai_thrift_remove_ipsec(const int32_t seqid);
  void sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_attribute(const int32_t seqid);
  void sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipsec_attribute(const sai_thrift_object_id_t ipsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec_port(const int32_t seqid);
  void sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid);
  int32_t send_sai_thrift_remove_ipsec_port(const sai_thrift_object_id_t ipsec_port_oid);
  void recv_sai_thrift_remove_ipsec_port(const int32_t seqid);
  void sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_port_attribute(const int32_t seqid);
  void sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipsec_port_attribute(const sai_thrift_object_id_t ipsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ipsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_ipsec_port_stats_ext(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ipsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_ipsec_port_stats(const sai_thrift_object_id_t ipsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ipsec_port_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_ipsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipsec_sa(const int32_t seqid);
  void sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid);
  int32_t send_sai_thrift_remove_ipsec_sa(const sai_thrift_object_id_t ipsec_sa_oid);
  void recv_sai_thrift_remove_ipsec_sa(const int32_t seqid);
  void sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_ipsec_sa_attribute(const int32_t seqid);
  void sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_ipsec_sa_attribute(const sai_thrift_object_id_t ipsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_ipsec_sa_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_ipsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_ipsec_sa_stats_ext(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_ipsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_ipsec_sa_stats(const sai_thrift_object_id_t ipsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_ipsec_sa_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_isolation_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group(const int32_t seqid);
  void sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid);
  int32_t send_sai_thrift_remove_isolation_group(const sai_thrift_object_id_t isolation_group_oid);
  void recv_sai_thrift_remove_isolation_group(const int32_t seqid);
  void sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_isolation_group_attribute(const int32_t seqid);
  void sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_isolation_group_attribute(const sai_thrift_object_id_t isolation_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_isolation_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_isolation_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_isolation_group_member(const int32_t seqid);
  void sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid);
  int32_t send_sai_thrift_remove_isolation_group_member(const sai_thrift_object_id_t isolation_group_member_oid);
  void recv_sai_thrift_remove_isolation_group_member(const int32_t seqid);
  void sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_isolation_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_isolation_group_member_attribute(const sai_thrift_object_id_t isolation_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_isolation_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_l2mc_entry(const int32_t seqid);
  void sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry);
  int32_t send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& l2mc_entry);
  void recv_sai_thrift_remove_l2mc_entry(const int32_t seqid);
  void sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_entry_attribute(const int32_t seqid);
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& l2mc_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group(const int32_t seqid);
  void sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid);
  int32_t send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t l2mc_group_oid);
  void recv_sai_thrift_remove_l2mc_group(const int32_t seqid);
  void sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_group_attribute(const int32_t seqid);
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t l2mc_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group_member(const int32_t seqid);
  void sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid);
  int32_t send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t l2mc_group_member_oid);
  void recv_sai_thrift_remove_l2mc_group_member(const int32_t seqid);
  void sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_l2mc_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t l2mc_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag(const int32_t seqid);
  void sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid);
  int32_t send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_oid);
  void recv_sai_thrift_remove_lag(const int32_t seqid);
  void sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_lag_attribute(const int32_t seqid);
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag_member(const int32_t seqid);
  void sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid);
  int32_t send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_oid);
  void recv_sai_thrift_remove_lag_member(const int32_t seqid);
  void sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_lag_member_attribute(const int32_t seqid);
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_macsec(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec(const int32_t seqid);
  void sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid);
  int32_t send_sai_thrift_remove_macsec(const sai_thrift_object_id_t macsec_oid);
  void recv_sai_thrift_remove_macsec(const int32_t seqid);
  void sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_attribute(const int32_t seqid);
  void sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_macsec_attribute(const sai_thrift_object_id_t macsec_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_macsec_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_port(const int32_t seqid);
  void sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid);
  int32_t send_sai_thrift_remove_macsec_port(const sai_thrift_object_id_t macsec_port_oid);
  void recv_sai_thrift_remove_macsec_port(const int32_t seqid);
  void sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_port_attribute(const int32_t seqid);
  void sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_macsec_port_attribute(const sai_thrift_object_id_t macsec_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_port_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_macsec_port_stats_ext(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_macsec_port_stats(const sai_thrift_object_id_t macsec_port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_port_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_macsec_flow(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_flow(const int32_t seqid);
  void sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid);
  int32_t send_sai_thrift_remove_macsec_flow(const sai_thrift_object_id_t macsec_flow_oid);
  void recv_sai_thrift_remove_macsec_flow(const int32_t seqid);
  void sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_flow_attribute(const int32_t seqid);
  void sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_macsec_flow_attribute(const sai_thrift_object_id_t macsec_flow_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_flow_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_flow_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_macsec_flow_stats_ext(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_flow_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_macsec_flow_stats(const sai_thrift_object_id_t macsec_flow_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_flow_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_macsec_sc(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_sc(const int32_t seqid);
  void sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid);
  int32_t send_sai_thrift_remove_macsec_sc(const sai_thrift_object_id_t macsec_sc_oid);
  void recv_sai_thrift_remove_macsec_sc(const int32_t seqid);
  void sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_sc_attribute(const int32_t seqid);
  void sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_macsec_sc_attribute(const sai_thrift_object_id_t macsec_sc_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_sc_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_sc_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_macsec_sc_stats_ext(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_sc_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_macsec_sc_stats(const sai_thrift_object_id_t macsec_sc_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_sc_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_macsec_sa(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_macsec_sa(const int32_t seqid);
  void sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid);
  int32_t send_sai_thrift_remove_macsec_sa(const sai_thrift_object_id_t macsec_sa_oid);
  void recv_sai_thrift_remove_macsec_sa(const int32_t seqid);
  void sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_macsec_sa_attribute(const int32_t seqid);
  void sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_macsec_sa_attribute(const sai_thrift_object_id_t macsec_sa_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_macsec_sa_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_macsec_sa_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_macsec_sa_stats_ext(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_macsec_sa_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_macsec_sa_stats(const sai_thrift_object_id_t macsec_sa_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_macsec_sa_stats(const int32_t seqid);
  void sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_mcast_fdb_entry(const int32_t seqid);
  void sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry);
  int32_t send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry);
  void recv_sai_thrift_remove_mcast_fdb_entry(const int32_t seqid);
  void sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_mcast_fdb_entry_attribute(const int32_t seqid);
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& mcast_fdb_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_mirror_session(const int32_t seqid);
  void sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid);
  int32_t send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t mirror_session_oid);
  void recv_sai_thrift_remove_mirror_session(const int32_t seqid);
  void sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_mirror_session_attribute(const int32_t seqid);
  void sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_mirror_session_attribute(const sai_thrift_object_id_t mirror_session_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_mirror_session_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_inseg_entry(const int32_t seqid);
  void sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry);
  int32_t send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& inseg_entry);
  void recv_sai_thrift_remove_inseg_entry(const int32_t seqid);
  void sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_inseg_entry_attribute(const int32_t seqid);
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& inseg_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_inseg_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_inseg_entry(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_inseg_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_inseg_entry_attribute(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_inseg_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_inseg_entry_attribute(const std::vector<sai_thrift_inseg_entry_t> & inseg_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_my_mac(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_my_mac(const int32_t seqid);
  void sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid);
  int32_t send_sai_thrift_remove_my_mac(const sai_thrift_object_id_t my_mac_oid);
  void recv_sai_thrift_remove_my_mac(const int32_t seqid);
  void sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_my_mac_attribute(const int32_t seqid);
  void sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_my_mac_attribute(const sai_thrift_object_id_t my_mac_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_my_mac_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_nat_entry(const sai_thrift_nat_entry_t& nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_nat_entry(const int32_t seqid);
  void sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry);
  int32_t send_sai_thrift_remove_nat_entry(const sai_thrift_nat_entry_t& nat_entry);
  void recv_sai_thrift_remove_nat_entry(const int32_t seqid);
  void sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_nat_entry_attribute(const int32_t seqid);
  void sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_nat_entry_attribute(const sai_thrift_nat_entry_t& nat_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_nat_entry(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_nat_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_nat_entry(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_nat_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_nat_entry_attribute(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_nat_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_nat_entry_attribute(const std::vector<sai_thrift_nat_entry_t> & nat_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_nat_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_nat_zone_counter(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_nat_zone_counter(const int32_t seqid);
  void sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid);
  int32_t send_sai_thrift_remove_nat_zone_counter(const sai_thrift_object_id_t nat_zone_counter_oid);
  void recv_sai_thrift_remove_nat_zone_counter(const int32_t seqid);
  void sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_nat_zone_counter_attribute(const int32_t seqid);
  void sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_nat_zone_counter_attribute(const sai_thrift_object_id_t nat_zone_counter_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_nat_zone_counter_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_neighbor_entry(const int32_t seqid);
  void sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry);
  int32_t send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& neighbor_entry);
  void recv_sai_thrift_remove_neighbor_entry(const int32_t seqid);
  void sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_neighbor_entry_attribute(const int32_t seqid);
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& neighbor_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_remove_all_neighbor_entries();
  int32_t send_sai_thrift_remove_all_neighbor_entries();
  void recv_sai_thrift_remove_all_neighbor_entries(const int32_t seqid);
  void sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_neighbor_entry(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_neighbor_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_neighbor_entry_attribute(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_neighbor_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_neighbor_entry_attribute(const std::vector<sai_thrift_neighbor_entry_t> & neighbor_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop(const int32_t seqid);
  void sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid);
  int32_t send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_oid);
  void recv_sai_thrift_remove_next_hop(const int32_t seqid);
  void sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_attribute(const int32_t seqid);
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group(const int32_t seqid);
  void sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid);
  int32_t send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t next_hop_group_oid);
  void recv_sai_thrift_remove_next_hop_group(const int32_t seqid);
  void sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_attribute(const int32_t seqid);
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t next_hop_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_member(const int32_t seqid);
  void sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid);
  int32_t send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t next_hop_group_member_oid);
  void recv_sai_thrift_remove_next_hop_group_member(const int32_t seqid);
  void sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t next_hop_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_next_hop_group_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_map(const int32_t seqid);
  void sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid);
  int32_t send_sai_thrift_remove_next_hop_group_map(const sai_thrift_object_id_t next_hop_group_map_oid);
  void recv_sai_thrift_remove_next_hop_group_map(const int32_t seqid);
  void sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_next_hop_group_map_attribute(const int32_t seqid);
  void sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_next_hop_group_map_attribute(const sai_thrift_object_id_t next_hop_group_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_next_hop_group_map_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_policer(const int32_t seqid);
  void sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid);
  int32_t send_sai_thrift_remove_policer(const sai_thrift_object_id_t policer_oid);
  void recv_sai_thrift_remove_policer(const int32_t seqid);
  void sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_policer_attribute(const int32_t seqid);
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t policer_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_policer_stats_ext(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_policer_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t policer_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_policer_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port(const int32_t seqid);
  void sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  int32_t send_sai_thrift_remove_port(const sai_thrift_object_id_t port_oid);
  void recv_sai_thrift_remove_port(const int32_t seqid);
  void sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_attribute(const int32_t seqid);
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_port_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_port_stats_ext(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_port_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_port_stats(const sai_thrift_object_id_t port_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_port_stats(const int32_t seqid);
  void sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid);
  int32_t send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_oid);
  void recv_sai_thrift_clear_port_all_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_port_pool(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_pool(const int32_t seqid);
  void sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid);
  int32_t send_sai_thrift_remove_port_pool(const sai_thrift_object_id_t port_pool_oid);
  void recv_sai_thrift_remove_port_pool(const int32_t seqid);
  void sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_pool_attribute(const int32_t seqid);
  void sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_port_pool_attribute(const sai_thrift_object_id_t port_pool_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_pool_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_port_pool_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_port_pool_stats_ext(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_port_pool_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_port_pool_stats(const sai_thrift_object_id_t port_pool_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_port_pool_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_port_serdes(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_serdes(const int32_t seqid);
  void sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid);
  int32_t send_sai_thrift_remove_port_serdes(const sai_thrift_object_id_t port_serdes_oid);
  void recv_sai_thrift_remove_port_serdes(const int32_t seqid);
  void sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_serdes_attribute(const int32_t seqid);
  void sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_port_serdes_attribute(const sai_thrift_object_id_t port_serdes_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_serdes_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_port_connector(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_port_connector(const int32_t seqid);
  void sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid);
  int32_t send_sai_thrift_remove_port_connector(const sai_thrift_object_id_t port_connector_oid);
  void recv_sai_thrift_remove_port_connector(const int32_t seqid);
  void sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_port_connector_attribute(const int32_t seqid);
  void sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_port_connector_attribute(const sai_thrift_object_id_t port_connector_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_port_connector_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_qos_map(const int32_t seqid);
  void sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid);
  int32_t send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_oid);
  void recv_sai_thrift_remove_qos_map(const int32_t seqid);
  void sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_qos_map_attribute(const int32_t seqid);
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_queue(const int32_t seqid);
  void sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid);
  int32_t send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_oid);
  void recv_sai_thrift_remove_queue(const int32_t seqid);
  void sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_queue_attribute(const int32_t seqid);
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_queue_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_queue_stats_ext(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_queue_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_queue_stats(const int32_t seqid);
  void sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_route_entry(const sai_thrift_route_entry_t& route_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_route_entry(const int32_t seqid);
  void sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry);
  int32_t send_sai_thrift_remove_route_entry(const sai_thrift_route_entry_t& route_entry);
  void recv_sai_thrift_remove_route_entry(const int32_t seqid);
  void sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_route_entry_attribute(const int32_t seqid);
  void sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_route_entry_attribute(const sai_thrift_route_entry_t& route_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_route_entry(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_route_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_route_entry(const std::vector<sai_thrift_route_entry_t> & route_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_route_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_route_entry_attribute(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_route_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_route_entry_attribute(const std::vector<sai_thrift_route_entry_t> & route_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_route_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_router_interface(const int32_t seqid);
  void sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid);
  int32_t send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t router_interface_oid);
  void recv_sai_thrift_remove_router_interface(const int32_t seqid);
  void sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_router_interface_attribute(const int32_t seqid);
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t router_interface_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_router_interface_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_router_interface_stats_ext(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_router_interface_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_router_interface_stats(const sai_thrift_object_id_t router_interface_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_router_interface_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group(const int32_t seqid);
  void sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid);
  int32_t send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t rpf_group_oid);
  void recv_sai_thrift_remove_rpf_group(const int32_t seqid);
  void sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_rpf_group_attribute(const int32_t seqid);
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t rpf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group_member(const int32_t seqid);
  void sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid);
  int32_t send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t rpf_group_member_oid);
  void recv_sai_thrift_remove_rpf_group_member(const int32_t seqid);
  void sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_rpf_group_member_attribute(const int32_t seqid);
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t rpf_group_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_samplepacket(const int32_t seqid);
  void sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid);
  int32_t send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_oid);
  void recv_sai_thrift_remove_samplepacket(const int32_t seqid);
  void sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_samplepacket_attribute(const int32_t seqid);
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_scheduler(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler(const int32_t seqid);
  void sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid);
  int32_t send_sai_thrift_remove_scheduler(const sai_thrift_object_id_t scheduler_oid);
  void recv_sai_thrift_remove_scheduler(const int32_t seqid);
  void sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_scheduler_attribute(const int32_t seqid);
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t scheduler_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_group(const int32_t seqid);
  void sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid);
  int32_t send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_oid);
  void recv_sai_thrift_remove_scheduler_group(const int32_t seqid);
  void sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_scheduler_group_attribute(const int32_t seqid);
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_srv6_sidlist(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_srv6_sidlist(const int32_t seqid);
  void sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid);
  int32_t send_sai_thrift_remove_srv6_sidlist(const sai_thrift_object_id_t srv6_sidlist_oid);
  void recv_sai_thrift_remove_srv6_sidlist(const int32_t seqid);
  void sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_srv6_sidlist_attribute(const int32_t seqid);
  void sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_srv6_sidlist_attribute(const sai_thrift_object_id_t srv6_sidlist_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_srv6_sidlist_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_srv6_sidlist_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_srv6_sidlist_stats_ext(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_srv6_sidlist_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_srv6_sidlist_stats(const sai_thrift_object_id_t srv6_sidlist_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_srv6_sidlist_stats(const int32_t seqid);
  void sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list);
  void recv_sai_thrift_create_my_sid_entry(const int32_t seqid);
  void sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry);
  int32_t send_sai_thrift_remove_my_sid_entry(const sai_thrift_my_sid_entry_t& my_sid_entry);
  void recv_sai_thrift_remove_my_sid_entry(const int32_t seqid);
  void sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_my_sid_entry_attribute(const int32_t seqid);
  void sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_my_sid_entry_attribute(const sai_thrift_my_sid_entry_t& my_sid_entry, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_create_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_create_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_remove_my_sid_entry(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_remove_my_sid_entry(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  int32_t send_sai_thrift_bulk_set_my_sid_entry_attribute(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_attribute_t> & attr_list, const sai_thrift_bulk_op_error_mode_t mode);
  void recv_sai_thrift_bulk_set_my_sid_entry_attribute(std::vector<sai_thrift_status_t> & _return, const int32_t seqid);
  void sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  int32_t send_sai_thrift_bulk_get_my_sid_entry_attribute(const std::vector<sai_thrift_my_sid_entry_t> & my_sid_entry, const std::vector<sai_thrift_uint32_t> & attr_count, const sai_thrift_attribute_list_t& attr_list, const sai_thrift_bulk_op_error_mode_t mode, const std::vector<sai_thrift_status_t> & object_statuses);
  void recv_sai_thrift_bulk_get_my_sid_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_stp(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp(const int32_t seqid);
  void sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid);
  int32_t send_sai_thrift_remove_stp(const sai_thrift_object_id_t stp_oid);
  void recv_sai_thrift_remove_stp(const int32_t seqid);
  void sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_stp_attribute(const int32_t seqid);
  void sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_stp_attribute(const sai_thrift_object_id_t stp_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_stp_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_stp_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_port(const int32_t seqid);
  void sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid);
  int32_t send_sai_thrift_remove_stp_port(const sai_thrift_object_id_t stp_port_oid);
  void recv_sai_thrift_remove_stp_port(const int32_t seqid);
  void sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_stp_port_attribute(const int32_t seqid);
  void sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_stp_port_attribute(const sai_thrift_object_id_t stp_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_stp_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  int32_t send_sai_thrift_switch_register_read(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_register_read(std::vector<sai_thrift_uint32_t> & _return, const int32_t seqid);
  void sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  int32_t send_sai_thrift_switch_register_write(const sai_thrift_uint64_t platform_context, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_register_write(const int32_t seqid);
  void sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  int32_t send_sai_thrift_switch_mdio_read(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_mdio_read(std::vector<sai_thrift_uint32_t> & _return, const int32_t seqid);
  void sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  int32_t send_sai_thrift_switch_mdio_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_mdio_write(const int32_t seqid);
  void sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return, const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  int32_t send_sai_thrift_switch_mdio_cl22_read(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr);
  void recv_sai_thrift_switch_mdio_cl22_read(std::vector<sai_thrift_uint32_t> & _return, const int32_t seqid);
  void sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  int32_t send_sai_thrift_switch_mdio_cl22_write(const sai_thrift_uint32_t device_addr, const sai_thrift_uint32_t start_reg_addr, const std::vector<sai_thrift_uint32_t> & reg_val);
  void recv_sai_thrift_switch_mdio_cl22_write(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_switch(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_switch(const int32_t seqid);
  void sai_thrift_remove_switch();
  int32_t send_sai_thrift_remove_switch();
  void recv_sai_thrift_remove_switch(const int32_t seqid);
  void sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_switch_attribute(const int32_t seqid);
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_switch_attribute(const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_switch_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_switch_stats_ext(const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_switch_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_switch_stats(const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_switch_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_switch_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_switch_tunnel(const int32_t seqid);
  void sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid);
  int32_t send_sai_thrift_remove_switch_tunnel(const sai_thrift_object_id_t switch_tunnel_oid);
  void recv_sai_thrift_remove_switch_tunnel(const int32_t seqid);
  void sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_switch_tunnel_attribute(const int32_t seqid);
  void sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_switch_tunnel_attribute(const sai_thrift_object_id_t switch_tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_switch_tunnel_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_system_port(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_system_port(const int32_t seqid);
  void sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid);
  int32_t send_sai_thrift_remove_system_port(const sai_thrift_object_id_t system_port_oid);
  void recv_sai_thrift_remove_system_port(const int32_t seqid);
  void sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_system_port_attribute(const int32_t seqid);
  void sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_system_port_attribute(const sai_thrift_object_id_t system_port_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_system_port_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam(const int32_t seqid);
  void sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid);
  int32_t send_sai_thrift_remove_tam(const sai_thrift_object_id_t tam_oid);
  void recv_sai_thrift_remove_tam(const int32_t seqid);
  void sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_attribute(const int32_t seqid);
  void sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_attribute(const sai_thrift_object_id_t tam_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_math_func(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_math_func(const int32_t seqid);
  void sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid);
  int32_t send_sai_thrift_remove_tam_math_func(const sai_thrift_object_id_t tam_math_func_oid);
  void recv_sai_thrift_remove_tam_math_func(const int32_t seqid);
  void sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_math_func_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_math_func_attribute(const sai_thrift_object_id_t tam_math_func_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_math_func_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_event_threshold(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event_threshold(const int32_t seqid);
  void sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid);
  int32_t send_sai_thrift_remove_tam_event_threshold(const sai_thrift_object_id_t tam_event_threshold_oid);
  void recv_sai_thrift_remove_tam_event_threshold(const int32_t seqid);
  void sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_threshold_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_event_threshold_attribute(const sai_thrift_object_id_t tam_event_threshold_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_threshold_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_int(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_int(const int32_t seqid);
  void sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid);
  int32_t send_sai_thrift_remove_tam_int(const sai_thrift_object_id_t tam_int_oid);
  void recv_sai_thrift_remove_tam_int(const int32_t seqid);
  void sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_int_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_int_attribute(const sai_thrift_object_id_t tam_int_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_int_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_tel_type(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_tel_type(const int32_t seqid);
  void sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid);
  int32_t send_sai_thrift_remove_tam_tel_type(const sai_thrift_object_id_t tam_tel_type_oid);
  void recv_sai_thrift_remove_tam_tel_type(const int32_t seqid);
  void sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_tel_type_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_tel_type_attribute(const sai_thrift_object_id_t tam_tel_type_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_tel_type_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_report(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_report(const int32_t seqid);
  void sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid);
  int32_t send_sai_thrift_remove_tam_report(const sai_thrift_object_id_t tam_report_oid);
  void recv_sai_thrift_remove_tam_report(const int32_t seqid);
  void sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_report_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_report_attribute(const sai_thrift_object_id_t tam_report_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_report_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_telemetry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_telemetry(const int32_t seqid);
  void sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid);
  int32_t send_sai_thrift_remove_tam_telemetry(const sai_thrift_object_id_t tam_telemetry_oid);
  void recv_sai_thrift_remove_tam_telemetry(const int32_t seqid);
  void sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_telemetry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_telemetry_attribute(const sai_thrift_object_id_t tam_telemetry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_telemetry_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_transport(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_transport(const int32_t seqid);
  void sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid);
  int32_t send_sai_thrift_remove_tam_transport(const sai_thrift_object_id_t tam_transport_oid);
  void recv_sai_thrift_remove_tam_transport(const int32_t seqid);
  void sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_transport_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_transport_attribute(const sai_thrift_object_id_t tam_transport_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_transport_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_collector(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_collector(const int32_t seqid);
  void sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid);
  int32_t send_sai_thrift_remove_tam_collector(const sai_thrift_object_id_t tam_collector_oid);
  void recv_sai_thrift_remove_tam_collector(const int32_t seqid);
  void sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_collector_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_collector_attribute(const sai_thrift_object_id_t tam_collector_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_collector_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_event_action(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event_action(const int32_t seqid);
  void sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid);
  int32_t send_sai_thrift_remove_tam_event_action(const sai_thrift_object_id_t tam_event_action_oid);
  void recv_sai_thrift_remove_tam_event_action(const int32_t seqid);
  void sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_action_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_event_action_attribute(const sai_thrift_object_id_t tam_event_action_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_action_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tam_event(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tam_event(const int32_t seqid);
  void sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid);
  int32_t send_sai_thrift_remove_tam_event(const sai_thrift_object_id_t tam_event_oid);
  void recv_sai_thrift_remove_tam_event(const int32_t seqid);
  void sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tam_event_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tam_event_attribute(const sai_thrift_object_id_t tam_event_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tam_event_attribute(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map(const int32_t seqid);
  void sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid);
  int32_t send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_oid);
  void recv_sai_thrift_remove_tunnel_map(const int32_t seqid);
  void sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_map_attribute(const int32_t seqid);
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel(const int32_t seqid);
  void sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid);
  int32_t send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_oid);
  void recv_sai_thrift_remove_tunnel(const int32_t seqid);
  void sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_attribute(const int32_t seqid);
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_tunnel_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_tunnel_stats_ext(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_tunnel_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_tunnel_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_term_table_entry(const int32_t seqid);
  void sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid);
  int32_t send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_oid);
  void recv_sai_thrift_remove_tunnel_term_table_entry(const int32_t seqid);
  void sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_term_table_entry_attribute(const int32_t seqid);
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map_entry(const int32_t seqid);
  void sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid);
  int32_t send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_oid);
  void recv_sai_thrift_remove_tunnel_map_entry(const int32_t seqid);
  void sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_tunnel_map_entry_attribute(const int32_t seqid);
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf(const int32_t seqid);
  void sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid);
  int32_t send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_oid);
  void recv_sai_thrift_remove_udf(const int32_t seqid);
  void sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_attribute(const int32_t seqid);
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t udf_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_match(const int32_t seqid);
  void sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid);
  int32_t send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_oid);
  void recv_sai_thrift_remove_udf_match(const int32_t seqid);
  void sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_match_attribute(const int32_t seqid);
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t udf_match_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_group(const int32_t seqid);
  void sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid);
  int32_t send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_oid);
  void recv_sai_thrift_remove_udf_group(const int32_t seqid);
  void sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_udf_group_attribute(const int32_t seqid);
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t udf_group_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_virtual_router(const int32_t seqid);
  void sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid);
  int32_t send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t virtual_router_oid);
  void recv_sai_thrift_remove_virtual_router(const int32_t seqid);
  void sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_virtual_router_attribute(const int32_t seqid);
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t virtual_router_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan(const int32_t seqid);
  void sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  int32_t send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  void recv_sai_thrift_remove_vlan(const int32_t seqid);
  void sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vlan_attribute(const int32_t seqid);
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan_member(const int32_t seqid);
  void sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid);
  int32_t send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_oid);
  void recv_sai_thrift_remove_vlan_member(const int32_t seqid);
  void sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_vlan_member_attribute(const int32_t seqid);
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_get_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_get_vlan_stats(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  int32_t send_sai_thrift_get_vlan_stats_ext(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids, const sai_thrift_stats_mode_t mode);
  void recv_sai_thrift_get_vlan_stats_ext(std::vector<sai_thrift_uint64_t> & _return, const int32_t seqid);
  void sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  int32_t send_sai_thrift_clear_vlan_stats(const sai_thrift_object_id_t vlan_oid, const std::vector<sai_thrift_stat_id_t> & counter_ids);
  void recv_sai_thrift_clear_vlan_stats(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list);
  int32_t send_sai_thrift_create_wred(const std::vector<sai_thrift_attribute_t> & attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_wred(const int32_t seqid);
  void sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid);
  int32_t send_sai_thrift_remove_wred(const sai_thrift_object_id_t wred_oid);
  void recv_sai_thrift_remove_wred(const int32_t seqid);
  void sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr);
  int32_t send_sai_thrift_set_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_t& attr);
  void recv_sai_thrift_set_wred_attribute(const int32_t seqid);
  void sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list);
  int32_t send_sai_thrift_get_wred_attribute(const sai_thrift_object_id_t wred_oid, const sai_thrift_attribute_list_t& attr_list);
  void recv_sai_thrift_get_wred_attribute(sai_thrift_attribute_list_t& _return, const int32_t seqid);
  void sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return, const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count);
  int32_t send_sai_thrift_query_attribute_enum_values_capability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t caps_count);
  void recv_sai_thrift_query_attribute_enum_values_capability(std::vector<int32_t> & _return, const int32_t seqid);
  int64_t sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type);
  int32_t send_sai_thrift_object_type_get_availability(const sai_thrift_object_type_t object_type, const sai_thrift_attr_id_t attr_id, const int32_t attr_type);
  int64_t recv_sai_thrift_object_type_get_availability(const int32_t seqid);
  sai_thrift_object_id_t sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id);
  int32_t send_sai_thrift_switch_id_query(const sai_thrift_object_id_t object_id);
  sai_thrift_object_id_t recv_sai_thrift_switch_id_query(const int32_t seqid);
  sai_thrift_object_type_t sai_thrift_object_type_query(const sai_thrift_object_id_t object_id);
  int32_t send_sai_thrift_object_type_query(const sai_thrift_object_id_t object_id);
  sai_thrift_object_type_t recv_sai_thrift_object_type_query(const int32_t seqid);
  sai_thrift_status_t sai_thrift_api_uninitialize();
  int32_t send_sai_thrift_api_uninitialize();
  sai_thrift_status_t recv_sai_thrift_api_uninitialize(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
