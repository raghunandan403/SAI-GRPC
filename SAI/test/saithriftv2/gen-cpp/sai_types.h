/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sai_TYPES_H
#define sai_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace sai {

typedef int32_t sai_thrift_int;

typedef int32_t sai_thrift_api_t;

typedef int32_t sai_thrift_log_level_t;

typedef int32_t sai_thrift_api_extensions_t;

typedef int32_t sai_thrift_attr_value_type_t;

typedef int32_t sai_thrift_attr_flags_t;

typedef int32_t sai_thrift_default_value_type_t;

typedef int32_t sai_thrift_attr_condition_type_t;

typedef int32_t sai_thrift_condition_operator_t;

typedef int32_t sai_thrift_enum_flags_type_t;

typedef int32_t sai_thrift_switch_attr_extensions_t;

typedef int32_t sai_thrift_status_t;

typedef int32_t sai_thrift_switch_profile_id_t;

typedef int16_t sai_thrift_vlan_id_t;

typedef int32_t sai_thrift_attr_id_t;

typedef int8_t sai_thrift_cos_t;

typedef int8_t sai_thrift_queue_index_t;

typedef std::string sai_thrift_mac_t;

typedef std::string sai_thrift_ip4_t;

typedef std::string sai_thrift_ip6_t;

typedef int32_t sai_thrift_switch_hash_seed_t;

typedef int32_t sai_thrift_label_id_t;

typedef int32_t sai_thrift_stat_id_t;

typedef int8_t sai_thrift_encrypt_key_t;

typedef int8_t sai_thrift_auth_key_t;

typedef int8_t sai_thrift_macsec_sak_t;

typedef int8_t sai_thrift_macsec_auth_key_t;

typedef int8_t sai_thrift_macsec_salt_t;

typedef int64_t sai_thrift_uint64_t;

typedef int64_t sai_thrift_int64_t;

typedef int32_t sai_thrift_uint32_t;

typedef int32_t sai_thrift_int32_t;

typedef int16_t sai_thrift_uint16_t;

typedef int16_t sai_thrift_int16_t;

typedef int8_t sai_thrift_uint8_t;

typedef int8_t sai_thrift_int8_t;

typedef int64_t sai_thrift_size_t;

typedef int64_t sai_thrift_object_id_t;

typedef int64_t sai_thrift_pointer_t;

typedef int64_t sai_thrift_api_version_t;

typedef int32_t sai_thrift_common_api_t;

typedef int32_t sai_thrift_object_type_t;

typedef int32_t sai_thrift_ip_addr_family_t;

typedef int32_t sai_thrift_port_prbs_rx_status_t;

typedef int32_t sai_thrift_packet_color_t;

typedef int32_t sai_thrift_acl_table_supported_match_type_t;

typedef int32_t sai_thrift_acl_table_chain_group_stage_t;

typedef int32_t sai_thrift_acl_stage_t;

typedef int32_t sai_thrift_acl_bind_point_type_t;

typedef int32_t sai_thrift_acl_table_match_type_t;

typedef int32_t sai_thrift_tam_bind_point_type_t;

typedef int32_t sai_thrift_tlv_type_t;

typedef int32_t sai_thrift_outseg_type_t;

typedef int32_t sai_thrift_outseg_ttl_mode_t;

typedef int32_t sai_thrift_outseg_exp_mode_t;

typedef int32_t sai_thrift_port_err_status_t;

typedef int32_t sai_thrift_bulk_op_error_mode_t;

typedef int32_t sai_thrift_stats_mode_t;

typedef int32_t sai_thrift_object_stage_t;

typedef int32_t sai_thrift_health_data_type_t;

typedef int32_t sai_thrift_object_type_extensions_t;

typedef int32_t sai_thrift_dash_direction_t;

typedef int32_t sai_thrift_dash_encapsulation_t;

typedef sai_thrift_int32_t sai_thrift_acl_ip_type_t;

typedef sai_thrift_int32_t sai_thrift_acl_ip_frag_t;

typedef sai_thrift_int32_t sai_thrift_acl_dtel_flow_op_t;

typedef sai_thrift_int32_t sai_thrift_acl_action_type_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_chain_group_type_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_group_type_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_chain_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_table_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_counter_attr_t;

typedef sai_thrift_int32_t sai_thrift_acl_range_type_t;

typedef sai_thrift_int32_t sai_thrift_acl_range_attr_t;

typedef sai_thrift_int32_t sai_thrift_ars_mode_t;

typedef sai_thrift_int32_t sai_thrift_ars_attr_t;

typedef sai_thrift_int32_t sai_thrift_ars_profile_algo_t;

typedef sai_thrift_int32_t sai_thrift_ars_profile_attr_t;

typedef sai_thrift_int32_t sai_thrift_bfd_session_type_t;

typedef sai_thrift_int32_t sai_thrift_bfd_session_offload_type_t;

typedef sai_thrift_int32_t sai_thrift_bfd_encapsulation_type_t;

typedef sai_thrift_int32_t sai_thrift_bfd_session_state_t;

typedef sai_thrift_int32_t sai_thrift_bfd_session_attr_t;

typedef sai_thrift_int32_t sai_thrift_bfd_session_stat_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_classification_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_router_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_table_meta_tunnel_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_classification_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_router_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_table_meta_tunnel_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_classification_entry_stat_t;

typedef sai_thrift_int32_t sai_thrift_table_bitmap_router_entry_stat_t;

typedef sai_thrift_int32_t sai_thrift_table_meta_tunnel_entry_stat_t;

typedef sai_thrift_int32_t sai_thrift_bridge_port_fdb_learning_mode_t;

typedef sai_thrift_int32_t sai_thrift_bridge_port_type_t;

typedef sai_thrift_int32_t sai_thrift_bridge_port_tagging_mode_t;

typedef sai_thrift_int32_t sai_thrift_bridge_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_bridge_port_stat_t;

typedef sai_thrift_int32_t sai_thrift_bridge_type_t;

typedef sai_thrift_int32_t sai_thrift_bridge_flood_control_type_t;

typedef sai_thrift_int32_t sai_thrift_bridge_attr_t;

typedef sai_thrift_int32_t sai_thrift_bridge_stat_t;

typedef sai_thrift_int32_t sai_thrift_ingress_priority_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_ingress_priority_group_stat_t;

typedef sai_thrift_int32_t sai_thrift_buffer_pool_type_t;

typedef sai_thrift_int32_t sai_thrift_buffer_pool_threshold_mode_t;

typedef sai_thrift_int32_t sai_thrift_buffer_pool_attr_t;

typedef sai_thrift_int32_t sai_thrift_buffer_pool_stat_t;

typedef sai_thrift_int32_t sai_thrift_buffer_profile_threshold_mode_t;

typedef sai_thrift_int32_t sai_thrift_buffer_profile_attr_t;

typedef sai_thrift_int32_t sai_thrift_counter_type_t;

typedef sai_thrift_int32_t sai_thrift_counter_attr_t;

typedef sai_thrift_int32_t sai_thrift_counter_stat_t;

typedef sai_thrift_int32_t sai_thrift_dash_acl_rule_action_t;

typedef sai_thrift_int32_t sai_thrift_dash_acl_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_dash_acl_rule_attr_t;

typedef sai_thrift_int32_t sai_thrift_direction_lookup_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_direction_lookup_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_eni_ether_address_map_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_eni_attr_t;

typedef sai_thrift_int32_t sai_thrift_inbound_routing_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_inbound_routing_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_meter_bucket_attr_t;

typedef sai_thrift_int32_t sai_thrift_meter_policy_attr_t;

typedef sai_thrift_int32_t sai_thrift_meter_rule_attr_t;

typedef sai_thrift_int32_t sai_thrift_outbound_ca_to_pa_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_outbound_routing_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_outbound_routing_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_pa_validation_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_pa_validation_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_dst_tag_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_src_tag_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_vip_entry_action_t;

typedef sai_thrift_int32_t sai_thrift_vip_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_vnet_attr_t;

typedef sai_thrift_int32_t sai_thrift_debug_counter_type_t;

typedef sai_thrift_int32_t sai_thrift_debug_counter_bind_method_t;

typedef sai_thrift_int32_t sai_thrift_in_drop_reason_t;

typedef sai_thrift_int32_t sai_thrift_out_drop_reason_t;

typedef sai_thrift_int32_t sai_thrift_debug_counter_attr_t;

typedef sai_thrift_int32_t sai_thrift_dtel_attr_t;

typedef sai_thrift_int32_t sai_thrift_dtel_queue_report_attr_t;

typedef sai_thrift_int32_t sai_thrift_dtel_int_session_attr_t;

typedef sai_thrift_int32_t sai_thrift_dtel_report_session_attr_t;

typedef sai_thrift_int32_t sai_thrift_dtel_event_type_t;

typedef sai_thrift_int32_t sai_thrift_dtel_event_attr_t;

typedef sai_thrift_int32_t sai_thrift_fdb_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_fdb_event_t;

typedef sai_thrift_int32_t sai_thrift_fdb_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_fdb_flush_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_fdb_flush_attr_t;

typedef sai_thrift_int32_t sai_thrift_generic_programmable_attr_t;

typedef sai_thrift_int32_t sai_thrift_native_hash_field_t;

typedef sai_thrift_int32_t sai_thrift_fine_grained_hash_field_attr_t;

typedef sai_thrift_int32_t sai_thrift_hash_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_trap_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_trap_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_trap_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_user_defined_trap_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_user_defined_trap_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_vlan_tag_t;

typedef sai_thrift_int32_t sai_thrift_hostif_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_table_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_table_entry_channel_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_table_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_hostif_tx_type_t;

typedef sai_thrift_int32_t sai_thrift_hostif_packet_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipmc_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_ipmc_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipmc_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipmc_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_direction_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_cipher_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_sa_octet_count_status_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_port_stat_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_sa_attr_t;

typedef sai_thrift_int32_t sai_thrift_ipsec_sa_stat_t;

typedef sai_thrift_int32_t sai_thrift_isolation_group_type_t;

typedef sai_thrift_int32_t sai_thrift_isolation_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_isolation_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_l2mc_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_l2mc_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_l2mc_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_l2mc_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_lag_attr_t;

typedef sai_thrift_int32_t sai_thrift_lag_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_direction_t;

typedef sai_thrift_int32_t sai_thrift_macsec_cipher_suite_t;

typedef sai_thrift_int32_t sai_thrift_macsec_max_secure_associations_per_sc_t;

typedef sai_thrift_int32_t sai_thrift_macsec_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_port_stat_t;

typedef sai_thrift_int32_t sai_thrift_macsec_flow_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_flow_stat_t;

typedef sai_thrift_int32_t sai_thrift_macsec_sc_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_sc_stat_t;

typedef sai_thrift_int32_t sai_thrift_macsec_sa_attr_t;

typedef sai_thrift_int32_t sai_thrift_macsec_sa_stat_t;

typedef sai_thrift_int32_t sai_thrift_mcast_fdb_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_mirror_session_type_t;

typedef sai_thrift_int32_t sai_thrift_erspan_encapsulation_type_t;

typedef sai_thrift_int32_t sai_thrift_mirror_session_congestion_mode_t;

typedef sai_thrift_int32_t sai_thrift_mirror_session_attr_t;

typedef sai_thrift_int32_t sai_thrift_inseg_entry_psc_type_t;

typedef sai_thrift_int32_t sai_thrift_inseg_entry_pop_ttl_mode_t;

typedef sai_thrift_int32_t sai_thrift_inseg_entry_pop_qos_mode_t;

typedef sai_thrift_int32_t sai_thrift_inseg_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_my_mac_attr_t;

typedef sai_thrift_int32_t sai_thrift_nat_type_t;

typedef sai_thrift_int32_t sai_thrift_nat_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_nat_event_t;

typedef sai_thrift_int32_t sai_thrift_nat_zone_counter_attr_t;

typedef sai_thrift_int32_t sai_thrift_neighbor_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_type_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_attr_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_type_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_member_configured_role_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_member_observed_role_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_map_type_t;

typedef sai_thrift_int32_t sai_thrift_next_hop_group_map_attr_t;

typedef sai_thrift_int32_t sai_thrift_meter_type_t;

typedef sai_thrift_int32_t sai_thrift_policer_mode_t;

typedef sai_thrift_int32_t sai_thrift_policer_color_source_t;

typedef sai_thrift_int32_t sai_thrift_policer_attr_t;

typedef sai_thrift_int32_t sai_thrift_policer_stat_t;

typedef sai_thrift_int32_t sai_thrift_port_type_t;

typedef sai_thrift_int32_t sai_thrift_port_oper_status_t;

typedef sai_thrift_int32_t sai_thrift_port_flow_control_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_internal_loopback_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_loopback_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_media_type_t;

typedef sai_thrift_int32_t sai_thrift_port_breakout_mode_type_t;

typedef sai_thrift_int32_t sai_thrift_port_fec_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_fec_mode_extended_t;

typedef sai_thrift_int32_t sai_thrift_port_priority_flow_control_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_ptp_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_interface_type_t;

typedef sai_thrift_int32_t sai_thrift_port_link_training_failure_status_t;

typedef sai_thrift_int32_t sai_thrift_port_link_training_rx_status_t;

typedef sai_thrift_int32_t sai_thrift_port_prbs_config_t;

typedef sai_thrift_int32_t sai_thrift_port_connector_failover_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_mdix_mode_status_t;

typedef sai_thrift_int32_t sai_thrift_port_mdix_mode_config_t;

typedef sai_thrift_int32_t sai_thrift_port_auto_neg_config_mode_t;

typedef sai_thrift_int32_t sai_thrift_port_module_type_t;

typedef sai_thrift_int32_t sai_thrift_port_dual_media_t;

typedef sai_thrift_int32_t sai_thrift_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_port_stat_t;

typedef sai_thrift_int32_t sai_thrift_port_pool_attr_t;

typedef sai_thrift_int32_t sai_thrift_port_pool_stat_t;

typedef sai_thrift_int32_t sai_thrift_port_serdes_attr_t;

typedef sai_thrift_int32_t sai_thrift_port_connector_attr_t;

typedef sai_thrift_int32_t sai_thrift_qos_map_type_t;

typedef sai_thrift_int32_t sai_thrift_qos_map_attr_t;

typedef sai_thrift_int32_t sai_thrift_queue_type_t;

typedef sai_thrift_int32_t sai_thrift_queue_pfc_continuous_deadlock_state_t;

typedef sai_thrift_int32_t sai_thrift_queue_attr_t;

typedef sai_thrift_int32_t sai_thrift_queue_stat_t;

typedef sai_thrift_int32_t sai_thrift_queue_pfc_deadlock_event_type_t;

typedef sai_thrift_int32_t sai_thrift_route_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_router_interface_type_t;

typedef sai_thrift_int32_t sai_thrift_router_interface_attr_t;

typedef sai_thrift_int32_t sai_thrift_router_interface_stat_t;

typedef sai_thrift_int32_t sai_thrift_rpf_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_rpf_group_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_samplepacket_type_t;

typedef sai_thrift_int32_t sai_thrift_samplepacket_mode_t;

typedef sai_thrift_int32_t sai_thrift_samplepacket_attr_t;

typedef sai_thrift_int32_t sai_thrift_scheduling_type_t;

typedef sai_thrift_int32_t sai_thrift_scheduler_attr_t;

typedef sai_thrift_int32_t sai_thrift_scheduler_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_srv6_sidlist_type_t;

typedef sai_thrift_int32_t sai_thrift_my_sid_entry_endpoint_behavior_t;

typedef sai_thrift_int32_t sai_thrift_my_sid_entry_endpoint_behavior_flavor_t;

typedef sai_thrift_int32_t sai_thrift_srv6_sidlist_attr_t;

typedef sai_thrift_int32_t sai_thrift_srv6_sidlist_stat_t;

typedef sai_thrift_int32_t sai_thrift_my_sid_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_stp_port_state_t;

typedef sai_thrift_int32_t sai_thrift_stp_attr_t;

typedef sai_thrift_int32_t sai_thrift_stp_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_switch_oper_status_t;

typedef sai_thrift_int32_t sai_thrift_packet_action_t;

typedef sai_thrift_int32_t sai_thrift_packet_vlan_t;

typedef sai_thrift_int32_t sai_thrift_switch_switching_mode_t;

typedef sai_thrift_int32_t sai_thrift_hash_algorithm_t;

typedef sai_thrift_int32_t sai_thrift_switch_restart_type_t;

typedef sai_thrift_int32_t sai_thrift_switch_mcast_snooping_capability_t;

typedef sai_thrift_int32_t sai_thrift_switch_hardware_access_bus_t;

typedef sai_thrift_int32_t sai_thrift_switch_firmware_load_method_t;

typedef sai_thrift_int32_t sai_thrift_switch_firmware_load_type_t;

typedef sai_thrift_int32_t sai_thrift_switch_type_t;

typedef sai_thrift_int32_t sai_thrift_switch_failover_config_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_type_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_vxlan_udp_sport_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_encap_ecn_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_decap_ecn_mode_t;

typedef sai_thrift_int32_t sai_thrift_switch_tunnel_attr_t;

typedef sai_thrift_int32_t sai_thrift_switch_hostif_oper_status_update_mode_t;

typedef sai_thrift_int32_t sai_thrift_switch_attr_t;

typedef sai_thrift_int32_t sai_thrift_switch_asic_sdk_health_severity_t;

typedef sai_thrift_int32_t sai_thrift_switch_asic_sdk_health_category_t;

typedef sai_thrift_int32_t sai_thrift_switch_stat_t;

typedef sai_thrift_int32_t sai_thrift_system_port_type_t;

typedef sai_thrift_int32_t sai_thrift_system_port_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_tel_math_func_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_math_func_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_event_threshold_unit_t;

typedef sai_thrift_int32_t sai_thrift_tam_event_threshold_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_int_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_int_presence_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_int_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_telemetry_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_tel_type_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_report_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_report_mode_t;

typedef sai_thrift_int32_t sai_thrift_tam_report_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_reporting_unit_t;

typedef sai_thrift_int32_t sai_thrift_tam_telemetry_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_transport_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_transport_auth_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_transport_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_collector_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_event_type_t;

typedef sai_thrift_int32_t sai_thrift_tam_event_action_attr_t;

typedef sai_thrift_int32_t sai_thrift_tam_event_attr_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_map_type_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_map_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_map_attr_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_ttl_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_dscp_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_peer_mode_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_attr_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_stat_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_term_table_entry_type_t;

typedef sai_thrift_int32_t sai_thrift_tunnel_term_table_entry_attr_t;

typedef sai_thrift_int32_t sai_thrift_udf_base_t;

typedef sai_thrift_int32_t sai_thrift_udf_attr_t;

typedef sai_thrift_int32_t sai_thrift_udf_match_attr_t;

typedef sai_thrift_int32_t sai_thrift_udf_group_type_t;

typedef sai_thrift_int32_t sai_thrift_udf_group_attr_t;

typedef sai_thrift_int32_t sai_thrift_virtual_router_attr_t;

typedef sai_thrift_int32_t sai_thrift_vlan_tagging_mode_t;

typedef sai_thrift_int32_t sai_thrift_vlan_mcast_lookup_key_type_t;

typedef sai_thrift_int32_t sai_thrift_vlan_flood_control_type_t;

typedef sai_thrift_int32_t sai_thrift_vlan_attr_t;

typedef sai_thrift_int32_t sai_thrift_vlan_member_attr_t;

typedef sai_thrift_int32_t sai_thrift_vlan_stat_t;

typedef sai_thrift_int32_t sai_thrift_ecn_mark_mode_t;

typedef sai_thrift_int32_t sai_thrift_wred_attr_t;

class sai_thrift_object_key_entry_t;

class sai_thrift_object_key_t;

class sai_thrift_attr_capability_t;

class sai_thrift_service_method_table_t;

class sai_thrift_object_meta_key_t;

class sai_thrift_attr_condition_t;

class sai_thrift_enum_metadata_t;

class sai_thrift_attr_capability_metadata_t;

class sai_thrift_attr_metadata_t;

class sai_thrift_struct_member_info_t;

class sai_thrift_rev_graph_member_t;

class sai_thrift_object_type_info_t;

class sai_thrift_timespec_t;

class sai_thrift_object_list_t;

class sai_thrift_u8_list_t;

class sai_thrift_s8_list_t;

class sai_thrift_u16_list_t;

class sai_thrift_s16_list_t;

class sai_thrift_u32_list_t;

class sai_thrift_s32_list_t;

class sai_thrift_u32_range_t;

class sai_thrift_s32_range_t;

class sai_thrift_u16_range_t;

class sai_thrift_u16_range_list_t;

class sai_thrift_vlan_list_t;

class sai_thrift_ip_addr_t;

class sai_thrift_ip_address_t;

class sai_thrift_ip_address_list_t;

class sai_thrift_ip_prefix_t;

class sai_thrift_ip_prefix_list_t;

class sai_thrift_prbs_rx_state_t;

class sai_thrift_latch_status_t;

class sai_thrift_port_lane_latch_status_t;

class sai_thrift_port_lane_latch_status_list_t;

class sai_thrift_acl_field_data_mask_t;

class sai_thrift_acl_field_data_data_t;

class sai_thrift_acl_field_data_t;

class sai_thrift_acl_action_parameter_t;

class sai_thrift_acl_action_data_t;

class sai_thrift_qos_map_params_t;

class sai_thrift_qos_map_t;

class sai_thrift_qos_map_list_t;

class sai_thrift_map_t;

class sai_thrift_map_list_t;

class sai_thrift_acl_chain_t;

class sai_thrift_acl_chain_list_t;

class sai_thrift_acl_capability_t;

class sai_thrift_acl_resource_t;

class sai_thrift_acl_resource_list_t;

class sai_thrift_hmac_t;

class sai_thrift_tlv_entry_t;

class sai_thrift_tlv_t;

class sai_thrift_tlv_list_t;

class sai_thrift_segment_list_t;

class sai_thrift_json_t;

class sai_thrift_port_lane_eye_values_t;

class sai_thrift_port_eye_values_list_t;

class sai_thrift_system_port_config_t;

class sai_thrift_system_port_config_list_t;

class sai_thrift_fabric_port_reachability_t;

class sai_thrift_port_err_status_list_t;

class sai_thrift_attribute_value_t;

class sai_thrift_attribute_t;

class sai_thrift_stat_capability_t;

class sai_thrift_stat_capability_list_t;

class sai_thrift_switch_health_data_t;

class sai_thrift_bfd_session_state_notification_t;

class sai_thrift_direction_lookup_entry_t;

class sai_thrift_eni_ether_address_map_entry_t;

class sai_thrift_inbound_routing_entry_t;

class sai_thrift_outbound_ca_to_pa_entry_t;

class sai_thrift_outbound_routing_entry_t;

class sai_thrift_pa_validation_entry_t;

class sai_thrift_dst_tag_entry_t;

class sai_thrift_src_tag_entry_t;

class sai_thrift_vip_entry_t;

class sai_thrift_fdb_entry_t;

class sai_thrift_fdb_event_notification_data_t;

class sai_thrift_ipmc_entry_t;

class sai_thrift_ipsec_sa_status_notification_t;

class sai_thrift_l2mc_entry_t;

class sai_thrift_mcast_fdb_entry_t;

class sai_thrift_inseg_entry_t;

class sai_thrift_nat_entry_key_t;

class sai_thrift_nat_entry_mask_t;

class sai_thrift_nat_entry_data_t;

class sai_thrift_nat_entry_t;

class sai_thrift_nat_event_notification_data_t;

class sai_thrift_neighbor_entry_t;

class sai_thrift_port_oper_status_notification_t;

class sai_thrift_queue_deadlock_notification_data_t;

class sai_thrift_route_entry_t;

class sai_thrift_my_sid_entry_t;

class sai_thrift_attribute_list_t;

class sai_thrift_exception;

typedef struct _sai_thrift_object_key_entry_t__isset {
  _sai_thrift_object_key_entry_t__isset() : object_id(false), fdb_entry(false), neighbor_entry(false), route_entry(false), mcast_fdb_entry(false), l2mc_entry(false), ipmc_entry(false), inseg_entry(false), nat_entry(false) {}
  bool object_id :1;
  bool fdb_entry :1;
  bool neighbor_entry :1;
  bool route_entry :1;
  bool mcast_fdb_entry :1;
  bool l2mc_entry :1;
  bool ipmc_entry :1;
  bool inseg_entry :1;
  bool nat_entry :1;
} _sai_thrift_object_key_entry_t__isset;

class sai_thrift_object_key_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_key_entry_t(const sai_thrift_object_key_entry_t&);
  sai_thrift_object_key_entry_t& operator=(const sai_thrift_object_key_entry_t&);
  sai_thrift_object_key_entry_t() : object_id(0), fdb_entry(0), neighbor_entry(0), route_entry(0), mcast_fdb_entry(0), l2mc_entry(0), ipmc_entry(0), inseg_entry(0), nat_entry(0) {
  }

  virtual ~sai_thrift_object_key_entry_t() throw();
  int64_t object_id;
  int64_t fdb_entry;
  int64_t neighbor_entry;
  int64_t route_entry;
  int64_t mcast_fdb_entry;
  int64_t l2mc_entry;
  int64_t ipmc_entry;
  int64_t inseg_entry;
  int64_t nat_entry;

  _sai_thrift_object_key_entry_t__isset __isset;

  void __set_object_id(const int64_t val);

  void __set_fdb_entry(const int64_t val);

  void __set_neighbor_entry(const int64_t val);

  void __set_route_entry(const int64_t val);

  void __set_mcast_fdb_entry(const int64_t val);

  void __set_l2mc_entry(const int64_t val);

  void __set_ipmc_entry(const int64_t val);

  void __set_inseg_entry(const int64_t val);

  void __set_nat_entry(const int64_t val);

  bool operator == (const sai_thrift_object_key_entry_t & rhs) const
  {
    if (!(object_id == rhs.object_id))
      return false;
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(neighbor_entry == rhs.neighbor_entry))
      return false;
    if (!(route_entry == rhs.route_entry))
      return false;
    if (!(mcast_fdb_entry == rhs.mcast_fdb_entry))
      return false;
    if (!(l2mc_entry == rhs.l2mc_entry))
      return false;
    if (!(ipmc_entry == rhs.ipmc_entry))
      return false;
    if (!(inseg_entry == rhs.inseg_entry))
      return false;
    if (!(nat_entry == rhs.nat_entry))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_key_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_key_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_key_entry_t &a, sai_thrift_object_key_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_key_entry_t& obj);

typedef struct _sai_thrift_object_key_t__isset {
  _sai_thrift_object_key_t__isset() : key(false) {}
  bool key :1;
} _sai_thrift_object_key_t__isset;

class sai_thrift_object_key_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_key_t(const sai_thrift_object_key_t&);
  sai_thrift_object_key_t& operator=(const sai_thrift_object_key_t&);
  sai_thrift_object_key_t() {
  }

  virtual ~sai_thrift_object_key_t() throw();
  sai_thrift_object_key_entry_t key;

  _sai_thrift_object_key_t__isset __isset;

  void __set_key(const sai_thrift_object_key_entry_t& val);

  bool operator == (const sai_thrift_object_key_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_key_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_key_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_key_t &a, sai_thrift_object_key_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_key_t& obj);

typedef struct _sai_thrift_attr_capability_t__isset {
  _sai_thrift_attr_capability_t__isset() : create_implemented(false), boolset_implemented(false), get_implemented(false) {}
  bool create_implemented :1;
  bool boolset_implemented :1;
  bool get_implemented :1;
} _sai_thrift_attr_capability_t__isset;

class sai_thrift_attr_capability_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attr_capability_t(const sai_thrift_attr_capability_t&);
  sai_thrift_attr_capability_t& operator=(const sai_thrift_attr_capability_t&);
  sai_thrift_attr_capability_t() : create_implemented(0), boolset_implemented(0), get_implemented(0) {
  }

  virtual ~sai_thrift_attr_capability_t() throw();
  bool create_implemented;
  bool boolset_implemented;
  bool get_implemented;

  _sai_thrift_attr_capability_t__isset __isset;

  void __set_create_implemented(const bool val);

  void __set_boolset_implemented(const bool val);

  void __set_get_implemented(const bool val);

  bool operator == (const sai_thrift_attr_capability_t & rhs) const
  {
    if (!(create_implemented == rhs.create_implemented))
      return false;
    if (!(boolset_implemented == rhs.boolset_implemented))
      return false;
    if (!(get_implemented == rhs.get_implemented))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attr_capability_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attr_capability_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attr_capability_t &a, sai_thrift_attr_capability_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_capability_t& obj);

typedef struct _sai_thrift_service_method_table_t__isset {
  _sai_thrift_service_method_table_t__isset() : profile_get_value(false), profile_get_next_value(false) {}
  bool profile_get_value :1;
  bool profile_get_next_value :1;
} _sai_thrift_service_method_table_t__isset;

class sai_thrift_service_method_table_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_service_method_table_t(const sai_thrift_service_method_table_t&);
  sai_thrift_service_method_table_t& operator=(const sai_thrift_service_method_table_t&);
  sai_thrift_service_method_table_t() : profile_get_value(0), profile_get_next_value(0) {
  }

  virtual ~sai_thrift_service_method_table_t() throw();
  sai_thrift_pointer_t profile_get_value;
  sai_thrift_pointer_t profile_get_next_value;

  _sai_thrift_service_method_table_t__isset __isset;

  void __set_profile_get_value(const sai_thrift_pointer_t val);

  void __set_profile_get_next_value(const sai_thrift_pointer_t val);

  bool operator == (const sai_thrift_service_method_table_t & rhs) const
  {
    if (!(profile_get_value == rhs.profile_get_value))
      return false;
    if (!(profile_get_next_value == rhs.profile_get_next_value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_service_method_table_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_service_method_table_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_service_method_table_t &a, sai_thrift_service_method_table_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_service_method_table_t& obj);

typedef struct _sai_thrift_object_meta_key_t__isset {
  _sai_thrift_object_meta_key_t__isset() : objecttype(false), objectkey(false) {}
  bool objecttype :1;
  bool objectkey :1;
} _sai_thrift_object_meta_key_t__isset;

class sai_thrift_object_meta_key_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_meta_key_t(const sai_thrift_object_meta_key_t&);
  sai_thrift_object_meta_key_t& operator=(const sai_thrift_object_meta_key_t&);
  sai_thrift_object_meta_key_t() : objecttype(0) {
  }

  virtual ~sai_thrift_object_meta_key_t() throw();
  sai_thrift_object_type_t objecttype;
  sai_thrift_object_key_t objectkey;

  _sai_thrift_object_meta_key_t__isset __isset;

  void __set_objecttype(const sai_thrift_object_type_t val);

  void __set_objectkey(const sai_thrift_object_key_t& val);

  bool operator == (const sai_thrift_object_meta_key_t & rhs) const
  {
    if (!(objecttype == rhs.objecttype))
      return false;
    if (!(objectkey == rhs.objectkey))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_meta_key_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_meta_key_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_meta_key_t &a, sai_thrift_object_meta_key_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_meta_key_t& obj);

typedef struct _sai_thrift_attr_condition_t__isset {
  _sai_thrift_attr_condition_t__isset() : attrid(false), condition(false), op(false), type(false) {}
  bool attrid :1;
  bool condition :1;
  bool op :1;
  bool type :1;
} _sai_thrift_attr_condition_t__isset;

class sai_thrift_attr_condition_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attr_condition_t(const sai_thrift_attr_condition_t&);
  sai_thrift_attr_condition_t& operator=(const sai_thrift_attr_condition_t&);
  sai_thrift_attr_condition_t() : attrid(0), condition(0), op(0), type(0) {
  }

  virtual ~sai_thrift_attr_condition_t() throw();
  sai_thrift_attr_id_t attrid;
  int64_t condition;
  sai_thrift_condition_operator_t op;
  sai_thrift_attr_condition_type_t type;

  _sai_thrift_attr_condition_t__isset __isset;

  void __set_attrid(const sai_thrift_attr_id_t val);

  void __set_condition(const int64_t val);

  void __set_op(const sai_thrift_condition_operator_t val);

  void __set_type(const sai_thrift_attr_condition_type_t val);

  bool operator == (const sai_thrift_attr_condition_t & rhs) const
  {
    if (!(attrid == rhs.attrid))
      return false;
    if (!(condition == rhs.condition))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attr_condition_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attr_condition_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attr_condition_t &a, sai_thrift_attr_condition_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_condition_t& obj);

typedef struct _sai_thrift_enum_metadata_t__isset {
  _sai_thrift_enum_metadata_t__isset() : name(false), valuescount(false), values(false), valuesnames(false), valuesshortnames(false), containsflags(false), flagstype(false), ignorevalues(false), ignorevaluesnames(false), objecttype(false) {}
  bool name :1;
  bool valuescount :1;
  bool values :1;
  bool valuesnames :1;
  bool valuesshortnames :1;
  bool containsflags :1;
  bool flagstype :1;
  bool ignorevalues :1;
  bool ignorevaluesnames :1;
  bool objecttype :1;
} _sai_thrift_enum_metadata_t__isset;

class sai_thrift_enum_metadata_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_enum_metadata_t(const sai_thrift_enum_metadata_t&);
  sai_thrift_enum_metadata_t& operator=(const sai_thrift_enum_metadata_t&);
  sai_thrift_enum_metadata_t() : name(), valuescount(0), valuesnames(), valuesshortnames(), containsflags(0), flagstype(0), ignorevaluesnames(), objecttype(0) {
  }

  virtual ~sai_thrift_enum_metadata_t() throw();
  std::string name;
  sai_thrift_size_t valuescount;
  std::vector<sai_thrift_int>  values;
  std::string valuesnames;
  std::string valuesshortnames;
  bool containsflags;
  sai_thrift_enum_flags_type_t flagstype;
  std::vector<sai_thrift_int>  ignorevalues;
  std::string ignorevaluesnames;
  sai_thrift_object_type_t objecttype;

  _sai_thrift_enum_metadata_t__isset __isset;

  void __set_name(const std::string& val);

  void __set_valuescount(const sai_thrift_size_t val);

  void __set_values(const std::vector<sai_thrift_int> & val);

  void __set_valuesnames(const std::string& val);

  void __set_valuesshortnames(const std::string& val);

  void __set_containsflags(const bool val);

  void __set_flagstype(const sai_thrift_enum_flags_type_t val);

  void __set_ignorevalues(const std::vector<sai_thrift_int> & val);

  void __set_ignorevaluesnames(const std::string& val);

  void __set_objecttype(const sai_thrift_object_type_t val);

  bool operator == (const sai_thrift_enum_metadata_t & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(valuescount == rhs.valuescount))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(valuesnames == rhs.valuesnames))
      return false;
    if (!(valuesshortnames == rhs.valuesshortnames))
      return false;
    if (!(containsflags == rhs.containsflags))
      return false;
    if (!(flagstype == rhs.flagstype))
      return false;
    if (!(ignorevalues == rhs.ignorevalues))
      return false;
    if (!(ignorevaluesnames == rhs.ignorevaluesnames))
      return false;
    if (!(objecttype == rhs.objecttype))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_enum_metadata_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_enum_metadata_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_enum_metadata_t &a, sai_thrift_enum_metadata_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_enum_metadata_t& obj);

typedef struct _sai_thrift_attr_capability_metadata_t__isset {
  _sai_thrift_attr_capability_metadata_t__isset() : vendorid(false), operationcapability(false), enumvaluescount(false), enumvalues(false) {}
  bool vendorid :1;
  bool operationcapability :1;
  bool enumvaluescount :1;
  bool enumvalues :1;
} _sai_thrift_attr_capability_metadata_t__isset;

class sai_thrift_attr_capability_metadata_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attr_capability_metadata_t(const sai_thrift_attr_capability_metadata_t&);
  sai_thrift_attr_capability_metadata_t& operator=(const sai_thrift_attr_capability_metadata_t&);
  sai_thrift_attr_capability_metadata_t() : vendorid(0), enumvaluescount(0) {
  }

  virtual ~sai_thrift_attr_capability_metadata_t() throw();
  sai_thrift_uint64_t vendorid;
  sai_thrift_attr_capability_t operationcapability;
  sai_thrift_size_t enumvaluescount;
  std::vector<sai_thrift_int>  enumvalues;

  _sai_thrift_attr_capability_metadata_t__isset __isset;

  void __set_vendorid(const sai_thrift_uint64_t val);

  void __set_operationcapability(const sai_thrift_attr_capability_t& val);

  void __set_enumvaluescount(const sai_thrift_size_t val);

  void __set_enumvalues(const std::vector<sai_thrift_int> & val);

  bool operator == (const sai_thrift_attr_capability_metadata_t & rhs) const
  {
    if (!(vendorid == rhs.vendorid))
      return false;
    if (!(operationcapability == rhs.operationcapability))
      return false;
    if (!(enumvaluescount == rhs.enumvaluescount))
      return false;
    if (!(enumvalues == rhs.enumvalues))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attr_capability_metadata_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attr_capability_metadata_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attr_capability_metadata_t &a, sai_thrift_attr_capability_metadata_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_capability_metadata_t& obj);

typedef struct _sai_thrift_attr_metadata_t__isset {
  _sai_thrift_attr_metadata_t__isset() : objecttype(false), attrid(false), attridname(false), brief(false), attrvaluetype(false), flags(false), allowedobjecttypes(false), allowedobjecttypeslength(false), allowrepetitiononlist(false), allowmixedobjecttypes(false), allowemptylist(false), allownullobjectid(false), isoidattribute(false), defaultvaluetype(false), defaultvalue(false), defaultvalueobjecttype(false), defaultvalueattrid(false), storedefaultvalue(false), isenum(false), isenumlist(false), enummetadata(false), conditiontype(false), conditions(false), conditionslength(false), isconditional(false), validonlytype(false), validonly(false), validonlylength(false), isvalidonly(false), getsave(false), isvlan(false), isaclfield(false), isaclaction(false), isaclmask(false), ismandatoryoncreate(false), iscreateonly(false), iscreateandset(false), isreadonly(false), iskey(false), isprimitive(false), notificationtype(false), iscallback(false), pointertype(false), capability(false), capabilitylength(false), isextensionattr(false), isresourcetype(false), isdeprecated(false) {}
  bool objecttype :1;
  bool attrid :1;
  bool attridname :1;
  bool brief :1;
  bool attrvaluetype :1;
  bool flags :1;
  bool allowedobjecttypes :1;
  bool allowedobjecttypeslength :1;
  bool allowrepetitiononlist :1;
  bool allowmixedobjecttypes :1;
  bool allowemptylist :1;
  bool allownullobjectid :1;
  bool isoidattribute :1;
  bool defaultvaluetype :1;
  bool defaultvalue :1;
  bool defaultvalueobjecttype :1;
  bool defaultvalueattrid :1;
  bool storedefaultvalue :1;
  bool isenum :1;
  bool isenumlist :1;
  bool enummetadata :1;
  bool conditiontype :1;
  bool conditions :1;
  bool conditionslength :1;
  bool isconditional :1;
  bool validonlytype :1;
  bool validonly :1;
  bool validonlylength :1;
  bool isvalidonly :1;
  bool getsave :1;
  bool isvlan :1;
  bool isaclfield :1;
  bool isaclaction :1;
  bool isaclmask :1;
  bool ismandatoryoncreate :1;
  bool iscreateonly :1;
  bool iscreateandset :1;
  bool isreadonly :1;
  bool iskey :1;
  bool isprimitive :1;
  bool notificationtype :1;
  bool iscallback :1;
  bool pointertype :1;
  bool capability :1;
  bool capabilitylength :1;
  bool isextensionattr :1;
  bool isresourcetype :1;
  bool isdeprecated :1;
} _sai_thrift_attr_metadata_t__isset;

class sai_thrift_attr_metadata_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attr_metadata_t(const sai_thrift_attr_metadata_t&);
  sai_thrift_attr_metadata_t& operator=(const sai_thrift_attr_metadata_t&);
  sai_thrift_attr_metadata_t() : objecttype(0), attrid(0), attridname(), brief(), attrvaluetype(0), flags(0), allowedobjecttypeslength(0), allowrepetitiononlist(0), allowmixedobjecttypes(0), allowemptylist(0), allownullobjectid(0), isoidattribute(0), defaultvaluetype(0), defaultvalueobjecttype(0), defaultvalueattrid(0), storedefaultvalue(0), isenum(0), isenumlist(0), conditiontype(0), conditionslength(0), isconditional(0), validonlytype(0), validonlylength(0), isvalidonly(0), getsave(0), isvlan(0), isaclfield(0), isaclaction(0), isaclmask(0), ismandatoryoncreate(0), iscreateonly(0), iscreateandset(0), isreadonly(0), iskey(0), isprimitive(0), notificationtype(0), iscallback(0), pointertype(0), capabilitylength(0), isextensionattr(0), isresourcetype(0), isdeprecated(0) {
  }

  virtual ~sai_thrift_attr_metadata_t() throw();
  sai_thrift_object_type_t objecttype;
  sai_thrift_attr_id_t attrid;
  std::string attridname;
  std::string brief;
  sai_thrift_attr_value_type_t attrvaluetype;
  sai_thrift_attr_flags_t flags;
  std::vector<sai_thrift_object_type_t>  allowedobjecttypes;
  sai_thrift_size_t allowedobjecttypeslength;
  bool allowrepetitiononlist;
  bool allowmixedobjecttypes;
  bool allowemptylist;
  bool allownullobjectid;
  bool isoidattribute;
  sai_thrift_default_value_type_t defaultvaluetype;
  std::vector<sai_thrift_attribute_value_t>  defaultvalue;
  sai_thrift_object_type_t defaultvalueobjecttype;
  sai_thrift_attr_id_t defaultvalueattrid;
  bool storedefaultvalue;
  bool isenum;
  bool isenumlist;
  std::vector<sai_thrift_enum_metadata_t>  enummetadata;
  sai_thrift_attr_condition_type_t conditiontype;
  std::vector<sai_thrift_attr_condition_t>  conditions;
  sai_thrift_size_t conditionslength;
  bool isconditional;
  sai_thrift_attr_condition_type_t validonlytype;
  std::vector<sai_thrift_attr_condition_t>  validonly;
  sai_thrift_size_t validonlylength;
  bool isvalidonly;
  bool getsave;
  bool isvlan;
  bool isaclfield;
  bool isaclaction;
  bool isaclmask;
  bool ismandatoryoncreate;
  bool iscreateonly;
  bool iscreateandset;
  bool isreadonly;
  bool iskey;
  bool isprimitive;
  sai_thrift_int notificationtype;
  bool iscallback;
  sai_thrift_int pointertype;
  std::vector<sai_thrift_attr_capability_metadata_t>  capability;
  sai_thrift_size_t capabilitylength;
  bool isextensionattr;
  bool isresourcetype;
  bool isdeprecated;

  _sai_thrift_attr_metadata_t__isset __isset;

  void __set_objecttype(const sai_thrift_object_type_t val);

  void __set_attrid(const sai_thrift_attr_id_t val);

  void __set_attridname(const std::string& val);

  void __set_brief(const std::string& val);

  void __set_attrvaluetype(const sai_thrift_attr_value_type_t val);

  void __set_flags(const sai_thrift_attr_flags_t val);

  void __set_allowedobjecttypes(const std::vector<sai_thrift_object_type_t> & val);

  void __set_allowedobjecttypeslength(const sai_thrift_size_t val);

  void __set_allowrepetitiononlist(const bool val);

  void __set_allowmixedobjecttypes(const bool val);

  void __set_allowemptylist(const bool val);

  void __set_allownullobjectid(const bool val);

  void __set_isoidattribute(const bool val);

  void __set_defaultvaluetype(const sai_thrift_default_value_type_t val);

  void __set_defaultvalue(const std::vector<sai_thrift_attribute_value_t> & val);

  void __set_defaultvalueobjecttype(const sai_thrift_object_type_t val);

  void __set_defaultvalueattrid(const sai_thrift_attr_id_t val);

  void __set_storedefaultvalue(const bool val);

  void __set_isenum(const bool val);

  void __set_isenumlist(const bool val);

  void __set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val);

  void __set_conditiontype(const sai_thrift_attr_condition_type_t val);

  void __set_conditions(const std::vector<sai_thrift_attr_condition_t> & val);

  void __set_conditionslength(const sai_thrift_size_t val);

  void __set_isconditional(const bool val);

  void __set_validonlytype(const sai_thrift_attr_condition_type_t val);

  void __set_validonly(const std::vector<sai_thrift_attr_condition_t> & val);

  void __set_validonlylength(const sai_thrift_size_t val);

  void __set_isvalidonly(const bool val);

  void __set_getsave(const bool val);

  void __set_isvlan(const bool val);

  void __set_isaclfield(const bool val);

  void __set_isaclaction(const bool val);

  void __set_isaclmask(const bool val);

  void __set_ismandatoryoncreate(const bool val);

  void __set_iscreateonly(const bool val);

  void __set_iscreateandset(const bool val);

  void __set_isreadonly(const bool val);

  void __set_iskey(const bool val);

  void __set_isprimitive(const bool val);

  void __set_notificationtype(const sai_thrift_int val);

  void __set_iscallback(const bool val);

  void __set_pointertype(const sai_thrift_int val);

  void __set_capability(const std::vector<sai_thrift_attr_capability_metadata_t> & val);

  void __set_capabilitylength(const sai_thrift_size_t val);

  void __set_isextensionattr(const bool val);

  void __set_isresourcetype(const bool val);

  void __set_isdeprecated(const bool val);

  bool operator == (const sai_thrift_attr_metadata_t & rhs) const
  {
    if (!(objecttype == rhs.objecttype))
      return false;
    if (!(attrid == rhs.attrid))
      return false;
    if (!(attridname == rhs.attridname))
      return false;
    if (!(brief == rhs.brief))
      return false;
    if (!(attrvaluetype == rhs.attrvaluetype))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(allowedobjecttypes == rhs.allowedobjecttypes))
      return false;
    if (!(allowedobjecttypeslength == rhs.allowedobjecttypeslength))
      return false;
    if (!(allowrepetitiononlist == rhs.allowrepetitiononlist))
      return false;
    if (!(allowmixedobjecttypes == rhs.allowmixedobjecttypes))
      return false;
    if (!(allowemptylist == rhs.allowemptylist))
      return false;
    if (!(allownullobjectid == rhs.allownullobjectid))
      return false;
    if (!(isoidattribute == rhs.isoidattribute))
      return false;
    if (!(defaultvaluetype == rhs.defaultvaluetype))
      return false;
    if (!(defaultvalue == rhs.defaultvalue))
      return false;
    if (!(defaultvalueobjecttype == rhs.defaultvalueobjecttype))
      return false;
    if (!(defaultvalueattrid == rhs.defaultvalueattrid))
      return false;
    if (!(storedefaultvalue == rhs.storedefaultvalue))
      return false;
    if (!(isenum == rhs.isenum))
      return false;
    if (!(isenumlist == rhs.isenumlist))
      return false;
    if (!(enummetadata == rhs.enummetadata))
      return false;
    if (!(conditiontype == rhs.conditiontype))
      return false;
    if (!(conditions == rhs.conditions))
      return false;
    if (!(conditionslength == rhs.conditionslength))
      return false;
    if (!(isconditional == rhs.isconditional))
      return false;
    if (!(validonlytype == rhs.validonlytype))
      return false;
    if (!(validonly == rhs.validonly))
      return false;
    if (!(validonlylength == rhs.validonlylength))
      return false;
    if (!(isvalidonly == rhs.isvalidonly))
      return false;
    if (!(getsave == rhs.getsave))
      return false;
    if (!(isvlan == rhs.isvlan))
      return false;
    if (!(isaclfield == rhs.isaclfield))
      return false;
    if (!(isaclaction == rhs.isaclaction))
      return false;
    if (!(isaclmask == rhs.isaclmask))
      return false;
    if (!(ismandatoryoncreate == rhs.ismandatoryoncreate))
      return false;
    if (!(iscreateonly == rhs.iscreateonly))
      return false;
    if (!(iscreateandset == rhs.iscreateandset))
      return false;
    if (!(isreadonly == rhs.isreadonly))
      return false;
    if (!(iskey == rhs.iskey))
      return false;
    if (!(isprimitive == rhs.isprimitive))
      return false;
    if (!(notificationtype == rhs.notificationtype))
      return false;
    if (!(iscallback == rhs.iscallback))
      return false;
    if (!(pointertype == rhs.pointertype))
      return false;
    if (!(capability == rhs.capability))
      return false;
    if (!(capabilitylength == rhs.capabilitylength))
      return false;
    if (!(isextensionattr == rhs.isextensionattr))
      return false;
    if (!(isresourcetype == rhs.isresourcetype))
      return false;
    if (!(isdeprecated == rhs.isdeprecated))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attr_metadata_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attr_metadata_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attr_metadata_t &a, sai_thrift_attr_metadata_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_metadata_t& obj);

typedef struct _sai_thrift_struct_member_info_t__isset {
  _sai_thrift_struct_member_info_t__isset() : membervaluetype(false), membername(false), isvlan(false), allowedobjecttypes(false), allowedobjecttypeslength(false), isenum(false), enummetadata(false), getoid(false), setoid(false), offset(false), size(false) {}
  bool membervaluetype :1;
  bool membername :1;
  bool isvlan :1;
  bool allowedobjecttypes :1;
  bool allowedobjecttypeslength :1;
  bool isenum :1;
  bool enummetadata :1;
  bool getoid :1;
  bool setoid :1;
  bool offset :1;
  bool size :1;
} _sai_thrift_struct_member_info_t__isset;

class sai_thrift_struct_member_info_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_struct_member_info_t(const sai_thrift_struct_member_info_t&);
  sai_thrift_struct_member_info_t& operator=(const sai_thrift_struct_member_info_t&);
  sai_thrift_struct_member_info_t() : membervaluetype(0), membername(), isvlan(0), allowedobjecttypeslength(0), isenum(0), getoid(0), setoid(0), offset(0), size(0) {
  }

  virtual ~sai_thrift_struct_member_info_t() throw();
  sai_thrift_attr_value_type_t membervaluetype;
  std::string membername;
  bool isvlan;
  std::vector<sai_thrift_object_type_t>  allowedobjecttypes;
  sai_thrift_size_t allowedobjecttypeslength;
  bool isenum;
  std::vector<sai_thrift_enum_metadata_t>  enummetadata;
  sai_thrift_pointer_t getoid;
  sai_thrift_pointer_t setoid;
  sai_thrift_size_t offset;
  sai_thrift_size_t size;

  _sai_thrift_struct_member_info_t__isset __isset;

  void __set_membervaluetype(const sai_thrift_attr_value_type_t val);

  void __set_membername(const std::string& val);

  void __set_isvlan(const bool val);

  void __set_allowedobjecttypes(const std::vector<sai_thrift_object_type_t> & val);

  void __set_allowedobjecttypeslength(const sai_thrift_size_t val);

  void __set_isenum(const bool val);

  void __set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val);

  void __set_getoid(const sai_thrift_pointer_t val);

  void __set_setoid(const sai_thrift_pointer_t val);

  void __set_offset(const sai_thrift_size_t val);

  void __set_size(const sai_thrift_size_t val);

  bool operator == (const sai_thrift_struct_member_info_t & rhs) const
  {
    if (!(membervaluetype == rhs.membervaluetype))
      return false;
    if (!(membername == rhs.membername))
      return false;
    if (!(isvlan == rhs.isvlan))
      return false;
    if (!(allowedobjecttypes == rhs.allowedobjecttypes))
      return false;
    if (!(allowedobjecttypeslength == rhs.allowedobjecttypeslength))
      return false;
    if (!(isenum == rhs.isenum))
      return false;
    if (!(enummetadata == rhs.enummetadata))
      return false;
    if (!(getoid == rhs.getoid))
      return false;
    if (!(setoid == rhs.setoid))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_struct_member_info_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_struct_member_info_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_struct_member_info_t &a, sai_thrift_struct_member_info_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_struct_member_info_t& obj);

typedef struct _sai_thrift_rev_graph_member_t__isset {
  _sai_thrift_rev_graph_member_t__isset() : objecttype(false), depobjecttype(false), attrmetadata(false), structmember(false) {}
  bool objecttype :1;
  bool depobjecttype :1;
  bool attrmetadata :1;
  bool structmember :1;
} _sai_thrift_rev_graph_member_t__isset;

class sai_thrift_rev_graph_member_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_rev_graph_member_t(const sai_thrift_rev_graph_member_t&);
  sai_thrift_rev_graph_member_t& operator=(const sai_thrift_rev_graph_member_t&);
  sai_thrift_rev_graph_member_t() : objecttype(0), depobjecttype(0) {
  }

  virtual ~sai_thrift_rev_graph_member_t() throw();
  sai_thrift_object_type_t objecttype;
  sai_thrift_object_type_t depobjecttype;
  std::vector<sai_thrift_attr_metadata_t>  attrmetadata;
  std::vector<sai_thrift_struct_member_info_t>  structmember;

  _sai_thrift_rev_graph_member_t__isset __isset;

  void __set_objecttype(const sai_thrift_object_type_t val);

  void __set_depobjecttype(const sai_thrift_object_type_t val);

  void __set_attrmetadata(const std::vector<sai_thrift_attr_metadata_t> & val);

  void __set_structmember(const std::vector<sai_thrift_struct_member_info_t> & val);

  bool operator == (const sai_thrift_rev_graph_member_t & rhs) const
  {
    if (!(objecttype == rhs.objecttype))
      return false;
    if (!(depobjecttype == rhs.depobjecttype))
      return false;
    if (!(attrmetadata == rhs.attrmetadata))
      return false;
    if (!(structmember == rhs.structmember))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_rev_graph_member_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_rev_graph_member_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_rev_graph_member_t &a, sai_thrift_rev_graph_member_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_rev_graph_member_t& obj);

typedef struct _sai_thrift_object_type_info_t__isset {
  _sai_thrift_object_type_info_t__isset() : objecttype(false), objecttypename(false), attridstart(false), attridend(false), enummetadata(false), attrmetadata(false), attrmetadatalength(false), isnonobjectid(false), isobjectid(false), structmembers(false), structmemberscount(false), revgraphmembers(false), revgraphmemberscount(false), create(false), remove(false), fnset(false), fnget(false), getstats(false), getstatsext(false), clearstats(false), isexperimental(false), statenum(false) {}
  bool objecttype :1;
  bool objecttypename :1;
  bool attridstart :1;
  bool attridend :1;
  bool enummetadata :1;
  bool attrmetadata :1;
  bool attrmetadatalength :1;
  bool isnonobjectid :1;
  bool isobjectid :1;
  bool structmembers :1;
  bool structmemberscount :1;
  bool revgraphmembers :1;
  bool revgraphmemberscount :1;
  bool create :1;
  bool remove :1;
  bool fnset :1;
  bool fnget :1;
  bool getstats :1;
  bool getstatsext :1;
  bool clearstats :1;
  bool isexperimental :1;
  bool statenum :1;
} _sai_thrift_object_type_info_t__isset;

class sai_thrift_object_type_info_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_type_info_t(const sai_thrift_object_type_info_t&);
  sai_thrift_object_type_info_t& operator=(const sai_thrift_object_type_info_t&);
  sai_thrift_object_type_info_t() : objecttype(0), objecttypename(), attridstart(0), attridend(0), attrmetadatalength(0), isnonobjectid(0), isobjectid(0), structmemberscount(0), revgraphmemberscount(0), create(0), remove(0), fnset(0), fnget(0), getstats(0), getstatsext(0), clearstats(0), isexperimental(0) {
  }

  virtual ~sai_thrift_object_type_info_t() throw();
  sai_thrift_object_type_t objecttype;
  std::string objecttypename;
  sai_thrift_attr_id_t attridstart;
  sai_thrift_attr_id_t attridend;
  std::vector<sai_thrift_enum_metadata_t>  enummetadata;
  std::vector<sai_thrift_attr_metadata_t>  attrmetadata;
  sai_thrift_size_t attrmetadatalength;
  bool isnonobjectid;
  bool isobjectid;
  std::vector<sai_thrift_struct_member_info_t>  structmembers;
  sai_thrift_size_t structmemberscount;
  std::vector<sai_thrift_rev_graph_member_t>  revgraphmembers;
  sai_thrift_size_t revgraphmemberscount;
  sai_thrift_pointer_t create;
  sai_thrift_pointer_t remove;
  sai_thrift_pointer_t fnset;
  sai_thrift_pointer_t fnget;
  sai_thrift_pointer_t getstats;
  sai_thrift_pointer_t getstatsext;
  sai_thrift_pointer_t clearstats;
  bool isexperimental;
  std::vector<sai_thrift_enum_metadata_t>  statenum;

  _sai_thrift_object_type_info_t__isset __isset;

  void __set_objecttype(const sai_thrift_object_type_t val);

  void __set_objecttypename(const std::string& val);

  void __set_attridstart(const sai_thrift_attr_id_t val);

  void __set_attridend(const sai_thrift_attr_id_t val);

  void __set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val);

  void __set_attrmetadata(const std::vector<sai_thrift_attr_metadata_t> & val);

  void __set_attrmetadatalength(const sai_thrift_size_t val);

  void __set_isnonobjectid(const bool val);

  void __set_isobjectid(const bool val);

  void __set_structmembers(const std::vector<sai_thrift_struct_member_info_t> & val);

  void __set_structmemberscount(const sai_thrift_size_t val);

  void __set_revgraphmembers(const std::vector<sai_thrift_rev_graph_member_t> & val);

  void __set_revgraphmemberscount(const sai_thrift_size_t val);

  void __set_create(const sai_thrift_pointer_t val);

  void __set_remove(const sai_thrift_pointer_t val);

  void __set_fnset(const sai_thrift_pointer_t val);

  void __set_fnget(const sai_thrift_pointer_t val);

  void __set_getstats(const sai_thrift_pointer_t val);

  void __set_getstatsext(const sai_thrift_pointer_t val);

  void __set_clearstats(const sai_thrift_pointer_t val);

  void __set_isexperimental(const bool val);

  void __set_statenum(const std::vector<sai_thrift_enum_metadata_t> & val);

  bool operator == (const sai_thrift_object_type_info_t & rhs) const
  {
    if (!(objecttype == rhs.objecttype))
      return false;
    if (!(objecttypename == rhs.objecttypename))
      return false;
    if (!(attridstart == rhs.attridstart))
      return false;
    if (!(attridend == rhs.attridend))
      return false;
    if (!(enummetadata == rhs.enummetadata))
      return false;
    if (!(attrmetadata == rhs.attrmetadata))
      return false;
    if (!(attrmetadatalength == rhs.attrmetadatalength))
      return false;
    if (!(isnonobjectid == rhs.isnonobjectid))
      return false;
    if (!(isobjectid == rhs.isobjectid))
      return false;
    if (!(structmembers == rhs.structmembers))
      return false;
    if (!(structmemberscount == rhs.structmemberscount))
      return false;
    if (!(revgraphmembers == rhs.revgraphmembers))
      return false;
    if (!(revgraphmemberscount == rhs.revgraphmemberscount))
      return false;
    if (!(create == rhs.create))
      return false;
    if (!(remove == rhs.remove))
      return false;
    if (!(fnset == rhs.fnset))
      return false;
    if (!(fnget == rhs.fnget))
      return false;
    if (!(getstats == rhs.getstats))
      return false;
    if (!(getstatsext == rhs.getstatsext))
      return false;
    if (!(clearstats == rhs.clearstats))
      return false;
    if (!(isexperimental == rhs.isexperimental))
      return false;
    if (!(statenum == rhs.statenum))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_type_info_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_type_info_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_type_info_t &a, sai_thrift_object_type_info_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_type_info_t& obj);

typedef struct _sai_thrift_timespec_t__isset {
  _sai_thrift_timespec_t__isset() : tv_sec(false), tv_nsec(false) {}
  bool tv_sec :1;
  bool tv_nsec :1;
} _sai_thrift_timespec_t__isset;

class sai_thrift_timespec_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_timespec_t(const sai_thrift_timespec_t&);
  sai_thrift_timespec_t& operator=(const sai_thrift_timespec_t&);
  sai_thrift_timespec_t() : tv_sec(0), tv_nsec(0) {
  }

  virtual ~sai_thrift_timespec_t() throw();
  sai_thrift_uint64_t tv_sec;
  sai_thrift_uint32_t tv_nsec;

  _sai_thrift_timespec_t__isset __isset;

  void __set_tv_sec(const sai_thrift_uint64_t val);

  void __set_tv_nsec(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_timespec_t & rhs) const
  {
    if (!(tv_sec == rhs.tv_sec))
      return false;
    if (!(tv_nsec == rhs.tv_nsec))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_timespec_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_timespec_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_timespec_t &a, sai_thrift_timespec_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_timespec_t& obj);

typedef struct _sai_thrift_object_list_t__isset {
  _sai_thrift_object_list_t__isset() : count(false), idlist(false) {}
  bool count :1;
  bool idlist :1;
} _sai_thrift_object_list_t__isset;

class sai_thrift_object_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_object_list_t(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t& operator=(const sai_thrift_object_list_t&);
  sai_thrift_object_list_t() : count(0) {
  }

  virtual ~sai_thrift_object_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_object_id_t>  idlist;

  _sai_thrift_object_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_idlist(const std::vector<sai_thrift_object_id_t> & val);

  bool operator == (const sai_thrift_object_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(idlist == rhs.idlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_object_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_object_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj);

typedef struct _sai_thrift_u8_list_t__isset {
  _sai_thrift_u8_list_t__isset() : count(false), uint8list(false) {}
  bool count :1;
  bool uint8list :1;
} _sai_thrift_u8_list_t__isset;

class sai_thrift_u8_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u8_list_t(const sai_thrift_u8_list_t&);
  sai_thrift_u8_list_t& operator=(const sai_thrift_u8_list_t&);
  sai_thrift_u8_list_t() : count(0) {
  }

  virtual ~sai_thrift_u8_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_uint8_t>  uint8list;

  _sai_thrift_u8_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_uint8list(const std::vector<sai_thrift_uint8_t> & val);

  bool operator == (const sai_thrift_u8_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(uint8list == rhs.uint8list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u8_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u8_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u8_list_t &a, sai_thrift_u8_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u8_list_t& obj);

typedef struct _sai_thrift_s8_list_t__isset {
  _sai_thrift_s8_list_t__isset() : count(false), int8list(false) {}
  bool count :1;
  bool int8list :1;
} _sai_thrift_s8_list_t__isset;

class sai_thrift_s8_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_s8_list_t(const sai_thrift_s8_list_t&);
  sai_thrift_s8_list_t& operator=(const sai_thrift_s8_list_t&);
  sai_thrift_s8_list_t() : count(0) {
  }

  virtual ~sai_thrift_s8_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_int8_t>  int8list;

  _sai_thrift_s8_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_int8list(const std::vector<sai_thrift_int8_t> & val);

  bool operator == (const sai_thrift_s8_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(int8list == rhs.int8list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_s8_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_s8_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_s8_list_t &a, sai_thrift_s8_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_s8_list_t& obj);

typedef struct _sai_thrift_u16_list_t__isset {
  _sai_thrift_u16_list_t__isset() : count(false), uint16list(false) {}
  bool count :1;
  bool uint16list :1;
} _sai_thrift_u16_list_t__isset;

class sai_thrift_u16_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u16_list_t(const sai_thrift_u16_list_t&);
  sai_thrift_u16_list_t& operator=(const sai_thrift_u16_list_t&);
  sai_thrift_u16_list_t() : count(0) {
  }

  virtual ~sai_thrift_u16_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_uint16_t>  uint16list;

  _sai_thrift_u16_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_uint16list(const std::vector<sai_thrift_uint16_t> & val);

  bool operator == (const sai_thrift_u16_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(uint16list == rhs.uint16list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u16_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u16_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u16_list_t &a, sai_thrift_u16_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_list_t& obj);

typedef struct _sai_thrift_s16_list_t__isset {
  _sai_thrift_s16_list_t__isset() : count(false), int16list(false) {}
  bool count :1;
  bool int16list :1;
} _sai_thrift_s16_list_t__isset;

class sai_thrift_s16_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_s16_list_t(const sai_thrift_s16_list_t&);
  sai_thrift_s16_list_t& operator=(const sai_thrift_s16_list_t&);
  sai_thrift_s16_list_t() : count(0) {
  }

  virtual ~sai_thrift_s16_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_int16_t>  int16list;

  _sai_thrift_s16_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_int16list(const std::vector<sai_thrift_int16_t> & val);

  bool operator == (const sai_thrift_s16_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(int16list == rhs.int16list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_s16_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_s16_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_s16_list_t &a, sai_thrift_s16_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_s16_list_t& obj);

typedef struct _sai_thrift_u32_list_t__isset {
  _sai_thrift_u32_list_t__isset() : count(false), uint32list(false) {}
  bool count :1;
  bool uint32list :1;
} _sai_thrift_u32_list_t__isset;

class sai_thrift_u32_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u32_list_t(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t& operator=(const sai_thrift_u32_list_t&);
  sai_thrift_u32_list_t() : count(0) {
  }

  virtual ~sai_thrift_u32_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_uint32_t>  uint32list;

  _sai_thrift_u32_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_uint32list(const std::vector<sai_thrift_uint32_t> & val);

  bool operator == (const sai_thrift_u32_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(uint32list == rhs.uint32list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u32_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u32_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj);

typedef struct _sai_thrift_s32_list_t__isset {
  _sai_thrift_s32_list_t__isset() : count(false), int32list(false) {}
  bool count :1;
  bool int32list :1;
} _sai_thrift_s32_list_t__isset;

class sai_thrift_s32_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_s32_list_t(const sai_thrift_s32_list_t&);
  sai_thrift_s32_list_t& operator=(const sai_thrift_s32_list_t&);
  sai_thrift_s32_list_t() : count(0) {
  }

  virtual ~sai_thrift_s32_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_int32_t>  int32list;

  _sai_thrift_s32_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_int32list(const std::vector<sai_thrift_int32_t> & val);

  bool operator == (const sai_thrift_s32_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(int32list == rhs.int32list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_s32_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_s32_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj);

typedef struct _sai_thrift_u32_range_t__isset {
  _sai_thrift_u32_range_t__isset() : min(false), max(false) {}
  bool min :1;
  bool max :1;
} _sai_thrift_u32_range_t__isset;

class sai_thrift_u32_range_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u32_range_t(const sai_thrift_u32_range_t&);
  sai_thrift_u32_range_t& operator=(const sai_thrift_u32_range_t&);
  sai_thrift_u32_range_t() : min(0), max(0) {
  }

  virtual ~sai_thrift_u32_range_t() throw();
  sai_thrift_uint32_t min;
  sai_thrift_uint32_t max;

  _sai_thrift_u32_range_t__isset __isset;

  void __set_min(const sai_thrift_uint32_t val);

  void __set_max(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_u32_range_t & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u32_range_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u32_range_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u32_range_t &a, sai_thrift_u32_range_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_range_t& obj);

typedef struct _sai_thrift_s32_range_t__isset {
  _sai_thrift_s32_range_t__isset() : min(false), max(false) {}
  bool min :1;
  bool max :1;
} _sai_thrift_s32_range_t__isset;

class sai_thrift_s32_range_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_s32_range_t(const sai_thrift_s32_range_t&);
  sai_thrift_s32_range_t& operator=(const sai_thrift_s32_range_t&);
  sai_thrift_s32_range_t() : min(0), max(0) {
  }

  virtual ~sai_thrift_s32_range_t() throw();
  sai_thrift_int32_t min;
  sai_thrift_int32_t max;

  _sai_thrift_s32_range_t__isset __isset;

  void __set_min(const sai_thrift_int32_t val);

  void __set_max(const sai_thrift_int32_t val);

  bool operator == (const sai_thrift_s32_range_t & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_s32_range_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_s32_range_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_s32_range_t &a, sai_thrift_s32_range_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_range_t& obj);

typedef struct _sai_thrift_u16_range_t__isset {
  _sai_thrift_u16_range_t__isset() : min(false), max(false) {}
  bool min :1;
  bool max :1;
} _sai_thrift_u16_range_t__isset;

class sai_thrift_u16_range_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u16_range_t(const sai_thrift_u16_range_t&);
  sai_thrift_u16_range_t& operator=(const sai_thrift_u16_range_t&);
  sai_thrift_u16_range_t() : min(0), max(0) {
  }

  virtual ~sai_thrift_u16_range_t() throw();
  sai_thrift_uint16_t min;
  sai_thrift_uint16_t max;

  _sai_thrift_u16_range_t__isset __isset;

  void __set_min(const sai_thrift_uint16_t val);

  void __set_max(const sai_thrift_uint16_t val);

  bool operator == (const sai_thrift_u16_range_t & rhs) const
  {
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u16_range_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u16_range_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u16_range_t &a, sai_thrift_u16_range_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_range_t& obj);

typedef struct _sai_thrift_u16_range_list_t__isset {
  _sai_thrift_u16_range_list_t__isset() : count(false), rangelist(false) {}
  bool count :1;
  bool rangelist :1;
} _sai_thrift_u16_range_list_t__isset;

class sai_thrift_u16_range_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_u16_range_list_t(const sai_thrift_u16_range_list_t&);
  sai_thrift_u16_range_list_t& operator=(const sai_thrift_u16_range_list_t&);
  sai_thrift_u16_range_list_t() : count(0) {
  }

  virtual ~sai_thrift_u16_range_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_u16_range_t>  rangelist;

  _sai_thrift_u16_range_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_rangelist(const std::vector<sai_thrift_u16_range_t> & val);

  bool operator == (const sai_thrift_u16_range_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(rangelist == rhs.rangelist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_u16_range_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_u16_range_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_u16_range_list_t &a, sai_thrift_u16_range_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_range_list_t& obj);

typedef struct _sai_thrift_vlan_list_t__isset {
  _sai_thrift_vlan_list_t__isset() : count(false), idlist(false) {}
  bool count :1;
  bool idlist :1;
} _sai_thrift_vlan_list_t__isset;

class sai_thrift_vlan_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t& operator=(const sai_thrift_vlan_list_t&);
  sai_thrift_vlan_list_t() : count(0) {
  }

  virtual ~sai_thrift_vlan_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_vlan_id_t>  idlist;

  _sai_thrift_vlan_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_idlist(const std::vector<sai_thrift_vlan_id_t> & val);

  bool operator == (const sai_thrift_vlan_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(idlist == rhs.idlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vlan_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vlan_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj);

typedef struct _sai_thrift_ip_addr_t__isset {
  _sai_thrift_ip_addr_t__isset() : ip4(false), ip6(false) {}
  bool ip4 :1;
  bool ip6 :1;
} _sai_thrift_ip_addr_t__isset;

class sai_thrift_ip_addr_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_addr_t(const sai_thrift_ip_addr_t&);
  sai_thrift_ip_addr_t& operator=(const sai_thrift_ip_addr_t&);
  sai_thrift_ip_addr_t() : ip4(), ip6() {
  }

  virtual ~sai_thrift_ip_addr_t() throw();
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;

  _sai_thrift_ip_addr_t__isset __isset;

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_ip_addr_t & rhs) const
  {
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_addr_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_addr_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_addr_t &a, sai_thrift_ip_addr_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_addr_t& obj);

typedef struct _sai_thrift_ip_address_t__isset {
  _sai_thrift_ip_address_t__isset() : addr_family(false), addr(false) {}
  bool addr_family :1;
  bool addr :1;
} _sai_thrift_ip_address_t__isset;

class sai_thrift_ip_address_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_address_t(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t& operator=(const sai_thrift_ip_address_t&);
  sai_thrift_ip_address_t() : addr_family(0) {
  }

  virtual ~sai_thrift_ip_address_t() throw();
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_addr_t addr;

  _sai_thrift_ip_address_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_addr_t& val);

  bool operator == (const sai_thrift_ip_address_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_address_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_address_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj);

typedef struct _sai_thrift_ip_address_list_t__isset {
  _sai_thrift_ip_address_list_t__isset() : count(false), addresslist(false) {}
  bool count :1;
  bool addresslist :1;
} _sai_thrift_ip_address_list_t__isset;

class sai_thrift_ip_address_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_address_list_t(const sai_thrift_ip_address_list_t&);
  sai_thrift_ip_address_list_t& operator=(const sai_thrift_ip_address_list_t&);
  sai_thrift_ip_address_list_t() : count(0) {
  }

  virtual ~sai_thrift_ip_address_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_ip_address_t>  addresslist;

  _sai_thrift_ip_address_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_addresslist(const std::vector<sai_thrift_ip_address_t> & val);

  bool operator == (const sai_thrift_ip_address_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(addresslist == rhs.addresslist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_address_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_address_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_address_list_t &a, sai_thrift_ip_address_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_list_t& obj);

typedef struct _sai_thrift_ip_prefix_t__isset {
  _sai_thrift_ip_prefix_t__isset() : addr_family(false), addr(false), mask(false) {}
  bool addr_family :1;
  bool addr :1;
  bool mask :1;
} _sai_thrift_ip_prefix_t__isset;

class sai_thrift_ip_prefix_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t& operator=(const sai_thrift_ip_prefix_t&);
  sai_thrift_ip_prefix_t() : addr_family(0) {
  }

  virtual ~sai_thrift_ip_prefix_t() throw();
  sai_thrift_ip_addr_family_t addr_family;
  sai_thrift_ip_addr_t addr;
  sai_thrift_ip_addr_t mask;

  _sai_thrift_ip_prefix_t__isset __isset;

  void __set_addr_family(const sai_thrift_ip_addr_family_t val);

  void __set_addr(const sai_thrift_ip_addr_t& val);

  void __set_mask(const sai_thrift_ip_addr_t& val);

  bool operator == (const sai_thrift_ip_prefix_t & rhs) const
  {
    if (!(addr_family == rhs.addr_family))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_prefix_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_prefix_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj);

typedef struct _sai_thrift_ip_prefix_list_t__isset {
  _sai_thrift_ip_prefix_list_t__isset() : count(false), prefixlist(false) {}
  bool count :1;
  bool prefixlist :1;
} _sai_thrift_ip_prefix_list_t__isset;

class sai_thrift_ip_prefix_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ip_prefix_list_t(const sai_thrift_ip_prefix_list_t&);
  sai_thrift_ip_prefix_list_t& operator=(const sai_thrift_ip_prefix_list_t&);
  sai_thrift_ip_prefix_list_t() : count(0) {
  }

  virtual ~sai_thrift_ip_prefix_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_ip_prefix_t>  prefixlist;

  _sai_thrift_ip_prefix_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_prefixlist(const std::vector<sai_thrift_ip_prefix_t> & val);

  bool operator == (const sai_thrift_ip_prefix_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(prefixlist == rhs.prefixlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ip_prefix_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ip_prefix_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ip_prefix_list_t &a, sai_thrift_ip_prefix_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_list_t& obj);

typedef struct _sai_thrift_prbs_rx_state_t__isset {
  _sai_thrift_prbs_rx_state_t__isset() : rx_status(false), error_count(false) {}
  bool rx_status :1;
  bool error_count :1;
} _sai_thrift_prbs_rx_state_t__isset;

class sai_thrift_prbs_rx_state_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_prbs_rx_state_t(const sai_thrift_prbs_rx_state_t&);
  sai_thrift_prbs_rx_state_t& operator=(const sai_thrift_prbs_rx_state_t&);
  sai_thrift_prbs_rx_state_t() : rx_status(0), error_count(0) {
  }

  virtual ~sai_thrift_prbs_rx_state_t() throw();
  sai_thrift_port_prbs_rx_status_t rx_status;
  sai_thrift_uint32_t error_count;

  _sai_thrift_prbs_rx_state_t__isset __isset;

  void __set_rx_status(const sai_thrift_port_prbs_rx_status_t val);

  void __set_error_count(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_prbs_rx_state_t & rhs) const
  {
    if (!(rx_status == rhs.rx_status))
      return false;
    if (!(error_count == rhs.error_count))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_prbs_rx_state_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_prbs_rx_state_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_prbs_rx_state_t &a, sai_thrift_prbs_rx_state_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_prbs_rx_state_t& obj);

typedef struct _sai_thrift_latch_status_t__isset {
  _sai_thrift_latch_status_t__isset() : current_status(false), changed(false) {}
  bool current_status :1;
  bool changed :1;
} _sai_thrift_latch_status_t__isset;

class sai_thrift_latch_status_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_latch_status_t(const sai_thrift_latch_status_t&);
  sai_thrift_latch_status_t& operator=(const sai_thrift_latch_status_t&);
  sai_thrift_latch_status_t() : current_status(0), changed(0) {
  }

  virtual ~sai_thrift_latch_status_t() throw();
  bool current_status;
  bool changed;

  _sai_thrift_latch_status_t__isset __isset;

  void __set_current_status(const bool val);

  void __set_changed(const bool val);

  bool operator == (const sai_thrift_latch_status_t & rhs) const
  {
    if (!(current_status == rhs.current_status))
      return false;
    if (!(changed == rhs.changed))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_latch_status_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_latch_status_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_latch_status_t &a, sai_thrift_latch_status_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_latch_status_t& obj);

typedef struct _sai_thrift_port_lane_latch_status_t__isset {
  _sai_thrift_port_lane_latch_status_t__isset() : lane(false), value(false) {}
  bool lane :1;
  bool value :1;
} _sai_thrift_port_lane_latch_status_t__isset;

class sai_thrift_port_lane_latch_status_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_lane_latch_status_t(const sai_thrift_port_lane_latch_status_t&);
  sai_thrift_port_lane_latch_status_t& operator=(const sai_thrift_port_lane_latch_status_t&);
  sai_thrift_port_lane_latch_status_t() : lane(0) {
  }

  virtual ~sai_thrift_port_lane_latch_status_t() throw();
  sai_thrift_uint32_t lane;
  sai_thrift_latch_status_t value;

  _sai_thrift_port_lane_latch_status_t__isset __isset;

  void __set_lane(const sai_thrift_uint32_t val);

  void __set_value(const sai_thrift_latch_status_t& val);

  bool operator == (const sai_thrift_port_lane_latch_status_t & rhs) const
  {
    if (!(lane == rhs.lane))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_lane_latch_status_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_lane_latch_status_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_lane_latch_status_t &a, sai_thrift_port_lane_latch_status_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_latch_status_t& obj);

typedef struct _sai_thrift_port_lane_latch_status_list_t__isset {
  _sai_thrift_port_lane_latch_status_list_t__isset() : count(false), statuslist(false) {}
  bool count :1;
  bool statuslist :1;
} _sai_thrift_port_lane_latch_status_list_t__isset;

class sai_thrift_port_lane_latch_status_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_lane_latch_status_list_t(const sai_thrift_port_lane_latch_status_list_t&);
  sai_thrift_port_lane_latch_status_list_t& operator=(const sai_thrift_port_lane_latch_status_list_t&);
  sai_thrift_port_lane_latch_status_list_t() : count(0) {
  }

  virtual ~sai_thrift_port_lane_latch_status_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_port_lane_latch_status_t>  statuslist;

  _sai_thrift_port_lane_latch_status_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_statuslist(const std::vector<sai_thrift_port_lane_latch_status_t> & val);

  bool operator == (const sai_thrift_port_lane_latch_status_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(statuslist == rhs.statuslist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_lane_latch_status_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_lane_latch_status_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_lane_latch_status_list_t &a, sai_thrift_port_lane_latch_status_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_latch_status_list_t& obj);

typedef struct _sai_thrift_acl_field_data_mask_t__isset {
  _sai_thrift_acl_field_data_mask_t__isset() : u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), u64(false), mac(false), ip4(false), ip6(false), u8list(false) {}
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool u64 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool u8list :1;
} _sai_thrift_acl_field_data_mask_t__isset;

class sai_thrift_acl_field_data_mask_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_field_data_mask_t(const sai_thrift_acl_field_data_mask_t&);
  sai_thrift_acl_field_data_mask_t& operator=(const sai_thrift_acl_field_data_mask_t&);
  sai_thrift_acl_field_data_mask_t() : u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), u64(0), mac(), ip4(), ip6() {
  }

  virtual ~sai_thrift_acl_field_data_mask_t() throw();
  sai_thrift_uint8_t u8;
  sai_thrift_int8_t s8;
  sai_thrift_uint16_t u16;
  sai_thrift_int16_t s16;
  sai_thrift_uint32_t u32;
  sai_thrift_int32_t s32;
  sai_thrift_uint64_t u64;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_u8_list_t u8list;

  _sai_thrift_acl_field_data_mask_t__isset __isset;

  void __set_u8(const sai_thrift_uint8_t val);

  void __set_s8(const sai_thrift_int8_t val);

  void __set_u16(const sai_thrift_uint16_t val);

  void __set_s16(const sai_thrift_int16_t val);

  void __set_u32(const sai_thrift_uint32_t val);

  void __set_s32(const sai_thrift_int32_t val);

  void __set_u64(const sai_thrift_uint64_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_u8list(const sai_thrift_u8_list_t& val);

  bool operator == (const sai_thrift_acl_field_data_mask_t & rhs) const
  {
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(u64 == rhs.u64))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(u8list == rhs.u8list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_field_data_mask_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_field_data_mask_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_field_data_mask_t &a, sai_thrift_acl_field_data_mask_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_mask_t& obj);

typedef struct _sai_thrift_acl_field_data_data_t__isset {
  _sai_thrift_acl_field_data_data_t__isset() : booldata(false), u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), u64(false), mac(false), ip4(false), ip6(false), oid(false), objlist(false), u8list(false) {}
  bool booldata :1;
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool u64 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
  bool objlist :1;
  bool u8list :1;
} _sai_thrift_acl_field_data_data_t__isset;

class sai_thrift_acl_field_data_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_field_data_data_t(const sai_thrift_acl_field_data_data_t&);
  sai_thrift_acl_field_data_data_t& operator=(const sai_thrift_acl_field_data_data_t&);
  sai_thrift_acl_field_data_data_t() : booldata(0), u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), u64(0), mac(), ip4(), ip6(), oid(0) {
  }

  virtual ~sai_thrift_acl_field_data_data_t() throw();
  bool booldata;
  sai_thrift_uint8_t u8;
  sai_thrift_int8_t s8;
  sai_thrift_uint16_t u16;
  sai_thrift_int16_t s16;
  sai_thrift_uint32_t u32;
  sai_thrift_int32_t s32;
  sai_thrift_uint64_t u64;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;
  sai_thrift_u8_list_t u8list;

  _sai_thrift_acl_field_data_data_t__isset __isset;

  void __set_booldata(const bool val);

  void __set_u8(const sai_thrift_uint8_t val);

  void __set_s8(const sai_thrift_int8_t val);

  void __set_u16(const sai_thrift_uint16_t val);

  void __set_s16(const sai_thrift_int16_t val);

  void __set_u32(const sai_thrift_uint32_t val);

  void __set_s32(const sai_thrift_int32_t val);

  void __set_u64(const sai_thrift_uint64_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_u8list(const sai_thrift_u8_list_t& val);

  bool operator == (const sai_thrift_acl_field_data_data_t & rhs) const
  {
    if (!(booldata == rhs.booldata))
      return false;
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(u64 == rhs.u64))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    if (!(u8list == rhs.u8list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_field_data_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_field_data_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_field_data_data_t &a, sai_thrift_acl_field_data_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_data_t& obj);

typedef struct _sai_thrift_acl_field_data_t__isset {
  _sai_thrift_acl_field_data_t__isset() : enable(false), mask(false), data(false) {}
  bool enable :1;
  bool mask :1;
  bool data :1;
} _sai_thrift_acl_field_data_t__isset;

class sai_thrift_acl_field_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t& operator=(const sai_thrift_acl_field_data_t&);
  sai_thrift_acl_field_data_t() : enable(0) {
  }

  virtual ~sai_thrift_acl_field_data_t() throw();
  bool enable;
  sai_thrift_acl_field_data_mask_t mask;
  sai_thrift_acl_field_data_data_t data;

  _sai_thrift_acl_field_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_mask(const sai_thrift_acl_field_data_mask_t& val);

  void __set_data(const sai_thrift_acl_field_data_data_t& val);

  bool operator == (const sai_thrift_acl_field_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(mask == rhs.mask))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_field_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_field_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj);

typedef struct _sai_thrift_acl_action_parameter_t__isset {
  _sai_thrift_acl_action_parameter_t__isset() : booldata(false), u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), mac(false), ip4(false), ip6(false), oid(false), objlist(false), ipaddr(false) {}
  bool booldata :1;
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool oid :1;
  bool objlist :1;
  bool ipaddr :1;
} _sai_thrift_acl_action_parameter_t__isset;

class sai_thrift_acl_action_parameter_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_action_parameter_t(const sai_thrift_acl_action_parameter_t&);
  sai_thrift_acl_action_parameter_t& operator=(const sai_thrift_acl_action_parameter_t&);
  sai_thrift_acl_action_parameter_t() : booldata(0), u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), mac(), ip4(), ip6(), oid(0) {
  }

  virtual ~sai_thrift_acl_action_parameter_t() throw();
  bool booldata;
  sai_thrift_uint8_t u8;
  sai_thrift_int8_t s8;
  sai_thrift_uint16_t u16;
  sai_thrift_int16_t s16;
  sai_thrift_uint32_t u32;
  sai_thrift_int32_t s32;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;
  sai_thrift_ip_address_t ipaddr;

  _sai_thrift_acl_action_parameter_t__isset __isset;

  void __set_booldata(const bool val);

  void __set_u8(const sai_thrift_uint8_t val);

  void __set_s8(const sai_thrift_int8_t val);

  void __set_u16(const sai_thrift_uint16_t val);

  void __set_s16(const sai_thrift_int16_t val);

  void __set_u32(const sai_thrift_uint32_t val);

  void __set_s32(const sai_thrift_int32_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_ipaddr(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_acl_action_parameter_t & rhs) const
  {
    if (!(booldata == rhs.booldata))
      return false;
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    if (!(ipaddr == rhs.ipaddr))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_action_parameter_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_action_parameter_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_action_parameter_t &a, sai_thrift_acl_action_parameter_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_parameter_t& obj);

typedef struct _sai_thrift_acl_action_data_t__isset {
  _sai_thrift_acl_action_data_t__isset() : enable(false), parameter(false) {}
  bool enable :1;
  bool parameter :1;
} _sai_thrift_acl_action_data_t__isset;

class sai_thrift_acl_action_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t& operator=(const sai_thrift_acl_action_data_t&);
  sai_thrift_acl_action_data_t() : enable(0) {
  }

  virtual ~sai_thrift_acl_action_data_t() throw();
  bool enable;
  sai_thrift_acl_action_parameter_t parameter;

  _sai_thrift_acl_action_data_t__isset __isset;

  void __set_enable(const bool val);

  void __set_parameter(const sai_thrift_acl_action_parameter_t& val);

  bool operator == (const sai_thrift_acl_action_data_t & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(parameter == rhs.parameter))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_action_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_action_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj);

typedef struct _sai_thrift_qos_map_params_t__isset {
  _sai_thrift_qos_map_params_t__isset() : tc(false), dscp(false), dot1p(false), prio(false), pg(false), queue_index(false), color(false), mpls_exp(false), fc(false) {}
  bool tc :1;
  bool dscp :1;
  bool dot1p :1;
  bool prio :1;
  bool pg :1;
  bool queue_index :1;
  bool color :1;
  bool mpls_exp :1;
  bool fc :1;
} _sai_thrift_qos_map_params_t__isset;

class sai_thrift_qos_map_params_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t&);
  sai_thrift_qos_map_params_t& operator=(const sai_thrift_qos_map_params_t&);
  sai_thrift_qos_map_params_t() : tc(0), dscp(0), dot1p(0), prio(0), pg(0), queue_index(0), color(0), mpls_exp(0), fc(0) {
  }

  virtual ~sai_thrift_qos_map_params_t() throw();
  sai_thrift_cos_t tc;
  sai_thrift_uint8_t dscp;
  sai_thrift_uint8_t dot1p;
  sai_thrift_uint8_t prio;
  sai_thrift_uint8_t pg;
  sai_thrift_queue_index_t queue_index;
  sai_thrift_packet_color_t color;
  sai_thrift_uint8_t mpls_exp;
  sai_thrift_uint8_t fc;

  _sai_thrift_qos_map_params_t__isset __isset;

  void __set_tc(const sai_thrift_cos_t val);

  void __set_dscp(const sai_thrift_uint8_t val);

  void __set_dot1p(const sai_thrift_uint8_t val);

  void __set_prio(const sai_thrift_uint8_t val);

  void __set_pg(const sai_thrift_uint8_t val);

  void __set_queue_index(const sai_thrift_queue_index_t val);

  void __set_color(const sai_thrift_packet_color_t val);

  void __set_mpls_exp(const sai_thrift_uint8_t val);

  void __set_fc(const sai_thrift_uint8_t val);

  bool operator == (const sai_thrift_qos_map_params_t & rhs) const
  {
    if (!(tc == rhs.tc))
      return false;
    if (!(dscp == rhs.dscp))
      return false;
    if (!(dot1p == rhs.dot1p))
      return false;
    if (!(prio == rhs.prio))
      return false;
    if (!(pg == rhs.pg))
      return false;
    if (!(queue_index == rhs.queue_index))
      return false;
    if (!(color == rhs.color))
      return false;
    if (!(mpls_exp == rhs.mpls_exp))
      return false;
    if (!(fc == rhs.fc))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_params_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_params_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj);

typedef struct _sai_thrift_qos_map_t__isset {
  _sai_thrift_qos_map_t__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _sai_thrift_qos_map_t__isset;

class sai_thrift_qos_map_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_t(const sai_thrift_qos_map_t&);
  sai_thrift_qos_map_t& operator=(const sai_thrift_qos_map_t&);
  sai_thrift_qos_map_t() {
  }

  virtual ~sai_thrift_qos_map_t() throw();
  sai_thrift_qos_map_params_t key;
  sai_thrift_qos_map_params_t value;

  _sai_thrift_qos_map_t__isset __isset;

  void __set_key(const sai_thrift_qos_map_params_t& val);

  void __set_value(const sai_thrift_qos_map_params_t& val);

  bool operator == (const sai_thrift_qos_map_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj);

typedef struct _sai_thrift_qos_map_list_t__isset {
  _sai_thrift_qos_map_list_t__isset() : count(false), maplist(false) {}
  bool count :1;
  bool maplist :1;
} _sai_thrift_qos_map_list_t__isset;

class sai_thrift_qos_map_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t& operator=(const sai_thrift_qos_map_list_t&);
  sai_thrift_qos_map_list_t() : count(0) {
  }

  virtual ~sai_thrift_qos_map_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_qos_map_t>  maplist;

  _sai_thrift_qos_map_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_maplist(const std::vector<sai_thrift_qos_map_t> & val);

  bool operator == (const sai_thrift_qos_map_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(maplist == rhs.maplist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_qos_map_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_qos_map_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj);

typedef struct _sai_thrift_map_t__isset {
  _sai_thrift_map_t__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _sai_thrift_map_t__isset;

class sai_thrift_map_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_map_t(const sai_thrift_map_t&);
  sai_thrift_map_t& operator=(const sai_thrift_map_t&);
  sai_thrift_map_t() : key(0), value(0) {
  }

  virtual ~sai_thrift_map_t() throw();
  sai_thrift_uint32_t key;
  sai_thrift_int32_t value;

  _sai_thrift_map_t__isset __isset;

  void __set_key(const sai_thrift_uint32_t val);

  void __set_value(const sai_thrift_int32_t val);

  bool operator == (const sai_thrift_map_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_map_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_map_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_map_t &a, sai_thrift_map_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_map_t& obj);

typedef struct _sai_thrift_map_list_t__isset {
  _sai_thrift_map_list_t__isset() : count(false), maplist(false) {}
  bool count :1;
  bool maplist :1;
} _sai_thrift_map_list_t__isset;

class sai_thrift_map_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_map_list_t(const sai_thrift_map_list_t&);
  sai_thrift_map_list_t& operator=(const sai_thrift_map_list_t&);
  sai_thrift_map_list_t() : count(0) {
  }

  virtual ~sai_thrift_map_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_map_t>  maplist;

  _sai_thrift_map_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_maplist(const std::vector<sai_thrift_map_t> & val);

  bool operator == (const sai_thrift_map_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(maplist == rhs.maplist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_map_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_map_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_map_list_t &a, sai_thrift_map_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_map_list_t& obj);

typedef struct _sai_thrift_acl_chain_t__isset {
  _sai_thrift_acl_chain_t__isset() : chain_group_stage(false), supported_match_type(false) {}
  bool chain_group_stage :1;
  bool supported_match_type :1;
} _sai_thrift_acl_chain_t__isset;

class sai_thrift_acl_chain_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_chain_t(const sai_thrift_acl_chain_t&);
  sai_thrift_acl_chain_t& operator=(const sai_thrift_acl_chain_t&);
  sai_thrift_acl_chain_t() : chain_group_stage(0), supported_match_type(0) {
  }

  virtual ~sai_thrift_acl_chain_t() throw();
  sai_thrift_acl_table_chain_group_stage_t chain_group_stage;
  sai_thrift_acl_table_supported_match_type_t supported_match_type;

  _sai_thrift_acl_chain_t__isset __isset;

  void __set_chain_group_stage(const sai_thrift_acl_table_chain_group_stage_t val);

  void __set_supported_match_type(const sai_thrift_acl_table_supported_match_type_t val);

  bool operator == (const sai_thrift_acl_chain_t & rhs) const
  {
    if (!(chain_group_stage == rhs.chain_group_stage))
      return false;
    if (!(supported_match_type == rhs.supported_match_type))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_chain_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_chain_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_chain_t &a, sai_thrift_acl_chain_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_chain_t& obj);

typedef struct _sai_thrift_acl_chain_list_t__isset {
  _sai_thrift_acl_chain_list_t__isset() : count(false), chainlist(false) {}
  bool count :1;
  bool chainlist :1;
} _sai_thrift_acl_chain_list_t__isset;

class sai_thrift_acl_chain_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_chain_list_t(const sai_thrift_acl_chain_list_t&);
  sai_thrift_acl_chain_list_t& operator=(const sai_thrift_acl_chain_list_t&);
  sai_thrift_acl_chain_list_t() : count(0) {
  }

  virtual ~sai_thrift_acl_chain_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_acl_chain_t>  chainlist;

  _sai_thrift_acl_chain_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_chainlist(const std::vector<sai_thrift_acl_chain_t> & val);

  bool operator == (const sai_thrift_acl_chain_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(chainlist == rhs.chainlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_chain_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_chain_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_chain_list_t &a, sai_thrift_acl_chain_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_chain_list_t& obj);

typedef struct _sai_thrift_acl_capability_t__isset {
  _sai_thrift_acl_capability_t__isset() : is_action_list_mandatory(false), action_list(false), supported_match_type(false), is_non_contiguous_bits_exact_match_supported(false) {}
  bool is_action_list_mandatory :1;
  bool action_list :1;
  bool supported_match_type :1;
  bool is_non_contiguous_bits_exact_match_supported :1;
} _sai_thrift_acl_capability_t__isset;

class sai_thrift_acl_capability_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_capability_t(const sai_thrift_acl_capability_t&);
  sai_thrift_acl_capability_t& operator=(const sai_thrift_acl_capability_t&);
  sai_thrift_acl_capability_t() : is_action_list_mandatory(0), supported_match_type(0), is_non_contiguous_bits_exact_match_supported(0) {
  }

  virtual ~sai_thrift_acl_capability_t() throw();
  bool is_action_list_mandatory;
  sai_thrift_s32_list_t action_list;
  sai_thrift_acl_table_supported_match_type_t supported_match_type;
  bool is_non_contiguous_bits_exact_match_supported;

  _sai_thrift_acl_capability_t__isset __isset;

  void __set_is_action_list_mandatory(const bool val);

  void __set_action_list(const sai_thrift_s32_list_t& val);

  void __set_supported_match_type(const sai_thrift_acl_table_supported_match_type_t val);

  void __set_is_non_contiguous_bits_exact_match_supported(const bool val);

  bool operator == (const sai_thrift_acl_capability_t & rhs) const
  {
    if (!(is_action_list_mandatory == rhs.is_action_list_mandatory))
      return false;
    if (!(action_list == rhs.action_list))
      return false;
    if (!(supported_match_type == rhs.supported_match_type))
      return false;
    if (!(is_non_contiguous_bits_exact_match_supported == rhs.is_non_contiguous_bits_exact_match_supported))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_capability_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_capability_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_capability_t &a, sai_thrift_acl_capability_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_capability_t& obj);

typedef struct _sai_thrift_acl_resource_t__isset {
  _sai_thrift_acl_resource_t__isset() : stage(false), bind_point(false), avail_num(false) {}
  bool stage :1;
  bool bind_point :1;
  bool avail_num :1;
} _sai_thrift_acl_resource_t__isset;

class sai_thrift_acl_resource_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_resource_t(const sai_thrift_acl_resource_t&);
  sai_thrift_acl_resource_t& operator=(const sai_thrift_acl_resource_t&);
  sai_thrift_acl_resource_t() : stage(0), bind_point(0), avail_num(0) {
  }

  virtual ~sai_thrift_acl_resource_t() throw();
  sai_thrift_acl_stage_t stage;
  sai_thrift_acl_bind_point_type_t bind_point;
  sai_thrift_uint32_t avail_num;

  _sai_thrift_acl_resource_t__isset __isset;

  void __set_stage(const sai_thrift_acl_stage_t val);

  void __set_bind_point(const sai_thrift_acl_bind_point_type_t val);

  void __set_avail_num(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_acl_resource_t & rhs) const
  {
    if (!(stage == rhs.stage))
      return false;
    if (!(bind_point == rhs.bind_point))
      return false;
    if (!(avail_num == rhs.avail_num))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_resource_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_resource_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_resource_t &a, sai_thrift_acl_resource_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_resource_t& obj);

typedef struct _sai_thrift_acl_resource_list_t__isset {
  _sai_thrift_acl_resource_list_t__isset() : count(false), resourcelist(false) {}
  bool count :1;
  bool resourcelist :1;
} _sai_thrift_acl_resource_list_t__isset;

class sai_thrift_acl_resource_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_acl_resource_list_t(const sai_thrift_acl_resource_list_t&);
  sai_thrift_acl_resource_list_t& operator=(const sai_thrift_acl_resource_list_t&);
  sai_thrift_acl_resource_list_t() : count(0) {
  }

  virtual ~sai_thrift_acl_resource_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_acl_resource_t>  resourcelist;

  _sai_thrift_acl_resource_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_resourcelist(const std::vector<sai_thrift_acl_resource_t> & val);

  bool operator == (const sai_thrift_acl_resource_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(resourcelist == rhs.resourcelist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_acl_resource_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_acl_resource_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_acl_resource_list_t &a, sai_thrift_acl_resource_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_resource_list_t& obj);

typedef struct _sai_thrift_hmac_t__isset {
  _sai_thrift_hmac_t__isset() : key_id(false), hmac(false) {}
  bool key_id :1;
  bool hmac :1;
} _sai_thrift_hmac_t__isset;

class sai_thrift_hmac_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_hmac_t(const sai_thrift_hmac_t&);
  sai_thrift_hmac_t& operator=(const sai_thrift_hmac_t&);
  sai_thrift_hmac_t() : key_id(0) {
  }

  virtual ~sai_thrift_hmac_t() throw();
  sai_thrift_uint32_t key_id;
  std::vector<sai_thrift_uint32_t>  hmac;

  _sai_thrift_hmac_t__isset __isset;

  void __set_key_id(const sai_thrift_uint32_t val);

  void __set_hmac(const std::vector<sai_thrift_uint32_t> & val);

  bool operator == (const sai_thrift_hmac_t & rhs) const
  {
    if (!(key_id == rhs.key_id))
      return false;
    if (!(hmac == rhs.hmac))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_hmac_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_hmac_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_hmac_t &a, sai_thrift_hmac_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_hmac_t& obj);

typedef struct _sai_thrift_tlv_entry_t__isset {
  _sai_thrift_tlv_entry_t__isset() : ingress_node(false), egress_node(false), opaque_container(false), hmac(false) {}
  bool ingress_node :1;
  bool egress_node :1;
  bool opaque_container :1;
  bool hmac :1;
} _sai_thrift_tlv_entry_t__isset;

class sai_thrift_tlv_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_tlv_entry_t(const sai_thrift_tlv_entry_t&);
  sai_thrift_tlv_entry_t& operator=(const sai_thrift_tlv_entry_t&);
  sai_thrift_tlv_entry_t() : ingress_node(), egress_node() {
  }

  virtual ~sai_thrift_tlv_entry_t() throw();
  sai_thrift_ip6_t ingress_node;
  sai_thrift_ip6_t egress_node;
  std::vector<sai_thrift_uint32_t>  opaque_container;
  sai_thrift_hmac_t hmac;

  _sai_thrift_tlv_entry_t__isset __isset;

  void __set_ingress_node(const sai_thrift_ip6_t& val);

  void __set_egress_node(const sai_thrift_ip6_t& val);

  void __set_opaque_container(const std::vector<sai_thrift_uint32_t> & val);

  void __set_hmac(const sai_thrift_hmac_t& val);

  bool operator == (const sai_thrift_tlv_entry_t & rhs) const
  {
    if (!(ingress_node == rhs.ingress_node))
      return false;
    if (!(egress_node == rhs.egress_node))
      return false;
    if (!(opaque_container == rhs.opaque_container))
      return false;
    if (!(hmac == rhs.hmac))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_tlv_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_tlv_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_tlv_entry_t &a, sai_thrift_tlv_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_entry_t& obj);

typedef struct _sai_thrift_tlv_t__isset {
  _sai_thrift_tlv_t__isset() : tlv_type(false), entry(false) {}
  bool tlv_type :1;
  bool entry :1;
} _sai_thrift_tlv_t__isset;

class sai_thrift_tlv_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_tlv_t(const sai_thrift_tlv_t&);
  sai_thrift_tlv_t& operator=(const sai_thrift_tlv_t&);
  sai_thrift_tlv_t() : tlv_type(0) {
  }

  virtual ~sai_thrift_tlv_t() throw();
  sai_thrift_tlv_type_t tlv_type;
  sai_thrift_tlv_entry_t entry;

  _sai_thrift_tlv_t__isset __isset;

  void __set_tlv_type(const sai_thrift_tlv_type_t val);

  void __set_entry(const sai_thrift_tlv_entry_t& val);

  bool operator == (const sai_thrift_tlv_t & rhs) const
  {
    if (!(tlv_type == rhs.tlv_type))
      return false;
    if (!(entry == rhs.entry))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_tlv_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_tlv_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_tlv_t &a, sai_thrift_tlv_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_t& obj);

typedef struct _sai_thrift_tlv_list_t__isset {
  _sai_thrift_tlv_list_t__isset() : count(false), tlvlist(false) {}
  bool count :1;
  bool tlvlist :1;
} _sai_thrift_tlv_list_t__isset;

class sai_thrift_tlv_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_tlv_list_t(const sai_thrift_tlv_list_t&);
  sai_thrift_tlv_list_t& operator=(const sai_thrift_tlv_list_t&);
  sai_thrift_tlv_list_t() : count(0) {
  }

  virtual ~sai_thrift_tlv_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_tlv_t>  tlvlist;

  _sai_thrift_tlv_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_tlvlist(const std::vector<sai_thrift_tlv_t> & val);

  bool operator == (const sai_thrift_tlv_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(tlvlist == rhs.tlvlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_tlv_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_tlv_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_tlv_list_t &a, sai_thrift_tlv_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_list_t& obj);

typedef struct _sai_thrift_segment_list_t__isset {
  _sai_thrift_segment_list_t__isset() : count(false), ip6list(false) {}
  bool count :1;
  bool ip6list :1;
} _sai_thrift_segment_list_t__isset;

class sai_thrift_segment_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_segment_list_t(const sai_thrift_segment_list_t&);
  sai_thrift_segment_list_t& operator=(const sai_thrift_segment_list_t&);
  sai_thrift_segment_list_t() : count(0) {
  }

  virtual ~sai_thrift_segment_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_ip6_t>  ip6list;

  _sai_thrift_segment_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_ip6list(const std::vector<sai_thrift_ip6_t> & val);

  bool operator == (const sai_thrift_segment_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(ip6list == rhs.ip6list))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_segment_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_segment_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_segment_list_t &a, sai_thrift_segment_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_segment_list_t& obj);

typedef struct _sai_thrift_json_t__isset {
  _sai_thrift_json_t__isset() : json(false) {}
  bool json :1;
} _sai_thrift_json_t__isset;

class sai_thrift_json_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_json_t(const sai_thrift_json_t&);
  sai_thrift_json_t& operator=(const sai_thrift_json_t&);
  sai_thrift_json_t() {
  }

  virtual ~sai_thrift_json_t() throw();
  sai_thrift_s8_list_t json;

  _sai_thrift_json_t__isset __isset;

  void __set_json(const sai_thrift_s8_list_t& val);

  bool operator == (const sai_thrift_json_t & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_json_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_json_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_json_t &a, sai_thrift_json_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_json_t& obj);

typedef struct _sai_thrift_port_lane_eye_values_t__isset {
  _sai_thrift_port_lane_eye_values_t__isset() : lane(false), left(false), right(false), up(false), down(false) {}
  bool lane :1;
  bool left :1;
  bool right :1;
  bool up :1;
  bool down :1;
} _sai_thrift_port_lane_eye_values_t__isset;

class sai_thrift_port_lane_eye_values_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_lane_eye_values_t(const sai_thrift_port_lane_eye_values_t&);
  sai_thrift_port_lane_eye_values_t& operator=(const sai_thrift_port_lane_eye_values_t&);
  sai_thrift_port_lane_eye_values_t() : lane(0), left(0), right(0), up(0), down(0) {
  }

  virtual ~sai_thrift_port_lane_eye_values_t() throw();
  sai_thrift_uint32_t lane;
  sai_thrift_int32_t left;
  sai_thrift_int32_t right;
  sai_thrift_int32_t up;
  sai_thrift_int32_t down;

  _sai_thrift_port_lane_eye_values_t__isset __isset;

  void __set_lane(const sai_thrift_uint32_t val);

  void __set_left(const sai_thrift_int32_t val);

  void __set_right(const sai_thrift_int32_t val);

  void __set_up(const sai_thrift_int32_t val);

  void __set_down(const sai_thrift_int32_t val);

  bool operator == (const sai_thrift_port_lane_eye_values_t & rhs) const
  {
    if (!(lane == rhs.lane))
      return false;
    if (!(left == rhs.left))
      return false;
    if (!(right == rhs.right))
      return false;
    if (!(up == rhs.up))
      return false;
    if (!(down == rhs.down))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_lane_eye_values_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_lane_eye_values_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_lane_eye_values_t &a, sai_thrift_port_lane_eye_values_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_eye_values_t& obj);

typedef struct _sai_thrift_port_eye_values_list_t__isset {
  _sai_thrift_port_eye_values_list_t__isset() : count(false), valueslist(false) {}
  bool count :1;
  bool valueslist :1;
} _sai_thrift_port_eye_values_list_t__isset;

class sai_thrift_port_eye_values_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_eye_values_list_t(const sai_thrift_port_eye_values_list_t&);
  sai_thrift_port_eye_values_list_t& operator=(const sai_thrift_port_eye_values_list_t&);
  sai_thrift_port_eye_values_list_t() : count(0) {
  }

  virtual ~sai_thrift_port_eye_values_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_port_lane_eye_values_t>  valueslist;

  _sai_thrift_port_eye_values_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_valueslist(const std::vector<sai_thrift_port_lane_eye_values_t> & val);

  bool operator == (const sai_thrift_port_eye_values_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(valueslist == rhs.valueslist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_eye_values_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_eye_values_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_eye_values_list_t &a, sai_thrift_port_eye_values_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_eye_values_list_t& obj);

typedef struct _sai_thrift_system_port_config_t__isset {
  _sai_thrift_system_port_config_t__isset() : port_id(false), attached_switch_id(false), attached_core_index(false), attached_core_port_index(false), speed(false), num_voq(false) {}
  bool port_id :1;
  bool attached_switch_id :1;
  bool attached_core_index :1;
  bool attached_core_port_index :1;
  bool speed :1;
  bool num_voq :1;
} _sai_thrift_system_port_config_t__isset;

class sai_thrift_system_port_config_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_system_port_config_t(const sai_thrift_system_port_config_t&);
  sai_thrift_system_port_config_t& operator=(const sai_thrift_system_port_config_t&);
  sai_thrift_system_port_config_t() : port_id(0), attached_switch_id(0), attached_core_index(0), attached_core_port_index(0), speed(0), num_voq(0) {
  }

  virtual ~sai_thrift_system_port_config_t() throw();
  sai_thrift_uint32_t port_id;
  sai_thrift_uint32_t attached_switch_id;
  sai_thrift_uint32_t attached_core_index;
  sai_thrift_uint32_t attached_core_port_index;
  sai_thrift_uint32_t speed;
  sai_thrift_uint32_t num_voq;

  _sai_thrift_system_port_config_t__isset __isset;

  void __set_port_id(const sai_thrift_uint32_t val);

  void __set_attached_switch_id(const sai_thrift_uint32_t val);

  void __set_attached_core_index(const sai_thrift_uint32_t val);

  void __set_attached_core_port_index(const sai_thrift_uint32_t val);

  void __set_speed(const sai_thrift_uint32_t val);

  void __set_num_voq(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_system_port_config_t & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(attached_switch_id == rhs.attached_switch_id))
      return false;
    if (!(attached_core_index == rhs.attached_core_index))
      return false;
    if (!(attached_core_port_index == rhs.attached_core_port_index))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(num_voq == rhs.num_voq))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_system_port_config_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_system_port_config_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_system_port_config_t &a, sai_thrift_system_port_config_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_system_port_config_t& obj);

typedef struct _sai_thrift_system_port_config_list_t__isset {
  _sai_thrift_system_port_config_list_t__isset() : count(false), configlist(false) {}
  bool count :1;
  bool configlist :1;
} _sai_thrift_system_port_config_list_t__isset;

class sai_thrift_system_port_config_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_system_port_config_list_t(const sai_thrift_system_port_config_list_t&);
  sai_thrift_system_port_config_list_t& operator=(const sai_thrift_system_port_config_list_t&);
  sai_thrift_system_port_config_list_t() : count(0) {
  }

  virtual ~sai_thrift_system_port_config_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_system_port_config_t>  configlist;

  _sai_thrift_system_port_config_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_configlist(const std::vector<sai_thrift_system_port_config_t> & val);

  bool operator == (const sai_thrift_system_port_config_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(configlist == rhs.configlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_system_port_config_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_system_port_config_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_system_port_config_list_t &a, sai_thrift_system_port_config_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_system_port_config_list_t& obj);

typedef struct _sai_thrift_fabric_port_reachability_t__isset {
  _sai_thrift_fabric_port_reachability_t__isset() : switch_id(false), reachable(false) {}
  bool switch_id :1;
  bool reachable :1;
} _sai_thrift_fabric_port_reachability_t__isset;

class sai_thrift_fabric_port_reachability_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_fabric_port_reachability_t(const sai_thrift_fabric_port_reachability_t&);
  sai_thrift_fabric_port_reachability_t& operator=(const sai_thrift_fabric_port_reachability_t&);
  sai_thrift_fabric_port_reachability_t() : switch_id(0), reachable(0) {
  }

  virtual ~sai_thrift_fabric_port_reachability_t() throw();
  sai_thrift_uint32_t switch_id;
  bool reachable;

  _sai_thrift_fabric_port_reachability_t__isset __isset;

  void __set_switch_id(const sai_thrift_uint32_t val);

  void __set_reachable(const bool val);

  bool operator == (const sai_thrift_fabric_port_reachability_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(reachable == rhs.reachable))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fabric_port_reachability_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fabric_port_reachability_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_fabric_port_reachability_t &a, sai_thrift_fabric_port_reachability_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_fabric_port_reachability_t& obj);

typedef struct _sai_thrift_port_err_status_list_t__isset {
  _sai_thrift_port_err_status_list_t__isset() : count(false), statuslist(false) {}
  bool count :1;
  bool statuslist :1;
} _sai_thrift_port_err_status_list_t__isset;

class sai_thrift_port_err_status_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_err_status_list_t(const sai_thrift_port_err_status_list_t&);
  sai_thrift_port_err_status_list_t& operator=(const sai_thrift_port_err_status_list_t&);
  sai_thrift_port_err_status_list_t() : count(0) {
  }

  virtual ~sai_thrift_port_err_status_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_port_err_status_t>  statuslist;

  _sai_thrift_port_err_status_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_statuslist(const std::vector<sai_thrift_port_err_status_t> & val);

  bool operator == (const sai_thrift_port_err_status_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(statuslist == rhs.statuslist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_err_status_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_err_status_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_err_status_list_t &a, sai_thrift_port_err_status_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_err_status_list_t& obj);

typedef struct _sai_thrift_attribute_value_t__isset {
  _sai_thrift_attribute_value_t__isset() : booldata(false), chardata(false), u8(false), s8(false), u16(false), s16(false), u32(false), s32(false), u64(false), s64(false), ptr(false), mac(false), ip4(false), ip6(false), ipaddr(false), ipprefix(false), rx_state(false), oid(false), objlist(false), u8list(false), s8list(false), u16list(false), s16list(false), u32list(false), s32list(false), u32range(false), s32range(false), u16rangelist(false), vlanlist(false), qosmap(false), maplist(false), aclfield(false), aclaction(false), aclmask(false), aclcapability(false), aclresource(false), tlvlist(false), segmentlist(false), ipaddrlist(false), porteyevalues(false), timespec(false), encrypt_key(false), authkey(false), macsecsak(false), macsecauthkey(false), macsecsalt(false), sysportconfig(false), sysportconfiglist(false), reachability(false), porterror(false), portlanelatchstatuslist(false), latchstatus(false), json(false), ipprefixlist(false), aclchainlist(false) {}
  bool booldata :1;
  bool chardata :1;
  bool u8 :1;
  bool s8 :1;
  bool u16 :1;
  bool s16 :1;
  bool u32 :1;
  bool s32 :1;
  bool u64 :1;
  bool s64 :1;
  bool ptr :1;
  bool mac :1;
  bool ip4 :1;
  bool ip6 :1;
  bool ipaddr :1;
  bool ipprefix :1;
  bool rx_state :1;
  bool oid :1;
  bool objlist :1;
  bool u8list :1;
  bool s8list :1;
  bool u16list :1;
  bool s16list :1;
  bool u32list :1;
  bool s32list :1;
  bool u32range :1;
  bool s32range :1;
  bool u16rangelist :1;
  bool vlanlist :1;
  bool qosmap :1;
  bool maplist :1;
  bool aclfield :1;
  bool aclaction :1;
  bool aclmask :1;
  bool aclcapability :1;
  bool aclresource :1;
  bool tlvlist :1;
  bool segmentlist :1;
  bool ipaddrlist :1;
  bool porteyevalues :1;
  bool timespec :1;
  bool encrypt_key :1;
  bool authkey :1;
  bool macsecsak :1;
  bool macsecauthkey :1;
  bool macsecsalt :1;
  bool sysportconfig :1;
  bool sysportconfiglist :1;
  bool reachability :1;
  bool porterror :1;
  bool portlanelatchstatuslist :1;
  bool latchstatus :1;
  bool json :1;
  bool ipprefixlist :1;
  bool aclchainlist :1;
} _sai_thrift_attribute_value_t__isset;

class sai_thrift_attribute_value_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t& operator=(const sai_thrift_attribute_value_t&);
  sai_thrift_attribute_value_t() : booldata(0), chardata(), u8(0), s8(0), u16(0), s16(0), u32(0), s32(0), u64(0), s64(0), ptr(0), mac(), ip4(), ip6(), oid(0), encrypt_key(0), authkey(0), macsecsak(0), macsecauthkey(0), macsecsalt(0) {
  }

  virtual ~sai_thrift_attribute_value_t() throw();
  bool booldata;
  std::string chardata;
  sai_thrift_uint8_t u8;
  sai_thrift_int8_t s8;
  sai_thrift_uint16_t u16;
  sai_thrift_int16_t s16;
  sai_thrift_uint32_t u32;
  sai_thrift_int32_t s32;
  sai_thrift_uint64_t u64;
  sai_thrift_int64_t s64;
  sai_thrift_pointer_t ptr;
  sai_thrift_mac_t mac;
  sai_thrift_ip4_t ip4;
  sai_thrift_ip6_t ip6;
  sai_thrift_ip_address_t ipaddr;
  sai_thrift_ip_prefix_t ipprefix;
  sai_thrift_prbs_rx_state_t rx_state;
  sai_thrift_object_id_t oid;
  sai_thrift_object_list_t objlist;
  sai_thrift_u8_list_t u8list;
  sai_thrift_s8_list_t s8list;
  sai_thrift_u16_list_t u16list;
  sai_thrift_s16_list_t s16list;
  sai_thrift_u32_list_t u32list;
  sai_thrift_s32_list_t s32list;
  sai_thrift_u32_range_t u32range;
  sai_thrift_s32_range_t s32range;
  sai_thrift_u16_range_list_t u16rangelist;
  sai_thrift_vlan_list_t vlanlist;
  sai_thrift_qos_map_list_t qosmap;
  sai_thrift_map_list_t maplist;
  sai_thrift_acl_field_data_t aclfield;
  sai_thrift_acl_action_data_t aclaction;
  sai_thrift_acl_field_data_mask_t aclmask;
  sai_thrift_acl_capability_t aclcapability;
  sai_thrift_acl_resource_list_t aclresource;
  sai_thrift_tlv_list_t tlvlist;
  sai_thrift_segment_list_t segmentlist;
  sai_thrift_ip_address_list_t ipaddrlist;
  sai_thrift_port_eye_values_list_t porteyevalues;
  sai_thrift_timespec_t timespec;
  sai_thrift_encrypt_key_t encrypt_key;
  sai_thrift_auth_key_t authkey;
  sai_thrift_macsec_sak_t macsecsak;
  sai_thrift_macsec_auth_key_t macsecauthkey;
  sai_thrift_macsec_salt_t macsecsalt;
  sai_thrift_system_port_config_t sysportconfig;
  sai_thrift_system_port_config_list_t sysportconfiglist;
  sai_thrift_fabric_port_reachability_t reachability;
  sai_thrift_port_err_status_list_t porterror;
  sai_thrift_port_lane_latch_status_list_t portlanelatchstatuslist;
  sai_thrift_latch_status_t latchstatus;
  sai_thrift_json_t json;
  sai_thrift_ip_prefix_list_t ipprefixlist;
  sai_thrift_acl_chain_list_t aclchainlist;

  _sai_thrift_attribute_value_t__isset __isset;

  void __set_booldata(const bool val);

  void __set_chardata(const std::string& val);

  void __set_u8(const sai_thrift_uint8_t val);

  void __set_s8(const sai_thrift_int8_t val);

  void __set_u16(const sai_thrift_uint16_t val);

  void __set_s16(const sai_thrift_int16_t val);

  void __set_u32(const sai_thrift_uint32_t val);

  void __set_s32(const sai_thrift_int32_t val);

  void __set_u64(const sai_thrift_uint64_t val);

  void __set_s64(const sai_thrift_int64_t val);

  void __set_ptr(const sai_thrift_pointer_t val);

  void __set_mac(const sai_thrift_mac_t& val);

  void __set_ip4(const sai_thrift_ip4_t& val);

  void __set_ip6(const sai_thrift_ip6_t& val);

  void __set_ipaddr(const sai_thrift_ip_address_t& val);

  void __set_ipprefix(const sai_thrift_ip_prefix_t& val);

  void __set_rx_state(const sai_thrift_prbs_rx_state_t& val);

  void __set_oid(const sai_thrift_object_id_t val);

  void __set_objlist(const sai_thrift_object_list_t& val);

  void __set_u8list(const sai_thrift_u8_list_t& val);

  void __set_s8list(const sai_thrift_s8_list_t& val);

  void __set_u16list(const sai_thrift_u16_list_t& val);

  void __set_s16list(const sai_thrift_s16_list_t& val);

  void __set_u32list(const sai_thrift_u32_list_t& val);

  void __set_s32list(const sai_thrift_s32_list_t& val);

  void __set_u32range(const sai_thrift_u32_range_t& val);

  void __set_s32range(const sai_thrift_s32_range_t& val);

  void __set_u16rangelist(const sai_thrift_u16_range_list_t& val);

  void __set_vlanlist(const sai_thrift_vlan_list_t& val);

  void __set_qosmap(const sai_thrift_qos_map_list_t& val);

  void __set_maplist(const sai_thrift_map_list_t& val);

  void __set_aclfield(const sai_thrift_acl_field_data_t& val);

  void __set_aclaction(const sai_thrift_acl_action_data_t& val);

  void __set_aclmask(const sai_thrift_acl_field_data_mask_t& val);

  void __set_aclcapability(const sai_thrift_acl_capability_t& val);

  void __set_aclresource(const sai_thrift_acl_resource_list_t& val);

  void __set_tlvlist(const sai_thrift_tlv_list_t& val);

  void __set_segmentlist(const sai_thrift_segment_list_t& val);

  void __set_ipaddrlist(const sai_thrift_ip_address_list_t& val);

  void __set_porteyevalues(const sai_thrift_port_eye_values_list_t& val);

  void __set_timespec(const sai_thrift_timespec_t& val);

  void __set_encrypt_key(const sai_thrift_encrypt_key_t val);

  void __set_authkey(const sai_thrift_auth_key_t val);

  void __set_macsecsak(const sai_thrift_macsec_sak_t val);

  void __set_macsecauthkey(const sai_thrift_macsec_auth_key_t val);

  void __set_macsecsalt(const sai_thrift_macsec_salt_t val);

  void __set_sysportconfig(const sai_thrift_system_port_config_t& val);

  void __set_sysportconfiglist(const sai_thrift_system_port_config_list_t& val);

  void __set_reachability(const sai_thrift_fabric_port_reachability_t& val);

  void __set_porterror(const sai_thrift_port_err_status_list_t& val);

  void __set_portlanelatchstatuslist(const sai_thrift_port_lane_latch_status_list_t& val);

  void __set_latchstatus(const sai_thrift_latch_status_t& val);

  void __set_json(const sai_thrift_json_t& val);

  void __set_ipprefixlist(const sai_thrift_ip_prefix_list_t& val);

  void __set_aclchainlist(const sai_thrift_acl_chain_list_t& val);

  bool operator == (const sai_thrift_attribute_value_t & rhs) const
  {
    if (!(booldata == rhs.booldata))
      return false;
    if (!(chardata == rhs.chardata))
      return false;
    if (!(u8 == rhs.u8))
      return false;
    if (!(s8 == rhs.s8))
      return false;
    if (!(u16 == rhs.u16))
      return false;
    if (!(s16 == rhs.s16))
      return false;
    if (!(u32 == rhs.u32))
      return false;
    if (!(s32 == rhs.s32))
      return false;
    if (!(u64 == rhs.u64))
      return false;
    if (!(s64 == rhs.s64))
      return false;
    if (!(ptr == rhs.ptr))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(ip4 == rhs.ip4))
      return false;
    if (!(ip6 == rhs.ip6))
      return false;
    if (!(ipaddr == rhs.ipaddr))
      return false;
    if (!(ipprefix == rhs.ipprefix))
      return false;
    if (!(rx_state == rhs.rx_state))
      return false;
    if (!(oid == rhs.oid))
      return false;
    if (!(objlist == rhs.objlist))
      return false;
    if (!(u8list == rhs.u8list))
      return false;
    if (!(s8list == rhs.s8list))
      return false;
    if (!(u16list == rhs.u16list))
      return false;
    if (!(s16list == rhs.s16list))
      return false;
    if (!(u32list == rhs.u32list))
      return false;
    if (!(s32list == rhs.s32list))
      return false;
    if (!(u32range == rhs.u32range))
      return false;
    if (!(s32range == rhs.s32range))
      return false;
    if (!(u16rangelist == rhs.u16rangelist))
      return false;
    if (!(vlanlist == rhs.vlanlist))
      return false;
    if (!(qosmap == rhs.qosmap))
      return false;
    if (!(maplist == rhs.maplist))
      return false;
    if (!(aclfield == rhs.aclfield))
      return false;
    if (!(aclaction == rhs.aclaction))
      return false;
    if (!(aclmask == rhs.aclmask))
      return false;
    if (!(aclcapability == rhs.aclcapability))
      return false;
    if (!(aclresource == rhs.aclresource))
      return false;
    if (!(tlvlist == rhs.tlvlist))
      return false;
    if (!(segmentlist == rhs.segmentlist))
      return false;
    if (!(ipaddrlist == rhs.ipaddrlist))
      return false;
    if (!(porteyevalues == rhs.porteyevalues))
      return false;
    if (!(timespec == rhs.timespec))
      return false;
    if (!(encrypt_key == rhs.encrypt_key))
      return false;
    if (!(authkey == rhs.authkey))
      return false;
    if (!(macsecsak == rhs.macsecsak))
      return false;
    if (!(macsecauthkey == rhs.macsecauthkey))
      return false;
    if (!(macsecsalt == rhs.macsecsalt))
      return false;
    if (!(sysportconfig == rhs.sysportconfig))
      return false;
    if (!(sysportconfiglist == rhs.sysportconfiglist))
      return false;
    if (!(reachability == rhs.reachability))
      return false;
    if (!(porterror == rhs.porterror))
      return false;
    if (!(portlanelatchstatuslist == rhs.portlanelatchstatuslist))
      return false;
    if (!(latchstatus == rhs.latchstatus))
      return false;
    if (!(json == rhs.json))
      return false;
    if (!(ipprefixlist == rhs.ipprefixlist))
      return false;
    if (!(aclchainlist == rhs.aclchainlist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_value_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_value_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj);

typedef struct _sai_thrift_attribute_t__isset {
  _sai_thrift_attribute_t__isset() : id(false), value(false) {}
  bool id :1;
  bool value :1;
} _sai_thrift_attribute_t__isset;

class sai_thrift_attribute_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_t(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t& operator=(const sai_thrift_attribute_t&);
  sai_thrift_attribute_t() : id(0) {
  }

  virtual ~sai_thrift_attribute_t() throw();
  sai_thrift_attr_id_t id;
  sai_thrift_attribute_value_t value;

  _sai_thrift_attribute_t__isset __isset;

  void __set_id(const sai_thrift_attr_id_t val);

  void __set_value(const sai_thrift_attribute_value_t& val);

  bool operator == (const sai_thrift_attribute_t & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj);

typedef struct _sai_thrift_stat_capability_t__isset {
  _sai_thrift_stat_capability_t__isset() : stat_enum(false), stat_modes(false) {}
  bool stat_enum :1;
  bool stat_modes :1;
} _sai_thrift_stat_capability_t__isset;

class sai_thrift_stat_capability_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_stat_capability_t(const sai_thrift_stat_capability_t&);
  sai_thrift_stat_capability_t& operator=(const sai_thrift_stat_capability_t&);
  sai_thrift_stat_capability_t() : stat_enum(0), stat_modes(0) {
  }

  virtual ~sai_thrift_stat_capability_t() throw();
  sai_thrift_stat_id_t stat_enum;
  sai_thrift_uint32_t stat_modes;

  _sai_thrift_stat_capability_t__isset __isset;

  void __set_stat_enum(const sai_thrift_stat_id_t val);

  void __set_stat_modes(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_stat_capability_t & rhs) const
  {
    if (!(stat_enum == rhs.stat_enum))
      return false;
    if (!(stat_modes == rhs.stat_modes))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_stat_capability_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_stat_capability_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_stat_capability_t &a, sai_thrift_stat_capability_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_stat_capability_t& obj);

typedef struct _sai_thrift_stat_capability_list_t__isset {
  _sai_thrift_stat_capability_list_t__isset() : count(false), capabilitylist(false) {}
  bool count :1;
  bool capabilitylist :1;
} _sai_thrift_stat_capability_list_t__isset;

class sai_thrift_stat_capability_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_stat_capability_list_t(const sai_thrift_stat_capability_list_t&);
  sai_thrift_stat_capability_list_t& operator=(const sai_thrift_stat_capability_list_t&);
  sai_thrift_stat_capability_list_t() : count(0) {
  }

  virtual ~sai_thrift_stat_capability_list_t() throw();
  sai_thrift_uint32_t count;
  std::vector<sai_thrift_stat_capability_t>  capabilitylist;

  _sai_thrift_stat_capability_list_t__isset __isset;

  void __set_count(const sai_thrift_uint32_t val);

  void __set_capabilitylist(const std::vector<sai_thrift_stat_capability_t> & val);

  bool operator == (const sai_thrift_stat_capability_list_t & rhs) const
  {
    if (!(count == rhs.count))
      return false;
    if (!(capabilitylist == rhs.capabilitylist))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_stat_capability_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_stat_capability_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_stat_capability_list_t &a, sai_thrift_stat_capability_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_stat_capability_list_t& obj);

typedef struct _sai_thrift_switch_health_data_t__isset {
  _sai_thrift_switch_health_data_t__isset() : data_type(false) {}
  bool data_type :1;
} _sai_thrift_switch_health_data_t__isset;

class sai_thrift_switch_health_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_switch_health_data_t(const sai_thrift_switch_health_data_t&);
  sai_thrift_switch_health_data_t& operator=(const sai_thrift_switch_health_data_t&);
  sai_thrift_switch_health_data_t() : data_type(0) {
  }

  virtual ~sai_thrift_switch_health_data_t() throw();
  sai_thrift_health_data_type_t data_type;

  _sai_thrift_switch_health_data_t__isset __isset;

  void __set_data_type(const sai_thrift_health_data_type_t val);

  bool operator == (const sai_thrift_switch_health_data_t & rhs) const
  {
    if (!(data_type == rhs.data_type))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_switch_health_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_switch_health_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_switch_health_data_t &a, sai_thrift_switch_health_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_switch_health_data_t& obj);

typedef struct _sai_thrift_bfd_session_state_notification_t__isset {
  _sai_thrift_bfd_session_state_notification_t__isset() : bfd_session_id(false), session_state(false) {}
  bool bfd_session_id :1;
  bool session_state :1;
} _sai_thrift_bfd_session_state_notification_t__isset;

class sai_thrift_bfd_session_state_notification_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_bfd_session_state_notification_t(const sai_thrift_bfd_session_state_notification_t&);
  sai_thrift_bfd_session_state_notification_t& operator=(const sai_thrift_bfd_session_state_notification_t&);
  sai_thrift_bfd_session_state_notification_t() : bfd_session_id(0), session_state(0) {
  }

  virtual ~sai_thrift_bfd_session_state_notification_t() throw();
  sai_thrift_object_id_t bfd_session_id;
  sai_thrift_bfd_session_state_t session_state;

  _sai_thrift_bfd_session_state_notification_t__isset __isset;

  void __set_bfd_session_id(const sai_thrift_object_id_t val);

  void __set_session_state(const sai_thrift_bfd_session_state_t val);

  bool operator == (const sai_thrift_bfd_session_state_notification_t & rhs) const
  {
    if (!(bfd_session_id == rhs.bfd_session_id))
      return false;
    if (!(session_state == rhs.session_state))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_bfd_session_state_notification_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_bfd_session_state_notification_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_bfd_session_state_notification_t &a, sai_thrift_bfd_session_state_notification_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_bfd_session_state_notification_t& obj);

typedef struct _sai_thrift_direction_lookup_entry_t__isset {
  _sai_thrift_direction_lookup_entry_t__isset() : switch_id(false), vni(false) {}
  bool switch_id :1;
  bool vni :1;
} _sai_thrift_direction_lookup_entry_t__isset;

class sai_thrift_direction_lookup_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_direction_lookup_entry_t(const sai_thrift_direction_lookup_entry_t&);
  sai_thrift_direction_lookup_entry_t& operator=(const sai_thrift_direction_lookup_entry_t&);
  sai_thrift_direction_lookup_entry_t() : switch_id(0), vni(0) {
  }

  virtual ~sai_thrift_direction_lookup_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_uint32_t vni;

  _sai_thrift_direction_lookup_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vni(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_direction_lookup_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vni == rhs.vni))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_direction_lookup_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_direction_lookup_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_direction_lookup_entry_t &a, sai_thrift_direction_lookup_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_direction_lookup_entry_t& obj);

typedef struct _sai_thrift_eni_ether_address_map_entry_t__isset {
  _sai_thrift_eni_ether_address_map_entry_t__isset() : switch_id(false), address(false) {}
  bool switch_id :1;
  bool address :1;
} _sai_thrift_eni_ether_address_map_entry_t__isset;

class sai_thrift_eni_ether_address_map_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_eni_ether_address_map_entry_t(const sai_thrift_eni_ether_address_map_entry_t&);
  sai_thrift_eni_ether_address_map_entry_t& operator=(const sai_thrift_eni_ether_address_map_entry_t&);
  sai_thrift_eni_ether_address_map_entry_t() : switch_id(0), address() {
  }

  virtual ~sai_thrift_eni_ether_address_map_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_mac_t address;

  _sai_thrift_eni_ether_address_map_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_address(const sai_thrift_mac_t& val);

  bool operator == (const sai_thrift_eni_ether_address_map_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_eni_ether_address_map_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_eni_ether_address_map_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_eni_ether_address_map_entry_t &a, sai_thrift_eni_ether_address_map_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_eni_ether_address_map_entry_t& obj);

typedef struct _sai_thrift_inbound_routing_entry_t__isset {
  _sai_thrift_inbound_routing_entry_t__isset() : switch_id(false), eni_id(false), vni(false), sip(false), sip_mask(false), priority(false) {}
  bool switch_id :1;
  bool eni_id :1;
  bool vni :1;
  bool sip :1;
  bool sip_mask :1;
  bool priority :1;
} _sai_thrift_inbound_routing_entry_t__isset;

class sai_thrift_inbound_routing_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_inbound_routing_entry_t(const sai_thrift_inbound_routing_entry_t&);
  sai_thrift_inbound_routing_entry_t& operator=(const sai_thrift_inbound_routing_entry_t&);
  sai_thrift_inbound_routing_entry_t() : switch_id(0), eni_id(0), vni(0), priority(0) {
  }

  virtual ~sai_thrift_inbound_routing_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t eni_id;
  sai_thrift_uint32_t vni;
  sai_thrift_ip_address_t sip;
  sai_thrift_ip_address_t sip_mask;
  sai_thrift_uint32_t priority;

  _sai_thrift_inbound_routing_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_eni_id(const sai_thrift_object_id_t val);

  void __set_vni(const sai_thrift_uint32_t val);

  void __set_sip(const sai_thrift_ip_address_t& val);

  void __set_sip_mask(const sai_thrift_ip_address_t& val);

  void __set_priority(const sai_thrift_uint32_t val);

  bool operator == (const sai_thrift_inbound_routing_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(eni_id == rhs.eni_id))
      return false;
    if (!(vni == rhs.vni))
      return false;
    if (!(sip == rhs.sip))
      return false;
    if (!(sip_mask == rhs.sip_mask))
      return false;
    if (!(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_inbound_routing_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_inbound_routing_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_inbound_routing_entry_t &a, sai_thrift_inbound_routing_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_inbound_routing_entry_t& obj);

typedef struct _sai_thrift_outbound_ca_to_pa_entry_t__isset {
  _sai_thrift_outbound_ca_to_pa_entry_t__isset() : switch_id(false), dst_vnet_id(false), dip(false) {}
  bool switch_id :1;
  bool dst_vnet_id :1;
  bool dip :1;
} _sai_thrift_outbound_ca_to_pa_entry_t__isset;

class sai_thrift_outbound_ca_to_pa_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_outbound_ca_to_pa_entry_t(const sai_thrift_outbound_ca_to_pa_entry_t&);
  sai_thrift_outbound_ca_to_pa_entry_t& operator=(const sai_thrift_outbound_ca_to_pa_entry_t&);
  sai_thrift_outbound_ca_to_pa_entry_t() : switch_id(0), dst_vnet_id(0) {
  }

  virtual ~sai_thrift_outbound_ca_to_pa_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t dst_vnet_id;
  sai_thrift_ip_address_t dip;

  _sai_thrift_outbound_ca_to_pa_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_dst_vnet_id(const sai_thrift_object_id_t val);

  void __set_dip(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_outbound_ca_to_pa_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(dst_vnet_id == rhs.dst_vnet_id))
      return false;
    if (!(dip == rhs.dip))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_outbound_ca_to_pa_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_outbound_ca_to_pa_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_outbound_ca_to_pa_entry_t &a, sai_thrift_outbound_ca_to_pa_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_outbound_ca_to_pa_entry_t& obj);

typedef struct _sai_thrift_outbound_routing_entry_t__isset {
  _sai_thrift_outbound_routing_entry_t__isset() : switch_id(false), eni_id(false), destination(false) {}
  bool switch_id :1;
  bool eni_id :1;
  bool destination :1;
} _sai_thrift_outbound_routing_entry_t__isset;

class sai_thrift_outbound_routing_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_outbound_routing_entry_t(const sai_thrift_outbound_routing_entry_t&);
  sai_thrift_outbound_routing_entry_t& operator=(const sai_thrift_outbound_routing_entry_t&);
  sai_thrift_outbound_routing_entry_t() : switch_id(0), eni_id(0) {
  }

  virtual ~sai_thrift_outbound_routing_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t eni_id;
  sai_thrift_ip_prefix_t destination;

  _sai_thrift_outbound_routing_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_eni_id(const sai_thrift_object_id_t val);

  void __set_destination(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_outbound_routing_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(eni_id == rhs.eni_id))
      return false;
    if (!(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_outbound_routing_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_outbound_routing_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_outbound_routing_entry_t &a, sai_thrift_outbound_routing_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_outbound_routing_entry_t& obj);

typedef struct _sai_thrift_pa_validation_entry_t__isset {
  _sai_thrift_pa_validation_entry_t__isset() : switch_id(false), vnet_id(false), sip(false) {}
  bool switch_id :1;
  bool vnet_id :1;
  bool sip :1;
} _sai_thrift_pa_validation_entry_t__isset;

class sai_thrift_pa_validation_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_pa_validation_entry_t(const sai_thrift_pa_validation_entry_t&);
  sai_thrift_pa_validation_entry_t& operator=(const sai_thrift_pa_validation_entry_t&);
  sai_thrift_pa_validation_entry_t() : switch_id(0), vnet_id(0) {
  }

  virtual ~sai_thrift_pa_validation_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t vnet_id;
  sai_thrift_ip_address_t sip;

  _sai_thrift_pa_validation_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vnet_id(const sai_thrift_object_id_t val);

  void __set_sip(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_pa_validation_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vnet_id == rhs.vnet_id))
      return false;
    if (!(sip == rhs.sip))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_pa_validation_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_pa_validation_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_pa_validation_entry_t &a, sai_thrift_pa_validation_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_pa_validation_entry_t& obj);

typedef struct _sai_thrift_dst_tag_entry_t__isset {
  _sai_thrift_dst_tag_entry_t__isset() : switch_id(false), dip(false) {}
  bool switch_id :1;
  bool dip :1;
} _sai_thrift_dst_tag_entry_t__isset;

class sai_thrift_dst_tag_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_dst_tag_entry_t(const sai_thrift_dst_tag_entry_t&);
  sai_thrift_dst_tag_entry_t& operator=(const sai_thrift_dst_tag_entry_t&);
  sai_thrift_dst_tag_entry_t() : switch_id(0) {
  }

  virtual ~sai_thrift_dst_tag_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_ip_prefix_t dip;

  _sai_thrift_dst_tag_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_dip(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_dst_tag_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(dip == rhs.dip))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_dst_tag_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_dst_tag_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_dst_tag_entry_t &a, sai_thrift_dst_tag_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_dst_tag_entry_t& obj);

typedef struct _sai_thrift_src_tag_entry_t__isset {
  _sai_thrift_src_tag_entry_t__isset() : switch_id(false), sip(false) {}
  bool switch_id :1;
  bool sip :1;
} _sai_thrift_src_tag_entry_t__isset;

class sai_thrift_src_tag_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_src_tag_entry_t(const sai_thrift_src_tag_entry_t&);
  sai_thrift_src_tag_entry_t& operator=(const sai_thrift_src_tag_entry_t&);
  sai_thrift_src_tag_entry_t() : switch_id(0) {
  }

  virtual ~sai_thrift_src_tag_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_ip_prefix_t sip;

  _sai_thrift_src_tag_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_sip(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_src_tag_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(sip == rhs.sip))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_src_tag_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_src_tag_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_src_tag_entry_t &a, sai_thrift_src_tag_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_src_tag_entry_t& obj);

typedef struct _sai_thrift_vip_entry_t__isset {
  _sai_thrift_vip_entry_t__isset() : switch_id(false), vip(false) {}
  bool switch_id :1;
  bool vip :1;
} _sai_thrift_vip_entry_t__isset;

class sai_thrift_vip_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_vip_entry_t(const sai_thrift_vip_entry_t&);
  sai_thrift_vip_entry_t& operator=(const sai_thrift_vip_entry_t&);
  sai_thrift_vip_entry_t() : switch_id(0) {
  }

  virtual ~sai_thrift_vip_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_ip_address_t vip;

  _sai_thrift_vip_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vip(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_vip_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vip == rhs.vip))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_vip_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_vip_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_vip_entry_t &a, sai_thrift_vip_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_vip_entry_t& obj);

typedef struct _sai_thrift_fdb_entry_t__isset {
  _sai_thrift_fdb_entry_t__isset() : switch_id(false), mac_address(false), bv_id(false) {}
  bool switch_id :1;
  bool mac_address :1;
  bool bv_id :1;
} _sai_thrift_fdb_entry_t__isset;

class sai_thrift_fdb_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t& operator=(const sai_thrift_fdb_entry_t&);
  sai_thrift_fdb_entry_t() : switch_id(0), mac_address(), bv_id(0) {
  }

  virtual ~sai_thrift_fdb_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_mac_t mac_address;
  sai_thrift_object_id_t bv_id;

  _sai_thrift_fdb_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_mac_address(const sai_thrift_mac_t& val);

  void __set_bv_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_thrift_fdb_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(mac_address == rhs.mac_address))
      return false;
    if (!(bv_id == rhs.bv_id))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fdb_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fdb_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj);

typedef struct _sai_thrift_fdb_event_notification_data_t__isset {
  _sai_thrift_fdb_event_notification_data_t__isset() : event_type(false), fdb_entry(false), attr_count(false), attr(false) {}
  bool event_type :1;
  bool fdb_entry :1;
  bool attr_count :1;
  bool attr :1;
} _sai_thrift_fdb_event_notification_data_t__isset;

class sai_thrift_fdb_event_notification_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_fdb_event_notification_data_t(const sai_thrift_fdb_event_notification_data_t&);
  sai_thrift_fdb_event_notification_data_t& operator=(const sai_thrift_fdb_event_notification_data_t&);
  sai_thrift_fdb_event_notification_data_t() : event_type(0), attr_count(0) {
  }

  virtual ~sai_thrift_fdb_event_notification_data_t() throw();
  sai_thrift_fdb_event_t event_type;
  sai_thrift_fdb_entry_t fdb_entry;
  sai_thrift_uint32_t attr_count;
  std::vector<sai_thrift_attribute_t>  attr;

  _sai_thrift_fdb_event_notification_data_t__isset __isset;

  void __set_event_type(const sai_thrift_fdb_event_t val);

  void __set_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_attr_count(const sai_thrift_uint32_t val);

  void __set_attr(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const sai_thrift_fdb_event_notification_data_t & rhs) const
  {
    if (!(event_type == rhs.event_type))
      return false;
    if (!(fdb_entry == rhs.fdb_entry))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    if (!(attr == rhs.attr))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_fdb_event_notification_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_fdb_event_notification_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_fdb_event_notification_data_t &a, sai_thrift_fdb_event_notification_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_event_notification_data_t& obj);

typedef struct _sai_thrift_ipmc_entry_t__isset {
  _sai_thrift_ipmc_entry_t__isset() : switch_id(false), vr_id(false), type(false), destination(false), source(false) {}
  bool switch_id :1;
  bool vr_id :1;
  bool type :1;
  bool destination :1;
  bool source :1;
} _sai_thrift_ipmc_entry_t__isset;

class sai_thrift_ipmc_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ipmc_entry_t(const sai_thrift_ipmc_entry_t&);
  sai_thrift_ipmc_entry_t& operator=(const sai_thrift_ipmc_entry_t&);
  sai_thrift_ipmc_entry_t() : switch_id(0), vr_id(0), type(0) {
  }

  virtual ~sai_thrift_ipmc_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t vr_id;
  sai_thrift_ipmc_entry_type_t type;
  sai_thrift_ip_address_t destination;
  sai_thrift_ip_address_t source;

  _sai_thrift_ipmc_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_type(const sai_thrift_ipmc_entry_type_t val);

  void __set_destination(const sai_thrift_ip_address_t& val);

  void __set_source(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_ipmc_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(destination == rhs.destination))
      return false;
    if (!(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ipmc_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ipmc_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ipmc_entry_t &a, sai_thrift_ipmc_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ipmc_entry_t& obj);

typedef struct _sai_thrift_ipsec_sa_status_notification_t__isset {
  _sai_thrift_ipsec_sa_status_notification_t__isset() : ipsec_sa_id(false), ipsec_sa_octet_count_status(false), ipsec_egress_sn_at_max_limit(false) {}
  bool ipsec_sa_id :1;
  bool ipsec_sa_octet_count_status :1;
  bool ipsec_egress_sn_at_max_limit :1;
} _sai_thrift_ipsec_sa_status_notification_t__isset;

class sai_thrift_ipsec_sa_status_notification_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_ipsec_sa_status_notification_t(const sai_thrift_ipsec_sa_status_notification_t&);
  sai_thrift_ipsec_sa_status_notification_t& operator=(const sai_thrift_ipsec_sa_status_notification_t&);
  sai_thrift_ipsec_sa_status_notification_t() : ipsec_sa_id(0), ipsec_sa_octet_count_status(0), ipsec_egress_sn_at_max_limit(0) {
  }

  virtual ~sai_thrift_ipsec_sa_status_notification_t() throw();
  sai_thrift_object_id_t ipsec_sa_id;
  sai_thrift_ipsec_sa_octet_count_status_t ipsec_sa_octet_count_status;
  bool ipsec_egress_sn_at_max_limit;

  _sai_thrift_ipsec_sa_status_notification_t__isset __isset;

  void __set_ipsec_sa_id(const sai_thrift_object_id_t val);

  void __set_ipsec_sa_octet_count_status(const sai_thrift_ipsec_sa_octet_count_status_t val);

  void __set_ipsec_egress_sn_at_max_limit(const bool val);

  bool operator == (const sai_thrift_ipsec_sa_status_notification_t & rhs) const
  {
    if (!(ipsec_sa_id == rhs.ipsec_sa_id))
      return false;
    if (!(ipsec_sa_octet_count_status == rhs.ipsec_sa_octet_count_status))
      return false;
    if (!(ipsec_egress_sn_at_max_limit == rhs.ipsec_egress_sn_at_max_limit))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_ipsec_sa_status_notification_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_ipsec_sa_status_notification_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_ipsec_sa_status_notification_t &a, sai_thrift_ipsec_sa_status_notification_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_ipsec_sa_status_notification_t& obj);

typedef struct _sai_thrift_l2mc_entry_t__isset {
  _sai_thrift_l2mc_entry_t__isset() : switch_id(false), bv_id(false), type(false), destination(false), source(false) {}
  bool switch_id :1;
  bool bv_id :1;
  bool type :1;
  bool destination :1;
  bool source :1;
} _sai_thrift_l2mc_entry_t__isset;

class sai_thrift_l2mc_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_l2mc_entry_t(const sai_thrift_l2mc_entry_t&);
  sai_thrift_l2mc_entry_t& operator=(const sai_thrift_l2mc_entry_t&);
  sai_thrift_l2mc_entry_t() : switch_id(0), bv_id(0), type(0) {
  }

  virtual ~sai_thrift_l2mc_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t bv_id;
  sai_thrift_l2mc_entry_type_t type;
  sai_thrift_ip_address_t destination;
  sai_thrift_ip_address_t source;

  _sai_thrift_l2mc_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_bv_id(const sai_thrift_object_id_t val);

  void __set_type(const sai_thrift_l2mc_entry_type_t val);

  void __set_destination(const sai_thrift_ip_address_t& val);

  void __set_source(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_l2mc_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(bv_id == rhs.bv_id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(destination == rhs.destination))
      return false;
    if (!(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_l2mc_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_l2mc_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_l2mc_entry_t &a, sai_thrift_l2mc_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_l2mc_entry_t& obj);

typedef struct _sai_thrift_mcast_fdb_entry_t__isset {
  _sai_thrift_mcast_fdb_entry_t__isset() : switch_id(false), mac_address(false), bv_id(false) {}
  bool switch_id :1;
  bool mac_address :1;
  bool bv_id :1;
} _sai_thrift_mcast_fdb_entry_t__isset;

class sai_thrift_mcast_fdb_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_mcast_fdb_entry_t(const sai_thrift_mcast_fdb_entry_t&);
  sai_thrift_mcast_fdb_entry_t& operator=(const sai_thrift_mcast_fdb_entry_t&);
  sai_thrift_mcast_fdb_entry_t() : switch_id(0), mac_address(), bv_id(0) {
  }

  virtual ~sai_thrift_mcast_fdb_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_mac_t mac_address;
  sai_thrift_object_id_t bv_id;

  _sai_thrift_mcast_fdb_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_mac_address(const sai_thrift_mac_t& val);

  void __set_bv_id(const sai_thrift_object_id_t val);

  bool operator == (const sai_thrift_mcast_fdb_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(mac_address == rhs.mac_address))
      return false;
    if (!(bv_id == rhs.bv_id))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_mcast_fdb_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_mcast_fdb_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_mcast_fdb_entry_t &a, sai_thrift_mcast_fdb_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_mcast_fdb_entry_t& obj);

typedef struct _sai_thrift_inseg_entry_t__isset {
  _sai_thrift_inseg_entry_t__isset() : switch_id(false), label(false) {}
  bool switch_id :1;
  bool label :1;
} _sai_thrift_inseg_entry_t__isset;

class sai_thrift_inseg_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_inseg_entry_t(const sai_thrift_inseg_entry_t&);
  sai_thrift_inseg_entry_t& operator=(const sai_thrift_inseg_entry_t&);
  sai_thrift_inseg_entry_t() : switch_id(0), label(0) {
  }

  virtual ~sai_thrift_inseg_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_label_id_t label;

  _sai_thrift_inseg_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_label(const sai_thrift_label_id_t val);

  bool operator == (const sai_thrift_inseg_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_inseg_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_inseg_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_inseg_entry_t &a, sai_thrift_inseg_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_inseg_entry_t& obj);

typedef struct _sai_thrift_nat_entry_key_t__isset {
  _sai_thrift_nat_entry_key_t__isset() : src_ip(false), dst_ip(false), proto(false), l4_src_port(false), l4_dst_port(false) {}
  bool src_ip :1;
  bool dst_ip :1;
  bool proto :1;
  bool l4_src_port :1;
  bool l4_dst_port :1;
} _sai_thrift_nat_entry_key_t__isset;

class sai_thrift_nat_entry_key_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_nat_entry_key_t(const sai_thrift_nat_entry_key_t&);
  sai_thrift_nat_entry_key_t& operator=(const sai_thrift_nat_entry_key_t&);
  sai_thrift_nat_entry_key_t() : src_ip(), dst_ip(), proto(0), l4_src_port(0), l4_dst_port(0) {
  }

  virtual ~sai_thrift_nat_entry_key_t() throw();
  sai_thrift_ip4_t src_ip;
  sai_thrift_ip4_t dst_ip;
  sai_thrift_uint8_t proto;
  sai_thrift_uint16_t l4_src_port;
  sai_thrift_uint16_t l4_dst_port;

  _sai_thrift_nat_entry_key_t__isset __isset;

  void __set_src_ip(const sai_thrift_ip4_t& val);

  void __set_dst_ip(const sai_thrift_ip4_t& val);

  void __set_proto(const sai_thrift_uint8_t val);

  void __set_l4_src_port(const sai_thrift_uint16_t val);

  void __set_l4_dst_port(const sai_thrift_uint16_t val);

  bool operator == (const sai_thrift_nat_entry_key_t & rhs) const
  {
    if (!(src_ip == rhs.src_ip))
      return false;
    if (!(dst_ip == rhs.dst_ip))
      return false;
    if (!(proto == rhs.proto))
      return false;
    if (!(l4_src_port == rhs.l4_src_port))
      return false;
    if (!(l4_dst_port == rhs.l4_dst_port))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_nat_entry_key_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_nat_entry_key_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_nat_entry_key_t &a, sai_thrift_nat_entry_key_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_key_t& obj);

typedef struct _sai_thrift_nat_entry_mask_t__isset {
  _sai_thrift_nat_entry_mask_t__isset() : src_ip(false), dst_ip(false), proto(false), l4_src_port(false), l4_dst_port(false) {}
  bool src_ip :1;
  bool dst_ip :1;
  bool proto :1;
  bool l4_src_port :1;
  bool l4_dst_port :1;
} _sai_thrift_nat_entry_mask_t__isset;

class sai_thrift_nat_entry_mask_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_nat_entry_mask_t(const sai_thrift_nat_entry_mask_t&);
  sai_thrift_nat_entry_mask_t& operator=(const sai_thrift_nat_entry_mask_t&);
  sai_thrift_nat_entry_mask_t() : src_ip(), dst_ip(), proto(0), l4_src_port(0), l4_dst_port(0) {
  }

  virtual ~sai_thrift_nat_entry_mask_t() throw();
  sai_thrift_ip4_t src_ip;
  sai_thrift_ip4_t dst_ip;
  sai_thrift_uint8_t proto;
  sai_thrift_uint16_t l4_src_port;
  sai_thrift_uint16_t l4_dst_port;

  _sai_thrift_nat_entry_mask_t__isset __isset;

  void __set_src_ip(const sai_thrift_ip4_t& val);

  void __set_dst_ip(const sai_thrift_ip4_t& val);

  void __set_proto(const sai_thrift_uint8_t val);

  void __set_l4_src_port(const sai_thrift_uint16_t val);

  void __set_l4_dst_port(const sai_thrift_uint16_t val);

  bool operator == (const sai_thrift_nat_entry_mask_t & rhs) const
  {
    if (!(src_ip == rhs.src_ip))
      return false;
    if (!(dst_ip == rhs.dst_ip))
      return false;
    if (!(proto == rhs.proto))
      return false;
    if (!(l4_src_port == rhs.l4_src_port))
      return false;
    if (!(l4_dst_port == rhs.l4_dst_port))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_nat_entry_mask_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_nat_entry_mask_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_nat_entry_mask_t &a, sai_thrift_nat_entry_mask_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_mask_t& obj);

typedef struct _sai_thrift_nat_entry_data_t__isset {
  _sai_thrift_nat_entry_data_t__isset() : key(false), mask(false) {}
  bool key :1;
  bool mask :1;
} _sai_thrift_nat_entry_data_t__isset;

class sai_thrift_nat_entry_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_nat_entry_data_t(const sai_thrift_nat_entry_data_t&);
  sai_thrift_nat_entry_data_t& operator=(const sai_thrift_nat_entry_data_t&);
  sai_thrift_nat_entry_data_t() {
  }

  virtual ~sai_thrift_nat_entry_data_t() throw();
  sai_thrift_nat_entry_key_t key;
  sai_thrift_nat_entry_mask_t mask;

  _sai_thrift_nat_entry_data_t__isset __isset;

  void __set_key(const sai_thrift_nat_entry_key_t& val);

  void __set_mask(const sai_thrift_nat_entry_mask_t& val);

  bool operator == (const sai_thrift_nat_entry_data_t & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_nat_entry_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_nat_entry_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_nat_entry_data_t &a, sai_thrift_nat_entry_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_data_t& obj);

typedef struct _sai_thrift_nat_entry_t__isset {
  _sai_thrift_nat_entry_t__isset() : switch_id(false), vr_id(false), nat_type(false), data(false) {}
  bool switch_id :1;
  bool vr_id :1;
  bool nat_type :1;
  bool data :1;
} _sai_thrift_nat_entry_t__isset;

class sai_thrift_nat_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_nat_entry_t(const sai_thrift_nat_entry_t&);
  sai_thrift_nat_entry_t& operator=(const sai_thrift_nat_entry_t&);
  sai_thrift_nat_entry_t() : switch_id(0), vr_id(0), nat_type(0) {
  }

  virtual ~sai_thrift_nat_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t vr_id;
  sai_thrift_nat_type_t nat_type;
  sai_thrift_nat_entry_data_t data;

  _sai_thrift_nat_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_nat_type(const sai_thrift_nat_type_t val);

  void __set_data(const sai_thrift_nat_entry_data_t& val);

  bool operator == (const sai_thrift_nat_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(nat_type == rhs.nat_type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_nat_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_nat_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_nat_entry_t &a, sai_thrift_nat_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_t& obj);

typedef struct _sai_thrift_nat_event_notification_data_t__isset {
  _sai_thrift_nat_event_notification_data_t__isset() : event_type(false), nat_entry(false) {}
  bool event_type :1;
  bool nat_entry :1;
} _sai_thrift_nat_event_notification_data_t__isset;

class sai_thrift_nat_event_notification_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_nat_event_notification_data_t(const sai_thrift_nat_event_notification_data_t&);
  sai_thrift_nat_event_notification_data_t& operator=(const sai_thrift_nat_event_notification_data_t&);
  sai_thrift_nat_event_notification_data_t() : event_type(0) {
  }

  virtual ~sai_thrift_nat_event_notification_data_t() throw();
  sai_thrift_nat_event_t event_type;
  sai_thrift_nat_entry_t nat_entry;

  _sai_thrift_nat_event_notification_data_t__isset __isset;

  void __set_event_type(const sai_thrift_nat_event_t val);

  void __set_nat_entry(const sai_thrift_nat_entry_t& val);

  bool operator == (const sai_thrift_nat_event_notification_data_t & rhs) const
  {
    if (!(event_type == rhs.event_type))
      return false;
    if (!(nat_entry == rhs.nat_entry))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_nat_event_notification_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_nat_event_notification_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_nat_event_notification_data_t &a, sai_thrift_nat_event_notification_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_event_notification_data_t& obj);

typedef struct _sai_thrift_neighbor_entry_t__isset {
  _sai_thrift_neighbor_entry_t__isset() : switch_id(false), rif_id(false), ip_address(false) {}
  bool switch_id :1;
  bool rif_id :1;
  bool ip_address :1;
} _sai_thrift_neighbor_entry_t__isset;

class sai_thrift_neighbor_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t& operator=(const sai_thrift_neighbor_entry_t&);
  sai_thrift_neighbor_entry_t() : switch_id(0), rif_id(0) {
  }

  virtual ~sai_thrift_neighbor_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t rif_id;
  sai_thrift_ip_address_t ip_address;

  _sai_thrift_neighbor_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_ip_address(const sai_thrift_ip_address_t& val);

  bool operator == (const sai_thrift_neighbor_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_neighbor_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_neighbor_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj);

typedef struct _sai_thrift_port_oper_status_notification_t__isset {
  _sai_thrift_port_oper_status_notification_t__isset() : port_id(false), port_state(false) {}
  bool port_id :1;
  bool port_state :1;
} _sai_thrift_port_oper_status_notification_t__isset;

class sai_thrift_port_oper_status_notification_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_port_oper_status_notification_t(const sai_thrift_port_oper_status_notification_t&);
  sai_thrift_port_oper_status_notification_t& operator=(const sai_thrift_port_oper_status_notification_t&);
  sai_thrift_port_oper_status_notification_t() : port_id(0), port_state(0) {
  }

  virtual ~sai_thrift_port_oper_status_notification_t() throw();
  sai_thrift_object_id_t port_id;
  sai_thrift_port_oper_status_t port_state;

  _sai_thrift_port_oper_status_notification_t__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_port_state(const sai_thrift_port_oper_status_t val);

  bool operator == (const sai_thrift_port_oper_status_notification_t & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(port_state == rhs.port_state))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_port_oper_status_notification_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_port_oper_status_notification_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_port_oper_status_notification_t &a, sai_thrift_port_oper_status_notification_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_port_oper_status_notification_t& obj);

typedef struct _sai_thrift_queue_deadlock_notification_data_t__isset {
  _sai_thrift_queue_deadlock_notification_data_t__isset() : queue_id(false), event(false), app_managed_recovery(false) {}
  bool queue_id :1;
  bool event :1;
  bool app_managed_recovery :1;
} _sai_thrift_queue_deadlock_notification_data_t__isset;

class sai_thrift_queue_deadlock_notification_data_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_queue_deadlock_notification_data_t(const sai_thrift_queue_deadlock_notification_data_t&);
  sai_thrift_queue_deadlock_notification_data_t& operator=(const sai_thrift_queue_deadlock_notification_data_t&);
  sai_thrift_queue_deadlock_notification_data_t() : queue_id(0), event(0), app_managed_recovery(0) {
  }

  virtual ~sai_thrift_queue_deadlock_notification_data_t() throw();
  sai_thrift_object_id_t queue_id;
  sai_thrift_queue_pfc_deadlock_event_type_t event;
  bool app_managed_recovery;

  _sai_thrift_queue_deadlock_notification_data_t__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_event(const sai_thrift_queue_pfc_deadlock_event_type_t val);

  void __set_app_managed_recovery(const bool val);

  bool operator == (const sai_thrift_queue_deadlock_notification_data_t & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(event == rhs.event))
      return false;
    if (!(app_managed_recovery == rhs.app_managed_recovery))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_queue_deadlock_notification_data_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_queue_deadlock_notification_data_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_queue_deadlock_notification_data_t &a, sai_thrift_queue_deadlock_notification_data_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_queue_deadlock_notification_data_t& obj);

typedef struct _sai_thrift_route_entry_t__isset {
  _sai_thrift_route_entry_t__isset() : switch_id(false), vr_id(false), destination(false) {}
  bool switch_id :1;
  bool vr_id :1;
  bool destination :1;
} _sai_thrift_route_entry_t__isset;

class sai_thrift_route_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_route_entry_t(const sai_thrift_route_entry_t&);
  sai_thrift_route_entry_t& operator=(const sai_thrift_route_entry_t&);
  sai_thrift_route_entry_t() : switch_id(0), vr_id(0) {
  }

  virtual ~sai_thrift_route_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t vr_id;
  sai_thrift_ip_prefix_t destination;

  _sai_thrift_route_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_destination(const sai_thrift_ip_prefix_t& val);

  bool operator == (const sai_thrift_route_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_route_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_route_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj);

typedef struct _sai_thrift_my_sid_entry_t__isset {
  _sai_thrift_my_sid_entry_t__isset() : switch_id(false), vr_id(false), locator_block_len(false), locator_node_len(false), function_len(false), args_len(false), sid(false) {}
  bool switch_id :1;
  bool vr_id :1;
  bool locator_block_len :1;
  bool locator_node_len :1;
  bool function_len :1;
  bool args_len :1;
  bool sid :1;
} _sai_thrift_my_sid_entry_t__isset;

class sai_thrift_my_sid_entry_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_my_sid_entry_t(const sai_thrift_my_sid_entry_t&);
  sai_thrift_my_sid_entry_t& operator=(const sai_thrift_my_sid_entry_t&);
  sai_thrift_my_sid_entry_t() : switch_id(0), vr_id(0), locator_block_len(0), locator_node_len(0), function_len(0), args_len(0), sid() {
  }

  virtual ~sai_thrift_my_sid_entry_t() throw();
  sai_thrift_object_id_t switch_id;
  sai_thrift_object_id_t vr_id;
  sai_thrift_uint8_t locator_block_len;
  sai_thrift_uint8_t locator_node_len;
  sai_thrift_uint8_t function_len;
  sai_thrift_uint8_t args_len;
  sai_thrift_ip6_t sid;

  _sai_thrift_my_sid_entry_t__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_locator_block_len(const sai_thrift_uint8_t val);

  void __set_locator_node_len(const sai_thrift_uint8_t val);

  void __set_function_len(const sai_thrift_uint8_t val);

  void __set_args_len(const sai_thrift_uint8_t val);

  void __set_sid(const sai_thrift_ip6_t& val);

  bool operator == (const sai_thrift_my_sid_entry_t & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(locator_block_len == rhs.locator_block_len))
      return false;
    if (!(locator_node_len == rhs.locator_node_len))
      return false;
    if (!(function_len == rhs.function_len))
      return false;
    if (!(args_len == rhs.args_len))
      return false;
    if (!(sid == rhs.sid))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_my_sid_entry_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_my_sid_entry_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_my_sid_entry_t &a, sai_thrift_my_sid_entry_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_my_sid_entry_t& obj);

typedef struct _sai_thrift_attribute_list_t__isset {
  _sai_thrift_attribute_list_t__isset() : attr_list(false), attr_count(false) {}
  bool attr_list :1;
  bool attr_count :1;
} _sai_thrift_attribute_list_t__isset;

class sai_thrift_attribute_list_t : public virtual ::apache::thrift::TBase {
 public:

  sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t& operator=(const sai_thrift_attribute_list_t&);
  sai_thrift_attribute_list_t() : attr_count(0) {
  }

  virtual ~sai_thrift_attribute_list_t() throw();
  std::vector<sai_thrift_attribute_t>  attr_list;
  sai_thrift_int32_t attr_count;

  _sai_thrift_attribute_list_t__isset __isset;

  void __set_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  void __set_attr_count(const sai_thrift_int32_t val);

  bool operator == (const sai_thrift_attribute_list_t & rhs) const
  {
    if (!(attr_list == rhs.attr_list))
      return false;
    if (!(attr_count == rhs.attr_count))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_attribute_list_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_attribute_list_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj);

typedef struct _sai_thrift_exception__isset {
  _sai_thrift_exception__isset() : status(false) {}
  bool status :1;
} _sai_thrift_exception__isset;

class sai_thrift_exception : public ::apache::thrift::TException {
 public:

  sai_thrift_exception(const sai_thrift_exception&);
  sai_thrift_exception& operator=(const sai_thrift_exception&);
  sai_thrift_exception() : status(0) {
  }

  virtual ~sai_thrift_exception() throw();
  sai_thrift_status_t status;

  _sai_thrift_exception__isset __isset;

  void __set_status(const sai_thrift_status_t val);

  bool operator == (const sai_thrift_exception & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const sai_thrift_exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sai_thrift_exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(sai_thrift_exception &a, sai_thrift_exception &b);

std::ostream& operator<<(std::ostream& out, const sai_thrift_exception& obj);

} // namespace

#endif
