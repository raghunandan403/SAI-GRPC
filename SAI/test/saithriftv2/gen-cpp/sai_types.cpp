/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sai_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace sai {


sai_thrift_object_key_entry_t::~sai_thrift_object_key_entry_t() throw() {
}


void sai_thrift_object_key_entry_t::__set_object_id(const int64_t val) {
  this->object_id = val;
}

void sai_thrift_object_key_entry_t::__set_fdb_entry(const int64_t val) {
  this->fdb_entry = val;
}

void sai_thrift_object_key_entry_t::__set_neighbor_entry(const int64_t val) {
  this->neighbor_entry = val;
}

void sai_thrift_object_key_entry_t::__set_route_entry(const int64_t val) {
  this->route_entry = val;
}

void sai_thrift_object_key_entry_t::__set_mcast_fdb_entry(const int64_t val) {
  this->mcast_fdb_entry = val;
}

void sai_thrift_object_key_entry_t::__set_l2mc_entry(const int64_t val) {
  this->l2mc_entry = val;
}

void sai_thrift_object_key_entry_t::__set_ipmc_entry(const int64_t val) {
  this->ipmc_entry = val;
}

void sai_thrift_object_key_entry_t::__set_inseg_entry(const int64_t val) {
  this->inseg_entry = val;
}

void sai_thrift_object_key_entry_t::__set_nat_entry(const int64_t val) {
  this->nat_entry = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_key_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_key_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->object_id);
          this->__isset.object_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fdb_entry);
          this->__isset.fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->neighbor_entry);
          this->__isset.neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->route_entry);
          this->__isset.route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mcast_fdb_entry);
          this->__isset.mcast_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->l2mc_entry);
          this->__isset.l2mc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ipmc_entry);
          this->__isset.ipmc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inseg_entry);
          this->__isset.inseg_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nat_entry);
          this->__isset.nat_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_key_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_key_entry_t");

  xfer += oprot->writeFieldBegin("object_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->object_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fdb_entry", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->fdb_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("neighbor_entry", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->neighbor_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("route_entry", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->route_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mcast_fdb_entry", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->mcast_fdb_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2mc_entry", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->l2mc_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipmc_entry", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->ipmc_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inseg_entry", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->inseg_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nat_entry", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->nat_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_key_entry_t &a, sai_thrift_object_key_entry_t &b) {
  using ::std::swap;
  swap(a.object_id, b.object_id);
  swap(a.fdb_entry, b.fdb_entry);
  swap(a.neighbor_entry, b.neighbor_entry);
  swap(a.route_entry, b.route_entry);
  swap(a.mcast_fdb_entry, b.mcast_fdb_entry);
  swap(a.l2mc_entry, b.l2mc_entry);
  swap(a.ipmc_entry, b.ipmc_entry);
  swap(a.inseg_entry, b.inseg_entry);
  swap(a.nat_entry, b.nat_entry);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_key_entry_t::sai_thrift_object_key_entry_t(const sai_thrift_object_key_entry_t& other0) {
  object_id = other0.object_id;
  fdb_entry = other0.fdb_entry;
  neighbor_entry = other0.neighbor_entry;
  route_entry = other0.route_entry;
  mcast_fdb_entry = other0.mcast_fdb_entry;
  l2mc_entry = other0.l2mc_entry;
  ipmc_entry = other0.ipmc_entry;
  inseg_entry = other0.inseg_entry;
  nat_entry = other0.nat_entry;
  __isset = other0.__isset;
}
sai_thrift_object_key_entry_t& sai_thrift_object_key_entry_t::operator=(const sai_thrift_object_key_entry_t& other1) {
  object_id = other1.object_id;
  fdb_entry = other1.fdb_entry;
  neighbor_entry = other1.neighbor_entry;
  route_entry = other1.route_entry;
  mcast_fdb_entry = other1.mcast_fdb_entry;
  l2mc_entry = other1.l2mc_entry;
  ipmc_entry = other1.ipmc_entry;
  inseg_entry = other1.inseg_entry;
  nat_entry = other1.nat_entry;
  __isset = other1.__isset;
  return *this;
}
void sai_thrift_object_key_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_key_entry_t(";
  out << "object_id=" << to_string(object_id);
  out << ", " << "fdb_entry=" << to_string(fdb_entry);
  out << ", " << "neighbor_entry=" << to_string(neighbor_entry);
  out << ", " << "route_entry=" << to_string(route_entry);
  out << ", " << "mcast_fdb_entry=" << to_string(mcast_fdb_entry);
  out << ", " << "l2mc_entry=" << to_string(l2mc_entry);
  out << ", " << "ipmc_entry=" << to_string(ipmc_entry);
  out << ", " << "inseg_entry=" << to_string(inseg_entry);
  out << ", " << "nat_entry=" << to_string(nat_entry);
  out << ")";
}


sai_thrift_object_key_t::~sai_thrift_object_key_t() throw() {
}


void sai_thrift_object_key_t::__set_key(const sai_thrift_object_key_entry_t& val) {
  this->key = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_key_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_key_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_key_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_key_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_key_t &a, sai_thrift_object_key_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_key_t::sai_thrift_object_key_t(const sai_thrift_object_key_t& other2) {
  key = other2.key;
  __isset = other2.__isset;
}
sai_thrift_object_key_t& sai_thrift_object_key_t::operator=(const sai_thrift_object_key_t& other3) {
  key = other3.key;
  __isset = other3.__isset;
  return *this;
}
void sai_thrift_object_key_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_key_t(";
  out << "key=" << to_string(key);
  out << ")";
}


sai_thrift_attr_capability_t::~sai_thrift_attr_capability_t() throw() {
}


void sai_thrift_attr_capability_t::__set_create_implemented(const bool val) {
  this->create_implemented = val;
}

void sai_thrift_attr_capability_t::__set_boolset_implemented(const bool val) {
  this->boolset_implemented = val;
}

void sai_thrift_attr_capability_t::__set_get_implemented(const bool val) {
  this->get_implemented = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_capability_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attr_capability_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->create_implemented);
          this->__isset.create_implemented = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolset_implemented);
          this->__isset.boolset_implemented = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->get_implemented);
          this->__isset.get_implemented = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attr_capability_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attr_capability_t");

  xfer += oprot->writeFieldBegin("create_implemented", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->create_implemented);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("boolset_implemented", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->boolset_implemented);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("get_implemented", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->get_implemented);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attr_capability_t &a, sai_thrift_attr_capability_t &b) {
  using ::std::swap;
  swap(a.create_implemented, b.create_implemented);
  swap(a.boolset_implemented, b.boolset_implemented);
  swap(a.get_implemented, b.get_implemented);
  swap(a.__isset, b.__isset);
}

sai_thrift_attr_capability_t::sai_thrift_attr_capability_t(const sai_thrift_attr_capability_t& other4) {
  create_implemented = other4.create_implemented;
  boolset_implemented = other4.boolset_implemented;
  get_implemented = other4.get_implemented;
  __isset = other4.__isset;
}
sai_thrift_attr_capability_t& sai_thrift_attr_capability_t::operator=(const sai_thrift_attr_capability_t& other5) {
  create_implemented = other5.create_implemented;
  boolset_implemented = other5.boolset_implemented;
  get_implemented = other5.get_implemented;
  __isset = other5.__isset;
  return *this;
}
void sai_thrift_attr_capability_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attr_capability_t(";
  out << "create_implemented=" << to_string(create_implemented);
  out << ", " << "boolset_implemented=" << to_string(boolset_implemented);
  out << ", " << "get_implemented=" << to_string(get_implemented);
  out << ")";
}


sai_thrift_service_method_table_t::~sai_thrift_service_method_table_t() throw() {
}


void sai_thrift_service_method_table_t::__set_profile_get_value(const sai_thrift_pointer_t val) {
  this->profile_get_value = val;
}

void sai_thrift_service_method_table_t::__set_profile_get_next_value(const sai_thrift_pointer_t val) {
  this->profile_get_next_value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_service_method_table_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_service_method_table_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->profile_get_value);
          this->__isset.profile_get_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->profile_get_next_value);
          this->__isset.profile_get_next_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_service_method_table_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_service_method_table_t");

  xfer += oprot->writeFieldBegin("profile_get_value", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->profile_get_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("profile_get_next_value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->profile_get_next_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_service_method_table_t &a, sai_thrift_service_method_table_t &b) {
  using ::std::swap;
  swap(a.profile_get_value, b.profile_get_value);
  swap(a.profile_get_next_value, b.profile_get_next_value);
  swap(a.__isset, b.__isset);
}

sai_thrift_service_method_table_t::sai_thrift_service_method_table_t(const sai_thrift_service_method_table_t& other6) {
  profile_get_value = other6.profile_get_value;
  profile_get_next_value = other6.profile_get_next_value;
  __isset = other6.__isset;
}
sai_thrift_service_method_table_t& sai_thrift_service_method_table_t::operator=(const sai_thrift_service_method_table_t& other7) {
  profile_get_value = other7.profile_get_value;
  profile_get_next_value = other7.profile_get_next_value;
  __isset = other7.__isset;
  return *this;
}
void sai_thrift_service_method_table_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_service_method_table_t(";
  out << "profile_get_value=" << to_string(profile_get_value);
  out << ", " << "profile_get_next_value=" << to_string(profile_get_next_value);
  out << ")";
}


sai_thrift_object_meta_key_t::~sai_thrift_object_meta_key_t() throw() {
}


void sai_thrift_object_meta_key_t::__set_objecttype(const sai_thrift_object_type_t val) {
  this->objecttype = val;
}

void sai_thrift_object_meta_key_t::__set_objectkey(const sai_thrift_object_key_t& val) {
  this->objectkey = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_meta_key_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_meta_key_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->objecttype);
          this->__isset.objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objectkey.read(iprot);
          this->__isset.objectkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_meta_key_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_meta_key_t");

  xfer += oprot->writeFieldBegin("objecttype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectkey", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->objectkey.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_meta_key_t &a, sai_thrift_object_meta_key_t &b) {
  using ::std::swap;
  swap(a.objecttype, b.objecttype);
  swap(a.objectkey, b.objectkey);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_meta_key_t::sai_thrift_object_meta_key_t(const sai_thrift_object_meta_key_t& other8) {
  objecttype = other8.objecttype;
  objectkey = other8.objectkey;
  __isset = other8.__isset;
}
sai_thrift_object_meta_key_t& sai_thrift_object_meta_key_t::operator=(const sai_thrift_object_meta_key_t& other9) {
  objecttype = other9.objecttype;
  objectkey = other9.objectkey;
  __isset = other9.__isset;
  return *this;
}
void sai_thrift_object_meta_key_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_meta_key_t(";
  out << "objecttype=" << to_string(objecttype);
  out << ", " << "objectkey=" << to_string(objectkey);
  out << ")";
}


sai_thrift_attr_condition_t::~sai_thrift_attr_condition_t() throw() {
}


void sai_thrift_attr_condition_t::__set_attrid(const sai_thrift_attr_id_t val) {
  this->attrid = val;
}

void sai_thrift_attr_condition_t::__set_condition(const int64_t val) {
  this->condition = val;
}

void sai_thrift_attr_condition_t::__set_op(const sai_thrift_condition_operator_t val) {
  this->op = val;
}

void sai_thrift_attr_condition_t::__set_type(const sai_thrift_attr_condition_type_t val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_condition_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attr_condition_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attrid);
          this->__isset.attrid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->condition);
          this->__isset.condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->op);
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attr_condition_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attr_condition_t");

  xfer += oprot->writeFieldBegin("attrid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->attrid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("condition", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attr_condition_t &a, sai_thrift_attr_condition_t &b) {
  using ::std::swap;
  swap(a.attrid, b.attrid);
  swap(a.condition, b.condition);
  swap(a.op, b.op);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

sai_thrift_attr_condition_t::sai_thrift_attr_condition_t(const sai_thrift_attr_condition_t& other10) {
  attrid = other10.attrid;
  condition = other10.condition;
  op = other10.op;
  type = other10.type;
  __isset = other10.__isset;
}
sai_thrift_attr_condition_t& sai_thrift_attr_condition_t::operator=(const sai_thrift_attr_condition_t& other11) {
  attrid = other11.attrid;
  condition = other11.condition;
  op = other11.op;
  type = other11.type;
  __isset = other11.__isset;
  return *this;
}
void sai_thrift_attr_condition_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attr_condition_t(";
  out << "attrid=" << to_string(attrid);
  out << ", " << "condition=" << to_string(condition);
  out << ", " << "op=" << to_string(op);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


sai_thrift_enum_metadata_t::~sai_thrift_enum_metadata_t() throw() {
}


void sai_thrift_enum_metadata_t::__set_name(const std::string& val) {
  this->name = val;
}

void sai_thrift_enum_metadata_t::__set_valuescount(const sai_thrift_size_t val) {
  this->valuescount = val;
}

void sai_thrift_enum_metadata_t::__set_values(const std::vector<sai_thrift_int> & val) {
  this->values = val;
}

void sai_thrift_enum_metadata_t::__set_valuesnames(const std::string& val) {
  this->valuesnames = val;
}

void sai_thrift_enum_metadata_t::__set_valuesshortnames(const std::string& val) {
  this->valuesshortnames = val;
}

void sai_thrift_enum_metadata_t::__set_containsflags(const bool val) {
  this->containsflags = val;
}

void sai_thrift_enum_metadata_t::__set_flagstype(const sai_thrift_enum_flags_type_t val) {
  this->flagstype = val;
}

void sai_thrift_enum_metadata_t::__set_ignorevalues(const std::vector<sai_thrift_int> & val) {
  this->ignorevalues = val;
}

void sai_thrift_enum_metadata_t::__set_ignorevaluesnames(const std::string& val) {
  this->ignorevaluesnames = val;
}

void sai_thrift_enum_metadata_t::__set_objecttype(const sai_thrift_object_type_t val) {
  this->objecttype = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_enum_metadata_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_enum_metadata_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->valuescount);
          this->__isset.valuescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->values.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readI32(this->values[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->valuesnames);
          this->__isset.valuesnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->valuesshortnames);
          this->__isset.valuesshortnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->containsflags);
          this->__isset.containsflags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flagstype);
          this->__isset.flagstype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ignorevalues.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->ignorevalues.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readI32(this->ignorevalues[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ignorevalues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ignorevaluesnames);
          this->__isset.ignorevaluesnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->objecttype);
          this->__isset.objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_enum_metadata_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_enum_metadata_t");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("valuescount", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->valuescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->values.size()));
    std::vector<sai_thrift_int> ::const_iterator _iter22;
    for (_iter22 = this->values.begin(); _iter22 != this->values.end(); ++_iter22)
    {
      xfer += oprot->writeI32((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("valuesnames", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->valuesnames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("valuesshortnames", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->valuesshortnames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("containsflags", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->containsflags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flagstype", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->flagstype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignorevalues", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->ignorevalues.size()));
    std::vector<sai_thrift_int> ::const_iterator _iter23;
    for (_iter23 = this->ignorevalues.begin(); _iter23 != this->ignorevalues.end(); ++_iter23)
    {
      xfer += oprot->writeI32((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ignorevaluesnames", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ignorevaluesnames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objecttype", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_enum_metadata_t &a, sai_thrift_enum_metadata_t &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.valuescount, b.valuescount);
  swap(a.values, b.values);
  swap(a.valuesnames, b.valuesnames);
  swap(a.valuesshortnames, b.valuesshortnames);
  swap(a.containsflags, b.containsflags);
  swap(a.flagstype, b.flagstype);
  swap(a.ignorevalues, b.ignorevalues);
  swap(a.ignorevaluesnames, b.ignorevaluesnames);
  swap(a.objecttype, b.objecttype);
  swap(a.__isset, b.__isset);
}

sai_thrift_enum_metadata_t::sai_thrift_enum_metadata_t(const sai_thrift_enum_metadata_t& other24) {
  name = other24.name;
  valuescount = other24.valuescount;
  values = other24.values;
  valuesnames = other24.valuesnames;
  valuesshortnames = other24.valuesshortnames;
  containsflags = other24.containsflags;
  flagstype = other24.flagstype;
  ignorevalues = other24.ignorevalues;
  ignorevaluesnames = other24.ignorevaluesnames;
  objecttype = other24.objecttype;
  __isset = other24.__isset;
}
sai_thrift_enum_metadata_t& sai_thrift_enum_metadata_t::operator=(const sai_thrift_enum_metadata_t& other25) {
  name = other25.name;
  valuescount = other25.valuescount;
  values = other25.values;
  valuesnames = other25.valuesnames;
  valuesshortnames = other25.valuesshortnames;
  containsflags = other25.containsflags;
  flagstype = other25.flagstype;
  ignorevalues = other25.ignorevalues;
  ignorevaluesnames = other25.ignorevaluesnames;
  objecttype = other25.objecttype;
  __isset = other25.__isset;
  return *this;
}
void sai_thrift_enum_metadata_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_enum_metadata_t(";
  out << "name=" << to_string(name);
  out << ", " << "valuescount=" << to_string(valuescount);
  out << ", " << "values=" << to_string(values);
  out << ", " << "valuesnames=" << to_string(valuesnames);
  out << ", " << "valuesshortnames=" << to_string(valuesshortnames);
  out << ", " << "containsflags=" << to_string(containsflags);
  out << ", " << "flagstype=" << to_string(flagstype);
  out << ", " << "ignorevalues=" << to_string(ignorevalues);
  out << ", " << "ignorevaluesnames=" << to_string(ignorevaluesnames);
  out << ", " << "objecttype=" << to_string(objecttype);
  out << ")";
}


sai_thrift_attr_capability_metadata_t::~sai_thrift_attr_capability_metadata_t() throw() {
}


void sai_thrift_attr_capability_metadata_t::__set_vendorid(const sai_thrift_uint64_t val) {
  this->vendorid = val;
}

void sai_thrift_attr_capability_metadata_t::__set_operationcapability(const sai_thrift_attr_capability_t& val) {
  this->operationcapability = val;
}

void sai_thrift_attr_capability_metadata_t::__set_enumvaluescount(const sai_thrift_size_t val) {
  this->enumvaluescount = val;
}

void sai_thrift_attr_capability_metadata_t::__set_enumvalues(const std::vector<sai_thrift_int> & val) {
  this->enumvalues = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_capability_metadata_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attr_capability_metadata_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vendorid);
          this->__isset.vendorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->operationcapability.read(iprot);
          this->__isset.operationcapability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->enumvaluescount);
          this->__isset.enumvaluescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enumvalues.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->enumvalues.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readI32(this->enumvalues[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.enumvalues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attr_capability_metadata_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attr_capability_metadata_t");

  xfer += oprot->writeFieldBegin("vendorid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vendorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operationcapability", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->operationcapability.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enumvaluescount", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->enumvaluescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enumvalues", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->enumvalues.size()));
    std::vector<sai_thrift_int> ::const_iterator _iter31;
    for (_iter31 = this->enumvalues.begin(); _iter31 != this->enumvalues.end(); ++_iter31)
    {
      xfer += oprot->writeI32((*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attr_capability_metadata_t &a, sai_thrift_attr_capability_metadata_t &b) {
  using ::std::swap;
  swap(a.vendorid, b.vendorid);
  swap(a.operationcapability, b.operationcapability);
  swap(a.enumvaluescount, b.enumvaluescount);
  swap(a.enumvalues, b.enumvalues);
  swap(a.__isset, b.__isset);
}

sai_thrift_attr_capability_metadata_t::sai_thrift_attr_capability_metadata_t(const sai_thrift_attr_capability_metadata_t& other32) {
  vendorid = other32.vendorid;
  operationcapability = other32.operationcapability;
  enumvaluescount = other32.enumvaluescount;
  enumvalues = other32.enumvalues;
  __isset = other32.__isset;
}
sai_thrift_attr_capability_metadata_t& sai_thrift_attr_capability_metadata_t::operator=(const sai_thrift_attr_capability_metadata_t& other33) {
  vendorid = other33.vendorid;
  operationcapability = other33.operationcapability;
  enumvaluescount = other33.enumvaluescount;
  enumvalues = other33.enumvalues;
  __isset = other33.__isset;
  return *this;
}
void sai_thrift_attr_capability_metadata_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attr_capability_metadata_t(";
  out << "vendorid=" << to_string(vendorid);
  out << ", " << "operationcapability=" << to_string(operationcapability);
  out << ", " << "enumvaluescount=" << to_string(enumvaluescount);
  out << ", " << "enumvalues=" << to_string(enumvalues);
  out << ")";
}


sai_thrift_attr_metadata_t::~sai_thrift_attr_metadata_t() throw() {
}


void sai_thrift_attr_metadata_t::__set_objecttype(const sai_thrift_object_type_t val) {
  this->objecttype = val;
}

void sai_thrift_attr_metadata_t::__set_attrid(const sai_thrift_attr_id_t val) {
  this->attrid = val;
}

void sai_thrift_attr_metadata_t::__set_attridname(const std::string& val) {
  this->attridname = val;
}

void sai_thrift_attr_metadata_t::__set_brief(const std::string& val) {
  this->brief = val;
}

void sai_thrift_attr_metadata_t::__set_attrvaluetype(const sai_thrift_attr_value_type_t val) {
  this->attrvaluetype = val;
}

void sai_thrift_attr_metadata_t::__set_flags(const sai_thrift_attr_flags_t val) {
  this->flags = val;
}

void sai_thrift_attr_metadata_t::__set_allowedobjecttypes(const std::vector<sai_thrift_object_type_t> & val) {
  this->allowedobjecttypes = val;
}

void sai_thrift_attr_metadata_t::__set_allowedobjecttypeslength(const sai_thrift_size_t val) {
  this->allowedobjecttypeslength = val;
}

void sai_thrift_attr_metadata_t::__set_allowrepetitiononlist(const bool val) {
  this->allowrepetitiononlist = val;
}

void sai_thrift_attr_metadata_t::__set_allowmixedobjecttypes(const bool val) {
  this->allowmixedobjecttypes = val;
}

void sai_thrift_attr_metadata_t::__set_allowemptylist(const bool val) {
  this->allowemptylist = val;
}

void sai_thrift_attr_metadata_t::__set_allownullobjectid(const bool val) {
  this->allownullobjectid = val;
}

void sai_thrift_attr_metadata_t::__set_isoidattribute(const bool val) {
  this->isoidattribute = val;
}

void sai_thrift_attr_metadata_t::__set_defaultvaluetype(const sai_thrift_default_value_type_t val) {
  this->defaultvaluetype = val;
}

void sai_thrift_attr_metadata_t::__set_defaultvalue(const std::vector<sai_thrift_attribute_value_t> & val) {
  this->defaultvalue = val;
}

void sai_thrift_attr_metadata_t::__set_defaultvalueobjecttype(const sai_thrift_object_type_t val) {
  this->defaultvalueobjecttype = val;
}

void sai_thrift_attr_metadata_t::__set_defaultvalueattrid(const sai_thrift_attr_id_t val) {
  this->defaultvalueattrid = val;
}

void sai_thrift_attr_metadata_t::__set_storedefaultvalue(const bool val) {
  this->storedefaultvalue = val;
}

void sai_thrift_attr_metadata_t::__set_isenum(const bool val) {
  this->isenum = val;
}

void sai_thrift_attr_metadata_t::__set_isenumlist(const bool val) {
  this->isenumlist = val;
}

void sai_thrift_attr_metadata_t::__set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val) {
  this->enummetadata = val;
}

void sai_thrift_attr_metadata_t::__set_conditiontype(const sai_thrift_attr_condition_type_t val) {
  this->conditiontype = val;
}

void sai_thrift_attr_metadata_t::__set_conditions(const std::vector<sai_thrift_attr_condition_t> & val) {
  this->conditions = val;
}

void sai_thrift_attr_metadata_t::__set_conditionslength(const sai_thrift_size_t val) {
  this->conditionslength = val;
}

void sai_thrift_attr_metadata_t::__set_isconditional(const bool val) {
  this->isconditional = val;
}

void sai_thrift_attr_metadata_t::__set_validonlytype(const sai_thrift_attr_condition_type_t val) {
  this->validonlytype = val;
}

void sai_thrift_attr_metadata_t::__set_validonly(const std::vector<sai_thrift_attr_condition_t> & val) {
  this->validonly = val;
}

void sai_thrift_attr_metadata_t::__set_validonlylength(const sai_thrift_size_t val) {
  this->validonlylength = val;
}

void sai_thrift_attr_metadata_t::__set_isvalidonly(const bool val) {
  this->isvalidonly = val;
}

void sai_thrift_attr_metadata_t::__set_getsave(const bool val) {
  this->getsave = val;
}

void sai_thrift_attr_metadata_t::__set_isvlan(const bool val) {
  this->isvlan = val;
}

void sai_thrift_attr_metadata_t::__set_isaclfield(const bool val) {
  this->isaclfield = val;
}

void sai_thrift_attr_metadata_t::__set_isaclaction(const bool val) {
  this->isaclaction = val;
}

void sai_thrift_attr_metadata_t::__set_isaclmask(const bool val) {
  this->isaclmask = val;
}

void sai_thrift_attr_metadata_t::__set_ismandatoryoncreate(const bool val) {
  this->ismandatoryoncreate = val;
}

void sai_thrift_attr_metadata_t::__set_iscreateonly(const bool val) {
  this->iscreateonly = val;
}

void sai_thrift_attr_metadata_t::__set_iscreateandset(const bool val) {
  this->iscreateandset = val;
}

void sai_thrift_attr_metadata_t::__set_isreadonly(const bool val) {
  this->isreadonly = val;
}

void sai_thrift_attr_metadata_t::__set_iskey(const bool val) {
  this->iskey = val;
}

void sai_thrift_attr_metadata_t::__set_isprimitive(const bool val) {
  this->isprimitive = val;
}

void sai_thrift_attr_metadata_t::__set_notificationtype(const sai_thrift_int val) {
  this->notificationtype = val;
}

void sai_thrift_attr_metadata_t::__set_iscallback(const bool val) {
  this->iscallback = val;
}

void sai_thrift_attr_metadata_t::__set_pointertype(const sai_thrift_int val) {
  this->pointertype = val;
}

void sai_thrift_attr_metadata_t::__set_capability(const std::vector<sai_thrift_attr_capability_metadata_t> & val) {
  this->capability = val;
}

void sai_thrift_attr_metadata_t::__set_capabilitylength(const sai_thrift_size_t val) {
  this->capabilitylength = val;
}

void sai_thrift_attr_metadata_t::__set_isextensionattr(const bool val) {
  this->isextensionattr = val;
}

void sai_thrift_attr_metadata_t::__set_isresourcetype(const bool val) {
  this->isresourcetype = val;
}

void sai_thrift_attr_metadata_t::__set_isdeprecated(const bool val) {
  this->isdeprecated = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attr_metadata_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attr_metadata_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->objecttype);
          this->__isset.objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attrid);
          this->__isset.attrid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attridname);
          this->__isset.attridname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->brief);
          this->__isset.brief = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attrvaluetype);
          this->__isset.attrvaluetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->allowedobjecttypes.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->allowedobjecttypes.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readI32(this->allowedobjecttypes[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.allowedobjecttypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->allowedobjecttypeslength);
          this->__isset.allowedobjecttypeslength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowrepetitiononlist);
          this->__isset.allowrepetitiononlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowmixedobjecttypes);
          this->__isset.allowmixedobjecttypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allowemptylist);
          this->__isset.allowemptylist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allownullobjectid);
          this->__isset.allownullobjectid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isoidattribute);
          this->__isset.isoidattribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defaultvaluetype);
          this->__isset.defaultvaluetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultvalue.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->defaultvalue.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->defaultvalue[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.defaultvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defaultvalueobjecttype);
          this->__isset.defaultvalueobjecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->defaultvalueattrid);
          this->__isset.defaultvalueattrid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->storedefaultvalue);
          this->__isset.storedefaultvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isenum);
          this->__isset.isenum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isenumlist);
          this->__isset.isenumlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enummetadata.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->enummetadata.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += this->enummetadata[_i48].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.enummetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->conditiontype);
          this->__isset.conditiontype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->conditions.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->conditions.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->conditions[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.conditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->conditionslength);
          this->__isset.conditionslength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isconditional);
          this->__isset.isconditional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->validonlytype);
          this->__isset.validonlytype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->validonly.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->validonly.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += this->validonly[_i58].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.validonly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validonlylength);
          this->__isset.validonlylength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isvalidonly);
          this->__isset.isvalidonly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->getsave);
          this->__isset.getsave = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isvlan);
          this->__isset.isvlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isaclfield);
          this->__isset.isaclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isaclaction);
          this->__isset.isaclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isaclmask);
          this->__isset.isaclmask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ismandatoryoncreate);
          this->__isset.ismandatoryoncreate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->iscreateonly);
          this->__isset.iscreateonly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->iscreateandset);
          this->__isset.iscreateandset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isreadonly);
          this->__isset.isreadonly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->iskey);
          this->__isset.iskey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isprimitive);
          this->__isset.isprimitive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->notificationtype);
          this->__isset.notificationtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->iscallback);
          this->__isset.iscallback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pointertype);
          this->__isset.pointertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->capability.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _etype62;
            xfer += iprot->readListBegin(_etype62, _size59);
            this->capability.resize(_size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              xfer += this->capability[_i63].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.capability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->capabilitylength);
          this->__isset.capabilitylength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isextensionattr);
          this->__isset.isextensionattr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isresourcetype);
          this->__isset.isresourcetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isdeprecated);
          this->__isset.isdeprecated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attr_metadata_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attr_metadata_t");

  xfer += oprot->writeFieldBegin("objecttype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attrid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attridname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->attridname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("brief", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->brief);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrvaluetype", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->attrvaluetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedobjecttypes", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->allowedobjecttypes.size()));
    std::vector<sai_thrift_object_type_t> ::const_iterator _iter64;
    for (_iter64 = this->allowedobjecttypes.begin(); _iter64 != this->allowedobjecttypes.end(); ++_iter64)
    {
      xfer += oprot->writeI32((*_iter64));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedobjecttypeslength", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->allowedobjecttypeslength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowrepetitiononlist", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->allowrepetitiononlist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowmixedobjecttypes", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->allowmixedobjecttypes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowemptylist", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->allowemptylist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allownullobjectid", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->allownullobjectid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isoidattribute", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->isoidattribute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultvaluetype", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->defaultvaluetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultvalue", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultvalue.size()));
    std::vector<sai_thrift_attribute_value_t> ::const_iterator _iter65;
    for (_iter65 = this->defaultvalue.begin(); _iter65 != this->defaultvalue.end(); ++_iter65)
    {
      xfer += (*_iter65).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultvalueobjecttype", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->defaultvalueobjecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("defaultvalueattrid", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->defaultvalueattrid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("storedefaultvalue", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->storedefaultvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isenum", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->isenum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isenumlist", ::apache::thrift::protocol::T_BOOL, 20);
  xfer += oprot->writeBool(this->isenumlist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enummetadata", ::apache::thrift::protocol::T_LIST, 21);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->enummetadata.size()));
    std::vector<sai_thrift_enum_metadata_t> ::const_iterator _iter66;
    for (_iter66 = this->enummetadata.begin(); _iter66 != this->enummetadata.end(); ++_iter66)
    {
      xfer += (*_iter66).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conditiontype", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->conditiontype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conditions", ::apache::thrift::protocol::T_LIST, 23);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->conditions.size()));
    std::vector<sai_thrift_attr_condition_t> ::const_iterator _iter67;
    for (_iter67 = this->conditions.begin(); _iter67 != this->conditions.end(); ++_iter67)
    {
      xfer += (*_iter67).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conditionslength", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->conditionslength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isconditional", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->isconditional);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validonlytype", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->validonlytype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validonly", ::apache::thrift::protocol::T_LIST, 27);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->validonly.size()));
    std::vector<sai_thrift_attr_condition_t> ::const_iterator _iter68;
    for (_iter68 = this->validonly.begin(); _iter68 != this->validonly.end(); ++_iter68)
    {
      xfer += (*_iter68).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validonlylength", ::apache::thrift::protocol::T_I64, 28);
  xfer += oprot->writeI64(this->validonlylength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isvalidonly", ::apache::thrift::protocol::T_BOOL, 29);
  xfer += oprot->writeBool(this->isvalidonly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getsave", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->getsave);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isvlan", ::apache::thrift::protocol::T_BOOL, 31);
  xfer += oprot->writeBool(this->isvlan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isaclfield", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->isaclfield);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isaclaction", ::apache::thrift::protocol::T_BOOL, 33);
  xfer += oprot->writeBool(this->isaclaction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isaclmask", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->isaclmask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ismandatoryoncreate", ::apache::thrift::protocol::T_BOOL, 35);
  xfer += oprot->writeBool(this->ismandatoryoncreate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iscreateonly", ::apache::thrift::protocol::T_BOOL, 36);
  xfer += oprot->writeBool(this->iscreateonly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iscreateandset", ::apache::thrift::protocol::T_BOOL, 37);
  xfer += oprot->writeBool(this->iscreateandset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isreadonly", ::apache::thrift::protocol::T_BOOL, 38);
  xfer += oprot->writeBool(this->isreadonly);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iskey", ::apache::thrift::protocol::T_BOOL, 39);
  xfer += oprot->writeBool(this->iskey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isprimitive", ::apache::thrift::protocol::T_BOOL, 40);
  xfer += oprot->writeBool(this->isprimitive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notificationtype", ::apache::thrift::protocol::T_I32, 41);
  xfer += oprot->writeI32(this->notificationtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iscallback", ::apache::thrift::protocol::T_BOOL, 42);
  xfer += oprot->writeBool(this->iscallback);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointertype", ::apache::thrift::protocol::T_I32, 43);
  xfer += oprot->writeI32(this->pointertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capability", ::apache::thrift::protocol::T_LIST, 44);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->capability.size()));
    std::vector<sai_thrift_attr_capability_metadata_t> ::const_iterator _iter69;
    for (_iter69 = this->capability.begin(); _iter69 != this->capability.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capabilitylength", ::apache::thrift::protocol::T_I64, 45);
  xfer += oprot->writeI64(this->capabilitylength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isextensionattr", ::apache::thrift::protocol::T_BOOL, 46);
  xfer += oprot->writeBool(this->isextensionattr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isresourcetype", ::apache::thrift::protocol::T_BOOL, 47);
  xfer += oprot->writeBool(this->isresourcetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isdeprecated", ::apache::thrift::protocol::T_BOOL, 48);
  xfer += oprot->writeBool(this->isdeprecated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attr_metadata_t &a, sai_thrift_attr_metadata_t &b) {
  using ::std::swap;
  swap(a.objecttype, b.objecttype);
  swap(a.attrid, b.attrid);
  swap(a.attridname, b.attridname);
  swap(a.brief, b.brief);
  swap(a.attrvaluetype, b.attrvaluetype);
  swap(a.flags, b.flags);
  swap(a.allowedobjecttypes, b.allowedobjecttypes);
  swap(a.allowedobjecttypeslength, b.allowedobjecttypeslength);
  swap(a.allowrepetitiononlist, b.allowrepetitiononlist);
  swap(a.allowmixedobjecttypes, b.allowmixedobjecttypes);
  swap(a.allowemptylist, b.allowemptylist);
  swap(a.allownullobjectid, b.allownullobjectid);
  swap(a.isoidattribute, b.isoidattribute);
  swap(a.defaultvaluetype, b.defaultvaluetype);
  swap(a.defaultvalue, b.defaultvalue);
  swap(a.defaultvalueobjecttype, b.defaultvalueobjecttype);
  swap(a.defaultvalueattrid, b.defaultvalueattrid);
  swap(a.storedefaultvalue, b.storedefaultvalue);
  swap(a.isenum, b.isenum);
  swap(a.isenumlist, b.isenumlist);
  swap(a.enummetadata, b.enummetadata);
  swap(a.conditiontype, b.conditiontype);
  swap(a.conditions, b.conditions);
  swap(a.conditionslength, b.conditionslength);
  swap(a.isconditional, b.isconditional);
  swap(a.validonlytype, b.validonlytype);
  swap(a.validonly, b.validonly);
  swap(a.validonlylength, b.validonlylength);
  swap(a.isvalidonly, b.isvalidonly);
  swap(a.getsave, b.getsave);
  swap(a.isvlan, b.isvlan);
  swap(a.isaclfield, b.isaclfield);
  swap(a.isaclaction, b.isaclaction);
  swap(a.isaclmask, b.isaclmask);
  swap(a.ismandatoryoncreate, b.ismandatoryoncreate);
  swap(a.iscreateonly, b.iscreateonly);
  swap(a.iscreateandset, b.iscreateandset);
  swap(a.isreadonly, b.isreadonly);
  swap(a.iskey, b.iskey);
  swap(a.isprimitive, b.isprimitive);
  swap(a.notificationtype, b.notificationtype);
  swap(a.iscallback, b.iscallback);
  swap(a.pointertype, b.pointertype);
  swap(a.capability, b.capability);
  swap(a.capabilitylength, b.capabilitylength);
  swap(a.isextensionattr, b.isextensionattr);
  swap(a.isresourcetype, b.isresourcetype);
  swap(a.isdeprecated, b.isdeprecated);
  swap(a.__isset, b.__isset);
}

sai_thrift_attr_metadata_t::sai_thrift_attr_metadata_t(const sai_thrift_attr_metadata_t& other70) {
  objecttype = other70.objecttype;
  attrid = other70.attrid;
  attridname = other70.attridname;
  brief = other70.brief;
  attrvaluetype = other70.attrvaluetype;
  flags = other70.flags;
  allowedobjecttypes = other70.allowedobjecttypes;
  allowedobjecttypeslength = other70.allowedobjecttypeslength;
  allowrepetitiononlist = other70.allowrepetitiononlist;
  allowmixedobjecttypes = other70.allowmixedobjecttypes;
  allowemptylist = other70.allowemptylist;
  allownullobjectid = other70.allownullobjectid;
  isoidattribute = other70.isoidattribute;
  defaultvaluetype = other70.defaultvaluetype;
  defaultvalue = other70.defaultvalue;
  defaultvalueobjecttype = other70.defaultvalueobjecttype;
  defaultvalueattrid = other70.defaultvalueattrid;
  storedefaultvalue = other70.storedefaultvalue;
  isenum = other70.isenum;
  isenumlist = other70.isenumlist;
  enummetadata = other70.enummetadata;
  conditiontype = other70.conditiontype;
  conditions = other70.conditions;
  conditionslength = other70.conditionslength;
  isconditional = other70.isconditional;
  validonlytype = other70.validonlytype;
  validonly = other70.validonly;
  validonlylength = other70.validonlylength;
  isvalidonly = other70.isvalidonly;
  getsave = other70.getsave;
  isvlan = other70.isvlan;
  isaclfield = other70.isaclfield;
  isaclaction = other70.isaclaction;
  isaclmask = other70.isaclmask;
  ismandatoryoncreate = other70.ismandatoryoncreate;
  iscreateonly = other70.iscreateonly;
  iscreateandset = other70.iscreateandset;
  isreadonly = other70.isreadonly;
  iskey = other70.iskey;
  isprimitive = other70.isprimitive;
  notificationtype = other70.notificationtype;
  iscallback = other70.iscallback;
  pointertype = other70.pointertype;
  capability = other70.capability;
  capabilitylength = other70.capabilitylength;
  isextensionattr = other70.isextensionattr;
  isresourcetype = other70.isresourcetype;
  isdeprecated = other70.isdeprecated;
  __isset = other70.__isset;
}
sai_thrift_attr_metadata_t& sai_thrift_attr_metadata_t::operator=(const sai_thrift_attr_metadata_t& other71) {
  objecttype = other71.objecttype;
  attrid = other71.attrid;
  attridname = other71.attridname;
  brief = other71.brief;
  attrvaluetype = other71.attrvaluetype;
  flags = other71.flags;
  allowedobjecttypes = other71.allowedobjecttypes;
  allowedobjecttypeslength = other71.allowedobjecttypeslength;
  allowrepetitiononlist = other71.allowrepetitiononlist;
  allowmixedobjecttypes = other71.allowmixedobjecttypes;
  allowemptylist = other71.allowemptylist;
  allownullobjectid = other71.allownullobjectid;
  isoidattribute = other71.isoidattribute;
  defaultvaluetype = other71.defaultvaluetype;
  defaultvalue = other71.defaultvalue;
  defaultvalueobjecttype = other71.defaultvalueobjecttype;
  defaultvalueattrid = other71.defaultvalueattrid;
  storedefaultvalue = other71.storedefaultvalue;
  isenum = other71.isenum;
  isenumlist = other71.isenumlist;
  enummetadata = other71.enummetadata;
  conditiontype = other71.conditiontype;
  conditions = other71.conditions;
  conditionslength = other71.conditionslength;
  isconditional = other71.isconditional;
  validonlytype = other71.validonlytype;
  validonly = other71.validonly;
  validonlylength = other71.validonlylength;
  isvalidonly = other71.isvalidonly;
  getsave = other71.getsave;
  isvlan = other71.isvlan;
  isaclfield = other71.isaclfield;
  isaclaction = other71.isaclaction;
  isaclmask = other71.isaclmask;
  ismandatoryoncreate = other71.ismandatoryoncreate;
  iscreateonly = other71.iscreateonly;
  iscreateandset = other71.iscreateandset;
  isreadonly = other71.isreadonly;
  iskey = other71.iskey;
  isprimitive = other71.isprimitive;
  notificationtype = other71.notificationtype;
  iscallback = other71.iscallback;
  pointertype = other71.pointertype;
  capability = other71.capability;
  capabilitylength = other71.capabilitylength;
  isextensionattr = other71.isextensionattr;
  isresourcetype = other71.isresourcetype;
  isdeprecated = other71.isdeprecated;
  __isset = other71.__isset;
  return *this;
}
void sai_thrift_attr_metadata_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attr_metadata_t(";
  out << "objecttype=" << to_string(objecttype);
  out << ", " << "attrid=" << to_string(attrid);
  out << ", " << "attridname=" << to_string(attridname);
  out << ", " << "brief=" << to_string(brief);
  out << ", " << "attrvaluetype=" << to_string(attrvaluetype);
  out << ", " << "flags=" << to_string(flags);
  out << ", " << "allowedobjecttypes=" << to_string(allowedobjecttypes);
  out << ", " << "allowedobjecttypeslength=" << to_string(allowedobjecttypeslength);
  out << ", " << "allowrepetitiononlist=" << to_string(allowrepetitiononlist);
  out << ", " << "allowmixedobjecttypes=" << to_string(allowmixedobjecttypes);
  out << ", " << "allowemptylist=" << to_string(allowemptylist);
  out << ", " << "allownullobjectid=" << to_string(allownullobjectid);
  out << ", " << "isoidattribute=" << to_string(isoidattribute);
  out << ", " << "defaultvaluetype=" << to_string(defaultvaluetype);
  out << ", " << "defaultvalue=" << to_string(defaultvalue);
  out << ", " << "defaultvalueobjecttype=" << to_string(defaultvalueobjecttype);
  out << ", " << "defaultvalueattrid=" << to_string(defaultvalueattrid);
  out << ", " << "storedefaultvalue=" << to_string(storedefaultvalue);
  out << ", " << "isenum=" << to_string(isenum);
  out << ", " << "isenumlist=" << to_string(isenumlist);
  out << ", " << "enummetadata=" << to_string(enummetadata);
  out << ", " << "conditiontype=" << to_string(conditiontype);
  out << ", " << "conditions=" << to_string(conditions);
  out << ", " << "conditionslength=" << to_string(conditionslength);
  out << ", " << "isconditional=" << to_string(isconditional);
  out << ", " << "validonlytype=" << to_string(validonlytype);
  out << ", " << "validonly=" << to_string(validonly);
  out << ", " << "validonlylength=" << to_string(validonlylength);
  out << ", " << "isvalidonly=" << to_string(isvalidonly);
  out << ", " << "getsave=" << to_string(getsave);
  out << ", " << "isvlan=" << to_string(isvlan);
  out << ", " << "isaclfield=" << to_string(isaclfield);
  out << ", " << "isaclaction=" << to_string(isaclaction);
  out << ", " << "isaclmask=" << to_string(isaclmask);
  out << ", " << "ismandatoryoncreate=" << to_string(ismandatoryoncreate);
  out << ", " << "iscreateonly=" << to_string(iscreateonly);
  out << ", " << "iscreateandset=" << to_string(iscreateandset);
  out << ", " << "isreadonly=" << to_string(isreadonly);
  out << ", " << "iskey=" << to_string(iskey);
  out << ", " << "isprimitive=" << to_string(isprimitive);
  out << ", " << "notificationtype=" << to_string(notificationtype);
  out << ", " << "iscallback=" << to_string(iscallback);
  out << ", " << "pointertype=" << to_string(pointertype);
  out << ", " << "capability=" << to_string(capability);
  out << ", " << "capabilitylength=" << to_string(capabilitylength);
  out << ", " << "isextensionattr=" << to_string(isextensionattr);
  out << ", " << "isresourcetype=" << to_string(isresourcetype);
  out << ", " << "isdeprecated=" << to_string(isdeprecated);
  out << ")";
}


sai_thrift_struct_member_info_t::~sai_thrift_struct_member_info_t() throw() {
}


void sai_thrift_struct_member_info_t::__set_membervaluetype(const sai_thrift_attr_value_type_t val) {
  this->membervaluetype = val;
}

void sai_thrift_struct_member_info_t::__set_membername(const std::string& val) {
  this->membername = val;
}

void sai_thrift_struct_member_info_t::__set_isvlan(const bool val) {
  this->isvlan = val;
}

void sai_thrift_struct_member_info_t::__set_allowedobjecttypes(const std::vector<sai_thrift_object_type_t> & val) {
  this->allowedobjecttypes = val;
}

void sai_thrift_struct_member_info_t::__set_allowedobjecttypeslength(const sai_thrift_size_t val) {
  this->allowedobjecttypeslength = val;
}

void sai_thrift_struct_member_info_t::__set_isenum(const bool val) {
  this->isenum = val;
}

void sai_thrift_struct_member_info_t::__set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val) {
  this->enummetadata = val;
}

void sai_thrift_struct_member_info_t::__set_getoid(const sai_thrift_pointer_t val) {
  this->getoid = val;
}

void sai_thrift_struct_member_info_t::__set_setoid(const sai_thrift_pointer_t val) {
  this->setoid = val;
}

void sai_thrift_struct_member_info_t::__set_offset(const sai_thrift_size_t val) {
  this->offset = val;
}

void sai_thrift_struct_member_info_t::__set_size(const sai_thrift_size_t val) {
  this->size = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_struct_member_info_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_struct_member_info_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->membervaluetype);
          this->__isset.membervaluetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->membername);
          this->__isset.membername = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isvlan);
          this->__isset.isvlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->allowedobjecttypes.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->allowedobjecttypes.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += iprot->readI32(this->allowedobjecttypes[_i76]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.allowedobjecttypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->allowedobjecttypeslength);
          this->__isset.allowedobjecttypeslength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isenum);
          this->__isset.isenum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enummetadata.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->enummetadata.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += this->enummetadata[_i81].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.enummetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->getoid);
          this->__isset.getoid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->setoid);
          this->__isset.setoid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_struct_member_info_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_struct_member_info_t");

  xfer += oprot->writeFieldBegin("membervaluetype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->membervaluetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("membername", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->membername);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isvlan", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->isvlan);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedobjecttypes", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->allowedobjecttypes.size()));
    std::vector<sai_thrift_object_type_t> ::const_iterator _iter82;
    for (_iter82 = this->allowedobjecttypes.begin(); _iter82 != this->allowedobjecttypes.end(); ++_iter82)
    {
      xfer += oprot->writeI32((*_iter82));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allowedobjecttypeslength", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->allowedobjecttypeslength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isenum", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->isenum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enummetadata", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->enummetadata.size()));
    std::vector<sai_thrift_enum_metadata_t> ::const_iterator _iter83;
    for (_iter83 = this->enummetadata.begin(); _iter83 != this->enummetadata.end(); ++_iter83)
    {
      xfer += (*_iter83).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getoid", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->getoid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("setoid", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->setoid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_struct_member_info_t &a, sai_thrift_struct_member_info_t &b) {
  using ::std::swap;
  swap(a.membervaluetype, b.membervaluetype);
  swap(a.membername, b.membername);
  swap(a.isvlan, b.isvlan);
  swap(a.allowedobjecttypes, b.allowedobjecttypes);
  swap(a.allowedobjecttypeslength, b.allowedobjecttypeslength);
  swap(a.isenum, b.isenum);
  swap(a.enummetadata, b.enummetadata);
  swap(a.getoid, b.getoid);
  swap(a.setoid, b.setoid);
  swap(a.offset, b.offset);
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

sai_thrift_struct_member_info_t::sai_thrift_struct_member_info_t(const sai_thrift_struct_member_info_t& other84) {
  membervaluetype = other84.membervaluetype;
  membername = other84.membername;
  isvlan = other84.isvlan;
  allowedobjecttypes = other84.allowedobjecttypes;
  allowedobjecttypeslength = other84.allowedobjecttypeslength;
  isenum = other84.isenum;
  enummetadata = other84.enummetadata;
  getoid = other84.getoid;
  setoid = other84.setoid;
  offset = other84.offset;
  size = other84.size;
  __isset = other84.__isset;
}
sai_thrift_struct_member_info_t& sai_thrift_struct_member_info_t::operator=(const sai_thrift_struct_member_info_t& other85) {
  membervaluetype = other85.membervaluetype;
  membername = other85.membername;
  isvlan = other85.isvlan;
  allowedobjecttypes = other85.allowedobjecttypes;
  allowedobjecttypeslength = other85.allowedobjecttypeslength;
  isenum = other85.isenum;
  enummetadata = other85.enummetadata;
  getoid = other85.getoid;
  setoid = other85.setoid;
  offset = other85.offset;
  size = other85.size;
  __isset = other85.__isset;
  return *this;
}
void sai_thrift_struct_member_info_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_struct_member_info_t(";
  out << "membervaluetype=" << to_string(membervaluetype);
  out << ", " << "membername=" << to_string(membername);
  out << ", " << "isvlan=" << to_string(isvlan);
  out << ", " << "allowedobjecttypes=" << to_string(allowedobjecttypes);
  out << ", " << "allowedobjecttypeslength=" << to_string(allowedobjecttypeslength);
  out << ", " << "isenum=" << to_string(isenum);
  out << ", " << "enummetadata=" << to_string(enummetadata);
  out << ", " << "getoid=" << to_string(getoid);
  out << ", " << "setoid=" << to_string(setoid);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "size=" << to_string(size);
  out << ")";
}


sai_thrift_rev_graph_member_t::~sai_thrift_rev_graph_member_t() throw() {
}


void sai_thrift_rev_graph_member_t::__set_objecttype(const sai_thrift_object_type_t val) {
  this->objecttype = val;
}

void sai_thrift_rev_graph_member_t::__set_depobjecttype(const sai_thrift_object_type_t val) {
  this->depobjecttype = val;
}

void sai_thrift_rev_graph_member_t::__set_attrmetadata(const std::vector<sai_thrift_attr_metadata_t> & val) {
  this->attrmetadata = val;
}

void sai_thrift_rev_graph_member_t::__set_structmember(const std::vector<sai_thrift_struct_member_info_t> & val) {
  this->structmember = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_rev_graph_member_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_rev_graph_member_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->objecttype);
          this->__isset.objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depobjecttype);
          this->__isset.depobjecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrmetadata.clear();
            uint32_t _size86;
            ::apache::thrift::protocol::TType _etype89;
            xfer += iprot->readListBegin(_etype89, _size86);
            this->attrmetadata.resize(_size86);
            uint32_t _i90;
            for (_i90 = 0; _i90 < _size86; ++_i90)
            {
              xfer += this->attrmetadata[_i90].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attrmetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->structmember.clear();
            uint32_t _size91;
            ::apache::thrift::protocol::TType _etype94;
            xfer += iprot->readListBegin(_etype94, _size91);
            this->structmember.resize(_size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              xfer += this->structmember[_i95].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.structmember = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_rev_graph_member_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_rev_graph_member_t");

  xfer += oprot->writeFieldBegin("objecttype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depobjecttype", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->depobjecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrmetadata", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attrmetadata.size()));
    std::vector<sai_thrift_attr_metadata_t> ::const_iterator _iter96;
    for (_iter96 = this->attrmetadata.begin(); _iter96 != this->attrmetadata.end(); ++_iter96)
    {
      xfer += (*_iter96).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("structmember", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->structmember.size()));
    std::vector<sai_thrift_struct_member_info_t> ::const_iterator _iter97;
    for (_iter97 = this->structmember.begin(); _iter97 != this->structmember.end(); ++_iter97)
    {
      xfer += (*_iter97).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_rev_graph_member_t &a, sai_thrift_rev_graph_member_t &b) {
  using ::std::swap;
  swap(a.objecttype, b.objecttype);
  swap(a.depobjecttype, b.depobjecttype);
  swap(a.attrmetadata, b.attrmetadata);
  swap(a.structmember, b.structmember);
  swap(a.__isset, b.__isset);
}

sai_thrift_rev_graph_member_t::sai_thrift_rev_graph_member_t(const sai_thrift_rev_graph_member_t& other98) {
  objecttype = other98.objecttype;
  depobjecttype = other98.depobjecttype;
  attrmetadata = other98.attrmetadata;
  structmember = other98.structmember;
  __isset = other98.__isset;
}
sai_thrift_rev_graph_member_t& sai_thrift_rev_graph_member_t::operator=(const sai_thrift_rev_graph_member_t& other99) {
  objecttype = other99.objecttype;
  depobjecttype = other99.depobjecttype;
  attrmetadata = other99.attrmetadata;
  structmember = other99.structmember;
  __isset = other99.__isset;
  return *this;
}
void sai_thrift_rev_graph_member_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_rev_graph_member_t(";
  out << "objecttype=" << to_string(objecttype);
  out << ", " << "depobjecttype=" << to_string(depobjecttype);
  out << ", " << "attrmetadata=" << to_string(attrmetadata);
  out << ", " << "structmember=" << to_string(structmember);
  out << ")";
}


sai_thrift_object_type_info_t::~sai_thrift_object_type_info_t() throw() {
}


void sai_thrift_object_type_info_t::__set_objecttype(const sai_thrift_object_type_t val) {
  this->objecttype = val;
}

void sai_thrift_object_type_info_t::__set_objecttypename(const std::string& val) {
  this->objecttypename = val;
}

void sai_thrift_object_type_info_t::__set_attridstart(const sai_thrift_attr_id_t val) {
  this->attridstart = val;
}

void sai_thrift_object_type_info_t::__set_attridend(const sai_thrift_attr_id_t val) {
  this->attridend = val;
}

void sai_thrift_object_type_info_t::__set_enummetadata(const std::vector<sai_thrift_enum_metadata_t> & val) {
  this->enummetadata = val;
}

void sai_thrift_object_type_info_t::__set_attrmetadata(const std::vector<sai_thrift_attr_metadata_t> & val) {
  this->attrmetadata = val;
}

void sai_thrift_object_type_info_t::__set_attrmetadatalength(const sai_thrift_size_t val) {
  this->attrmetadatalength = val;
}

void sai_thrift_object_type_info_t::__set_isnonobjectid(const bool val) {
  this->isnonobjectid = val;
}

void sai_thrift_object_type_info_t::__set_isobjectid(const bool val) {
  this->isobjectid = val;
}

void sai_thrift_object_type_info_t::__set_structmembers(const std::vector<sai_thrift_struct_member_info_t> & val) {
  this->structmembers = val;
}

void sai_thrift_object_type_info_t::__set_structmemberscount(const sai_thrift_size_t val) {
  this->structmemberscount = val;
}

void sai_thrift_object_type_info_t::__set_revgraphmembers(const std::vector<sai_thrift_rev_graph_member_t> & val) {
  this->revgraphmembers = val;
}

void sai_thrift_object_type_info_t::__set_revgraphmemberscount(const sai_thrift_size_t val) {
  this->revgraphmemberscount = val;
}

void sai_thrift_object_type_info_t::__set_create(const sai_thrift_pointer_t val) {
  this->create = val;
}

void sai_thrift_object_type_info_t::__set_remove(const sai_thrift_pointer_t val) {
  this->remove = val;
}

void sai_thrift_object_type_info_t::__set_fnset(const sai_thrift_pointer_t val) {
  this->fnset = val;
}

void sai_thrift_object_type_info_t::__set_fnget(const sai_thrift_pointer_t val) {
  this->fnget = val;
}

void sai_thrift_object_type_info_t::__set_getstats(const sai_thrift_pointer_t val) {
  this->getstats = val;
}

void sai_thrift_object_type_info_t::__set_getstatsext(const sai_thrift_pointer_t val) {
  this->getstatsext = val;
}

void sai_thrift_object_type_info_t::__set_clearstats(const sai_thrift_pointer_t val) {
  this->clearstats = val;
}

void sai_thrift_object_type_info_t::__set_isexperimental(const bool val) {
  this->isexperimental = val;
}

void sai_thrift_object_type_info_t::__set_statenum(const std::vector<sai_thrift_enum_metadata_t> & val) {
  this->statenum = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_type_info_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_type_info_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->objecttype);
          this->__isset.objecttype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->objecttypename);
          this->__isset.objecttypename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attridstart);
          this->__isset.attridstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attridend);
          this->__isset.attridend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->enummetadata.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->enummetadata.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += this->enummetadata[_i104].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.enummetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrmetadata.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->attrmetadata.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->attrmetadata[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attrmetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->attrmetadatalength);
          this->__isset.attrmetadatalength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isnonobjectid);
          this->__isset.isnonobjectid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isobjectid);
          this->__isset.isobjectid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->structmembers.clear();
            uint32_t _size110;
            ::apache::thrift::protocol::TType _etype113;
            xfer += iprot->readListBegin(_etype113, _size110);
            this->structmembers.resize(_size110);
            uint32_t _i114;
            for (_i114 = 0; _i114 < _size110; ++_i114)
            {
              xfer += this->structmembers[_i114].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.structmembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->structmemberscount);
          this->__isset.structmemberscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->revgraphmembers.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->revgraphmembers.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += this->revgraphmembers[_i119].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.revgraphmembers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->revgraphmemberscount);
          this->__isset.revgraphmemberscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create);
          this->__isset.create = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->remove);
          this->__isset.remove = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fnset);
          this->__isset.fnset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fnget);
          this->__isset.fnget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->getstats);
          this->__isset.getstats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->getstatsext);
          this->__isset.getstatsext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->clearstats);
          this->__isset.clearstats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isexperimental);
          this->__isset.isexperimental = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statenum.clear();
            uint32_t _size120;
            ::apache::thrift::protocol::TType _etype123;
            xfer += iprot->readListBegin(_etype123, _size120);
            this->statenum.resize(_size120);
            uint32_t _i124;
            for (_i124 = 0; _i124 < _size120; ++_i124)
            {
              xfer += this->statenum[_i124].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.statenum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_type_info_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_type_info_t");

  xfer += oprot->writeFieldBegin("objecttype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->objecttype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objecttypename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->objecttypename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attridstart", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->attridstart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attridend", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->attridend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enummetadata", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->enummetadata.size()));
    std::vector<sai_thrift_enum_metadata_t> ::const_iterator _iter125;
    for (_iter125 = this->enummetadata.begin(); _iter125 != this->enummetadata.end(); ++_iter125)
    {
      xfer += (*_iter125).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrmetadata", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attrmetadata.size()));
    std::vector<sai_thrift_attr_metadata_t> ::const_iterator _iter126;
    for (_iter126 = this->attrmetadata.begin(); _iter126 != this->attrmetadata.end(); ++_iter126)
    {
      xfer += (*_iter126).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attrmetadatalength", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->attrmetadatalength);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isnonobjectid", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isnonobjectid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isobjectid", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isobjectid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("structmembers", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->structmembers.size()));
    std::vector<sai_thrift_struct_member_info_t> ::const_iterator _iter127;
    for (_iter127 = this->structmembers.begin(); _iter127 != this->structmembers.end(); ++_iter127)
    {
      xfer += (*_iter127).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("structmemberscount", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->structmemberscount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revgraphmembers", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->revgraphmembers.size()));
    std::vector<sai_thrift_rev_graph_member_t> ::const_iterator _iter128;
    for (_iter128 = this->revgraphmembers.begin(); _iter128 != this->revgraphmembers.end(); ++_iter128)
    {
      xfer += (*_iter128).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("revgraphmemberscount", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->revgraphmemberscount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->create);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("remove", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->remove);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fnset", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->fnset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fnget", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->fnget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getstats", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->getstats);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("getstatsext", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->getstatsext);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clearstats", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->clearstats);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isexperimental", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->isexperimental);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statenum", ::apache::thrift::protocol::T_LIST, 22);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statenum.size()));
    std::vector<sai_thrift_enum_metadata_t> ::const_iterator _iter129;
    for (_iter129 = this->statenum.begin(); _iter129 != this->statenum.end(); ++_iter129)
    {
      xfer += (*_iter129).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_type_info_t &a, sai_thrift_object_type_info_t &b) {
  using ::std::swap;
  swap(a.objecttype, b.objecttype);
  swap(a.objecttypename, b.objecttypename);
  swap(a.attridstart, b.attridstart);
  swap(a.attridend, b.attridend);
  swap(a.enummetadata, b.enummetadata);
  swap(a.attrmetadata, b.attrmetadata);
  swap(a.attrmetadatalength, b.attrmetadatalength);
  swap(a.isnonobjectid, b.isnonobjectid);
  swap(a.isobjectid, b.isobjectid);
  swap(a.structmembers, b.structmembers);
  swap(a.structmemberscount, b.structmemberscount);
  swap(a.revgraphmembers, b.revgraphmembers);
  swap(a.revgraphmemberscount, b.revgraphmemberscount);
  swap(a.create, b.create);
  swap(a.remove, b.remove);
  swap(a.fnset, b.fnset);
  swap(a.fnget, b.fnget);
  swap(a.getstats, b.getstats);
  swap(a.getstatsext, b.getstatsext);
  swap(a.clearstats, b.clearstats);
  swap(a.isexperimental, b.isexperimental);
  swap(a.statenum, b.statenum);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_type_info_t::sai_thrift_object_type_info_t(const sai_thrift_object_type_info_t& other130) {
  objecttype = other130.objecttype;
  objecttypename = other130.objecttypename;
  attridstart = other130.attridstart;
  attridend = other130.attridend;
  enummetadata = other130.enummetadata;
  attrmetadata = other130.attrmetadata;
  attrmetadatalength = other130.attrmetadatalength;
  isnonobjectid = other130.isnonobjectid;
  isobjectid = other130.isobjectid;
  structmembers = other130.structmembers;
  structmemberscount = other130.structmemberscount;
  revgraphmembers = other130.revgraphmembers;
  revgraphmemberscount = other130.revgraphmemberscount;
  create = other130.create;
  remove = other130.remove;
  fnset = other130.fnset;
  fnget = other130.fnget;
  getstats = other130.getstats;
  getstatsext = other130.getstatsext;
  clearstats = other130.clearstats;
  isexperimental = other130.isexperimental;
  statenum = other130.statenum;
  __isset = other130.__isset;
}
sai_thrift_object_type_info_t& sai_thrift_object_type_info_t::operator=(const sai_thrift_object_type_info_t& other131) {
  objecttype = other131.objecttype;
  objecttypename = other131.objecttypename;
  attridstart = other131.attridstart;
  attridend = other131.attridend;
  enummetadata = other131.enummetadata;
  attrmetadata = other131.attrmetadata;
  attrmetadatalength = other131.attrmetadatalength;
  isnonobjectid = other131.isnonobjectid;
  isobjectid = other131.isobjectid;
  structmembers = other131.structmembers;
  structmemberscount = other131.structmemberscount;
  revgraphmembers = other131.revgraphmembers;
  revgraphmemberscount = other131.revgraphmemberscount;
  create = other131.create;
  remove = other131.remove;
  fnset = other131.fnset;
  fnget = other131.fnget;
  getstats = other131.getstats;
  getstatsext = other131.getstatsext;
  clearstats = other131.clearstats;
  isexperimental = other131.isexperimental;
  statenum = other131.statenum;
  __isset = other131.__isset;
  return *this;
}
void sai_thrift_object_type_info_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_type_info_t(";
  out << "objecttype=" << to_string(objecttype);
  out << ", " << "objecttypename=" << to_string(objecttypename);
  out << ", " << "attridstart=" << to_string(attridstart);
  out << ", " << "attridend=" << to_string(attridend);
  out << ", " << "enummetadata=" << to_string(enummetadata);
  out << ", " << "attrmetadata=" << to_string(attrmetadata);
  out << ", " << "attrmetadatalength=" << to_string(attrmetadatalength);
  out << ", " << "isnonobjectid=" << to_string(isnonobjectid);
  out << ", " << "isobjectid=" << to_string(isobjectid);
  out << ", " << "structmembers=" << to_string(structmembers);
  out << ", " << "structmemberscount=" << to_string(structmemberscount);
  out << ", " << "revgraphmembers=" << to_string(revgraphmembers);
  out << ", " << "revgraphmemberscount=" << to_string(revgraphmemberscount);
  out << ", " << "create=" << to_string(create);
  out << ", " << "remove=" << to_string(remove);
  out << ", " << "fnset=" << to_string(fnset);
  out << ", " << "fnget=" << to_string(fnget);
  out << ", " << "getstats=" << to_string(getstats);
  out << ", " << "getstatsext=" << to_string(getstatsext);
  out << ", " << "clearstats=" << to_string(clearstats);
  out << ", " << "isexperimental=" << to_string(isexperimental);
  out << ", " << "statenum=" << to_string(statenum);
  out << ")";
}


sai_thrift_timespec_t::~sai_thrift_timespec_t() throw() {
}


void sai_thrift_timespec_t::__set_tv_sec(const sai_thrift_uint64_t val) {
  this->tv_sec = val;
}

void sai_thrift_timespec_t::__set_tv_nsec(const sai_thrift_uint32_t val) {
  this->tv_nsec = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_timespec_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_timespec_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_sec);
          this->__isset.tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tv_nsec);
          this->__isset.tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_timespec_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_timespec_t");

  xfer += oprot->writeFieldBegin("tv_sec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tv_nsec", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_timespec_t &a, sai_thrift_timespec_t &b) {
  using ::std::swap;
  swap(a.tv_sec, b.tv_sec);
  swap(a.tv_nsec, b.tv_nsec);
  swap(a.__isset, b.__isset);
}

sai_thrift_timespec_t::sai_thrift_timespec_t(const sai_thrift_timespec_t& other132) {
  tv_sec = other132.tv_sec;
  tv_nsec = other132.tv_nsec;
  __isset = other132.__isset;
}
sai_thrift_timespec_t& sai_thrift_timespec_t::operator=(const sai_thrift_timespec_t& other133) {
  tv_sec = other133.tv_sec;
  tv_nsec = other133.tv_nsec;
  __isset = other133.__isset;
  return *this;
}
void sai_thrift_timespec_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_timespec_t(";
  out << "tv_sec=" << to_string(tv_sec);
  out << ", " << "tv_nsec=" << to_string(tv_nsec);
  out << ")";
}


sai_thrift_object_list_t::~sai_thrift_object_list_t() throw() {
}


void sai_thrift_object_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_object_list_t::__set_idlist(const std::vector<sai_thrift_object_id_t> & val) {
  this->idlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_object_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->idlist.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _etype137;
            xfer += iprot->readListBegin(_etype137, _size134);
            this->idlist.resize(_size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              xfer += iprot->readI64(this->idlist[_i138]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.idlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_object_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->idlist.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter139;
    for (_iter139 = this->idlist.begin(); _iter139 != this->idlist.end(); ++_iter139)
    {
      xfer += oprot->writeI64((*_iter139));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.idlist, b.idlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_list_t::sai_thrift_object_list_t(const sai_thrift_object_list_t& other140) {
  count = other140.count;
  idlist = other140.idlist;
  __isset = other140.__isset;
}
sai_thrift_object_list_t& sai_thrift_object_list_t::operator=(const sai_thrift_object_list_t& other141) {
  count = other141.count;
  idlist = other141.idlist;
  __isset = other141.__isset;
  return *this;
}
void sai_thrift_object_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_object_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "idlist=" << to_string(idlist);
  out << ")";
}


sai_thrift_u8_list_t::~sai_thrift_u8_list_t() throw() {
}


void sai_thrift_u8_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_u8_list_t::__set_uint8list(const std::vector<sai_thrift_uint8_t> & val) {
  this->uint8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u8_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uint8list.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->uint8list.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += iprot->readByte(this->uint8list[_i146]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.uint8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uint8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->uint8list.size()));
    std::vector<sai_thrift_uint8_t> ::const_iterator _iter147;
    for (_iter147 = this->uint8list.begin(); _iter147 != this->uint8list.end(); ++_iter147)
    {
      xfer += oprot->writeByte((*_iter147));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u8_list_t &a, sai_thrift_u8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.uint8list, b.uint8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u8_list_t::sai_thrift_u8_list_t(const sai_thrift_u8_list_t& other148) {
  count = other148.count;
  uint8list = other148.uint8list;
  __isset = other148.__isset;
}
sai_thrift_u8_list_t& sai_thrift_u8_list_t::operator=(const sai_thrift_u8_list_t& other149) {
  count = other149.count;
  uint8list = other149.uint8list;
  __isset = other149.__isset;
  return *this;
}
void sai_thrift_u8_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u8_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "uint8list=" << to_string(uint8list);
  out << ")";
}


sai_thrift_s8_list_t::~sai_thrift_s8_list_t() throw() {
}


void sai_thrift_s8_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_s8_list_t::__set_int8list(const std::vector<sai_thrift_int8_t> & val) {
  this->int8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s8_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int8list.clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            this->int8list.resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += iprot->readByte(this->int8list[_i154]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->int8list.size()));
    std::vector<sai_thrift_int8_t> ::const_iterator _iter155;
    for (_iter155 = this->int8list.begin(); _iter155 != this->int8list.end(); ++_iter155)
    {
      xfer += oprot->writeByte((*_iter155));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s8_list_t &a, sai_thrift_s8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.int8list, b.int8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s8_list_t::sai_thrift_s8_list_t(const sai_thrift_s8_list_t& other156) {
  count = other156.count;
  int8list = other156.int8list;
  __isset = other156.__isset;
}
sai_thrift_s8_list_t& sai_thrift_s8_list_t::operator=(const sai_thrift_s8_list_t& other157) {
  count = other157.count;
  int8list = other157.int8list;
  __isset = other157.__isset;
  return *this;
}
void sai_thrift_s8_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s8_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "int8list=" << to_string(int8list);
  out << ")";
}


sai_thrift_u16_list_t::~sai_thrift_u16_list_t() throw() {
}


void sai_thrift_u16_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_u16_list_t::__set_uint16list(const std::vector<sai_thrift_uint16_t> & val) {
  this->uint16list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u16_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uint16list.clear();
            uint32_t _size158;
            ::apache::thrift::protocol::TType _etype161;
            xfer += iprot->readListBegin(_etype161, _size158);
            this->uint16list.resize(_size158);
            uint32_t _i162;
            for (_i162 = 0; _i162 < _size158; ++_i162)
            {
              xfer += iprot->readI16(this->uint16list[_i162]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.uint16list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u16_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u16_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uint16list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->uint16list.size()));
    std::vector<sai_thrift_uint16_t> ::const_iterator _iter163;
    for (_iter163 = this->uint16list.begin(); _iter163 != this->uint16list.end(); ++_iter163)
    {
      xfer += oprot->writeI16((*_iter163));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u16_list_t &a, sai_thrift_u16_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.uint16list, b.uint16list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u16_list_t::sai_thrift_u16_list_t(const sai_thrift_u16_list_t& other164) {
  count = other164.count;
  uint16list = other164.uint16list;
  __isset = other164.__isset;
}
sai_thrift_u16_list_t& sai_thrift_u16_list_t::operator=(const sai_thrift_u16_list_t& other165) {
  count = other165.count;
  uint16list = other165.uint16list;
  __isset = other165.__isset;
  return *this;
}
void sai_thrift_u16_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u16_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "uint16list=" << to_string(uint16list);
  out << ")";
}


sai_thrift_s16_list_t::~sai_thrift_s16_list_t() throw() {
}


void sai_thrift_s16_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_s16_list_t::__set_int16list(const std::vector<sai_thrift_int16_t> & val) {
  this->int16list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s16_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s16_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int16list.clear();
            uint32_t _size166;
            ::apache::thrift::protocol::TType _etype169;
            xfer += iprot->readListBegin(_etype169, _size166);
            this->int16list.resize(_size166);
            uint32_t _i170;
            for (_i170 = 0; _i170 < _size166; ++_i170)
            {
              xfer += iprot->readI16(this->int16list[_i170]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int16list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s16_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s16_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int16list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->int16list.size()));
    std::vector<sai_thrift_int16_t> ::const_iterator _iter171;
    for (_iter171 = this->int16list.begin(); _iter171 != this->int16list.end(); ++_iter171)
    {
      xfer += oprot->writeI16((*_iter171));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s16_list_t &a, sai_thrift_s16_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.int16list, b.int16list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s16_list_t::sai_thrift_s16_list_t(const sai_thrift_s16_list_t& other172) {
  count = other172.count;
  int16list = other172.int16list;
  __isset = other172.__isset;
}
sai_thrift_s16_list_t& sai_thrift_s16_list_t::operator=(const sai_thrift_s16_list_t& other173) {
  count = other173.count;
  int16list = other173.int16list;
  __isset = other173.__isset;
  return *this;
}
void sai_thrift_s16_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s16_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "int16list=" << to_string(int16list);
  out << ")";
}


sai_thrift_u32_list_t::~sai_thrift_u32_list_t() throw() {
}


void sai_thrift_u32_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_u32_list_t::__set_uint32list(const std::vector<sai_thrift_uint32_t> & val) {
  this->uint32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uint32list.clear();
            uint32_t _size174;
            ::apache::thrift::protocol::TType _etype177;
            xfer += iprot->readListBegin(_etype177, _size174);
            this->uint32list.resize(_size174);
            uint32_t _i178;
            for (_i178 = 0; _i178 < _size174; ++_i178)
            {
              xfer += iprot->readI32(this->uint32list[_i178]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.uint32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uint32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->uint32list.size()));
    std::vector<sai_thrift_uint32_t> ::const_iterator _iter179;
    for (_iter179 = this->uint32list.begin(); _iter179 != this->uint32list.end(); ++_iter179)
    {
      xfer += oprot->writeI32((*_iter179));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.uint32list, b.uint32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_list_t::sai_thrift_u32_list_t(const sai_thrift_u32_list_t& other180) {
  count = other180.count;
  uint32list = other180.uint32list;
  __isset = other180.__isset;
}
sai_thrift_u32_list_t& sai_thrift_u32_list_t::operator=(const sai_thrift_u32_list_t& other181) {
  count = other181.count;
  uint32list = other181.uint32list;
  __isset = other181.__isset;
  return *this;
}
void sai_thrift_u32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "uint32list=" << to_string(uint32list);
  out << ")";
}


sai_thrift_s32_list_t::~sai_thrift_s32_list_t() throw() {
}


void sai_thrift_s32_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_s32_list_t::__set_int32list(const std::vector<sai_thrift_int32_t> & val) {
  this->int32list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int32list.clear();
            uint32_t _size182;
            ::apache::thrift::protocol::TType _etype185;
            xfer += iprot->readListBegin(_etype185, _size182);
            this->int32list.resize(_size182);
            uint32_t _i186;
            for (_i186 = 0; _i186 < _size182; ++_i186)
            {
              xfer += iprot->readI32(this->int32list[_i186]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->int32list.size()));
    std::vector<sai_thrift_int32_t> ::const_iterator _iter187;
    for (_iter187 = this->int32list.begin(); _iter187 != this->int32list.end(); ++_iter187)
    {
      xfer += oprot->writeI32((*_iter187));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.int32list, b.int32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s32_list_t::sai_thrift_s32_list_t(const sai_thrift_s32_list_t& other188) {
  count = other188.count;
  int32list = other188.int32list;
  __isset = other188.__isset;
}
sai_thrift_s32_list_t& sai_thrift_s32_list_t::operator=(const sai_thrift_s32_list_t& other189) {
  count = other189.count;
  int32list = other189.int32list;
  __isset = other189.__isset;
  return *this;
}
void sai_thrift_s32_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s32_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "int32list=" << to_string(int32list);
  out << ")";
}


sai_thrift_u32_range_t::~sai_thrift_u32_range_t() throw() {
}


void sai_thrift_u32_range_t::__set_min(const sai_thrift_uint32_t val) {
  this->min = val;
}

void sai_thrift_u32_range_t::__set_max(const sai_thrift_uint32_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_range_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u32_range_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min);
          this->__isset.min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max);
          this->__isset.max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_range_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u32_range_t");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u32_range_t &a, sai_thrift_u32_range_t &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_range_t::sai_thrift_u32_range_t(const sai_thrift_u32_range_t& other190) {
  min = other190.min;
  max = other190.max;
  __isset = other190.__isset;
}
sai_thrift_u32_range_t& sai_thrift_u32_range_t::operator=(const sai_thrift_u32_range_t& other191) {
  min = other191.min;
  max = other191.max;
  __isset = other191.__isset;
  return *this;
}
void sai_thrift_u32_range_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u32_range_t(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


sai_thrift_s32_range_t::~sai_thrift_s32_range_t() throw() {
}


void sai_thrift_s32_range_t::__set_min(const sai_thrift_int32_t val) {
  this->min = val;
}

void sai_thrift_s32_range_t::__set_max(const sai_thrift_int32_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_range_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_s32_range_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min);
          this->__isset.min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max);
          this->__isset.max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s32_range_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_s32_range_t");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_s32_range_t &a, sai_thrift_s32_range_t &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
  swap(a.__isset, b.__isset);
}

sai_thrift_s32_range_t::sai_thrift_s32_range_t(const sai_thrift_s32_range_t& other192) {
  min = other192.min;
  max = other192.max;
  __isset = other192.__isset;
}
sai_thrift_s32_range_t& sai_thrift_s32_range_t::operator=(const sai_thrift_s32_range_t& other193) {
  min = other193.min;
  max = other193.max;
  __isset = other193.__isset;
  return *this;
}
void sai_thrift_s32_range_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_s32_range_t(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


sai_thrift_u16_range_t::~sai_thrift_u16_range_t() throw() {
}


void sai_thrift_u16_range_t::__set_min(const sai_thrift_uint16_t val) {
  this->min = val;
}

void sai_thrift_u16_range_t::__set_max(const sai_thrift_uint16_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_range_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u16_range_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->min);
          this->__isset.min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->max);
          this->__isset.max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u16_range_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u16_range_t");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u16_range_t &a, sai_thrift_u16_range_t &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
  swap(a.__isset, b.__isset);
}

sai_thrift_u16_range_t::sai_thrift_u16_range_t(const sai_thrift_u16_range_t& other194) {
  min = other194.min;
  max = other194.max;
  __isset = other194.__isset;
}
sai_thrift_u16_range_t& sai_thrift_u16_range_t::operator=(const sai_thrift_u16_range_t& other195) {
  min = other195.min;
  max = other195.max;
  __isset = other195.__isset;
  return *this;
}
void sai_thrift_u16_range_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u16_range_t(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


sai_thrift_u16_range_list_t::~sai_thrift_u16_range_list_t() throw() {
}


void sai_thrift_u16_range_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_u16_range_list_t::__set_rangelist(const std::vector<sai_thrift_u16_range_t> & val) {
  this->rangelist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u16_range_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_u16_range_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rangelist.clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _etype199;
            xfer += iprot->readListBegin(_etype199, _size196);
            this->rangelist.resize(_size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              xfer += this->rangelist[_i200].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rangelist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u16_range_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_u16_range_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rangelist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rangelist.size()));
    std::vector<sai_thrift_u16_range_t> ::const_iterator _iter201;
    for (_iter201 = this->rangelist.begin(); _iter201 != this->rangelist.end(); ++_iter201)
    {
      xfer += (*_iter201).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_u16_range_list_t &a, sai_thrift_u16_range_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.rangelist, b.rangelist);
  swap(a.__isset, b.__isset);
}

sai_thrift_u16_range_list_t::sai_thrift_u16_range_list_t(const sai_thrift_u16_range_list_t& other202) {
  count = other202.count;
  rangelist = other202.rangelist;
  __isset = other202.__isset;
}
sai_thrift_u16_range_list_t& sai_thrift_u16_range_list_t::operator=(const sai_thrift_u16_range_list_t& other203) {
  count = other203.count;
  rangelist = other203.rangelist;
  __isset = other203.__isset;
  return *this;
}
void sai_thrift_u16_range_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_u16_range_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "rangelist=" << to_string(rangelist);
  out << ")";
}


sai_thrift_vlan_list_t::~sai_thrift_vlan_list_t() throw() {
}


void sai_thrift_vlan_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_vlan_list_t::__set_idlist(const std::vector<sai_thrift_vlan_id_t> & val) {
  this->idlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vlan_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->idlist.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _etype207;
            xfer += iprot->readListBegin(_etype207, _size204);
            this->idlist.resize(_size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              xfer += iprot->readI16(this->idlist[_i208]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.idlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vlan_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->idlist.size()));
    std::vector<sai_thrift_vlan_id_t> ::const_iterator _iter209;
    for (_iter209 = this->idlist.begin(); _iter209 != this->idlist.end(); ++_iter209)
    {
      xfer += oprot->writeI16((*_iter209));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.idlist, b.idlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_list_t::sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t& other210) {
  count = other210.count;
  idlist = other210.idlist;
  __isset = other210.__isset;
}
sai_thrift_vlan_list_t& sai_thrift_vlan_list_t::operator=(const sai_thrift_vlan_list_t& other211) {
  count = other211.count;
  idlist = other211.idlist;
  __isset = other211.__isset;
  return *this;
}
void sai_thrift_vlan_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vlan_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "idlist=" << to_string(idlist);
  out << ")";
}


sai_thrift_ip_addr_t::~sai_thrift_ip_addr_t() throw() {
}


void sai_thrift_ip_addr_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_ip_addr_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_addr_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_addr_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_addr_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_addr_t");

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_addr_t &a, sai_thrift_ip_addr_t &b) {
  using ::std::swap;
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_addr_t::sai_thrift_ip_addr_t(const sai_thrift_ip_addr_t& other212) {
  ip4 = other212.ip4;
  ip6 = other212.ip6;
  __isset = other212.__isset;
}
sai_thrift_ip_addr_t& sai_thrift_ip_addr_t::operator=(const sai_thrift_ip_addr_t& other213) {
  ip4 = other213.ip4;
  ip6 = other213.ip6;
  __isset = other213.__isset;
  return *this;
}
void sai_thrift_ip_addr_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_addr_t(";
  out << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ")";
}


sai_thrift_ip_address_t::~sai_thrift_ip_address_t() throw() {
}


void sai_thrift_ip_address_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_address_t::__set_addr(const sai_thrift_ip_addr_t& val) {
  this->addr = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_address_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_t::sai_thrift_ip_address_t(const sai_thrift_ip_address_t& other214) {
  addr_family = other214.addr_family;
  addr = other214.addr;
  __isset = other214.__isset;
}
sai_thrift_ip_address_t& sai_thrift_ip_address_t::operator=(const sai_thrift_ip_address_t& other215) {
  addr_family = other215.addr_family;
  addr = other215.addr;
  __isset = other215.__isset;
  return *this;
}
void sai_thrift_ip_address_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_address_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ")";
}


sai_thrift_ip_address_list_t::~sai_thrift_ip_address_list_t() throw() {
}


void sai_thrift_ip_address_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_ip_address_list_t::__set_addresslist(const std::vector<sai_thrift_ip_address_t> & val) {
  this->addresslist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_address_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->addresslist.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->addresslist.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += this->addresslist[_i220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.addresslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addresslist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->addresslist.size()));
    std::vector<sai_thrift_ip_address_t> ::const_iterator _iter221;
    for (_iter221 = this->addresslist.begin(); _iter221 != this->addresslist.end(); ++_iter221)
    {
      xfer += (*_iter221).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_address_list_t &a, sai_thrift_ip_address_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.addresslist, b.addresslist);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_list_t::sai_thrift_ip_address_list_t(const sai_thrift_ip_address_list_t& other222) {
  count = other222.count;
  addresslist = other222.addresslist;
  __isset = other222.__isset;
}
sai_thrift_ip_address_list_t& sai_thrift_ip_address_list_t::operator=(const sai_thrift_ip_address_list_t& other223) {
  count = other223.count;
  addresslist = other223.addresslist;
  __isset = other223.__isset;
  return *this;
}
void sai_thrift_ip_address_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_address_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "addresslist=" << to_string(addresslist);
  out << ")";
}


sai_thrift_ip_prefix_t::~sai_thrift_ip_prefix_t() throw() {
}


void sai_thrift_ip_prefix_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_prefix_t::__set_addr(const sai_thrift_ip_addr_t& val) {
  this->addr = val;
}

void sai_thrift_ip_prefix_t::__set_mask(const sai_thrift_ip_addr_t& val) {
  this->mask = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_prefix_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_t::sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t& other224) {
  addr_family = other224.addr_family;
  addr = other224.addr;
  mask = other224.mask;
  __isset = other224.__isset;
}
sai_thrift_ip_prefix_t& sai_thrift_ip_prefix_t::operator=(const sai_thrift_ip_prefix_t& other225) {
  addr_family = other225.addr_family;
  addr = other225.addr;
  mask = other225.mask;
  __isset = other225.__isset;
  return *this;
}
void sai_thrift_ip_prefix_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_t(";
  out << "addr_family=" << to_string(addr_family);
  out << ", " << "addr=" << to_string(addr);
  out << ", " << "mask=" << to_string(mask);
  out << ")";
}


sai_thrift_ip_prefix_list_t::~sai_thrift_ip_prefix_list_t() throw() {
}


void sai_thrift_ip_prefix_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_ip_prefix_list_t::__set_prefixlist(const std::vector<sai_thrift_ip_prefix_t> & val) {
  this->prefixlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ip_prefix_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->prefixlist.clear();
            uint32_t _size226;
            ::apache::thrift::protocol::TType _etype229;
            xfer += iprot->readListBegin(_etype229, _size226);
            this->prefixlist.resize(_size226);
            uint32_t _i230;
            for (_i230 = 0; _i230 < _size226; ++_i230)
            {
              xfer += this->prefixlist[_i230].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.prefixlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prefixlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->prefixlist.size()));
    std::vector<sai_thrift_ip_prefix_t> ::const_iterator _iter231;
    for (_iter231 = this->prefixlist.begin(); _iter231 != this->prefixlist.end(); ++_iter231)
    {
      xfer += (*_iter231).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ip_prefix_list_t &a, sai_thrift_ip_prefix_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.prefixlist, b.prefixlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_list_t::sai_thrift_ip_prefix_list_t(const sai_thrift_ip_prefix_list_t& other232) {
  count = other232.count;
  prefixlist = other232.prefixlist;
  __isset = other232.__isset;
}
sai_thrift_ip_prefix_list_t& sai_thrift_ip_prefix_list_t::operator=(const sai_thrift_ip_prefix_list_t& other233) {
  count = other233.count;
  prefixlist = other233.prefixlist;
  __isset = other233.__isset;
  return *this;
}
void sai_thrift_ip_prefix_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "prefixlist=" << to_string(prefixlist);
  out << ")";
}


sai_thrift_prbs_rx_state_t::~sai_thrift_prbs_rx_state_t() throw() {
}


void sai_thrift_prbs_rx_state_t::__set_rx_status(const sai_thrift_port_prbs_rx_status_t val) {
  this->rx_status = val;
}

void sai_thrift_prbs_rx_state_t::__set_error_count(const sai_thrift_uint32_t val) {
  this->error_count = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_prbs_rx_state_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_prbs_rx_state_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rx_status);
          this->__isset.rx_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_count);
          this->__isset.error_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_prbs_rx_state_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_prbs_rx_state_t");

  xfer += oprot->writeFieldBegin("rx_status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->rx_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->error_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_prbs_rx_state_t &a, sai_thrift_prbs_rx_state_t &b) {
  using ::std::swap;
  swap(a.rx_status, b.rx_status);
  swap(a.error_count, b.error_count);
  swap(a.__isset, b.__isset);
}

sai_thrift_prbs_rx_state_t::sai_thrift_prbs_rx_state_t(const sai_thrift_prbs_rx_state_t& other234) {
  rx_status = other234.rx_status;
  error_count = other234.error_count;
  __isset = other234.__isset;
}
sai_thrift_prbs_rx_state_t& sai_thrift_prbs_rx_state_t::operator=(const sai_thrift_prbs_rx_state_t& other235) {
  rx_status = other235.rx_status;
  error_count = other235.error_count;
  __isset = other235.__isset;
  return *this;
}
void sai_thrift_prbs_rx_state_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_prbs_rx_state_t(";
  out << "rx_status=" << to_string(rx_status);
  out << ", " << "error_count=" << to_string(error_count);
  out << ")";
}


sai_thrift_latch_status_t::~sai_thrift_latch_status_t() throw() {
}


void sai_thrift_latch_status_t::__set_current_status(const bool val) {
  this->current_status = val;
}

void sai_thrift_latch_status_t::__set_changed(const bool val) {
  this->changed = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_latch_status_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_latch_status_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->current_status);
          this->__isset.current_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->changed);
          this->__isset.changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_latch_status_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_latch_status_t");

  xfer += oprot->writeFieldBegin("current_status", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->current_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("changed", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->changed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_latch_status_t &a, sai_thrift_latch_status_t &b) {
  using ::std::swap;
  swap(a.current_status, b.current_status);
  swap(a.changed, b.changed);
  swap(a.__isset, b.__isset);
}

sai_thrift_latch_status_t::sai_thrift_latch_status_t(const sai_thrift_latch_status_t& other236) {
  current_status = other236.current_status;
  changed = other236.changed;
  __isset = other236.__isset;
}
sai_thrift_latch_status_t& sai_thrift_latch_status_t::operator=(const sai_thrift_latch_status_t& other237) {
  current_status = other237.current_status;
  changed = other237.changed;
  __isset = other237.__isset;
  return *this;
}
void sai_thrift_latch_status_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_latch_status_t(";
  out << "current_status=" << to_string(current_status);
  out << ", " << "changed=" << to_string(changed);
  out << ")";
}


sai_thrift_port_lane_latch_status_t::~sai_thrift_port_lane_latch_status_t() throw() {
}


void sai_thrift_port_lane_latch_status_t::__set_lane(const sai_thrift_uint32_t val) {
  this->lane = val;
}

void sai_thrift_port_lane_latch_status_t::__set_value(const sai_thrift_latch_status_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_latch_status_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_lane_latch_status_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lane);
          this->__isset.lane = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_lane_latch_status_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_lane_latch_status_t");

  xfer += oprot->writeFieldBegin("lane", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->lane);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_lane_latch_status_t &a, sai_thrift_port_lane_latch_status_t &b) {
  using ::std::swap;
  swap(a.lane, b.lane);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_lane_latch_status_t::sai_thrift_port_lane_latch_status_t(const sai_thrift_port_lane_latch_status_t& other238) {
  lane = other238.lane;
  value = other238.value;
  __isset = other238.__isset;
}
sai_thrift_port_lane_latch_status_t& sai_thrift_port_lane_latch_status_t::operator=(const sai_thrift_port_lane_latch_status_t& other239) {
  lane = other239.lane;
  value = other239.value;
  __isset = other239.__isset;
  return *this;
}
void sai_thrift_port_lane_latch_status_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_lane_latch_status_t(";
  out << "lane=" << to_string(lane);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_port_lane_latch_status_list_t::~sai_thrift_port_lane_latch_status_list_t() throw() {
}


void sai_thrift_port_lane_latch_status_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_port_lane_latch_status_list_t::__set_statuslist(const std::vector<sai_thrift_port_lane_latch_status_t> & val) {
  this->statuslist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_latch_status_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_lane_latch_status_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statuslist.clear();
            uint32_t _size240;
            ::apache::thrift::protocol::TType _etype243;
            xfer += iprot->readListBegin(_etype243, _size240);
            this->statuslist.resize(_size240);
            uint32_t _i244;
            for (_i244 = 0; _i244 < _size240; ++_i244)
            {
              xfer += this->statuslist[_i244].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.statuslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_lane_latch_status_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_lane_latch_status_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statuslist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statuslist.size()));
    std::vector<sai_thrift_port_lane_latch_status_t> ::const_iterator _iter245;
    for (_iter245 = this->statuslist.begin(); _iter245 != this->statuslist.end(); ++_iter245)
    {
      xfer += (*_iter245).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_lane_latch_status_list_t &a, sai_thrift_port_lane_latch_status_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.statuslist, b.statuslist);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_lane_latch_status_list_t::sai_thrift_port_lane_latch_status_list_t(const sai_thrift_port_lane_latch_status_list_t& other246) {
  count = other246.count;
  statuslist = other246.statuslist;
  __isset = other246.__isset;
}
sai_thrift_port_lane_latch_status_list_t& sai_thrift_port_lane_latch_status_list_t::operator=(const sai_thrift_port_lane_latch_status_list_t& other247) {
  count = other247.count;
  statuslist = other247.statuslist;
  __isset = other247.__isset;
  return *this;
}
void sai_thrift_port_lane_latch_status_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_lane_latch_status_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "statuslist=" << to_string(statuslist);
  out << ")";
}


sai_thrift_acl_field_data_mask_t::~sai_thrift_acl_field_data_mask_t() throw() {
}


void sai_thrift_acl_field_data_mask_t::__set_u8(const sai_thrift_uint8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_s8(const sai_thrift_int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_u16(const sai_thrift_uint16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_s16(const sai_thrift_int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_u32(const sai_thrift_uint32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_s32(const sai_thrift_int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_u64(const sai_thrift_uint64_t val) {
  this->u64 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_field_data_mask_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_field_data_mask_t::__set_u8list(const sai_thrift_u8_list_t& val) {
  this->u8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_mask_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_field_data_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u8list.read(iprot);
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_mask_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->u8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_field_data_mask_t &a, sai_thrift_acl_field_data_mask_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.u8list, b.u8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_mask_t::sai_thrift_acl_field_data_mask_t(const sai_thrift_acl_field_data_mask_t& other248) {
  u8 = other248.u8;
  s8 = other248.s8;
  u16 = other248.u16;
  s16 = other248.s16;
  u32 = other248.u32;
  s32 = other248.s32;
  u64 = other248.u64;
  mac = other248.mac;
  ip4 = other248.ip4;
  ip6 = other248.ip6;
  u8list = other248.u8list;
  __isset = other248.__isset;
}
sai_thrift_acl_field_data_mask_t& sai_thrift_acl_field_data_mask_t::operator=(const sai_thrift_acl_field_data_mask_t& other249) {
  u8 = other249.u8;
  s8 = other249.s8;
  u16 = other249.u16;
  s16 = other249.s16;
  u32 = other249.u32;
  s32 = other249.s32;
  u64 = other249.u64;
  mac = other249.mac;
  ip4 = other249.ip4;
  ip6 = other249.ip6;
  u8list = other249.u8list;
  __isset = other249.__isset;
  return *this;
}
void sai_thrift_acl_field_data_mask_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_mask_t(";
  out << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "u64=" << to_string(u64);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "u8list=" << to_string(u8list);
  out << ")";
}


sai_thrift_acl_field_data_data_t::~sai_thrift_acl_field_data_data_t() throw() {
}


void sai_thrift_acl_field_data_data_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_acl_field_data_data_t::__set_u8(const sai_thrift_uint8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_field_data_data_t::__set_s8(const sai_thrift_int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_field_data_data_t::__set_u16(const sai_thrift_uint16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_field_data_data_t::__set_s16(const sai_thrift_int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_field_data_data_t::__set_u32(const sai_thrift_uint32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_field_data_data_t::__set_s32(const sai_thrift_int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_field_data_data_t::__set_u64(const sai_thrift_uint64_t val) {
  this->u64 = val;
}

void sai_thrift_acl_field_data_data_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_field_data_data_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_field_data_data_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_field_data_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_field_data_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_acl_field_data_data_t::__set_u8list(const sai_thrift_u8_list_t& val) {
  this->u8list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_field_data_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u8list.read(iprot);
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_data_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->u8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_field_data_data_t &a, sai_thrift_acl_field_data_data_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.u8list, b.u8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_data_t::sai_thrift_acl_field_data_data_t(const sai_thrift_acl_field_data_data_t& other250) {
  booldata = other250.booldata;
  u8 = other250.u8;
  s8 = other250.s8;
  u16 = other250.u16;
  s16 = other250.s16;
  u32 = other250.u32;
  s32 = other250.s32;
  u64 = other250.u64;
  mac = other250.mac;
  ip4 = other250.ip4;
  ip6 = other250.ip6;
  oid = other250.oid;
  objlist = other250.objlist;
  u8list = other250.u8list;
  __isset = other250.__isset;
}
sai_thrift_acl_field_data_data_t& sai_thrift_acl_field_data_data_t::operator=(const sai_thrift_acl_field_data_data_t& other251) {
  booldata = other251.booldata;
  u8 = other251.u8;
  s8 = other251.s8;
  u16 = other251.u16;
  s16 = other251.s16;
  u32 = other251.u32;
  s32 = other251.s32;
  u64 = other251.u64;
  mac = other251.mac;
  ip4 = other251.ip4;
  ip6 = other251.ip6;
  oid = other251.oid;
  objlist = other251.objlist;
  u8list = other251.u8list;
  __isset = other251.__isset;
  return *this;
}
void sai_thrift_acl_field_data_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_data_t(";
  out << "booldata=" << to_string(booldata);
  out << ", " << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "u64=" << to_string(u64);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "objlist=" << to_string(objlist);
  out << ", " << "u8list=" << to_string(u8list);
  out << ")";
}


sai_thrift_acl_field_data_t::~sai_thrift_acl_field_data_t() throw() {
}


void sai_thrift_acl_field_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_field_data_t::__set_mask(const sai_thrift_acl_field_data_mask_t& val) {
  this->mask = val;
}

void sai_thrift_acl_field_data_t::__set_data(const sai_thrift_acl_field_data_data_t& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_field_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.mask, b.mask);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_t::sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t& other252) {
  enable = other252.enable;
  mask = other252.mask;
  data = other252.data;
  __isset = other252.__isset;
}
sai_thrift_acl_field_data_t& sai_thrift_acl_field_data_t::operator=(const sai_thrift_acl_field_data_t& other253) {
  enable = other253.enable;
  mask = other253.mask;
  data = other253.data;
  __isset = other253.__isset;
  return *this;
}
void sai_thrift_acl_field_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "mask=" << to_string(mask);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


sai_thrift_acl_action_parameter_t::~sai_thrift_acl_action_parameter_t() throw() {
}


void sai_thrift_acl_action_parameter_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_acl_action_parameter_t::__set_u8(const sai_thrift_uint8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_action_parameter_t::__set_s8(const sai_thrift_int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_action_parameter_t::__set_u16(const sai_thrift_uint16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_action_parameter_t::__set_s16(const sai_thrift_int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_action_parameter_t::__set_u32(const sai_thrift_uint32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_action_parameter_t::__set_s32(const sai_thrift_int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_action_parameter_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_action_parameter_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_action_parameter_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_action_parameter_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_action_parameter_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_acl_action_parameter_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_parameter_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_action_parameter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_parameter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_parameter_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->ipaddr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_action_parameter_t &a, sai_thrift_acl_action_parameter_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.ipaddr, b.ipaddr);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_parameter_t::sai_thrift_acl_action_parameter_t(const sai_thrift_acl_action_parameter_t& other254) {
  booldata = other254.booldata;
  u8 = other254.u8;
  s8 = other254.s8;
  u16 = other254.u16;
  s16 = other254.s16;
  u32 = other254.u32;
  s32 = other254.s32;
  mac = other254.mac;
  ip4 = other254.ip4;
  ip6 = other254.ip6;
  oid = other254.oid;
  objlist = other254.objlist;
  ipaddr = other254.ipaddr;
  __isset = other254.__isset;
}
sai_thrift_acl_action_parameter_t& sai_thrift_acl_action_parameter_t::operator=(const sai_thrift_acl_action_parameter_t& other255) {
  booldata = other255.booldata;
  u8 = other255.u8;
  s8 = other255.s8;
  u16 = other255.u16;
  s16 = other255.s16;
  u32 = other255.u32;
  s32 = other255.s32;
  mac = other255.mac;
  ip4 = other255.ip4;
  ip6 = other255.ip6;
  oid = other255.oid;
  objlist = other255.objlist;
  ipaddr = other255.ipaddr;
  __isset = other255.__isset;
  return *this;
}
void sai_thrift_acl_action_parameter_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_action_parameter_t(";
  out << "booldata=" << to_string(booldata);
  out << ", " << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "objlist=" << to_string(objlist);
  out << ", " << "ipaddr=" << to_string(ipaddr);
  out << ")";
}


sai_thrift_acl_action_data_t::~sai_thrift_acl_action_data_t() throw() {
}


void sai_thrift_acl_action_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_action_data_t::__set_parameter(const sai_thrift_acl_action_parameter_t& val) {
  this->parameter = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_action_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameter.read(iprot);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->parameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.parameter, b.parameter);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_data_t::sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t& other256) {
  enable = other256.enable;
  parameter = other256.parameter;
  __isset = other256.__isset;
}
sai_thrift_acl_action_data_t& sai_thrift_acl_action_data_t::operator=(const sai_thrift_acl_action_data_t& other257) {
  enable = other257.enable;
  parameter = other257.parameter;
  __isset = other257.__isset;
  return *this;
}
void sai_thrift_acl_action_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_action_data_t(";
  out << "enable=" << to_string(enable);
  out << ", " << "parameter=" << to_string(parameter);
  out << ")";
}


sai_thrift_qos_map_params_t::~sai_thrift_qos_map_params_t() throw() {
}


void sai_thrift_qos_map_params_t::__set_tc(const sai_thrift_cos_t val) {
  this->tc = val;
}

void sai_thrift_qos_map_params_t::__set_dscp(const sai_thrift_uint8_t val) {
  this->dscp = val;
}

void sai_thrift_qos_map_params_t::__set_dot1p(const sai_thrift_uint8_t val) {
  this->dot1p = val;
}

void sai_thrift_qos_map_params_t::__set_prio(const sai_thrift_uint8_t val) {
  this->prio = val;
}

void sai_thrift_qos_map_params_t::__set_pg(const sai_thrift_uint8_t val) {
  this->pg = val;
}

void sai_thrift_qos_map_params_t::__set_queue_index(const sai_thrift_queue_index_t val) {
  this->queue_index = val;
}

void sai_thrift_qos_map_params_t::__set_color(const sai_thrift_packet_color_t val) {
  this->color = val;
}

void sai_thrift_qos_map_params_t::__set_mpls_exp(const sai_thrift_uint8_t val) {
  this->mpls_exp = val;
}

void sai_thrift_qos_map_params_t::__set_fc(const sai_thrift_uint8_t val) {
  this->fc = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tc);
          this->__isset.tc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dscp);
          this->__isset.dscp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dot1p);
          this->__isset.dot1p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->prio);
          this->__isset.prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pg);
          this->__isset.pg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->queue_index);
          this->__isset.queue_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->mpls_exp);
          this->__isset.mpls_exp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->fc);
          this->__isset.fc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_params_t");

  xfer += oprot->writeFieldBegin("tc", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dscp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->dscp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dot1p", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->dot1p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prio", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pg", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->pg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_index", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->queue_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mpls_exp", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->mpls_exp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fc", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->fc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b) {
  using ::std::swap;
  swap(a.tc, b.tc);
  swap(a.dscp, b.dscp);
  swap(a.dot1p, b.dot1p);
  swap(a.prio, b.prio);
  swap(a.pg, b.pg);
  swap(a.queue_index, b.queue_index);
  swap(a.color, b.color);
  swap(a.mpls_exp, b.mpls_exp);
  swap(a.fc, b.fc);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_params_t::sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t& other258) {
  tc = other258.tc;
  dscp = other258.dscp;
  dot1p = other258.dot1p;
  prio = other258.prio;
  pg = other258.pg;
  queue_index = other258.queue_index;
  color = other258.color;
  mpls_exp = other258.mpls_exp;
  fc = other258.fc;
  __isset = other258.__isset;
}
sai_thrift_qos_map_params_t& sai_thrift_qos_map_params_t::operator=(const sai_thrift_qos_map_params_t& other259) {
  tc = other259.tc;
  dscp = other259.dscp;
  dot1p = other259.dot1p;
  prio = other259.prio;
  pg = other259.pg;
  queue_index = other259.queue_index;
  color = other259.color;
  mpls_exp = other259.mpls_exp;
  fc = other259.fc;
  __isset = other259.__isset;
  return *this;
}
void sai_thrift_qos_map_params_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_params_t(";
  out << "tc=" << to_string(tc);
  out << ", " << "dscp=" << to_string(dscp);
  out << ", " << "dot1p=" << to_string(dot1p);
  out << ", " << "prio=" << to_string(prio);
  out << ", " << "pg=" << to_string(pg);
  out << ", " << "queue_index=" << to_string(queue_index);
  out << ", " << "color=" << to_string(color);
  out << ", " << "mpls_exp=" << to_string(mpls_exp);
  out << ", " << "fc=" << to_string(fc);
  out << ")";
}


sai_thrift_qos_map_t::~sai_thrift_qos_map_t() throw() {
}


void sai_thrift_qos_map_t::__set_key(const sai_thrift_qos_map_params_t& val) {
  this->key = val;
}

void sai_thrift_qos_map_t::__set_value(const sai_thrift_qos_map_params_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_t::sai_thrift_qos_map_t(const sai_thrift_qos_map_t& other260) {
  key = other260.key;
  value = other260.value;
  __isset = other260.__isset;
}
sai_thrift_qos_map_t& sai_thrift_qos_map_t::operator=(const sai_thrift_qos_map_t& other261) {
  key = other261.key;
  value = other261.value;
  __isset = other261.__isset;
  return *this;
}
void sai_thrift_qos_map_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_t(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_qos_map_list_t::~sai_thrift_qos_map_list_t() throw() {
}


void sai_thrift_qos_map_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_qos_map_list_t::__set_maplist(const std::vector<sai_thrift_qos_map_t> & val) {
  this->maplist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_qos_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->maplist.clear();
            uint32_t _size262;
            ::apache::thrift::protocol::TType _etype265;
            xfer += iprot->readListBegin(_etype265, _size262);
            this->maplist.resize(_size262);
            uint32_t _i266;
            for (_i266 = 0; _i266 < _size262; ++_i266)
            {
              xfer += this->maplist[_i266].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.maplist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maplist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->maplist.size()));
    std::vector<sai_thrift_qos_map_t> ::const_iterator _iter267;
    for (_iter267 = this->maplist.begin(); _iter267 != this->maplist.end(); ++_iter267)
    {
      xfer += (*_iter267).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.maplist, b.maplist);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_list_t::sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t& other268) {
  count = other268.count;
  maplist = other268.maplist;
  __isset = other268.__isset;
}
sai_thrift_qos_map_list_t& sai_thrift_qos_map_list_t::operator=(const sai_thrift_qos_map_list_t& other269) {
  count = other269.count;
  maplist = other269.maplist;
  __isset = other269.__isset;
  return *this;
}
void sai_thrift_qos_map_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_qos_map_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "maplist=" << to_string(maplist);
  out << ")";
}


sai_thrift_map_t::~sai_thrift_map_t() throw() {
}


void sai_thrift_map_t::__set_key(const sai_thrift_uint32_t val) {
  this->key = val;
}

void sai_thrift_map_t::__set_value(const sai_thrift_int32_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_map_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_map_t &a, sai_thrift_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_map_t::sai_thrift_map_t(const sai_thrift_map_t& other270) {
  key = other270.key;
  value = other270.value;
  __isset = other270.__isset;
}
sai_thrift_map_t& sai_thrift_map_t::operator=(const sai_thrift_map_t& other271) {
  key = other271.key;
  value = other271.value;
  __isset = other271.__isset;
  return *this;
}
void sai_thrift_map_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_map_t(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_map_list_t::~sai_thrift_map_list_t() throw() {
}


void sai_thrift_map_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_map_list_t::__set_maplist(const std::vector<sai_thrift_map_t> & val) {
  this->maplist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_map_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->maplist.clear();
            uint32_t _size272;
            ::apache::thrift::protocol::TType _etype275;
            xfer += iprot->readListBegin(_etype275, _size272);
            this->maplist.resize(_size272);
            uint32_t _i276;
            for (_i276 = 0; _i276 < _size272; ++_i276)
            {
              xfer += this->maplist[_i276].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.maplist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maplist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->maplist.size()));
    std::vector<sai_thrift_map_t> ::const_iterator _iter277;
    for (_iter277 = this->maplist.begin(); _iter277 != this->maplist.end(); ++_iter277)
    {
      xfer += (*_iter277).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_map_list_t &a, sai_thrift_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.maplist, b.maplist);
  swap(a.__isset, b.__isset);
}

sai_thrift_map_list_t::sai_thrift_map_list_t(const sai_thrift_map_list_t& other278) {
  count = other278.count;
  maplist = other278.maplist;
  __isset = other278.__isset;
}
sai_thrift_map_list_t& sai_thrift_map_list_t::operator=(const sai_thrift_map_list_t& other279) {
  count = other279.count;
  maplist = other279.maplist;
  __isset = other279.__isset;
  return *this;
}
void sai_thrift_map_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_map_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "maplist=" << to_string(maplist);
  out << ")";
}


sai_thrift_acl_chain_t::~sai_thrift_acl_chain_t() throw() {
}


void sai_thrift_acl_chain_t::__set_chain_group_stage(const sai_thrift_acl_table_chain_group_stage_t val) {
  this->chain_group_stage = val;
}

void sai_thrift_acl_chain_t::__set_supported_match_type(const sai_thrift_acl_table_supported_match_type_t val) {
  this->supported_match_type = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_chain_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_chain_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chain_group_stage);
          this->__isset.chain_group_stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->supported_match_type);
          this->__isset.supported_match_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_chain_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_chain_t");

  xfer += oprot->writeFieldBegin("chain_group_stage", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->chain_group_stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supported_match_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->supported_match_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_chain_t &a, sai_thrift_acl_chain_t &b) {
  using ::std::swap;
  swap(a.chain_group_stage, b.chain_group_stage);
  swap(a.supported_match_type, b.supported_match_type);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_chain_t::sai_thrift_acl_chain_t(const sai_thrift_acl_chain_t& other280) {
  chain_group_stage = other280.chain_group_stage;
  supported_match_type = other280.supported_match_type;
  __isset = other280.__isset;
}
sai_thrift_acl_chain_t& sai_thrift_acl_chain_t::operator=(const sai_thrift_acl_chain_t& other281) {
  chain_group_stage = other281.chain_group_stage;
  supported_match_type = other281.supported_match_type;
  __isset = other281.__isset;
  return *this;
}
void sai_thrift_acl_chain_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_chain_t(";
  out << "chain_group_stage=" << to_string(chain_group_stage);
  out << ", " << "supported_match_type=" << to_string(supported_match_type);
  out << ")";
}


sai_thrift_acl_chain_list_t::~sai_thrift_acl_chain_list_t() throw() {
}


void sai_thrift_acl_chain_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_acl_chain_list_t::__set_chainlist(const std::vector<sai_thrift_acl_chain_t> & val) {
  this->chainlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_chain_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_chain_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chainlist.clear();
            uint32_t _size282;
            ::apache::thrift::protocol::TType _etype285;
            xfer += iprot->readListBegin(_etype285, _size282);
            this->chainlist.resize(_size282);
            uint32_t _i286;
            for (_i286 = 0; _i286 < _size282; ++_i286)
            {
              xfer += this->chainlist[_i286].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chainlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_chain_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_chain_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chainlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chainlist.size()));
    std::vector<sai_thrift_acl_chain_t> ::const_iterator _iter287;
    for (_iter287 = this->chainlist.begin(); _iter287 != this->chainlist.end(); ++_iter287)
    {
      xfer += (*_iter287).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_chain_list_t &a, sai_thrift_acl_chain_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.chainlist, b.chainlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_chain_list_t::sai_thrift_acl_chain_list_t(const sai_thrift_acl_chain_list_t& other288) {
  count = other288.count;
  chainlist = other288.chainlist;
  __isset = other288.__isset;
}
sai_thrift_acl_chain_list_t& sai_thrift_acl_chain_list_t::operator=(const sai_thrift_acl_chain_list_t& other289) {
  count = other289.count;
  chainlist = other289.chainlist;
  __isset = other289.__isset;
  return *this;
}
void sai_thrift_acl_chain_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_chain_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "chainlist=" << to_string(chainlist);
  out << ")";
}


sai_thrift_acl_capability_t::~sai_thrift_acl_capability_t() throw() {
}


void sai_thrift_acl_capability_t::__set_is_action_list_mandatory(const bool val) {
  this->is_action_list_mandatory = val;
}

void sai_thrift_acl_capability_t::__set_action_list(const sai_thrift_s32_list_t& val) {
  this->action_list = val;
}

void sai_thrift_acl_capability_t::__set_supported_match_type(const sai_thrift_acl_table_supported_match_type_t val) {
  this->supported_match_type = val;
}

void sai_thrift_acl_capability_t::__set_is_non_contiguous_bits_exact_match_supported(const bool val) {
  this->is_non_contiguous_bits_exact_match_supported = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_capability_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_capability_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_action_list_mandatory);
          this->__isset.is_action_list_mandatory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action_list.read(iprot);
          this->__isset.action_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->supported_match_type);
          this->__isset.supported_match_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_non_contiguous_bits_exact_match_supported);
          this->__isset.is_non_contiguous_bits_exact_match_supported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_capability_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_capability_t");

  xfer += oprot->writeFieldBegin("is_action_list_mandatory", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->is_action_list_mandatory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_list", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->action_list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supported_match_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->supported_match_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_non_contiguous_bits_exact_match_supported", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->is_non_contiguous_bits_exact_match_supported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_capability_t &a, sai_thrift_acl_capability_t &b) {
  using ::std::swap;
  swap(a.is_action_list_mandatory, b.is_action_list_mandatory);
  swap(a.action_list, b.action_list);
  swap(a.supported_match_type, b.supported_match_type);
  swap(a.is_non_contiguous_bits_exact_match_supported, b.is_non_contiguous_bits_exact_match_supported);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_capability_t::sai_thrift_acl_capability_t(const sai_thrift_acl_capability_t& other290) {
  is_action_list_mandatory = other290.is_action_list_mandatory;
  action_list = other290.action_list;
  supported_match_type = other290.supported_match_type;
  is_non_contiguous_bits_exact_match_supported = other290.is_non_contiguous_bits_exact_match_supported;
  __isset = other290.__isset;
}
sai_thrift_acl_capability_t& sai_thrift_acl_capability_t::operator=(const sai_thrift_acl_capability_t& other291) {
  is_action_list_mandatory = other291.is_action_list_mandatory;
  action_list = other291.action_list;
  supported_match_type = other291.supported_match_type;
  is_non_contiguous_bits_exact_match_supported = other291.is_non_contiguous_bits_exact_match_supported;
  __isset = other291.__isset;
  return *this;
}
void sai_thrift_acl_capability_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_capability_t(";
  out << "is_action_list_mandatory=" << to_string(is_action_list_mandatory);
  out << ", " << "action_list=" << to_string(action_list);
  out << ", " << "supported_match_type=" << to_string(supported_match_type);
  out << ", " << "is_non_contiguous_bits_exact_match_supported=" << to_string(is_non_contiguous_bits_exact_match_supported);
  out << ")";
}


sai_thrift_acl_resource_t::~sai_thrift_acl_resource_t() throw() {
}


void sai_thrift_acl_resource_t::__set_stage(const sai_thrift_acl_stage_t val) {
  this->stage = val;
}

void sai_thrift_acl_resource_t::__set_bind_point(const sai_thrift_acl_bind_point_type_t val) {
  this->bind_point = val;
}

void sai_thrift_acl_resource_t::__set_avail_num(const sai_thrift_uint32_t val) {
  this->avail_num = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_resource_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_resource_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stage);
          this->__isset.stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bind_point);
          this->__isset.bind_point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->avail_num);
          this->__isset.avail_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_resource_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_resource_t");

  xfer += oprot->writeFieldBegin("stage", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bind_point", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->bind_point);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avail_num", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->avail_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_resource_t &a, sai_thrift_acl_resource_t &b) {
  using ::std::swap;
  swap(a.stage, b.stage);
  swap(a.bind_point, b.bind_point);
  swap(a.avail_num, b.avail_num);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_resource_t::sai_thrift_acl_resource_t(const sai_thrift_acl_resource_t& other292) {
  stage = other292.stage;
  bind_point = other292.bind_point;
  avail_num = other292.avail_num;
  __isset = other292.__isset;
}
sai_thrift_acl_resource_t& sai_thrift_acl_resource_t::operator=(const sai_thrift_acl_resource_t& other293) {
  stage = other293.stage;
  bind_point = other293.bind_point;
  avail_num = other293.avail_num;
  __isset = other293.__isset;
  return *this;
}
void sai_thrift_acl_resource_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_resource_t(";
  out << "stage=" << to_string(stage);
  out << ", " << "bind_point=" << to_string(bind_point);
  out << ", " << "avail_num=" << to_string(avail_num);
  out << ")";
}


sai_thrift_acl_resource_list_t::~sai_thrift_acl_resource_list_t() throw() {
}


void sai_thrift_acl_resource_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_acl_resource_list_t::__set_resourcelist(const std::vector<sai_thrift_acl_resource_t> & val) {
  this->resourcelist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_resource_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_acl_resource_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resourcelist.clear();
            uint32_t _size294;
            ::apache::thrift::protocol::TType _etype297;
            xfer += iprot->readListBegin(_etype297, _size294);
            this->resourcelist.resize(_size294);
            uint32_t _i298;
            for (_i298 = 0; _i298 < _size294; ++_i298)
            {
              xfer += this->resourcelist[_i298].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resourcelist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_resource_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_acl_resource_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resourcelist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resourcelist.size()));
    std::vector<sai_thrift_acl_resource_t> ::const_iterator _iter299;
    for (_iter299 = this->resourcelist.begin(); _iter299 != this->resourcelist.end(); ++_iter299)
    {
      xfer += (*_iter299).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_acl_resource_list_t &a, sai_thrift_acl_resource_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.resourcelist, b.resourcelist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_resource_list_t::sai_thrift_acl_resource_list_t(const sai_thrift_acl_resource_list_t& other300) {
  count = other300.count;
  resourcelist = other300.resourcelist;
  __isset = other300.__isset;
}
sai_thrift_acl_resource_list_t& sai_thrift_acl_resource_list_t::operator=(const sai_thrift_acl_resource_list_t& other301) {
  count = other301.count;
  resourcelist = other301.resourcelist;
  __isset = other301.__isset;
  return *this;
}
void sai_thrift_acl_resource_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_acl_resource_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "resourcelist=" << to_string(resourcelist);
  out << ")";
}


sai_thrift_hmac_t::~sai_thrift_hmac_t() throw() {
}


void sai_thrift_hmac_t::__set_key_id(const sai_thrift_uint32_t val) {
  this->key_id = val;
}

void sai_thrift_hmac_t::__set_hmac(const std::vector<sai_thrift_uint32_t> & val) {
  this->hmac = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_hmac_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_hmac_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_id);
          this->__isset.key_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hmac.clear();
            uint32_t _size302;
            ::apache::thrift::protocol::TType _etype305;
            xfer += iprot->readListBegin(_etype305, _size302);
            this->hmac.resize(_size302);
            uint32_t _i306;
            for (_i306 = 0; _i306 < _size302; ++_i306)
            {
              xfer += iprot->readI32(this->hmac[_i306]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hmac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_hmac_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_hmac_t");

  xfer += oprot->writeFieldBegin("key_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hmac", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->hmac.size()));
    std::vector<sai_thrift_uint32_t> ::const_iterator _iter307;
    for (_iter307 = this->hmac.begin(); _iter307 != this->hmac.end(); ++_iter307)
    {
      xfer += oprot->writeI32((*_iter307));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_hmac_t &a, sai_thrift_hmac_t &b) {
  using ::std::swap;
  swap(a.key_id, b.key_id);
  swap(a.hmac, b.hmac);
  swap(a.__isset, b.__isset);
}

sai_thrift_hmac_t::sai_thrift_hmac_t(const sai_thrift_hmac_t& other308) {
  key_id = other308.key_id;
  hmac = other308.hmac;
  __isset = other308.__isset;
}
sai_thrift_hmac_t& sai_thrift_hmac_t::operator=(const sai_thrift_hmac_t& other309) {
  key_id = other309.key_id;
  hmac = other309.hmac;
  __isset = other309.__isset;
  return *this;
}
void sai_thrift_hmac_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_hmac_t(";
  out << "key_id=" << to_string(key_id);
  out << ", " << "hmac=" << to_string(hmac);
  out << ")";
}


sai_thrift_tlv_entry_t::~sai_thrift_tlv_entry_t() throw() {
}


void sai_thrift_tlv_entry_t::__set_ingress_node(const sai_thrift_ip6_t& val) {
  this->ingress_node = val;
}

void sai_thrift_tlv_entry_t::__set_egress_node(const sai_thrift_ip6_t& val) {
  this->egress_node = val;
}

void sai_thrift_tlv_entry_t::__set_opaque_container(const std::vector<sai_thrift_uint32_t> & val) {
  this->opaque_container = val;
}

void sai_thrift_tlv_entry_t::__set_hmac(const sai_thrift_hmac_t& val) {
  this->hmac = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_tlv_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ingress_node);
          this->__isset.ingress_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->egress_node);
          this->__isset.egress_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opaque_container.clear();
            uint32_t _size310;
            ::apache::thrift::protocol::TType _etype313;
            xfer += iprot->readListBegin(_etype313, _size310);
            this->opaque_container.resize(_size310);
            uint32_t _i314;
            for (_i314 = 0; _i314 < _size310; ++_i314)
            {
              xfer += iprot->readI32(this->opaque_container[_i314]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opaque_container = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hmac.read(iprot);
          this->__isset.hmac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_tlv_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_tlv_entry_t");

  xfer += oprot->writeFieldBegin("ingress_node", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ingress_node);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("egress_node", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->egress_node);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opaque_container", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->opaque_container.size()));
    std::vector<sai_thrift_uint32_t> ::const_iterator _iter315;
    for (_iter315 = this->opaque_container.begin(); _iter315 != this->opaque_container.end(); ++_iter315)
    {
      xfer += oprot->writeI32((*_iter315));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hmac", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->hmac.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_tlv_entry_t &a, sai_thrift_tlv_entry_t &b) {
  using ::std::swap;
  swap(a.ingress_node, b.ingress_node);
  swap(a.egress_node, b.egress_node);
  swap(a.opaque_container, b.opaque_container);
  swap(a.hmac, b.hmac);
  swap(a.__isset, b.__isset);
}

sai_thrift_tlv_entry_t::sai_thrift_tlv_entry_t(const sai_thrift_tlv_entry_t& other316) {
  ingress_node = other316.ingress_node;
  egress_node = other316.egress_node;
  opaque_container = other316.opaque_container;
  hmac = other316.hmac;
  __isset = other316.__isset;
}
sai_thrift_tlv_entry_t& sai_thrift_tlv_entry_t::operator=(const sai_thrift_tlv_entry_t& other317) {
  ingress_node = other317.ingress_node;
  egress_node = other317.egress_node;
  opaque_container = other317.opaque_container;
  hmac = other317.hmac;
  __isset = other317.__isset;
  return *this;
}
void sai_thrift_tlv_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_tlv_entry_t(";
  out << "ingress_node=" << to_string(ingress_node);
  out << ", " << "egress_node=" << to_string(egress_node);
  out << ", " << "opaque_container=" << to_string(opaque_container);
  out << ", " << "hmac=" << to_string(hmac);
  out << ")";
}


sai_thrift_tlv_t::~sai_thrift_tlv_t() throw() {
}


void sai_thrift_tlv_t::__set_tlv_type(const sai_thrift_tlv_type_t val) {
  this->tlv_type = val;
}

void sai_thrift_tlv_t::__set_entry(const sai_thrift_tlv_entry_t& val) {
  this->entry = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_tlv_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tlv_type);
          this->__isset.tlv_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entry.read(iprot);
          this->__isset.entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_tlv_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_tlv_t");

  xfer += oprot->writeFieldBegin("tlv_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->tlv_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entry", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_tlv_t &a, sai_thrift_tlv_t &b) {
  using ::std::swap;
  swap(a.tlv_type, b.tlv_type);
  swap(a.entry, b.entry);
  swap(a.__isset, b.__isset);
}

sai_thrift_tlv_t::sai_thrift_tlv_t(const sai_thrift_tlv_t& other318) {
  tlv_type = other318.tlv_type;
  entry = other318.entry;
  __isset = other318.__isset;
}
sai_thrift_tlv_t& sai_thrift_tlv_t::operator=(const sai_thrift_tlv_t& other319) {
  tlv_type = other319.tlv_type;
  entry = other319.entry;
  __isset = other319.__isset;
  return *this;
}
void sai_thrift_tlv_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_tlv_t(";
  out << "tlv_type=" << to_string(tlv_type);
  out << ", " << "entry=" << to_string(entry);
  out << ")";
}


sai_thrift_tlv_list_t::~sai_thrift_tlv_list_t() throw() {
}


void sai_thrift_tlv_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_tlv_list_t::__set_tlvlist(const std::vector<sai_thrift_tlv_t> & val) {
  this->tlvlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_tlv_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_tlv_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tlvlist.clear();
            uint32_t _size320;
            ::apache::thrift::protocol::TType _etype323;
            xfer += iprot->readListBegin(_etype323, _size320);
            this->tlvlist.resize(_size320);
            uint32_t _i324;
            for (_i324 = 0; _i324 < _size320; ++_i324)
            {
              xfer += this->tlvlist[_i324].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tlvlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_tlv_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_tlv_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tlvlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tlvlist.size()));
    std::vector<sai_thrift_tlv_t> ::const_iterator _iter325;
    for (_iter325 = this->tlvlist.begin(); _iter325 != this->tlvlist.end(); ++_iter325)
    {
      xfer += (*_iter325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_tlv_list_t &a, sai_thrift_tlv_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.tlvlist, b.tlvlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_tlv_list_t::sai_thrift_tlv_list_t(const sai_thrift_tlv_list_t& other326) {
  count = other326.count;
  tlvlist = other326.tlvlist;
  __isset = other326.__isset;
}
sai_thrift_tlv_list_t& sai_thrift_tlv_list_t::operator=(const sai_thrift_tlv_list_t& other327) {
  count = other327.count;
  tlvlist = other327.tlvlist;
  __isset = other327.__isset;
  return *this;
}
void sai_thrift_tlv_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_tlv_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "tlvlist=" << to_string(tlvlist);
  out << ")";
}


sai_thrift_segment_list_t::~sai_thrift_segment_list_t() throw() {
}


void sai_thrift_segment_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_segment_list_t::__set_ip6list(const std::vector<sai_thrift_ip6_t> & val) {
  this->ip6list = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_segment_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_segment_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ip6list.clear();
            uint32_t _size328;
            ::apache::thrift::protocol::TType _etype331;
            xfer += iprot->readListBegin(_etype331, _size328);
            this->ip6list.resize(_size328);
            uint32_t _i332;
            for (_i332 = 0; _i332 < _size328; ++_i332)
            {
              xfer += iprot->readString(this->ip6list[_i332]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ip6list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_segment_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_segment_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->ip6list.size()));
    std::vector<sai_thrift_ip6_t> ::const_iterator _iter333;
    for (_iter333 = this->ip6list.begin(); _iter333 != this->ip6list.end(); ++_iter333)
    {
      xfer += oprot->writeString((*_iter333));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_segment_list_t &a, sai_thrift_segment_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.ip6list, b.ip6list);
  swap(a.__isset, b.__isset);
}

sai_thrift_segment_list_t::sai_thrift_segment_list_t(const sai_thrift_segment_list_t& other334) {
  count = other334.count;
  ip6list = other334.ip6list;
  __isset = other334.__isset;
}
sai_thrift_segment_list_t& sai_thrift_segment_list_t::operator=(const sai_thrift_segment_list_t& other335) {
  count = other335.count;
  ip6list = other335.ip6list;
  __isset = other335.__isset;
  return *this;
}
void sai_thrift_segment_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_segment_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "ip6list=" << to_string(ip6list);
  out << ")";
}


sai_thrift_json_t::~sai_thrift_json_t() throw() {
}


void sai_thrift_json_t::__set_json(const sai_thrift_s8_list_t& val) {
  this->json = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_json_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_json_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->json.read(iprot);
          this->__isset.json = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_json_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_json_t");

  xfer += oprot->writeFieldBegin("json", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->json.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_json_t &a, sai_thrift_json_t &b) {
  using ::std::swap;
  swap(a.json, b.json);
  swap(a.__isset, b.__isset);
}

sai_thrift_json_t::sai_thrift_json_t(const sai_thrift_json_t& other336) {
  json = other336.json;
  __isset = other336.__isset;
}
sai_thrift_json_t& sai_thrift_json_t::operator=(const sai_thrift_json_t& other337) {
  json = other337.json;
  __isset = other337.__isset;
  return *this;
}
void sai_thrift_json_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_json_t(";
  out << "json=" << to_string(json);
  out << ")";
}


sai_thrift_port_lane_eye_values_t::~sai_thrift_port_lane_eye_values_t() throw() {
}


void sai_thrift_port_lane_eye_values_t::__set_lane(const sai_thrift_uint32_t val) {
  this->lane = val;
}

void sai_thrift_port_lane_eye_values_t::__set_left(const sai_thrift_int32_t val) {
  this->left = val;
}

void sai_thrift_port_lane_eye_values_t::__set_right(const sai_thrift_int32_t val) {
  this->right = val;
}

void sai_thrift_port_lane_eye_values_t::__set_up(const sai_thrift_int32_t val) {
  this->up = val;
}

void sai_thrift_port_lane_eye_values_t::__set_down(const sai_thrift_int32_t val) {
  this->down = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_lane_eye_values_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_lane_eye_values_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lane);
          this->__isset.lane = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right);
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->up);
          this->__isset.up = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->down);
          this->__isset.down = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_lane_eye_values_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_lane_eye_values_t");

  xfer += oprot->writeFieldBegin("lane", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->lane);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->left);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->right);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("up", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->up);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("down", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->down);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_lane_eye_values_t &a, sai_thrift_port_lane_eye_values_t &b) {
  using ::std::swap;
  swap(a.lane, b.lane);
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.up, b.up);
  swap(a.down, b.down);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_lane_eye_values_t::sai_thrift_port_lane_eye_values_t(const sai_thrift_port_lane_eye_values_t& other338) {
  lane = other338.lane;
  left = other338.left;
  right = other338.right;
  up = other338.up;
  down = other338.down;
  __isset = other338.__isset;
}
sai_thrift_port_lane_eye_values_t& sai_thrift_port_lane_eye_values_t::operator=(const sai_thrift_port_lane_eye_values_t& other339) {
  lane = other339.lane;
  left = other339.left;
  right = other339.right;
  up = other339.up;
  down = other339.down;
  __isset = other339.__isset;
  return *this;
}
void sai_thrift_port_lane_eye_values_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_lane_eye_values_t(";
  out << "lane=" << to_string(lane);
  out << ", " << "left=" << to_string(left);
  out << ", " << "right=" << to_string(right);
  out << ", " << "up=" << to_string(up);
  out << ", " << "down=" << to_string(down);
  out << ")";
}


sai_thrift_port_eye_values_list_t::~sai_thrift_port_eye_values_list_t() throw() {
}


void sai_thrift_port_eye_values_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_port_eye_values_list_t::__set_valueslist(const std::vector<sai_thrift_port_lane_eye_values_t> & val) {
  this->valueslist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_eye_values_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_eye_values_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->valueslist.clear();
            uint32_t _size340;
            ::apache::thrift::protocol::TType _etype343;
            xfer += iprot->readListBegin(_etype343, _size340);
            this->valueslist.resize(_size340);
            uint32_t _i344;
            for (_i344 = 0; _i344 < _size340; ++_i344)
            {
              xfer += this->valueslist[_i344].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.valueslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_eye_values_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_eye_values_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("valueslist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->valueslist.size()));
    std::vector<sai_thrift_port_lane_eye_values_t> ::const_iterator _iter345;
    for (_iter345 = this->valueslist.begin(); _iter345 != this->valueslist.end(); ++_iter345)
    {
      xfer += (*_iter345).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_eye_values_list_t &a, sai_thrift_port_eye_values_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.valueslist, b.valueslist);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_eye_values_list_t::sai_thrift_port_eye_values_list_t(const sai_thrift_port_eye_values_list_t& other346) {
  count = other346.count;
  valueslist = other346.valueslist;
  __isset = other346.__isset;
}
sai_thrift_port_eye_values_list_t& sai_thrift_port_eye_values_list_t::operator=(const sai_thrift_port_eye_values_list_t& other347) {
  count = other347.count;
  valueslist = other347.valueslist;
  __isset = other347.__isset;
  return *this;
}
void sai_thrift_port_eye_values_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_eye_values_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "valueslist=" << to_string(valueslist);
  out << ")";
}


sai_thrift_system_port_config_t::~sai_thrift_system_port_config_t() throw() {
}


void sai_thrift_system_port_config_t::__set_port_id(const sai_thrift_uint32_t val) {
  this->port_id = val;
}

void sai_thrift_system_port_config_t::__set_attached_switch_id(const sai_thrift_uint32_t val) {
  this->attached_switch_id = val;
}

void sai_thrift_system_port_config_t::__set_attached_core_index(const sai_thrift_uint32_t val) {
  this->attached_core_index = val;
}

void sai_thrift_system_port_config_t::__set_attached_core_port_index(const sai_thrift_uint32_t val) {
  this->attached_core_port_index = val;
}

void sai_thrift_system_port_config_t::__set_speed(const sai_thrift_uint32_t val) {
  this->speed = val;
}

void sai_thrift_system_port_config_t::__set_num_voq(const sai_thrift_uint32_t val) {
  this->num_voq = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_system_port_config_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_system_port_config_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attached_switch_id);
          this->__isset.attached_switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attached_core_index);
          this->__isset.attached_core_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attached_core_port_index);
          this->__isset.attached_core_port_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_voq);
          this->__isset.num_voq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_system_port_config_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_system_port_config_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attached_switch_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attached_switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attached_core_index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->attached_core_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attached_core_port_index", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->attached_core_port_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_voq", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->num_voq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_system_port_config_t &a, sai_thrift_system_port_config_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.attached_switch_id, b.attached_switch_id);
  swap(a.attached_core_index, b.attached_core_index);
  swap(a.attached_core_port_index, b.attached_core_port_index);
  swap(a.speed, b.speed);
  swap(a.num_voq, b.num_voq);
  swap(a.__isset, b.__isset);
}

sai_thrift_system_port_config_t::sai_thrift_system_port_config_t(const sai_thrift_system_port_config_t& other348) {
  port_id = other348.port_id;
  attached_switch_id = other348.attached_switch_id;
  attached_core_index = other348.attached_core_index;
  attached_core_port_index = other348.attached_core_port_index;
  speed = other348.speed;
  num_voq = other348.num_voq;
  __isset = other348.__isset;
}
sai_thrift_system_port_config_t& sai_thrift_system_port_config_t::operator=(const sai_thrift_system_port_config_t& other349) {
  port_id = other349.port_id;
  attached_switch_id = other349.attached_switch_id;
  attached_core_index = other349.attached_core_index;
  attached_core_port_index = other349.attached_core_port_index;
  speed = other349.speed;
  num_voq = other349.num_voq;
  __isset = other349.__isset;
  return *this;
}
void sai_thrift_system_port_config_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_system_port_config_t(";
  out << "port_id=" << to_string(port_id);
  out << ", " << "attached_switch_id=" << to_string(attached_switch_id);
  out << ", " << "attached_core_index=" << to_string(attached_core_index);
  out << ", " << "attached_core_port_index=" << to_string(attached_core_port_index);
  out << ", " << "speed=" << to_string(speed);
  out << ", " << "num_voq=" << to_string(num_voq);
  out << ")";
}


sai_thrift_system_port_config_list_t::~sai_thrift_system_port_config_list_t() throw() {
}


void sai_thrift_system_port_config_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_system_port_config_list_t::__set_configlist(const std::vector<sai_thrift_system_port_config_t> & val) {
  this->configlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_system_port_config_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_system_port_config_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->configlist.clear();
            uint32_t _size350;
            ::apache::thrift::protocol::TType _etype353;
            xfer += iprot->readListBegin(_etype353, _size350);
            this->configlist.resize(_size350);
            uint32_t _i354;
            for (_i354 = 0; _i354 < _size350; ++_i354)
            {
              xfer += this->configlist[_i354].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.configlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_system_port_config_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_system_port_config_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("configlist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->configlist.size()));
    std::vector<sai_thrift_system_port_config_t> ::const_iterator _iter355;
    for (_iter355 = this->configlist.begin(); _iter355 != this->configlist.end(); ++_iter355)
    {
      xfer += (*_iter355).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_system_port_config_list_t &a, sai_thrift_system_port_config_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.configlist, b.configlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_system_port_config_list_t::sai_thrift_system_port_config_list_t(const sai_thrift_system_port_config_list_t& other356) {
  count = other356.count;
  configlist = other356.configlist;
  __isset = other356.__isset;
}
sai_thrift_system_port_config_list_t& sai_thrift_system_port_config_list_t::operator=(const sai_thrift_system_port_config_list_t& other357) {
  count = other357.count;
  configlist = other357.configlist;
  __isset = other357.__isset;
  return *this;
}
void sai_thrift_system_port_config_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_system_port_config_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "configlist=" << to_string(configlist);
  out << ")";
}


sai_thrift_fabric_port_reachability_t::~sai_thrift_fabric_port_reachability_t() throw() {
}


void sai_thrift_fabric_port_reachability_t::__set_switch_id(const sai_thrift_uint32_t val) {
  this->switch_id = val;
}

void sai_thrift_fabric_port_reachability_t::__set_reachable(const bool val) {
  this->reachable = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fabric_port_reachability_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fabric_port_reachability_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reachable);
          this->__isset.reachable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fabric_port_reachability_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fabric_port_reachability_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reachable", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->reachable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fabric_port_reachability_t &a, sai_thrift_fabric_port_reachability_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.reachable, b.reachable);
  swap(a.__isset, b.__isset);
}

sai_thrift_fabric_port_reachability_t::sai_thrift_fabric_port_reachability_t(const sai_thrift_fabric_port_reachability_t& other358) {
  switch_id = other358.switch_id;
  reachable = other358.reachable;
  __isset = other358.__isset;
}
sai_thrift_fabric_port_reachability_t& sai_thrift_fabric_port_reachability_t::operator=(const sai_thrift_fabric_port_reachability_t& other359) {
  switch_id = other359.switch_id;
  reachable = other359.reachable;
  __isset = other359.__isset;
  return *this;
}
void sai_thrift_fabric_port_reachability_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fabric_port_reachability_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "reachable=" << to_string(reachable);
  out << ")";
}


sai_thrift_port_err_status_list_t::~sai_thrift_port_err_status_list_t() throw() {
}


void sai_thrift_port_err_status_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_port_err_status_list_t::__set_statuslist(const std::vector<sai_thrift_port_err_status_t> & val) {
  this->statuslist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_err_status_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_err_status_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statuslist.clear();
            uint32_t _size360;
            ::apache::thrift::protocol::TType _etype363;
            xfer += iprot->readListBegin(_etype363, _size360);
            this->statuslist.resize(_size360);
            uint32_t _i364;
            for (_i364 = 0; _i364 < _size360; ++_i364)
            {
              xfer += iprot->readI32(this->statuslist[_i364]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.statuslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_err_status_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_err_status_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statuslist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->statuslist.size()));
    std::vector<sai_thrift_port_err_status_t> ::const_iterator _iter365;
    for (_iter365 = this->statuslist.begin(); _iter365 != this->statuslist.end(); ++_iter365)
    {
      xfer += oprot->writeI32((*_iter365));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_err_status_list_t &a, sai_thrift_port_err_status_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.statuslist, b.statuslist);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_err_status_list_t::sai_thrift_port_err_status_list_t(const sai_thrift_port_err_status_list_t& other366) {
  count = other366.count;
  statuslist = other366.statuslist;
  __isset = other366.__isset;
}
sai_thrift_port_err_status_list_t& sai_thrift_port_err_status_list_t::operator=(const sai_thrift_port_err_status_list_t& other367) {
  count = other367.count;
  statuslist = other367.statuslist;
  __isset = other367.__isset;
  return *this;
}
void sai_thrift_port_err_status_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_err_status_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "statuslist=" << to_string(statuslist);
  out << ")";
}


sai_thrift_attribute_value_t::~sai_thrift_attribute_value_t() throw() {
}


void sai_thrift_attribute_value_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_attribute_value_t::__set_chardata(const std::string& val) {
  this->chardata = val;
}

void sai_thrift_attribute_value_t::__set_u8(const sai_thrift_uint8_t val) {
  this->u8 = val;
}

void sai_thrift_attribute_value_t::__set_s8(const sai_thrift_int8_t val) {
  this->s8 = val;
}

void sai_thrift_attribute_value_t::__set_u16(const sai_thrift_uint16_t val) {
  this->u16 = val;
}

void sai_thrift_attribute_value_t::__set_s16(const sai_thrift_int16_t val) {
  this->s16 = val;
}

void sai_thrift_attribute_value_t::__set_u32(const sai_thrift_uint32_t val) {
  this->u32 = val;
}

void sai_thrift_attribute_value_t::__set_s32(const sai_thrift_int32_t val) {
  this->s32 = val;
}

void sai_thrift_attribute_value_t::__set_u64(const sai_thrift_uint64_t val) {
  this->u64 = val;
}

void sai_thrift_attribute_value_t::__set_s64(const sai_thrift_int64_t val) {
  this->s64 = val;
}

void sai_thrift_attribute_value_t::__set_ptr(const sai_thrift_pointer_t val) {
  this->ptr = val;
}

void sai_thrift_attribute_value_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_attribute_value_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_attribute_value_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_attribute_value_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
}

void sai_thrift_attribute_value_t::__set_ipprefix(const sai_thrift_ip_prefix_t& val) {
  this->ipprefix = val;
}

void sai_thrift_attribute_value_t::__set_rx_state(const sai_thrift_prbs_rx_state_t& val) {
  this->rx_state = val;
}

void sai_thrift_attribute_value_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_attribute_value_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_attribute_value_t::__set_u8list(const sai_thrift_u8_list_t& val) {
  this->u8list = val;
}

void sai_thrift_attribute_value_t::__set_s8list(const sai_thrift_s8_list_t& val) {
  this->s8list = val;
}

void sai_thrift_attribute_value_t::__set_u16list(const sai_thrift_u16_list_t& val) {
  this->u16list = val;
}

void sai_thrift_attribute_value_t::__set_s16list(const sai_thrift_s16_list_t& val) {
  this->s16list = val;
}

void sai_thrift_attribute_value_t::__set_u32list(const sai_thrift_u32_list_t& val) {
  this->u32list = val;
}

void sai_thrift_attribute_value_t::__set_s32list(const sai_thrift_s32_list_t& val) {
  this->s32list = val;
}

void sai_thrift_attribute_value_t::__set_u32range(const sai_thrift_u32_range_t& val) {
  this->u32range = val;
}

void sai_thrift_attribute_value_t::__set_s32range(const sai_thrift_s32_range_t& val) {
  this->s32range = val;
}

void sai_thrift_attribute_value_t::__set_u16rangelist(const sai_thrift_u16_range_list_t& val) {
  this->u16rangelist = val;
}

void sai_thrift_attribute_value_t::__set_vlanlist(const sai_thrift_vlan_list_t& val) {
  this->vlanlist = val;
}

void sai_thrift_attribute_value_t::__set_qosmap(const sai_thrift_qos_map_list_t& val) {
  this->qosmap = val;
}

void sai_thrift_attribute_value_t::__set_maplist(const sai_thrift_map_list_t& val) {
  this->maplist = val;
}

void sai_thrift_attribute_value_t::__set_aclfield(const sai_thrift_acl_field_data_t& val) {
  this->aclfield = val;
}

void sai_thrift_attribute_value_t::__set_aclaction(const sai_thrift_acl_action_data_t& val) {
  this->aclaction = val;
}

void sai_thrift_attribute_value_t::__set_aclmask(const sai_thrift_acl_field_data_mask_t& val) {
  this->aclmask = val;
}

void sai_thrift_attribute_value_t::__set_aclcapability(const sai_thrift_acl_capability_t& val) {
  this->aclcapability = val;
}

void sai_thrift_attribute_value_t::__set_aclresource(const sai_thrift_acl_resource_list_t& val) {
  this->aclresource = val;
}

void sai_thrift_attribute_value_t::__set_tlvlist(const sai_thrift_tlv_list_t& val) {
  this->tlvlist = val;
}

void sai_thrift_attribute_value_t::__set_segmentlist(const sai_thrift_segment_list_t& val) {
  this->segmentlist = val;
}

void sai_thrift_attribute_value_t::__set_ipaddrlist(const sai_thrift_ip_address_list_t& val) {
  this->ipaddrlist = val;
}

void sai_thrift_attribute_value_t::__set_porteyevalues(const sai_thrift_port_eye_values_list_t& val) {
  this->porteyevalues = val;
}

void sai_thrift_attribute_value_t::__set_timespec(const sai_thrift_timespec_t& val) {
  this->timespec = val;
}

void sai_thrift_attribute_value_t::__set_encrypt_key(const sai_thrift_encrypt_key_t val) {
  this->encrypt_key = val;
}

void sai_thrift_attribute_value_t::__set_authkey(const sai_thrift_auth_key_t val) {
  this->authkey = val;
}

void sai_thrift_attribute_value_t::__set_macsecsak(const sai_thrift_macsec_sak_t val) {
  this->macsecsak = val;
}

void sai_thrift_attribute_value_t::__set_macsecauthkey(const sai_thrift_macsec_auth_key_t val) {
  this->macsecauthkey = val;
}

void sai_thrift_attribute_value_t::__set_macsecsalt(const sai_thrift_macsec_salt_t val) {
  this->macsecsalt = val;
}

void sai_thrift_attribute_value_t::__set_sysportconfig(const sai_thrift_system_port_config_t& val) {
  this->sysportconfig = val;
}

void sai_thrift_attribute_value_t::__set_sysportconfiglist(const sai_thrift_system_port_config_list_t& val) {
  this->sysportconfiglist = val;
}

void sai_thrift_attribute_value_t::__set_reachability(const sai_thrift_fabric_port_reachability_t& val) {
  this->reachability = val;
}

void sai_thrift_attribute_value_t::__set_porterror(const sai_thrift_port_err_status_list_t& val) {
  this->porterror = val;
}

void sai_thrift_attribute_value_t::__set_portlanelatchstatuslist(const sai_thrift_port_lane_latch_status_list_t& val) {
  this->portlanelatchstatuslist = val;
}

void sai_thrift_attribute_value_t::__set_latchstatus(const sai_thrift_latch_status_t& val) {
  this->latchstatus = val;
}

void sai_thrift_attribute_value_t::__set_json(const sai_thrift_json_t& val) {
  this->json = val;
}

void sai_thrift_attribute_value_t::__set_ipprefixlist(const sai_thrift_ip_prefix_list_t& val) {
  this->ipprefixlist = val;
}

void sai_thrift_attribute_value_t::__set_aclchainlist(const sai_thrift_acl_chain_list_t& val) {
  this->aclchainlist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chardata);
          this->__isset.chardata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->s64);
          this->__isset.s64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ptr);
          this->__isset.ptr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipprefix.read(iprot);
          this->__isset.ipprefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->rx_state.read(iprot);
          this->__isset.rx_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u8list.read(iprot);
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s8list.read(iprot);
          this->__isset.s8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u16list.read(iprot);
          this->__isset.u16list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s16list.read(iprot);
          this->__isset.s16list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32list.read(iprot);
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s32list.read(iprot);
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32range.read(iprot);
          this->__isset.u32range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s32range.read(iprot);
          this->__isset.s32range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u16rangelist.read(iprot);
          this->__isset.u16rangelist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vlanlist.read(iprot);
          this->__isset.vlanlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->qosmap.read(iprot);
          this->__isset.qosmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->maplist.read(iprot);
          this->__isset.maplist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclfield.read(iprot);
          this->__isset.aclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclaction.read(iprot);
          this->__isset.aclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclmask.read(iprot);
          this->__isset.aclmask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclcapability.read(iprot);
          this->__isset.aclcapability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclresource.read(iprot);
          this->__isset.aclresource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tlvlist.read(iprot);
          this->__isset.tlvlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->segmentlist.read(iprot);
          this->__isset.segmentlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddrlist.read(iprot);
          this->__isset.ipaddrlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->porteyevalues.read(iprot);
          this->__isset.porteyevalues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timespec.read(iprot);
          this->__isset.timespec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->encrypt_key);
          this->__isset.encrypt_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->authkey);
          this->__isset.authkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->macsecsak);
          this->__isset.macsecsak = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->macsecauthkey);
          this->__isset.macsecauthkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->macsecsalt);
          this->__isset.macsecsalt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sysportconfig.read(iprot);
          this->__isset.sysportconfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sysportconfiglist.read(iprot);
          this->__isset.sysportconfiglist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->reachability.read(iprot);
          this->__isset.reachability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->porterror.read(iprot);
          this->__isset.porterror = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->portlanelatchstatuslist.read(iprot);
          this->__isset.portlanelatchstatuslist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->latchstatus.read(iprot);
          this->__isset.latchstatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->json.read(iprot);
          this->__isset.json = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipprefixlist.read(iprot);
          this->__isset.ipprefixlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclchainlist.read(iprot);
          this->__isset.aclchainlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_value_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chardata", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chardata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s64", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->s64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ptr", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->ptr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->ipaddr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipprefix", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->ipprefix.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rx_state", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->rx_state.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->u8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8list", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->s8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16list", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->u16list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16list", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->s16list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->u32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_STRUCT, 25);
  xfer += this->s32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32range", ::apache::thrift::protocol::T_STRUCT, 26);
  xfer += this->u32range.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32range", ::apache::thrift::protocol::T_STRUCT, 27);
  xfer += this->s32range.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16rangelist", ::apache::thrift::protocol::T_STRUCT, 28);
  xfer += this->u16rangelist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlanlist", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->vlanlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qosmap", ::apache::thrift::protocol::T_STRUCT, 30);
  xfer += this->qosmap.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maplist", ::apache::thrift::protocol::T_STRUCT, 31);
  xfer += this->maplist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclfield", ::apache::thrift::protocol::T_STRUCT, 32);
  xfer += this->aclfield.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclaction", ::apache::thrift::protocol::T_STRUCT, 33);
  xfer += this->aclaction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclmask", ::apache::thrift::protocol::T_STRUCT, 34);
  xfer += this->aclmask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclcapability", ::apache::thrift::protocol::T_STRUCT, 35);
  xfer += this->aclcapability.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclresource", ::apache::thrift::protocol::T_STRUCT, 36);
  xfer += this->aclresource.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tlvlist", ::apache::thrift::protocol::T_STRUCT, 37);
  xfer += this->tlvlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segmentlist", ::apache::thrift::protocol::T_STRUCT, 38);
  xfer += this->segmentlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddrlist", ::apache::thrift::protocol::T_STRUCT, 39);
  xfer += this->ipaddrlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("porteyevalues", ::apache::thrift::protocol::T_STRUCT, 40);
  xfer += this->porteyevalues.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timespec", ::apache::thrift::protocol::T_STRUCT, 41);
  xfer += this->timespec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encrypt_key", ::apache::thrift::protocol::T_BYTE, 42);
  xfer += oprot->writeByte(this->encrypt_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authkey", ::apache::thrift::protocol::T_BYTE, 43);
  xfer += oprot->writeByte(this->authkey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("macsecsak", ::apache::thrift::protocol::T_BYTE, 44);
  xfer += oprot->writeByte(this->macsecsak);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("macsecauthkey", ::apache::thrift::protocol::T_BYTE, 45);
  xfer += oprot->writeByte(this->macsecauthkey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("macsecsalt", ::apache::thrift::protocol::T_BYTE, 46);
  xfer += oprot->writeByte(this->macsecsalt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sysportconfig", ::apache::thrift::protocol::T_STRUCT, 47);
  xfer += this->sysportconfig.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sysportconfiglist", ::apache::thrift::protocol::T_STRUCT, 48);
  xfer += this->sysportconfiglist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reachability", ::apache::thrift::protocol::T_STRUCT, 49);
  xfer += this->reachability.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("porterror", ::apache::thrift::protocol::T_STRUCT, 50);
  xfer += this->porterror.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("portlanelatchstatuslist", ::apache::thrift::protocol::T_STRUCT, 51);
  xfer += this->portlanelatchstatuslist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latchstatus", ::apache::thrift::protocol::T_STRUCT, 52);
  xfer += this->latchstatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("json", ::apache::thrift::protocol::T_STRUCT, 53);
  xfer += this->json.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipprefixlist", ::apache::thrift::protocol::T_STRUCT, 54);
  xfer += this->ipprefixlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclchainlist", ::apache::thrift::protocol::T_STRUCT, 55);
  xfer += this->aclchainlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.chardata, b.chardata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.s64, b.s64);
  swap(a.ptr, b.ptr);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.ipaddr, b.ipaddr);
  swap(a.ipprefix, b.ipprefix);
  swap(a.rx_state, b.rx_state);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.u8list, b.u8list);
  swap(a.s8list, b.s8list);
  swap(a.u16list, b.u16list);
  swap(a.s16list, b.s16list);
  swap(a.u32list, b.u32list);
  swap(a.s32list, b.s32list);
  swap(a.u32range, b.u32range);
  swap(a.s32range, b.s32range);
  swap(a.u16rangelist, b.u16rangelist);
  swap(a.vlanlist, b.vlanlist);
  swap(a.qosmap, b.qosmap);
  swap(a.maplist, b.maplist);
  swap(a.aclfield, b.aclfield);
  swap(a.aclaction, b.aclaction);
  swap(a.aclmask, b.aclmask);
  swap(a.aclcapability, b.aclcapability);
  swap(a.aclresource, b.aclresource);
  swap(a.tlvlist, b.tlvlist);
  swap(a.segmentlist, b.segmentlist);
  swap(a.ipaddrlist, b.ipaddrlist);
  swap(a.porteyevalues, b.porteyevalues);
  swap(a.timespec, b.timespec);
  swap(a.encrypt_key, b.encrypt_key);
  swap(a.authkey, b.authkey);
  swap(a.macsecsak, b.macsecsak);
  swap(a.macsecauthkey, b.macsecauthkey);
  swap(a.macsecsalt, b.macsecsalt);
  swap(a.sysportconfig, b.sysportconfig);
  swap(a.sysportconfiglist, b.sysportconfiglist);
  swap(a.reachability, b.reachability);
  swap(a.porterror, b.porterror);
  swap(a.portlanelatchstatuslist, b.portlanelatchstatuslist);
  swap(a.latchstatus, b.latchstatus);
  swap(a.json, b.json);
  swap(a.ipprefixlist, b.ipprefixlist);
  swap(a.aclchainlist, b.aclchainlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_value_t::sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t& other368) {
  booldata = other368.booldata;
  chardata = other368.chardata;
  u8 = other368.u8;
  s8 = other368.s8;
  u16 = other368.u16;
  s16 = other368.s16;
  u32 = other368.u32;
  s32 = other368.s32;
  u64 = other368.u64;
  s64 = other368.s64;
  ptr = other368.ptr;
  mac = other368.mac;
  ip4 = other368.ip4;
  ip6 = other368.ip6;
  ipaddr = other368.ipaddr;
  ipprefix = other368.ipprefix;
  rx_state = other368.rx_state;
  oid = other368.oid;
  objlist = other368.objlist;
  u8list = other368.u8list;
  s8list = other368.s8list;
  u16list = other368.u16list;
  s16list = other368.s16list;
  u32list = other368.u32list;
  s32list = other368.s32list;
  u32range = other368.u32range;
  s32range = other368.s32range;
  u16rangelist = other368.u16rangelist;
  vlanlist = other368.vlanlist;
  qosmap = other368.qosmap;
  maplist = other368.maplist;
  aclfield = other368.aclfield;
  aclaction = other368.aclaction;
  aclmask = other368.aclmask;
  aclcapability = other368.aclcapability;
  aclresource = other368.aclresource;
  tlvlist = other368.tlvlist;
  segmentlist = other368.segmentlist;
  ipaddrlist = other368.ipaddrlist;
  porteyevalues = other368.porteyevalues;
  timespec = other368.timespec;
  encrypt_key = other368.encrypt_key;
  authkey = other368.authkey;
  macsecsak = other368.macsecsak;
  macsecauthkey = other368.macsecauthkey;
  macsecsalt = other368.macsecsalt;
  sysportconfig = other368.sysportconfig;
  sysportconfiglist = other368.sysportconfiglist;
  reachability = other368.reachability;
  porterror = other368.porterror;
  portlanelatchstatuslist = other368.portlanelatchstatuslist;
  latchstatus = other368.latchstatus;
  json = other368.json;
  ipprefixlist = other368.ipprefixlist;
  aclchainlist = other368.aclchainlist;
  __isset = other368.__isset;
}
sai_thrift_attribute_value_t& sai_thrift_attribute_value_t::operator=(const sai_thrift_attribute_value_t& other369) {
  booldata = other369.booldata;
  chardata = other369.chardata;
  u8 = other369.u8;
  s8 = other369.s8;
  u16 = other369.u16;
  s16 = other369.s16;
  u32 = other369.u32;
  s32 = other369.s32;
  u64 = other369.u64;
  s64 = other369.s64;
  ptr = other369.ptr;
  mac = other369.mac;
  ip4 = other369.ip4;
  ip6 = other369.ip6;
  ipaddr = other369.ipaddr;
  ipprefix = other369.ipprefix;
  rx_state = other369.rx_state;
  oid = other369.oid;
  objlist = other369.objlist;
  u8list = other369.u8list;
  s8list = other369.s8list;
  u16list = other369.u16list;
  s16list = other369.s16list;
  u32list = other369.u32list;
  s32list = other369.s32list;
  u32range = other369.u32range;
  s32range = other369.s32range;
  u16rangelist = other369.u16rangelist;
  vlanlist = other369.vlanlist;
  qosmap = other369.qosmap;
  maplist = other369.maplist;
  aclfield = other369.aclfield;
  aclaction = other369.aclaction;
  aclmask = other369.aclmask;
  aclcapability = other369.aclcapability;
  aclresource = other369.aclresource;
  tlvlist = other369.tlvlist;
  segmentlist = other369.segmentlist;
  ipaddrlist = other369.ipaddrlist;
  porteyevalues = other369.porteyevalues;
  timespec = other369.timespec;
  encrypt_key = other369.encrypt_key;
  authkey = other369.authkey;
  macsecsak = other369.macsecsak;
  macsecauthkey = other369.macsecauthkey;
  macsecsalt = other369.macsecsalt;
  sysportconfig = other369.sysportconfig;
  sysportconfiglist = other369.sysportconfiglist;
  reachability = other369.reachability;
  porterror = other369.porterror;
  portlanelatchstatuslist = other369.portlanelatchstatuslist;
  latchstatus = other369.latchstatus;
  json = other369.json;
  ipprefixlist = other369.ipprefixlist;
  aclchainlist = other369.aclchainlist;
  __isset = other369.__isset;
  return *this;
}
void sai_thrift_attribute_value_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_value_t(";
  out << "booldata=" << to_string(booldata);
  out << ", " << "chardata=" << to_string(chardata);
  out << ", " << "u8=" << to_string(u8);
  out << ", " << "s8=" << to_string(s8);
  out << ", " << "u16=" << to_string(u16);
  out << ", " << "s16=" << to_string(s16);
  out << ", " << "u32=" << to_string(u32);
  out << ", " << "s32=" << to_string(s32);
  out << ", " << "u64=" << to_string(u64);
  out << ", " << "s64=" << to_string(s64);
  out << ", " << "ptr=" << to_string(ptr);
  out << ", " << "mac=" << to_string(mac);
  out << ", " << "ip4=" << to_string(ip4);
  out << ", " << "ip6=" << to_string(ip6);
  out << ", " << "ipaddr=" << to_string(ipaddr);
  out << ", " << "ipprefix=" << to_string(ipprefix);
  out << ", " << "rx_state=" << to_string(rx_state);
  out << ", " << "oid=" << to_string(oid);
  out << ", " << "objlist=" << to_string(objlist);
  out << ", " << "u8list=" << to_string(u8list);
  out << ", " << "s8list=" << to_string(s8list);
  out << ", " << "u16list=" << to_string(u16list);
  out << ", " << "s16list=" << to_string(s16list);
  out << ", " << "u32list=" << to_string(u32list);
  out << ", " << "s32list=" << to_string(s32list);
  out << ", " << "u32range=" << to_string(u32range);
  out << ", " << "s32range=" << to_string(s32range);
  out << ", " << "u16rangelist=" << to_string(u16rangelist);
  out << ", " << "vlanlist=" << to_string(vlanlist);
  out << ", " << "qosmap=" << to_string(qosmap);
  out << ", " << "maplist=" << to_string(maplist);
  out << ", " << "aclfield=" << to_string(aclfield);
  out << ", " << "aclaction=" << to_string(aclaction);
  out << ", " << "aclmask=" << to_string(aclmask);
  out << ", " << "aclcapability=" << to_string(aclcapability);
  out << ", " << "aclresource=" << to_string(aclresource);
  out << ", " << "tlvlist=" << to_string(tlvlist);
  out << ", " << "segmentlist=" << to_string(segmentlist);
  out << ", " << "ipaddrlist=" << to_string(ipaddrlist);
  out << ", " << "porteyevalues=" << to_string(porteyevalues);
  out << ", " << "timespec=" << to_string(timespec);
  out << ", " << "encrypt_key=" << to_string(encrypt_key);
  out << ", " << "authkey=" << to_string(authkey);
  out << ", " << "macsecsak=" << to_string(macsecsak);
  out << ", " << "macsecauthkey=" << to_string(macsecauthkey);
  out << ", " << "macsecsalt=" << to_string(macsecsalt);
  out << ", " << "sysportconfig=" << to_string(sysportconfig);
  out << ", " << "sysportconfiglist=" << to_string(sysportconfiglist);
  out << ", " << "reachability=" << to_string(reachability);
  out << ", " << "porterror=" << to_string(porterror);
  out << ", " << "portlanelatchstatuslist=" << to_string(portlanelatchstatuslist);
  out << ", " << "latchstatus=" << to_string(latchstatus);
  out << ", " << "json=" << to_string(json);
  out << ", " << "ipprefixlist=" << to_string(ipprefixlist);
  out << ", " << "aclchainlist=" << to_string(aclchainlist);
  out << ")";
}


sai_thrift_attribute_t::~sai_thrift_attribute_t() throw() {
}


void sai_thrift_attribute_t::__set_id(const sai_thrift_attr_id_t val) {
  this->id = val;
}

void sai_thrift_attribute_t::__set_value(const sai_thrift_attribute_value_t& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_t::sai_thrift_attribute_t(const sai_thrift_attribute_t& other370) {
  id = other370.id;
  value = other370.value;
  __isset = other370.__isset;
}
sai_thrift_attribute_t& sai_thrift_attribute_t::operator=(const sai_thrift_attribute_t& other371) {
  id = other371.id;
  value = other371.value;
  __isset = other371.__isset;
  return *this;
}
void sai_thrift_attribute_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_t(";
  out << "id=" << to_string(id);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


sai_thrift_stat_capability_t::~sai_thrift_stat_capability_t() throw() {
}


void sai_thrift_stat_capability_t::__set_stat_enum(const sai_thrift_stat_id_t val) {
  this->stat_enum = val;
}

void sai_thrift_stat_capability_t::__set_stat_modes(const sai_thrift_uint32_t val) {
  this->stat_modes = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_stat_capability_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_stat_capability_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stat_enum);
          this->__isset.stat_enum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stat_modes);
          this->__isset.stat_modes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_stat_capability_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_stat_capability_t");

  xfer += oprot->writeFieldBegin("stat_enum", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->stat_enum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stat_modes", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->stat_modes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_stat_capability_t &a, sai_thrift_stat_capability_t &b) {
  using ::std::swap;
  swap(a.stat_enum, b.stat_enum);
  swap(a.stat_modes, b.stat_modes);
  swap(a.__isset, b.__isset);
}

sai_thrift_stat_capability_t::sai_thrift_stat_capability_t(const sai_thrift_stat_capability_t& other372) {
  stat_enum = other372.stat_enum;
  stat_modes = other372.stat_modes;
  __isset = other372.__isset;
}
sai_thrift_stat_capability_t& sai_thrift_stat_capability_t::operator=(const sai_thrift_stat_capability_t& other373) {
  stat_enum = other373.stat_enum;
  stat_modes = other373.stat_modes;
  __isset = other373.__isset;
  return *this;
}
void sai_thrift_stat_capability_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_stat_capability_t(";
  out << "stat_enum=" << to_string(stat_enum);
  out << ", " << "stat_modes=" << to_string(stat_modes);
  out << ")";
}


sai_thrift_stat_capability_list_t::~sai_thrift_stat_capability_list_t() throw() {
}


void sai_thrift_stat_capability_list_t::__set_count(const sai_thrift_uint32_t val) {
  this->count = val;
}

void sai_thrift_stat_capability_list_t::__set_capabilitylist(const std::vector<sai_thrift_stat_capability_t> & val) {
  this->capabilitylist = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_stat_capability_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_stat_capability_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->capabilitylist.clear();
            uint32_t _size374;
            ::apache::thrift::protocol::TType _etype377;
            xfer += iprot->readListBegin(_etype377, _size374);
            this->capabilitylist.resize(_size374);
            uint32_t _i378;
            for (_i378 = 0; _i378 < _size374; ++_i378)
            {
              xfer += this->capabilitylist[_i378].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.capabilitylist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_stat_capability_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_stat_capability_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capabilitylist", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->capabilitylist.size()));
    std::vector<sai_thrift_stat_capability_t> ::const_iterator _iter379;
    for (_iter379 = this->capabilitylist.begin(); _iter379 != this->capabilitylist.end(); ++_iter379)
    {
      xfer += (*_iter379).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_stat_capability_list_t &a, sai_thrift_stat_capability_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.capabilitylist, b.capabilitylist);
  swap(a.__isset, b.__isset);
}

sai_thrift_stat_capability_list_t::sai_thrift_stat_capability_list_t(const sai_thrift_stat_capability_list_t& other380) {
  count = other380.count;
  capabilitylist = other380.capabilitylist;
  __isset = other380.__isset;
}
sai_thrift_stat_capability_list_t& sai_thrift_stat_capability_list_t::operator=(const sai_thrift_stat_capability_list_t& other381) {
  count = other381.count;
  capabilitylist = other381.capabilitylist;
  __isset = other381.__isset;
  return *this;
}
void sai_thrift_stat_capability_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_stat_capability_list_t(";
  out << "count=" << to_string(count);
  out << ", " << "capabilitylist=" << to_string(capabilitylist);
  out << ")";
}


sai_thrift_switch_health_data_t::~sai_thrift_switch_health_data_t() throw() {
}


void sai_thrift_switch_health_data_t::__set_data_type(const sai_thrift_health_data_type_t val) {
  this->data_type = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_switch_health_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_switch_health_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->data_type);
          this->__isset.data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_switch_health_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_switch_health_data_t");

  xfer += oprot->writeFieldBegin("data_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->data_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_switch_health_data_t &a, sai_thrift_switch_health_data_t &b) {
  using ::std::swap;
  swap(a.data_type, b.data_type);
  swap(a.__isset, b.__isset);
}

sai_thrift_switch_health_data_t::sai_thrift_switch_health_data_t(const sai_thrift_switch_health_data_t& other382) {
  data_type = other382.data_type;
  __isset = other382.__isset;
}
sai_thrift_switch_health_data_t& sai_thrift_switch_health_data_t::operator=(const sai_thrift_switch_health_data_t& other383) {
  data_type = other383.data_type;
  __isset = other383.__isset;
  return *this;
}
void sai_thrift_switch_health_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_switch_health_data_t(";
  out << "data_type=" << to_string(data_type);
  out << ")";
}


sai_thrift_bfd_session_state_notification_t::~sai_thrift_bfd_session_state_notification_t() throw() {
}


void sai_thrift_bfd_session_state_notification_t::__set_bfd_session_id(const sai_thrift_object_id_t val) {
  this->bfd_session_id = val;
}

void sai_thrift_bfd_session_state_notification_t::__set_session_state(const sai_thrift_bfd_session_state_t val) {
  this->session_state = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_bfd_session_state_notification_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_bfd_session_state_notification_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bfd_session_id);
          this->__isset.bfd_session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->session_state);
          this->__isset.session_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_bfd_session_state_notification_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_bfd_session_state_notification_t");

  xfer += oprot->writeFieldBegin("bfd_session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bfd_session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->session_state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_bfd_session_state_notification_t &a, sai_thrift_bfd_session_state_notification_t &b) {
  using ::std::swap;
  swap(a.bfd_session_id, b.bfd_session_id);
  swap(a.session_state, b.session_state);
  swap(a.__isset, b.__isset);
}

sai_thrift_bfd_session_state_notification_t::sai_thrift_bfd_session_state_notification_t(const sai_thrift_bfd_session_state_notification_t& other384) {
  bfd_session_id = other384.bfd_session_id;
  session_state = other384.session_state;
  __isset = other384.__isset;
}
sai_thrift_bfd_session_state_notification_t& sai_thrift_bfd_session_state_notification_t::operator=(const sai_thrift_bfd_session_state_notification_t& other385) {
  bfd_session_id = other385.bfd_session_id;
  session_state = other385.session_state;
  __isset = other385.__isset;
  return *this;
}
void sai_thrift_bfd_session_state_notification_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_bfd_session_state_notification_t(";
  out << "bfd_session_id=" << to_string(bfd_session_id);
  out << ", " << "session_state=" << to_string(session_state);
  out << ")";
}


sai_thrift_direction_lookup_entry_t::~sai_thrift_direction_lookup_entry_t() throw() {
}


void sai_thrift_direction_lookup_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_direction_lookup_entry_t::__set_vni(const sai_thrift_uint32_t val) {
  this->vni = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_direction_lookup_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_direction_lookup_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vni);
          this->__isset.vni = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_direction_lookup_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_direction_lookup_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vni", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vni);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_direction_lookup_entry_t &a, sai_thrift_direction_lookup_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vni, b.vni);
  swap(a.__isset, b.__isset);
}

sai_thrift_direction_lookup_entry_t::sai_thrift_direction_lookup_entry_t(const sai_thrift_direction_lookup_entry_t& other386) {
  switch_id = other386.switch_id;
  vni = other386.vni;
  __isset = other386.__isset;
}
sai_thrift_direction_lookup_entry_t& sai_thrift_direction_lookup_entry_t::operator=(const sai_thrift_direction_lookup_entry_t& other387) {
  switch_id = other387.switch_id;
  vni = other387.vni;
  __isset = other387.__isset;
  return *this;
}
void sai_thrift_direction_lookup_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_direction_lookup_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vni=" << to_string(vni);
  out << ")";
}


sai_thrift_eni_ether_address_map_entry_t::~sai_thrift_eni_ether_address_map_entry_t() throw() {
}


void sai_thrift_eni_ether_address_map_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_eni_ether_address_map_entry_t::__set_address(const sai_thrift_mac_t& val) {
  this->address = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_eni_ether_address_map_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_eni_ether_address_map_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_eni_ether_address_map_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_eni_ether_address_map_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_eni_ether_address_map_entry_t &a, sai_thrift_eni_ether_address_map_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

sai_thrift_eni_ether_address_map_entry_t::sai_thrift_eni_ether_address_map_entry_t(const sai_thrift_eni_ether_address_map_entry_t& other388) {
  switch_id = other388.switch_id;
  address = other388.address;
  __isset = other388.__isset;
}
sai_thrift_eni_ether_address_map_entry_t& sai_thrift_eni_ether_address_map_entry_t::operator=(const sai_thrift_eni_ether_address_map_entry_t& other389) {
  switch_id = other389.switch_id;
  address = other389.address;
  __isset = other389.__isset;
  return *this;
}
void sai_thrift_eni_ether_address_map_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_eni_ether_address_map_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "address=" << to_string(address);
  out << ")";
}


sai_thrift_inbound_routing_entry_t::~sai_thrift_inbound_routing_entry_t() throw() {
}


void sai_thrift_inbound_routing_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_inbound_routing_entry_t::__set_eni_id(const sai_thrift_object_id_t val) {
  this->eni_id = val;
}

void sai_thrift_inbound_routing_entry_t::__set_vni(const sai_thrift_uint32_t val) {
  this->vni = val;
}

void sai_thrift_inbound_routing_entry_t::__set_sip(const sai_thrift_ip_address_t& val) {
  this->sip = val;
}

void sai_thrift_inbound_routing_entry_t::__set_sip_mask(const sai_thrift_ip_address_t& val) {
  this->sip_mask = val;
}

void sai_thrift_inbound_routing_entry_t::__set_priority(const sai_thrift_uint32_t val) {
  this->priority = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_inbound_routing_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_inbound_routing_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eni_id);
          this->__isset.eni_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vni);
          this->__isset.vni = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sip.read(iprot);
          this->__isset.sip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sip_mask.read(iprot);
          this->__isset.sip_mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_inbound_routing_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_inbound_routing_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eni_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->eni_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vni", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->vni);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sip", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->sip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sip_mask", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->sip_mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->priority);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_inbound_routing_entry_t &a, sai_thrift_inbound_routing_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.eni_id, b.eni_id);
  swap(a.vni, b.vni);
  swap(a.sip, b.sip);
  swap(a.sip_mask, b.sip_mask);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

sai_thrift_inbound_routing_entry_t::sai_thrift_inbound_routing_entry_t(const sai_thrift_inbound_routing_entry_t& other390) {
  switch_id = other390.switch_id;
  eni_id = other390.eni_id;
  vni = other390.vni;
  sip = other390.sip;
  sip_mask = other390.sip_mask;
  priority = other390.priority;
  __isset = other390.__isset;
}
sai_thrift_inbound_routing_entry_t& sai_thrift_inbound_routing_entry_t::operator=(const sai_thrift_inbound_routing_entry_t& other391) {
  switch_id = other391.switch_id;
  eni_id = other391.eni_id;
  vni = other391.vni;
  sip = other391.sip;
  sip_mask = other391.sip_mask;
  priority = other391.priority;
  __isset = other391.__isset;
  return *this;
}
void sai_thrift_inbound_routing_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_inbound_routing_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "eni_id=" << to_string(eni_id);
  out << ", " << "vni=" << to_string(vni);
  out << ", " << "sip=" << to_string(sip);
  out << ", " << "sip_mask=" << to_string(sip_mask);
  out << ", " << "priority=" << to_string(priority);
  out << ")";
}


sai_thrift_outbound_ca_to_pa_entry_t::~sai_thrift_outbound_ca_to_pa_entry_t() throw() {
}


void sai_thrift_outbound_ca_to_pa_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_outbound_ca_to_pa_entry_t::__set_dst_vnet_id(const sai_thrift_object_id_t val) {
  this->dst_vnet_id = val;
}

void sai_thrift_outbound_ca_to_pa_entry_t::__set_dip(const sai_thrift_ip_address_t& val) {
  this->dip = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_outbound_ca_to_pa_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_outbound_ca_to_pa_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dst_vnet_id);
          this->__isset.dst_vnet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dip.read(iprot);
          this->__isset.dip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_outbound_ca_to_pa_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_outbound_ca_to_pa_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst_vnet_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dst_vnet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dip", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->dip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_outbound_ca_to_pa_entry_t &a, sai_thrift_outbound_ca_to_pa_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.dst_vnet_id, b.dst_vnet_id);
  swap(a.dip, b.dip);
  swap(a.__isset, b.__isset);
}

sai_thrift_outbound_ca_to_pa_entry_t::sai_thrift_outbound_ca_to_pa_entry_t(const sai_thrift_outbound_ca_to_pa_entry_t& other392) {
  switch_id = other392.switch_id;
  dst_vnet_id = other392.dst_vnet_id;
  dip = other392.dip;
  __isset = other392.__isset;
}
sai_thrift_outbound_ca_to_pa_entry_t& sai_thrift_outbound_ca_to_pa_entry_t::operator=(const sai_thrift_outbound_ca_to_pa_entry_t& other393) {
  switch_id = other393.switch_id;
  dst_vnet_id = other393.dst_vnet_id;
  dip = other393.dip;
  __isset = other393.__isset;
  return *this;
}
void sai_thrift_outbound_ca_to_pa_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_outbound_ca_to_pa_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "dst_vnet_id=" << to_string(dst_vnet_id);
  out << ", " << "dip=" << to_string(dip);
  out << ")";
}


sai_thrift_outbound_routing_entry_t::~sai_thrift_outbound_routing_entry_t() throw() {
}


void sai_thrift_outbound_routing_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_outbound_routing_entry_t::__set_eni_id(const sai_thrift_object_id_t val) {
  this->eni_id = val;
}

void sai_thrift_outbound_routing_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_outbound_routing_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_outbound_routing_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eni_id);
          this->__isset.eni_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_outbound_routing_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_outbound_routing_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eni_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->eni_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_outbound_routing_entry_t &a, sai_thrift_outbound_routing_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.eni_id, b.eni_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_outbound_routing_entry_t::sai_thrift_outbound_routing_entry_t(const sai_thrift_outbound_routing_entry_t& other394) {
  switch_id = other394.switch_id;
  eni_id = other394.eni_id;
  destination = other394.destination;
  __isset = other394.__isset;
}
sai_thrift_outbound_routing_entry_t& sai_thrift_outbound_routing_entry_t::operator=(const sai_thrift_outbound_routing_entry_t& other395) {
  switch_id = other395.switch_id;
  eni_id = other395.eni_id;
  destination = other395.destination;
  __isset = other395.__isset;
  return *this;
}
void sai_thrift_outbound_routing_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_outbound_routing_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "eni_id=" << to_string(eni_id);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_pa_validation_entry_t::~sai_thrift_pa_validation_entry_t() throw() {
}


void sai_thrift_pa_validation_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_pa_validation_entry_t::__set_vnet_id(const sai_thrift_object_id_t val) {
  this->vnet_id = val;
}

void sai_thrift_pa_validation_entry_t::__set_sip(const sai_thrift_ip_address_t& val) {
  this->sip = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_pa_validation_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_pa_validation_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vnet_id);
          this->__isset.vnet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sip.read(iprot);
          this->__isset.sip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_pa_validation_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_pa_validation_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vnet_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->vnet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sip", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->sip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_pa_validation_entry_t &a, sai_thrift_pa_validation_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vnet_id, b.vnet_id);
  swap(a.sip, b.sip);
  swap(a.__isset, b.__isset);
}

sai_thrift_pa_validation_entry_t::sai_thrift_pa_validation_entry_t(const sai_thrift_pa_validation_entry_t& other396) {
  switch_id = other396.switch_id;
  vnet_id = other396.vnet_id;
  sip = other396.sip;
  __isset = other396.__isset;
}
sai_thrift_pa_validation_entry_t& sai_thrift_pa_validation_entry_t::operator=(const sai_thrift_pa_validation_entry_t& other397) {
  switch_id = other397.switch_id;
  vnet_id = other397.vnet_id;
  sip = other397.sip;
  __isset = other397.__isset;
  return *this;
}
void sai_thrift_pa_validation_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_pa_validation_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vnet_id=" << to_string(vnet_id);
  out << ", " << "sip=" << to_string(sip);
  out << ")";
}


sai_thrift_dst_tag_entry_t::~sai_thrift_dst_tag_entry_t() throw() {
}


void sai_thrift_dst_tag_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_dst_tag_entry_t::__set_dip(const sai_thrift_ip_prefix_t& val) {
  this->dip = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_dst_tag_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_dst_tag_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dip.read(iprot);
          this->__isset.dip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_dst_tag_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_dst_tag_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_dst_tag_entry_t &a, sai_thrift_dst_tag_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.dip, b.dip);
  swap(a.__isset, b.__isset);
}

sai_thrift_dst_tag_entry_t::sai_thrift_dst_tag_entry_t(const sai_thrift_dst_tag_entry_t& other398) {
  switch_id = other398.switch_id;
  dip = other398.dip;
  __isset = other398.__isset;
}
sai_thrift_dst_tag_entry_t& sai_thrift_dst_tag_entry_t::operator=(const sai_thrift_dst_tag_entry_t& other399) {
  switch_id = other399.switch_id;
  dip = other399.dip;
  __isset = other399.__isset;
  return *this;
}
void sai_thrift_dst_tag_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_dst_tag_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "dip=" << to_string(dip);
  out << ")";
}


sai_thrift_src_tag_entry_t::~sai_thrift_src_tag_entry_t() throw() {
}


void sai_thrift_src_tag_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_src_tag_entry_t::__set_sip(const sai_thrift_ip_prefix_t& val) {
  this->sip = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_src_tag_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_src_tag_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sip.read(iprot);
          this->__isset.sip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_src_tag_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_src_tag_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_src_tag_entry_t &a, sai_thrift_src_tag_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.sip, b.sip);
  swap(a.__isset, b.__isset);
}

sai_thrift_src_tag_entry_t::sai_thrift_src_tag_entry_t(const sai_thrift_src_tag_entry_t& other400) {
  switch_id = other400.switch_id;
  sip = other400.sip;
  __isset = other400.__isset;
}
sai_thrift_src_tag_entry_t& sai_thrift_src_tag_entry_t::operator=(const sai_thrift_src_tag_entry_t& other401) {
  switch_id = other401.switch_id;
  sip = other401.sip;
  __isset = other401.__isset;
  return *this;
}
void sai_thrift_src_tag_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_src_tag_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "sip=" << to_string(sip);
  out << ")";
}


sai_thrift_vip_entry_t::~sai_thrift_vip_entry_t() throw() {
}


void sai_thrift_vip_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_vip_entry_t::__set_vip(const sai_thrift_ip_address_t& val) {
  this->vip = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vip_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_vip_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vip.read(iprot);
          this->__isset.vip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vip_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_vip_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vip", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->vip.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_vip_entry_t &a, sai_thrift_vip_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vip, b.vip);
  swap(a.__isset, b.__isset);
}

sai_thrift_vip_entry_t::sai_thrift_vip_entry_t(const sai_thrift_vip_entry_t& other402) {
  switch_id = other402.switch_id;
  vip = other402.vip;
  __isset = other402.__isset;
}
sai_thrift_vip_entry_t& sai_thrift_vip_entry_t::operator=(const sai_thrift_vip_entry_t& other403) {
  switch_id = other403.switch_id;
  vip = other403.vip;
  __isset = other403.__isset;
  return *this;
}
void sai_thrift_vip_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_vip_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vip=" << to_string(vip);
  out << ")";
}


sai_thrift_fdb_entry_t::~sai_thrift_fdb_entry_t() throw() {
}


void sai_thrift_fdb_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fdb_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_entry_t::sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t& other404) {
  switch_id = other404.switch_id;
  mac_address = other404.mac_address;
  bv_id = other404.bv_id;
  __isset = other404.__isset;
}
sai_thrift_fdb_entry_t& sai_thrift_fdb_entry_t::operator=(const sai_thrift_fdb_entry_t& other405) {
  switch_id = other405.switch_id;
  mac_address = other405.mac_address;
  bv_id = other405.bv_id;
  __isset = other405.__isset;
  return *this;
}
void sai_thrift_fdb_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fdb_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "mac_address=" << to_string(mac_address);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ")";
}


sai_thrift_fdb_event_notification_data_t::~sai_thrift_fdb_event_notification_data_t() throw() {
}


void sai_thrift_fdb_event_notification_data_t::__set_event_type(const sai_thrift_fdb_event_t val) {
  this->event_type = val;
}

void sai_thrift_fdb_event_notification_data_t::__set_fdb_entry(const sai_thrift_fdb_entry_t& val) {
  this->fdb_entry = val;
}

void sai_thrift_fdb_event_notification_data_t::__set_attr_count(const sai_thrift_uint32_t val) {
  this->attr_count = val;
}

void sai_thrift_fdb_event_notification_data_t::__set_attr(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_event_notification_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_fdb_event_notification_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->event_type);
          this->__isset.event_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fdb_entry.read(iprot);
          this->__isset.fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr.clear();
            uint32_t _size406;
            ::apache::thrift::protocol::TType _etype409;
            xfer += iprot->readListBegin(_etype409, _size406);
            this->attr.resize(_size406);
            uint32_t _i410;
            for (_i410 = 0; _i410 < _size406; ++_i410)
            {
              xfer += this->attr[_i410].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_event_notification_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_fdb_event_notification_data_t");

  xfer += oprot->writeFieldBegin("event_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->event_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fdb_entry", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter411;
    for (_iter411 = this->attr.begin(); _iter411 != this->attr.end(); ++_iter411)
    {
      xfer += (*_iter411).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_fdb_event_notification_data_t &a, sai_thrift_fdb_event_notification_data_t &b) {
  using ::std::swap;
  swap(a.event_type, b.event_type);
  swap(a.fdb_entry, b.fdb_entry);
  swap(a.attr_count, b.attr_count);
  swap(a.attr, b.attr);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_event_notification_data_t::sai_thrift_fdb_event_notification_data_t(const sai_thrift_fdb_event_notification_data_t& other412) {
  event_type = other412.event_type;
  fdb_entry = other412.fdb_entry;
  attr_count = other412.attr_count;
  attr = other412.attr;
  __isset = other412.__isset;
}
sai_thrift_fdb_event_notification_data_t& sai_thrift_fdb_event_notification_data_t::operator=(const sai_thrift_fdb_event_notification_data_t& other413) {
  event_type = other413.event_type;
  fdb_entry = other413.fdb_entry;
  attr_count = other413.attr_count;
  attr = other413.attr;
  __isset = other413.__isset;
  return *this;
}
void sai_thrift_fdb_event_notification_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_fdb_event_notification_data_t(";
  out << "event_type=" << to_string(event_type);
  out << ", " << "fdb_entry=" << to_string(fdb_entry);
  out << ", " << "attr_count=" << to_string(attr_count);
  out << ", " << "attr=" << to_string(attr);
  out << ")";
}


sai_thrift_ipmc_entry_t::~sai_thrift_ipmc_entry_t() throw() {
}


void sai_thrift_ipmc_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_ipmc_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_ipmc_entry_t::__set_type(const sai_thrift_ipmc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_ipmc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}

void sai_thrift_ipmc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ipmc_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ipmc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ipmc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ipmc_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ipmc_entry_t &a, sai_thrift_ipmc_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vr_id, b.vr_id);
  swap(a.type, b.type);
  swap(a.destination, b.destination);
  swap(a.source, b.source);
  swap(a.__isset, b.__isset);
}

sai_thrift_ipmc_entry_t::sai_thrift_ipmc_entry_t(const sai_thrift_ipmc_entry_t& other414) {
  switch_id = other414.switch_id;
  vr_id = other414.vr_id;
  type = other414.type;
  destination = other414.destination;
  source = other414.source;
  __isset = other414.__isset;
}
sai_thrift_ipmc_entry_t& sai_thrift_ipmc_entry_t::operator=(const sai_thrift_ipmc_entry_t& other415) {
  switch_id = other415.switch_id;
  vr_id = other415.vr_id;
  type = other415.type;
  destination = other415.destination;
  source = other415.source;
  __isset = other415.__isset;
  return *this;
}
void sai_thrift_ipmc_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ipmc_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vr_id=" << to_string(vr_id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "destination=" << to_string(destination);
  out << ", " << "source=" << to_string(source);
  out << ")";
}


sai_thrift_ipsec_sa_status_notification_t::~sai_thrift_ipsec_sa_status_notification_t() throw() {
}


void sai_thrift_ipsec_sa_status_notification_t::__set_ipsec_sa_id(const sai_thrift_object_id_t val) {
  this->ipsec_sa_id = val;
}

void sai_thrift_ipsec_sa_status_notification_t::__set_ipsec_sa_octet_count_status(const sai_thrift_ipsec_sa_octet_count_status_t val) {
  this->ipsec_sa_octet_count_status = val;
}

void sai_thrift_ipsec_sa_status_notification_t::__set_ipsec_egress_sn_at_max_limit(const bool val) {
  this->ipsec_egress_sn_at_max_limit = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ipsec_sa_status_notification_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_ipsec_sa_status_notification_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ipsec_sa_id);
          this->__isset.ipsec_sa_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ipsec_sa_octet_count_status);
          this->__isset.ipsec_sa_octet_count_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ipsec_egress_sn_at_max_limit);
          this->__isset.ipsec_egress_sn_at_max_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ipsec_sa_status_notification_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_ipsec_sa_status_notification_t");

  xfer += oprot->writeFieldBegin("ipsec_sa_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ipsec_sa_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipsec_sa_octet_count_status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ipsec_sa_octet_count_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipsec_egress_sn_at_max_limit", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->ipsec_egress_sn_at_max_limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_ipsec_sa_status_notification_t &a, sai_thrift_ipsec_sa_status_notification_t &b) {
  using ::std::swap;
  swap(a.ipsec_sa_id, b.ipsec_sa_id);
  swap(a.ipsec_sa_octet_count_status, b.ipsec_sa_octet_count_status);
  swap(a.ipsec_egress_sn_at_max_limit, b.ipsec_egress_sn_at_max_limit);
  swap(a.__isset, b.__isset);
}

sai_thrift_ipsec_sa_status_notification_t::sai_thrift_ipsec_sa_status_notification_t(const sai_thrift_ipsec_sa_status_notification_t& other416) {
  ipsec_sa_id = other416.ipsec_sa_id;
  ipsec_sa_octet_count_status = other416.ipsec_sa_octet_count_status;
  ipsec_egress_sn_at_max_limit = other416.ipsec_egress_sn_at_max_limit;
  __isset = other416.__isset;
}
sai_thrift_ipsec_sa_status_notification_t& sai_thrift_ipsec_sa_status_notification_t::operator=(const sai_thrift_ipsec_sa_status_notification_t& other417) {
  ipsec_sa_id = other417.ipsec_sa_id;
  ipsec_sa_octet_count_status = other417.ipsec_sa_octet_count_status;
  ipsec_egress_sn_at_max_limit = other417.ipsec_egress_sn_at_max_limit;
  __isset = other417.__isset;
  return *this;
}
void sai_thrift_ipsec_sa_status_notification_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_ipsec_sa_status_notification_t(";
  out << "ipsec_sa_id=" << to_string(ipsec_sa_id);
  out << ", " << "ipsec_sa_octet_count_status=" << to_string(ipsec_sa_octet_count_status);
  out << ", " << "ipsec_egress_sn_at_max_limit=" << to_string(ipsec_egress_sn_at_max_limit);
  out << ")";
}


sai_thrift_l2mc_entry_t::~sai_thrift_l2mc_entry_t() throw() {
}


void sai_thrift_l2mc_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_l2mc_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}

void sai_thrift_l2mc_entry_t::__set_type(const sai_thrift_l2mc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_l2mc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}

void sai_thrift_l2mc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_l2mc_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_l2mc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_l2mc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_l2mc_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_l2mc_entry_t &a, sai_thrift_l2mc_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.bv_id, b.bv_id);
  swap(a.type, b.type);
  swap(a.destination, b.destination);
  swap(a.source, b.source);
  swap(a.__isset, b.__isset);
}

sai_thrift_l2mc_entry_t::sai_thrift_l2mc_entry_t(const sai_thrift_l2mc_entry_t& other418) {
  switch_id = other418.switch_id;
  bv_id = other418.bv_id;
  type = other418.type;
  destination = other418.destination;
  source = other418.source;
  __isset = other418.__isset;
}
sai_thrift_l2mc_entry_t& sai_thrift_l2mc_entry_t::operator=(const sai_thrift_l2mc_entry_t& other419) {
  switch_id = other419.switch_id;
  bv_id = other419.bv_id;
  type = other419.type;
  destination = other419.destination;
  source = other419.source;
  __isset = other419.__isset;
  return *this;
}
void sai_thrift_l2mc_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_l2mc_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ", " << "type=" << to_string(type);
  out << ", " << "destination=" << to_string(destination);
  out << ", " << "source=" << to_string(source);
  out << ")";
}


sai_thrift_mcast_fdb_entry_t::~sai_thrift_mcast_fdb_entry_t() throw() {
}


void sai_thrift_mcast_fdb_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_mcast_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_mcast_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_mcast_fdb_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_mcast_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_mcast_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_mcast_fdb_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_mcast_fdb_entry_t &a, sai_thrift_mcast_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_mcast_fdb_entry_t::sai_thrift_mcast_fdb_entry_t(const sai_thrift_mcast_fdb_entry_t& other420) {
  switch_id = other420.switch_id;
  mac_address = other420.mac_address;
  bv_id = other420.bv_id;
  __isset = other420.__isset;
}
sai_thrift_mcast_fdb_entry_t& sai_thrift_mcast_fdb_entry_t::operator=(const sai_thrift_mcast_fdb_entry_t& other421) {
  switch_id = other421.switch_id;
  mac_address = other421.mac_address;
  bv_id = other421.bv_id;
  __isset = other421.__isset;
  return *this;
}
void sai_thrift_mcast_fdb_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_mcast_fdb_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "mac_address=" << to_string(mac_address);
  out << ", " << "bv_id=" << to_string(bv_id);
  out << ")";
}


sai_thrift_inseg_entry_t::~sai_thrift_inseg_entry_t() throw() {
}


void sai_thrift_inseg_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_inseg_entry_t::__set_label(const sai_thrift_label_id_t val) {
  this->label = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_inseg_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_inseg_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_inseg_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_inseg_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_inseg_entry_t &a, sai_thrift_inseg_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.label, b.label);
  swap(a.__isset, b.__isset);
}

sai_thrift_inseg_entry_t::sai_thrift_inseg_entry_t(const sai_thrift_inseg_entry_t& other422) {
  switch_id = other422.switch_id;
  label = other422.label;
  __isset = other422.__isset;
}
sai_thrift_inseg_entry_t& sai_thrift_inseg_entry_t::operator=(const sai_thrift_inseg_entry_t& other423) {
  switch_id = other423.switch_id;
  label = other423.label;
  __isset = other423.__isset;
  return *this;
}
void sai_thrift_inseg_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_inseg_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "label=" << to_string(label);
  out << ")";
}


sai_thrift_nat_entry_key_t::~sai_thrift_nat_entry_key_t() throw() {
}


void sai_thrift_nat_entry_key_t::__set_src_ip(const sai_thrift_ip4_t& val) {
  this->src_ip = val;
}

void sai_thrift_nat_entry_key_t::__set_dst_ip(const sai_thrift_ip4_t& val) {
  this->dst_ip = val;
}

void sai_thrift_nat_entry_key_t::__set_proto(const sai_thrift_uint8_t val) {
  this->proto = val;
}

void sai_thrift_nat_entry_key_t::__set_l4_src_port(const sai_thrift_uint16_t val) {
  this->l4_src_port = val;
}

void sai_thrift_nat_entry_key_t::__set_l4_dst_port(const sai_thrift_uint16_t val) {
  this->l4_dst_port = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_key_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_entry_key_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->src_ip);
          this->__isset.src_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dst_ip);
          this->__isset.dst_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->proto);
          this->__isset.proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->l4_src_port);
          this->__isset.l4_src_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->l4_dst_port);
          this->__isset.l4_dst_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_entry_key_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_entry_key_t");

  xfer += oprot->writeFieldBegin("src_ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->src_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst_ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dst_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->proto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_src_port", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->l4_src_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_dst_port", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->l4_dst_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_entry_key_t &a, sai_thrift_nat_entry_key_t &b) {
  using ::std::swap;
  swap(a.src_ip, b.src_ip);
  swap(a.dst_ip, b.dst_ip);
  swap(a.proto, b.proto);
  swap(a.l4_src_port, b.l4_src_port);
  swap(a.l4_dst_port, b.l4_dst_port);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_entry_key_t::sai_thrift_nat_entry_key_t(const sai_thrift_nat_entry_key_t& other424) {
  src_ip = other424.src_ip;
  dst_ip = other424.dst_ip;
  proto = other424.proto;
  l4_src_port = other424.l4_src_port;
  l4_dst_port = other424.l4_dst_port;
  __isset = other424.__isset;
}
sai_thrift_nat_entry_key_t& sai_thrift_nat_entry_key_t::operator=(const sai_thrift_nat_entry_key_t& other425) {
  src_ip = other425.src_ip;
  dst_ip = other425.dst_ip;
  proto = other425.proto;
  l4_src_port = other425.l4_src_port;
  l4_dst_port = other425.l4_dst_port;
  __isset = other425.__isset;
  return *this;
}
void sai_thrift_nat_entry_key_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_entry_key_t(";
  out << "src_ip=" << to_string(src_ip);
  out << ", " << "dst_ip=" << to_string(dst_ip);
  out << ", " << "proto=" << to_string(proto);
  out << ", " << "l4_src_port=" << to_string(l4_src_port);
  out << ", " << "l4_dst_port=" << to_string(l4_dst_port);
  out << ")";
}


sai_thrift_nat_entry_mask_t::~sai_thrift_nat_entry_mask_t() throw() {
}


void sai_thrift_nat_entry_mask_t::__set_src_ip(const sai_thrift_ip4_t& val) {
  this->src_ip = val;
}

void sai_thrift_nat_entry_mask_t::__set_dst_ip(const sai_thrift_ip4_t& val) {
  this->dst_ip = val;
}

void sai_thrift_nat_entry_mask_t::__set_proto(const sai_thrift_uint8_t val) {
  this->proto = val;
}

void sai_thrift_nat_entry_mask_t::__set_l4_src_port(const sai_thrift_uint16_t val) {
  this->l4_src_port = val;
}

void sai_thrift_nat_entry_mask_t::__set_l4_dst_port(const sai_thrift_uint16_t val) {
  this->l4_dst_port = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_mask_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_entry_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->src_ip);
          this->__isset.src_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dst_ip);
          this->__isset.dst_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->proto);
          this->__isset.proto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->l4_src_port);
          this->__isset.l4_src_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->l4_dst_port);
          this->__isset.l4_dst_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_entry_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_entry_mask_t");

  xfer += oprot->writeFieldBegin("src_ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->src_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dst_ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dst_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proto", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->proto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_src_port", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->l4_src_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l4_dst_port", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->l4_dst_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_entry_mask_t &a, sai_thrift_nat_entry_mask_t &b) {
  using ::std::swap;
  swap(a.src_ip, b.src_ip);
  swap(a.dst_ip, b.dst_ip);
  swap(a.proto, b.proto);
  swap(a.l4_src_port, b.l4_src_port);
  swap(a.l4_dst_port, b.l4_dst_port);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_entry_mask_t::sai_thrift_nat_entry_mask_t(const sai_thrift_nat_entry_mask_t& other426) {
  src_ip = other426.src_ip;
  dst_ip = other426.dst_ip;
  proto = other426.proto;
  l4_src_port = other426.l4_src_port;
  l4_dst_port = other426.l4_dst_port;
  __isset = other426.__isset;
}
sai_thrift_nat_entry_mask_t& sai_thrift_nat_entry_mask_t::operator=(const sai_thrift_nat_entry_mask_t& other427) {
  src_ip = other427.src_ip;
  dst_ip = other427.dst_ip;
  proto = other427.proto;
  l4_src_port = other427.l4_src_port;
  l4_dst_port = other427.l4_dst_port;
  __isset = other427.__isset;
  return *this;
}
void sai_thrift_nat_entry_mask_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_entry_mask_t(";
  out << "src_ip=" << to_string(src_ip);
  out << ", " << "dst_ip=" << to_string(dst_ip);
  out << ", " << "proto=" << to_string(proto);
  out << ", " << "l4_src_port=" << to_string(l4_src_port);
  out << ", " << "l4_dst_port=" << to_string(l4_dst_port);
  out << ")";
}


sai_thrift_nat_entry_data_t::~sai_thrift_nat_entry_data_t() throw() {
}


void sai_thrift_nat_entry_data_t::__set_key(const sai_thrift_nat_entry_key_t& val) {
  this->key = val;
}

void sai_thrift_nat_entry_data_t::__set_mask(const sai_thrift_nat_entry_mask_t& val) {
  this->mask = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_entry_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_entry_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_entry_data_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_entry_data_t &a, sai_thrift_nat_entry_data_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_entry_data_t::sai_thrift_nat_entry_data_t(const sai_thrift_nat_entry_data_t& other428) {
  key = other428.key;
  mask = other428.mask;
  __isset = other428.__isset;
}
sai_thrift_nat_entry_data_t& sai_thrift_nat_entry_data_t::operator=(const sai_thrift_nat_entry_data_t& other429) {
  key = other429.key;
  mask = other429.mask;
  __isset = other429.__isset;
  return *this;
}
void sai_thrift_nat_entry_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_entry_data_t(";
  out << "key=" << to_string(key);
  out << ", " << "mask=" << to_string(mask);
  out << ")";
}


sai_thrift_nat_entry_t::~sai_thrift_nat_entry_t() throw() {
}


void sai_thrift_nat_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_nat_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_nat_entry_t::__set_nat_type(const sai_thrift_nat_type_t val) {
  this->nat_type = val;
}

void sai_thrift_nat_entry_t::__set_data(const sai_thrift_nat_entry_data_t& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nat_type);
          this->__isset.nat_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nat_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->nat_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_entry_t &a, sai_thrift_nat_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vr_id, b.vr_id);
  swap(a.nat_type, b.nat_type);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_entry_t::sai_thrift_nat_entry_t(const sai_thrift_nat_entry_t& other430) {
  switch_id = other430.switch_id;
  vr_id = other430.vr_id;
  nat_type = other430.nat_type;
  data = other430.data;
  __isset = other430.__isset;
}
sai_thrift_nat_entry_t& sai_thrift_nat_entry_t::operator=(const sai_thrift_nat_entry_t& other431) {
  switch_id = other431.switch_id;
  vr_id = other431.vr_id;
  nat_type = other431.nat_type;
  data = other431.data;
  __isset = other431.__isset;
  return *this;
}
void sai_thrift_nat_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vr_id=" << to_string(vr_id);
  out << ", " << "nat_type=" << to_string(nat_type);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


sai_thrift_nat_event_notification_data_t::~sai_thrift_nat_event_notification_data_t() throw() {
}


void sai_thrift_nat_event_notification_data_t::__set_event_type(const sai_thrift_nat_event_t val) {
  this->event_type = val;
}

void sai_thrift_nat_event_notification_data_t::__set_nat_entry(const sai_thrift_nat_entry_t& val) {
  this->nat_entry = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_nat_event_notification_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_nat_event_notification_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->event_type);
          this->__isset.event_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->nat_entry.read(iprot);
          this->__isset.nat_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_nat_event_notification_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_nat_event_notification_data_t");

  xfer += oprot->writeFieldBegin("event_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->event_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nat_entry", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->nat_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_nat_event_notification_data_t &a, sai_thrift_nat_event_notification_data_t &b) {
  using ::std::swap;
  swap(a.event_type, b.event_type);
  swap(a.nat_entry, b.nat_entry);
  swap(a.__isset, b.__isset);
}

sai_thrift_nat_event_notification_data_t::sai_thrift_nat_event_notification_data_t(const sai_thrift_nat_event_notification_data_t& other432) {
  event_type = other432.event_type;
  nat_entry = other432.nat_entry;
  __isset = other432.__isset;
}
sai_thrift_nat_event_notification_data_t& sai_thrift_nat_event_notification_data_t::operator=(const sai_thrift_nat_event_notification_data_t& other433) {
  event_type = other433.event_type;
  nat_entry = other433.nat_entry;
  __isset = other433.__isset;
  return *this;
}
void sai_thrift_nat_event_notification_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_nat_event_notification_data_t(";
  out << "event_type=" << to_string(event_type);
  out << ", " << "nat_entry=" << to_string(nat_entry);
  out << ")";
}


sai_thrift_neighbor_entry_t::~sai_thrift_neighbor_entry_t() throw() {
}


void sai_thrift_neighbor_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_neighbor_entry_t::__set_rif_id(const sai_thrift_object_id_t val) {
  this->rif_id = val;
}

void sai_thrift_neighbor_entry_t::__set_ip_address(const sai_thrift_ip_address_t& val) {
  this->ip_address = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_neighbor_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip_address.read(iprot);
          this->__isset.ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_neighbor_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_neighbor_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip_address", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->ip_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.rif_id, b.rif_id);
  swap(a.ip_address, b.ip_address);
  swap(a.__isset, b.__isset);
}

sai_thrift_neighbor_entry_t::sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t& other434) {
  switch_id = other434.switch_id;
  rif_id = other434.rif_id;
  ip_address = other434.ip_address;
  __isset = other434.__isset;
}
sai_thrift_neighbor_entry_t& sai_thrift_neighbor_entry_t::operator=(const sai_thrift_neighbor_entry_t& other435) {
  switch_id = other435.switch_id;
  rif_id = other435.rif_id;
  ip_address = other435.ip_address;
  __isset = other435.__isset;
  return *this;
}
void sai_thrift_neighbor_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_neighbor_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "rif_id=" << to_string(rif_id);
  out << ", " << "ip_address=" << to_string(ip_address);
  out << ")";
}


sai_thrift_port_oper_status_notification_t::~sai_thrift_port_oper_status_notification_t() throw() {
}


void sai_thrift_port_oper_status_notification_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}

void sai_thrift_port_oper_status_notification_t::__set_port_state(const sai_thrift_port_oper_status_t val) {
  this->port_state = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_port_oper_status_notification_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_port_oper_status_notification_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port_state);
          this->__isset.port_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_port_oper_status_notification_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_port_oper_status_notification_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port_state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_port_oper_status_notification_t &a, sai_thrift_port_oper_status_notification_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.port_state, b.port_state);
  swap(a.__isset, b.__isset);
}

sai_thrift_port_oper_status_notification_t::sai_thrift_port_oper_status_notification_t(const sai_thrift_port_oper_status_notification_t& other436) {
  port_id = other436.port_id;
  port_state = other436.port_state;
  __isset = other436.__isset;
}
sai_thrift_port_oper_status_notification_t& sai_thrift_port_oper_status_notification_t::operator=(const sai_thrift_port_oper_status_notification_t& other437) {
  port_id = other437.port_id;
  port_state = other437.port_state;
  __isset = other437.__isset;
  return *this;
}
void sai_thrift_port_oper_status_notification_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_port_oper_status_notification_t(";
  out << "port_id=" << to_string(port_id);
  out << ", " << "port_state=" << to_string(port_state);
  out << ")";
}


sai_thrift_queue_deadlock_notification_data_t::~sai_thrift_queue_deadlock_notification_data_t() throw() {
}


void sai_thrift_queue_deadlock_notification_data_t::__set_queue_id(const sai_thrift_object_id_t val) {
  this->queue_id = val;
}

void sai_thrift_queue_deadlock_notification_data_t::__set_event(const sai_thrift_queue_pfc_deadlock_event_type_t val) {
  this->event = val;
}

void sai_thrift_queue_deadlock_notification_data_t::__set_app_managed_recovery(const bool val) {
  this->app_managed_recovery = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_queue_deadlock_notification_data_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_queue_deadlock_notification_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->event);
          this->__isset.event = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->app_managed_recovery);
          this->__isset.app_managed_recovery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_queue_deadlock_notification_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_queue_deadlock_notification_data_t");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("event", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->event);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_managed_recovery", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->app_managed_recovery);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_queue_deadlock_notification_data_t &a, sai_thrift_queue_deadlock_notification_data_t &b) {
  using ::std::swap;
  swap(a.queue_id, b.queue_id);
  swap(a.event, b.event);
  swap(a.app_managed_recovery, b.app_managed_recovery);
  swap(a.__isset, b.__isset);
}

sai_thrift_queue_deadlock_notification_data_t::sai_thrift_queue_deadlock_notification_data_t(const sai_thrift_queue_deadlock_notification_data_t& other438) {
  queue_id = other438.queue_id;
  event = other438.event;
  app_managed_recovery = other438.app_managed_recovery;
  __isset = other438.__isset;
}
sai_thrift_queue_deadlock_notification_data_t& sai_thrift_queue_deadlock_notification_data_t::operator=(const sai_thrift_queue_deadlock_notification_data_t& other439) {
  queue_id = other439.queue_id;
  event = other439.event;
  app_managed_recovery = other439.app_managed_recovery;
  __isset = other439.__isset;
  return *this;
}
void sai_thrift_queue_deadlock_notification_data_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_queue_deadlock_notification_data_t(";
  out << "queue_id=" << to_string(queue_id);
  out << ", " << "event=" << to_string(event);
  out << ", " << "app_managed_recovery=" << to_string(app_managed_recovery);
  out << ")";
}


sai_thrift_route_entry_t::~sai_thrift_route_entry_t() throw() {
}


void sai_thrift_route_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_route_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_route_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_route_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_route_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_route_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vr_id, b.vr_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_route_entry_t::sai_thrift_route_entry_t(const sai_thrift_route_entry_t& other440) {
  switch_id = other440.switch_id;
  vr_id = other440.vr_id;
  destination = other440.destination;
  __isset = other440.__isset;
}
sai_thrift_route_entry_t& sai_thrift_route_entry_t::operator=(const sai_thrift_route_entry_t& other441) {
  switch_id = other441.switch_id;
  vr_id = other441.vr_id;
  destination = other441.destination;
  __isset = other441.__isset;
  return *this;
}
void sai_thrift_route_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_route_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vr_id=" << to_string(vr_id);
  out << ", " << "destination=" << to_string(destination);
  out << ")";
}


sai_thrift_my_sid_entry_t::~sai_thrift_my_sid_entry_t() throw() {
}


void sai_thrift_my_sid_entry_t::__set_switch_id(const sai_thrift_object_id_t val) {
  this->switch_id = val;
}

void sai_thrift_my_sid_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_my_sid_entry_t::__set_locator_block_len(const sai_thrift_uint8_t val) {
  this->locator_block_len = val;
}

void sai_thrift_my_sid_entry_t::__set_locator_node_len(const sai_thrift_uint8_t val) {
  this->locator_node_len = val;
}

void sai_thrift_my_sid_entry_t::__set_function_len(const sai_thrift_uint8_t val) {
  this->function_len = val;
}

void sai_thrift_my_sid_entry_t::__set_args_len(const sai_thrift_uint8_t val) {
  this->args_len = val;
}

void sai_thrift_my_sid_entry_t::__set_sid(const sai_thrift_ip6_t& val) {
  this->sid = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_my_sid_entry_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_my_sid_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->locator_block_len);
          this->__isset.locator_block_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->locator_node_len);
          this->__isset.locator_node_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->function_len);
          this->__isset.function_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->args_len);
          this->__isset.args_len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sid);
          this->__isset.sid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_my_sid_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_my_sid_entry_t");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locator_block_len", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->locator_block_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locator_node_len", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->locator_node_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("function_len", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->function_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("args_len", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->args_len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sid", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->sid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_my_sid_entry_t &a, sai_thrift_my_sid_entry_t &b) {
  using ::std::swap;
  swap(a.switch_id, b.switch_id);
  swap(a.vr_id, b.vr_id);
  swap(a.locator_block_len, b.locator_block_len);
  swap(a.locator_node_len, b.locator_node_len);
  swap(a.function_len, b.function_len);
  swap(a.args_len, b.args_len);
  swap(a.sid, b.sid);
  swap(a.__isset, b.__isset);
}

sai_thrift_my_sid_entry_t::sai_thrift_my_sid_entry_t(const sai_thrift_my_sid_entry_t& other442) {
  switch_id = other442.switch_id;
  vr_id = other442.vr_id;
  locator_block_len = other442.locator_block_len;
  locator_node_len = other442.locator_node_len;
  function_len = other442.function_len;
  args_len = other442.args_len;
  sid = other442.sid;
  __isset = other442.__isset;
}
sai_thrift_my_sid_entry_t& sai_thrift_my_sid_entry_t::operator=(const sai_thrift_my_sid_entry_t& other443) {
  switch_id = other443.switch_id;
  vr_id = other443.vr_id;
  locator_block_len = other443.locator_block_len;
  locator_node_len = other443.locator_node_len;
  function_len = other443.function_len;
  args_len = other443.args_len;
  sid = other443.sid;
  __isset = other443.__isset;
  return *this;
}
void sai_thrift_my_sid_entry_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_my_sid_entry_t(";
  out << "switch_id=" << to_string(switch_id);
  out << ", " << "vr_id=" << to_string(vr_id);
  out << ", " << "locator_block_len=" << to_string(locator_block_len);
  out << ", " << "locator_node_len=" << to_string(locator_node_len);
  out << ", " << "function_len=" << to_string(function_len);
  out << ", " << "args_len=" << to_string(args_len);
  out << ", " << "sid=" << to_string(sid);
  out << ")";
}


sai_thrift_attribute_list_t::~sai_thrift_attribute_list_t() throw() {
}


void sai_thrift_attribute_list_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}

void sai_thrift_attribute_list_t::__set_attr_count(const sai_thrift_int32_t val) {
  this->attr_count = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_attribute_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size444;
            ::apache::thrift::protocol::TType _etype447;
            xfer += iprot->readListBegin(_etype447, _size444);
            this->attr_list.resize(_size444);
            uint32_t _i448;
            for (_i448 = 0; _i448 < _size444; ++_i448)
            {
              xfer += this->attr_list[_i448].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_attribute_list_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter449;
    for (_iter449 = this->attr_list.begin(); _iter449 != this->attr_list.end(); ++_iter449)
    {
      xfer += (*_iter449).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.attr_count, b.attr_count);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_list_t::sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t& other450) {
  attr_list = other450.attr_list;
  attr_count = other450.attr_count;
  __isset = other450.__isset;
}
sai_thrift_attribute_list_t& sai_thrift_attribute_list_t::operator=(const sai_thrift_attribute_list_t& other451) {
  attr_list = other451.attr_list;
  attr_count = other451.attr_count;
  __isset = other451.__isset;
  return *this;
}
void sai_thrift_attribute_list_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_attribute_list_t(";
  out << "attr_list=" << to_string(attr_list);
  out << ", " << "attr_count=" << to_string(attr_count);
  out << ")";
}


sai_thrift_exception::~sai_thrift_exception() throw() {
}


void sai_thrift_exception::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_exception& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t sai_thrift_exception::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_exception::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sai_thrift_exception");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sai_thrift_exception &a, sai_thrift_exception &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_exception::sai_thrift_exception(const sai_thrift_exception& other452) : TException() {
  status = other452.status;
  __isset = other452.__isset;
}
sai_thrift_exception& sai_thrift_exception::operator=(const sai_thrift_exception& other453) {
  status = other453.status;
  __isset = other453.__isset;
  return *this;
}
void sai_thrift_exception::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sai_thrift_exception(";
  out << "status=" << to_string(status);
  out << ")";
}

const char* sai_thrift_exception::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: sai_thrift_exception";
  }
}

} // namespace
