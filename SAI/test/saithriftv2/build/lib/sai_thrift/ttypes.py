#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class sai_thrift_object_key_entry_t(object):
    """
    Attributes:
     - object_id
     - fdb_entry
     - neighbor_entry
     - route_entry
     - mcast_fdb_entry
     - l2mc_entry
     - ipmc_entry
     - inseg_entry
     - nat_entry
    """


    def __init__(self, object_id=None, fdb_entry=None, neighbor_entry=None, route_entry=None, mcast_fdb_entry=None, l2mc_entry=None, ipmc_entry=None, inseg_entry=None, nat_entry=None,):
        self.object_id = object_id
        self.fdb_entry = fdb_entry
        self.neighbor_entry = neighbor_entry
        self.route_entry = route_entry
        self.mcast_fdb_entry = mcast_fdb_entry
        self.l2mc_entry = l2mc_entry
        self.ipmc_entry = ipmc_entry
        self.inseg_entry = inseg_entry
        self.nat_entry = nat_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.object_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fdb_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.neighbor_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.route_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.mcast_fdb_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.l2mc_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.ipmc_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.inseg_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.nat_entry = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_key_entry_t')
        if self.object_id is not None:
            oprot.writeFieldBegin('object_id', TType.I64, 1)
            oprot.writeI64(self.object_id)
            oprot.writeFieldEnd()
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.I64, 2)
            oprot.writeI64(self.fdb_entry)
            oprot.writeFieldEnd()
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.I64, 3)
            oprot.writeI64(self.neighbor_entry)
            oprot.writeFieldEnd()
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.I64, 4)
            oprot.writeI64(self.route_entry)
            oprot.writeFieldEnd()
        if self.mcast_fdb_entry is not None:
            oprot.writeFieldBegin('mcast_fdb_entry', TType.I64, 5)
            oprot.writeI64(self.mcast_fdb_entry)
            oprot.writeFieldEnd()
        if self.l2mc_entry is not None:
            oprot.writeFieldBegin('l2mc_entry', TType.I64, 6)
            oprot.writeI64(self.l2mc_entry)
            oprot.writeFieldEnd()
        if self.ipmc_entry is not None:
            oprot.writeFieldBegin('ipmc_entry', TType.I64, 7)
            oprot.writeI64(self.ipmc_entry)
            oprot.writeFieldEnd()
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.I64, 8)
            oprot.writeI64(self.inseg_entry)
            oprot.writeFieldEnd()
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.I64, 9)
            oprot.writeI64(self.nat_entry)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_object_key_t(object):
    """
    Attributes:
     - key
    """


    def __init__(self, key=None,):
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.key = sai_thrift_object_key_entry_t()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_key_t')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 1)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attr_capability_t(object):
    """
    Attributes:
     - create_implemented
     - boolset_implemented
     - get_implemented
    """


    def __init__(self, create_implemented=None, boolset_implemented=None, get_implemented=None,):
        self.create_implemented = create_implemented
        self.boolset_implemented = boolset_implemented
        self.get_implemented = get_implemented

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.create_implemented = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.boolset_implemented = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.get_implemented = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attr_capability_t')
        if self.create_implemented is not None:
            oprot.writeFieldBegin('create_implemented', TType.BOOL, 1)
            oprot.writeBool(self.create_implemented)
            oprot.writeFieldEnd()
        if self.boolset_implemented is not None:
            oprot.writeFieldBegin('boolset_implemented', TType.BOOL, 2)
            oprot.writeBool(self.boolset_implemented)
            oprot.writeFieldEnd()
        if self.get_implemented is not None:
            oprot.writeFieldBegin('get_implemented', TType.BOOL, 3)
            oprot.writeBool(self.get_implemented)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_service_method_table_t(object):
    """
    Attributes:
     - profile_get_value
     - profile_get_next_value
    """


    def __init__(self, profile_get_value=None, profile_get_next_value=None,):
        self.profile_get_value = profile_get_value
        self.profile_get_next_value = profile_get_next_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.profile_get_value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.profile_get_next_value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_service_method_table_t')
        if self.profile_get_value is not None:
            oprot.writeFieldBegin('profile_get_value', TType.I64, 1)
            oprot.writeI64(self.profile_get_value)
            oprot.writeFieldEnd()
        if self.profile_get_next_value is not None:
            oprot.writeFieldBegin('profile_get_next_value', TType.I64, 2)
            oprot.writeI64(self.profile_get_next_value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_object_meta_key_t(object):
    """
    Attributes:
     - objecttype
     - objectkey
    """


    def __init__(self, objecttype=None, objectkey=None,):
        self.objecttype = objecttype
        self.objectkey = objectkey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.objectkey = sai_thrift_object_key_t()
                    self.objectkey.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_meta_key_t')
        if self.objecttype is not None:
            oprot.writeFieldBegin('objecttype', TType.I32, 1)
            oprot.writeI32(self.objecttype)
            oprot.writeFieldEnd()
        if self.objectkey is not None:
            oprot.writeFieldBegin('objectkey', TType.STRUCT, 2)
            self.objectkey.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attr_condition_t(object):
    """
    Attributes:
     - attrid
     - condition
     - op
     - type
    """


    def __init__(self, attrid=None, condition=None, op=None, type=None,):
        self.attrid = attrid
        self.condition = condition
        self.op = op
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.attrid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.condition = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.op = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attr_condition_t')
        if self.attrid is not None:
            oprot.writeFieldBegin('attrid', TType.I32, 1)
            oprot.writeI32(self.attrid)
            oprot.writeFieldEnd()
        if self.condition is not None:
            oprot.writeFieldBegin('condition', TType.I64, 2)
            oprot.writeI64(self.condition)
            oprot.writeFieldEnd()
        if self.op is not None:
            oprot.writeFieldBegin('op', TType.I32, 3)
            oprot.writeI32(self.op)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 4)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_enum_metadata_t(object):
    """
    Attributes:
     - name
     - valuescount
     - values
     - valuesnames
     - valuesshortnames
     - containsflags
     - flagstype
     - ignorevalues
     - ignorevaluesnames
     - objecttype
    """


    def __init__(self, name=None, valuescount=None, values=None, valuesnames=None, valuesshortnames=None, containsflags=None, flagstype=None, ignorevalues=None, ignorevaluesnames=None, objecttype=None,):
        self.name = name
        self.valuescount = valuescount
        self.values = values
        self.valuesnames = valuesnames
        self.valuesshortnames = valuesshortnames
        self.containsflags = containsflags
        self.flagstype = flagstype
        self.ignorevalues = ignorevalues
        self.ignorevaluesnames = ignorevaluesnames
        self.objecttype = objecttype

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.valuescount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.values = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.values.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.valuesnames = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.valuesshortnames = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.containsflags = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.flagstype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.ignorevalues = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readI32()
                        self.ignorevalues.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ignorevaluesnames = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.objecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_enum_metadata_t')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.valuescount is not None:
            oprot.writeFieldBegin('valuescount', TType.I64, 2)
            oprot.writeI64(self.valuescount)
            oprot.writeFieldEnd()
        if self.values is not None:
            oprot.writeFieldBegin('values', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.values))
            for iter12 in self.values:
                oprot.writeI32(iter12)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.valuesnames is not None:
            oprot.writeFieldBegin('valuesnames', TType.STRING, 4)
            oprot.writeString(self.valuesnames.encode('utf-8') if sys.version_info[0] == 2 else self.valuesnames)
            oprot.writeFieldEnd()
        if self.valuesshortnames is not None:
            oprot.writeFieldBegin('valuesshortnames', TType.STRING, 5)
            oprot.writeString(self.valuesshortnames.encode('utf-8') if sys.version_info[0] == 2 else self.valuesshortnames)
            oprot.writeFieldEnd()
        if self.containsflags is not None:
            oprot.writeFieldBegin('containsflags', TType.BOOL, 6)
            oprot.writeBool(self.containsflags)
            oprot.writeFieldEnd()
        if self.flagstype is not None:
            oprot.writeFieldBegin('flagstype', TType.I32, 7)
            oprot.writeI32(self.flagstype)
            oprot.writeFieldEnd()
        if self.ignorevalues is not None:
            oprot.writeFieldBegin('ignorevalues', TType.LIST, 8)
            oprot.writeListBegin(TType.I32, len(self.ignorevalues))
            for iter13 in self.ignorevalues:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ignorevaluesnames is not None:
            oprot.writeFieldBegin('ignorevaluesnames', TType.STRING, 9)
            oprot.writeString(self.ignorevaluesnames.encode('utf-8') if sys.version_info[0] == 2 else self.ignorevaluesnames)
            oprot.writeFieldEnd()
        if self.objecttype is not None:
            oprot.writeFieldBegin('objecttype', TType.I32, 10)
            oprot.writeI32(self.objecttype)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attr_capability_metadata_t(object):
    """
    Attributes:
     - vendorid
     - operationcapability
     - enumvaluescount
     - enumvalues
    """


    def __init__(self, vendorid=None, operationcapability=None, enumvaluescount=None, enumvalues=None,):
        self.vendorid = vendorid
        self.operationcapability = operationcapability
        self.enumvaluescount = enumvaluescount
        self.enumvalues = enumvalues

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vendorid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.operationcapability = sai_thrift_attr_capability_t()
                    self.operationcapability.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.enumvaluescount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.enumvalues = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI32()
                        self.enumvalues.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attr_capability_metadata_t')
        if self.vendorid is not None:
            oprot.writeFieldBegin('vendorid', TType.I64, 1)
            oprot.writeI64(self.vendorid)
            oprot.writeFieldEnd()
        if self.operationcapability is not None:
            oprot.writeFieldBegin('operationcapability', TType.STRUCT, 2)
            self.operationcapability.write(oprot)
            oprot.writeFieldEnd()
        if self.enumvaluescount is not None:
            oprot.writeFieldBegin('enumvaluescount', TType.I64, 3)
            oprot.writeI64(self.enumvaluescount)
            oprot.writeFieldEnd()
        if self.enumvalues is not None:
            oprot.writeFieldBegin('enumvalues', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.enumvalues))
            for iter20 in self.enumvalues:
                oprot.writeI32(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attr_metadata_t(object):
    """
    Attributes:
     - objecttype
     - attrid
     - attridname
     - brief
     - attrvaluetype
     - flags
     - allowedobjecttypes
     - allowedobjecttypeslength
     - allowrepetitiononlist
     - allowmixedobjecttypes
     - allowemptylist
     - allownullobjectid
     - isoidattribute
     - defaultvaluetype
     - defaultvalue
     - defaultvalueobjecttype
     - defaultvalueattrid
     - storedefaultvalue
     - isenum
     - isenumlist
     - enummetadata
     - conditiontype
     - conditions
     - conditionslength
     - isconditional
     - validonlytype
     - validonly
     - validonlylength
     - isvalidonly
     - getsave
     - isvlan
     - isaclfield
     - isaclaction
     - isaclmask
     - ismandatoryoncreate
     - iscreateonly
     - iscreateandset
     - isreadonly
     - iskey
     - isprimitive
     - notificationtype
     - iscallback
     - pointertype
     - capability
     - capabilitylength
     - isextensionattr
     - isresourcetype
     - isdeprecated
    """


    def __init__(self, objecttype=None, attrid=None, attridname=None, brief=None, attrvaluetype=None, flags=None, allowedobjecttypes=None, allowedobjecttypeslength=None, allowrepetitiononlist=None, allowmixedobjecttypes=None, allowemptylist=None, allownullobjectid=None, isoidattribute=None, defaultvaluetype=None, defaultvalue=None, defaultvalueobjecttype=None, defaultvalueattrid=None, storedefaultvalue=None, isenum=None, isenumlist=None, enummetadata=None, conditiontype=None, conditions=None, conditionslength=None, isconditional=None, validonlytype=None, validonly=None, validonlylength=None, isvalidonly=None, getsave=None, isvlan=None, isaclfield=None, isaclaction=None, isaclmask=None, ismandatoryoncreate=None, iscreateonly=None, iscreateandset=None, isreadonly=None, iskey=None, isprimitive=None, notificationtype=None, iscallback=None, pointertype=None, capability=None, capabilitylength=None, isextensionattr=None, isresourcetype=None, isdeprecated=None,):
        self.objecttype = objecttype
        self.attrid = attrid
        self.attridname = attridname
        self.brief = brief
        self.attrvaluetype = attrvaluetype
        self.flags = flags
        self.allowedobjecttypes = allowedobjecttypes
        self.allowedobjecttypeslength = allowedobjecttypeslength
        self.allowrepetitiononlist = allowrepetitiononlist
        self.allowmixedobjecttypes = allowmixedobjecttypes
        self.allowemptylist = allowemptylist
        self.allownullobjectid = allownullobjectid
        self.isoidattribute = isoidattribute
        self.defaultvaluetype = defaultvaluetype
        self.defaultvalue = defaultvalue
        self.defaultvalueobjecttype = defaultvalueobjecttype
        self.defaultvalueattrid = defaultvalueattrid
        self.storedefaultvalue = storedefaultvalue
        self.isenum = isenum
        self.isenumlist = isenumlist
        self.enummetadata = enummetadata
        self.conditiontype = conditiontype
        self.conditions = conditions
        self.conditionslength = conditionslength
        self.isconditional = isconditional
        self.validonlytype = validonlytype
        self.validonly = validonly
        self.validonlylength = validonlylength
        self.isvalidonly = isvalidonly
        self.getsave = getsave
        self.isvlan = isvlan
        self.isaclfield = isaclfield
        self.isaclaction = isaclaction
        self.isaclmask = isaclmask
        self.ismandatoryoncreate = ismandatoryoncreate
        self.iscreateonly = iscreateonly
        self.iscreateandset = iscreateandset
        self.isreadonly = isreadonly
        self.iskey = iskey
        self.isprimitive = isprimitive
        self.notificationtype = notificationtype
        self.iscallback = iscallback
        self.pointertype = pointertype
        self.capability = capability
        self.capabilitylength = capabilitylength
        self.isextensionattr = isextensionattr
        self.isresourcetype = isresourcetype
        self.isdeprecated = isdeprecated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attrid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.attridname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.brief = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.attrvaluetype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.flags = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.allowedobjecttypes = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.allowedobjecttypes.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.allowedobjecttypeslength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.allowrepetitiononlist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.allowmixedobjecttypes = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.allowemptylist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.allownullobjectid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.isoidattribute = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.defaultvaluetype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.defaultvalue = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = sai_thrift_attribute_value_t()
                        _elem32.read(iprot)
                        self.defaultvalue.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.defaultvalueobjecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.defaultvalueattrid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.storedefaultvalue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.isenum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.isenumlist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.enummetadata = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = sai_thrift_enum_metadata_t()
                        _elem38.read(iprot)
                        self.enummetadata.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.conditiontype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.conditions = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = sai_thrift_attr_condition_t()
                        _elem44.read(iprot)
                        self.conditions.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.conditionslength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.isconditional = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I32:
                    self.validonlytype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.LIST:
                    self.validonly = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = sai_thrift_attr_condition_t()
                        _elem50.read(iprot)
                        self.validonly.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I64:
                    self.validonlylength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.isvalidonly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.getsave = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.isvlan = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.isaclfield = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BOOL:
                    self.isaclaction = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.isaclmask = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BOOL:
                    self.ismandatoryoncreate = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.BOOL:
                    self.iscreateonly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.BOOL:
                    self.iscreateandset = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.BOOL:
                    self.isreadonly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.BOOL:
                    self.iskey = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.BOOL:
                    self.isprimitive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I32:
                    self.notificationtype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.BOOL:
                    self.iscallback = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.I32:
                    self.pointertype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.LIST:
                    self.capability = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = sai_thrift_attr_capability_metadata_t()
                        _elem56.read(iprot)
                        self.capability.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I64:
                    self.capabilitylength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.BOOL:
                    self.isextensionattr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.BOOL:
                    self.isresourcetype = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.BOOL:
                    self.isdeprecated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attr_metadata_t')
        if self.objecttype is not None:
            oprot.writeFieldBegin('objecttype', TType.I32, 1)
            oprot.writeI32(self.objecttype)
            oprot.writeFieldEnd()
        if self.attrid is not None:
            oprot.writeFieldBegin('attrid', TType.I32, 2)
            oprot.writeI32(self.attrid)
            oprot.writeFieldEnd()
        if self.attridname is not None:
            oprot.writeFieldBegin('attridname', TType.STRING, 3)
            oprot.writeString(self.attridname.encode('utf-8') if sys.version_info[0] == 2 else self.attridname)
            oprot.writeFieldEnd()
        if self.brief is not None:
            oprot.writeFieldBegin('brief', TType.STRING, 4)
            oprot.writeString(self.brief.encode('utf-8') if sys.version_info[0] == 2 else self.brief)
            oprot.writeFieldEnd()
        if self.attrvaluetype is not None:
            oprot.writeFieldBegin('attrvaluetype', TType.I32, 5)
            oprot.writeI32(self.attrvaluetype)
            oprot.writeFieldEnd()
        if self.flags is not None:
            oprot.writeFieldBegin('flags', TType.I32, 6)
            oprot.writeI32(self.flags)
            oprot.writeFieldEnd()
        if self.allowedobjecttypes is not None:
            oprot.writeFieldBegin('allowedobjecttypes', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.allowedobjecttypes))
            for iter57 in self.allowedobjecttypes:
                oprot.writeI32(iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.allowedobjecttypeslength is not None:
            oprot.writeFieldBegin('allowedobjecttypeslength', TType.I64, 8)
            oprot.writeI64(self.allowedobjecttypeslength)
            oprot.writeFieldEnd()
        if self.allowrepetitiononlist is not None:
            oprot.writeFieldBegin('allowrepetitiononlist', TType.BOOL, 9)
            oprot.writeBool(self.allowrepetitiononlist)
            oprot.writeFieldEnd()
        if self.allowmixedobjecttypes is not None:
            oprot.writeFieldBegin('allowmixedobjecttypes', TType.BOOL, 10)
            oprot.writeBool(self.allowmixedobjecttypes)
            oprot.writeFieldEnd()
        if self.allowemptylist is not None:
            oprot.writeFieldBegin('allowemptylist', TType.BOOL, 11)
            oprot.writeBool(self.allowemptylist)
            oprot.writeFieldEnd()
        if self.allownullobjectid is not None:
            oprot.writeFieldBegin('allownullobjectid', TType.BOOL, 12)
            oprot.writeBool(self.allownullobjectid)
            oprot.writeFieldEnd()
        if self.isoidattribute is not None:
            oprot.writeFieldBegin('isoidattribute', TType.BOOL, 13)
            oprot.writeBool(self.isoidattribute)
            oprot.writeFieldEnd()
        if self.defaultvaluetype is not None:
            oprot.writeFieldBegin('defaultvaluetype', TType.I32, 14)
            oprot.writeI32(self.defaultvaluetype)
            oprot.writeFieldEnd()
        if self.defaultvalue is not None:
            oprot.writeFieldBegin('defaultvalue', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.defaultvalue))
            for iter58 in self.defaultvalue:
                iter58.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.defaultvalueobjecttype is not None:
            oprot.writeFieldBegin('defaultvalueobjecttype', TType.I32, 16)
            oprot.writeI32(self.defaultvalueobjecttype)
            oprot.writeFieldEnd()
        if self.defaultvalueattrid is not None:
            oprot.writeFieldBegin('defaultvalueattrid', TType.I32, 17)
            oprot.writeI32(self.defaultvalueattrid)
            oprot.writeFieldEnd()
        if self.storedefaultvalue is not None:
            oprot.writeFieldBegin('storedefaultvalue', TType.BOOL, 18)
            oprot.writeBool(self.storedefaultvalue)
            oprot.writeFieldEnd()
        if self.isenum is not None:
            oprot.writeFieldBegin('isenum', TType.BOOL, 19)
            oprot.writeBool(self.isenum)
            oprot.writeFieldEnd()
        if self.isenumlist is not None:
            oprot.writeFieldBegin('isenumlist', TType.BOOL, 20)
            oprot.writeBool(self.isenumlist)
            oprot.writeFieldEnd()
        if self.enummetadata is not None:
            oprot.writeFieldBegin('enummetadata', TType.LIST, 21)
            oprot.writeListBegin(TType.STRUCT, len(self.enummetadata))
            for iter59 in self.enummetadata:
                iter59.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.conditiontype is not None:
            oprot.writeFieldBegin('conditiontype', TType.I32, 22)
            oprot.writeI32(self.conditiontype)
            oprot.writeFieldEnd()
        if self.conditions is not None:
            oprot.writeFieldBegin('conditions', TType.LIST, 23)
            oprot.writeListBegin(TType.STRUCT, len(self.conditions))
            for iter60 in self.conditions:
                iter60.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.conditionslength is not None:
            oprot.writeFieldBegin('conditionslength', TType.I64, 24)
            oprot.writeI64(self.conditionslength)
            oprot.writeFieldEnd()
        if self.isconditional is not None:
            oprot.writeFieldBegin('isconditional', TType.BOOL, 25)
            oprot.writeBool(self.isconditional)
            oprot.writeFieldEnd()
        if self.validonlytype is not None:
            oprot.writeFieldBegin('validonlytype', TType.I32, 26)
            oprot.writeI32(self.validonlytype)
            oprot.writeFieldEnd()
        if self.validonly is not None:
            oprot.writeFieldBegin('validonly', TType.LIST, 27)
            oprot.writeListBegin(TType.STRUCT, len(self.validonly))
            for iter61 in self.validonly:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.validonlylength is not None:
            oprot.writeFieldBegin('validonlylength', TType.I64, 28)
            oprot.writeI64(self.validonlylength)
            oprot.writeFieldEnd()
        if self.isvalidonly is not None:
            oprot.writeFieldBegin('isvalidonly', TType.BOOL, 29)
            oprot.writeBool(self.isvalidonly)
            oprot.writeFieldEnd()
        if self.getsave is not None:
            oprot.writeFieldBegin('getsave', TType.BOOL, 30)
            oprot.writeBool(self.getsave)
            oprot.writeFieldEnd()
        if self.isvlan is not None:
            oprot.writeFieldBegin('isvlan', TType.BOOL, 31)
            oprot.writeBool(self.isvlan)
            oprot.writeFieldEnd()
        if self.isaclfield is not None:
            oprot.writeFieldBegin('isaclfield', TType.BOOL, 32)
            oprot.writeBool(self.isaclfield)
            oprot.writeFieldEnd()
        if self.isaclaction is not None:
            oprot.writeFieldBegin('isaclaction', TType.BOOL, 33)
            oprot.writeBool(self.isaclaction)
            oprot.writeFieldEnd()
        if self.isaclmask is not None:
            oprot.writeFieldBegin('isaclmask', TType.BOOL, 34)
            oprot.writeBool(self.isaclmask)
            oprot.writeFieldEnd()
        if self.ismandatoryoncreate is not None:
            oprot.writeFieldBegin('ismandatoryoncreate', TType.BOOL, 35)
            oprot.writeBool(self.ismandatoryoncreate)
            oprot.writeFieldEnd()
        if self.iscreateonly is not None:
            oprot.writeFieldBegin('iscreateonly', TType.BOOL, 36)
            oprot.writeBool(self.iscreateonly)
            oprot.writeFieldEnd()
        if self.iscreateandset is not None:
            oprot.writeFieldBegin('iscreateandset', TType.BOOL, 37)
            oprot.writeBool(self.iscreateandset)
            oprot.writeFieldEnd()
        if self.isreadonly is not None:
            oprot.writeFieldBegin('isreadonly', TType.BOOL, 38)
            oprot.writeBool(self.isreadonly)
            oprot.writeFieldEnd()
        if self.iskey is not None:
            oprot.writeFieldBegin('iskey', TType.BOOL, 39)
            oprot.writeBool(self.iskey)
            oprot.writeFieldEnd()
        if self.isprimitive is not None:
            oprot.writeFieldBegin('isprimitive', TType.BOOL, 40)
            oprot.writeBool(self.isprimitive)
            oprot.writeFieldEnd()
        if self.notificationtype is not None:
            oprot.writeFieldBegin('notificationtype', TType.I32, 41)
            oprot.writeI32(self.notificationtype)
            oprot.writeFieldEnd()
        if self.iscallback is not None:
            oprot.writeFieldBegin('iscallback', TType.BOOL, 42)
            oprot.writeBool(self.iscallback)
            oprot.writeFieldEnd()
        if self.pointertype is not None:
            oprot.writeFieldBegin('pointertype', TType.I32, 43)
            oprot.writeI32(self.pointertype)
            oprot.writeFieldEnd()
        if self.capability is not None:
            oprot.writeFieldBegin('capability', TType.LIST, 44)
            oprot.writeListBegin(TType.STRUCT, len(self.capability))
            for iter62 in self.capability:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.capabilitylength is not None:
            oprot.writeFieldBegin('capabilitylength', TType.I64, 45)
            oprot.writeI64(self.capabilitylength)
            oprot.writeFieldEnd()
        if self.isextensionattr is not None:
            oprot.writeFieldBegin('isextensionattr', TType.BOOL, 46)
            oprot.writeBool(self.isextensionattr)
            oprot.writeFieldEnd()
        if self.isresourcetype is not None:
            oprot.writeFieldBegin('isresourcetype', TType.BOOL, 47)
            oprot.writeBool(self.isresourcetype)
            oprot.writeFieldEnd()
        if self.isdeprecated is not None:
            oprot.writeFieldBegin('isdeprecated', TType.BOOL, 48)
            oprot.writeBool(self.isdeprecated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_struct_member_info_t(object):
    """
    Attributes:
     - membervaluetype
     - membername
     - isvlan
     - allowedobjecttypes
     - allowedobjecttypeslength
     - isenum
     - enummetadata
     - getoid
     - setoid
     - offset
     - size
    """


    def __init__(self, membervaluetype=None, membername=None, isvlan=None, allowedobjecttypes=None, allowedobjecttypeslength=None, isenum=None, enummetadata=None, getoid=None, setoid=None, offset=None, size=None,):
        self.membervaluetype = membervaluetype
        self.membername = membername
        self.isvlan = isvlan
        self.allowedobjecttypes = allowedobjecttypes
        self.allowedobjecttypeslength = allowedobjecttypeslength
        self.isenum = isenum
        self.enummetadata = enummetadata
        self.getoid = getoid
        self.setoid = setoid
        self.offset = offset
        self.size = size

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.membervaluetype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.membername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isvlan = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.allowedobjecttypes = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = iprot.readI32()
                        self.allowedobjecttypes.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.allowedobjecttypeslength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isenum = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.enummetadata = []
                    (_etype72, _size69) = iprot.readListBegin()
                    for _i73 in range(_size69):
                        _elem74 = sai_thrift_enum_metadata_t()
                        _elem74.read(iprot)
                        self.enummetadata.append(_elem74)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.getoid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.setoid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.offset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_struct_member_info_t')
        if self.membervaluetype is not None:
            oprot.writeFieldBegin('membervaluetype', TType.I32, 1)
            oprot.writeI32(self.membervaluetype)
            oprot.writeFieldEnd()
        if self.membername is not None:
            oprot.writeFieldBegin('membername', TType.STRING, 2)
            oprot.writeString(self.membername.encode('utf-8') if sys.version_info[0] == 2 else self.membername)
            oprot.writeFieldEnd()
        if self.isvlan is not None:
            oprot.writeFieldBegin('isvlan', TType.BOOL, 3)
            oprot.writeBool(self.isvlan)
            oprot.writeFieldEnd()
        if self.allowedobjecttypes is not None:
            oprot.writeFieldBegin('allowedobjecttypes', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.allowedobjecttypes))
            for iter75 in self.allowedobjecttypes:
                oprot.writeI32(iter75)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.allowedobjecttypeslength is not None:
            oprot.writeFieldBegin('allowedobjecttypeslength', TType.I64, 5)
            oprot.writeI64(self.allowedobjecttypeslength)
            oprot.writeFieldEnd()
        if self.isenum is not None:
            oprot.writeFieldBegin('isenum', TType.BOOL, 6)
            oprot.writeBool(self.isenum)
            oprot.writeFieldEnd()
        if self.enummetadata is not None:
            oprot.writeFieldBegin('enummetadata', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.enummetadata))
            for iter76 in self.enummetadata:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.getoid is not None:
            oprot.writeFieldBegin('getoid', TType.I64, 8)
            oprot.writeI64(self.getoid)
            oprot.writeFieldEnd()
        if self.setoid is not None:
            oprot.writeFieldBegin('setoid', TType.I64, 9)
            oprot.writeI64(self.setoid)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I64, 10)
            oprot.writeI64(self.offset)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 11)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_rev_graph_member_t(object):
    """
    Attributes:
     - objecttype
     - depobjecttype
     - attrmetadata
     - structmember
    """


    def __init__(self, objecttype=None, depobjecttype=None, attrmetadata=None, structmember=None,):
        self.objecttype = objecttype
        self.depobjecttype = depobjecttype
        self.attrmetadata = attrmetadata
        self.structmember = structmember

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.depobjecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attrmetadata = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = sai_thrift_attr_metadata_t()
                        _elem82.read(iprot)
                        self.attrmetadata.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.structmember = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = sai_thrift_struct_member_info_t()
                        _elem88.read(iprot)
                        self.structmember.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_rev_graph_member_t')
        if self.objecttype is not None:
            oprot.writeFieldBegin('objecttype', TType.I32, 1)
            oprot.writeI32(self.objecttype)
            oprot.writeFieldEnd()
        if self.depobjecttype is not None:
            oprot.writeFieldBegin('depobjecttype', TType.I32, 2)
            oprot.writeI32(self.depobjecttype)
            oprot.writeFieldEnd()
        if self.attrmetadata is not None:
            oprot.writeFieldBegin('attrmetadata', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attrmetadata))
            for iter89 in self.attrmetadata:
                iter89.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.structmember is not None:
            oprot.writeFieldBegin('structmember', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.structmember))
            for iter90 in self.structmember:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_object_type_info_t(object):
    """
    Attributes:
     - objecttype
     - objecttypename
     - attridstart
     - attridend
     - enummetadata
     - attrmetadata
     - attrmetadatalength
     - isnonobjectid
     - isobjectid
     - structmembers
     - structmemberscount
     - revgraphmembers
     - revgraphmemberscount
     - create
     - remove
     - fnset
     - fnget
     - getstats
     - getstatsext
     - clearstats
     - isexperimental
     - statenum
    """


    def __init__(self, objecttype=None, objecttypename=None, attridstart=None, attridend=None, enummetadata=None, attrmetadata=None, attrmetadatalength=None, isnonobjectid=None, isobjectid=None, structmembers=None, structmemberscount=None, revgraphmembers=None, revgraphmemberscount=None, create=None, remove=None, fnset=None, fnget=None, getstats=None, getstatsext=None, clearstats=None, isexperimental=None, statenum=None,):
        self.objecttype = objecttype
        self.objecttypename = objecttypename
        self.attridstart = attridstart
        self.attridend = attridend
        self.enummetadata = enummetadata
        self.attrmetadata = attrmetadata
        self.attrmetadatalength = attrmetadatalength
        self.isnonobjectid = isnonobjectid
        self.isobjectid = isobjectid
        self.structmembers = structmembers
        self.structmemberscount = structmemberscount
        self.revgraphmembers = revgraphmembers
        self.revgraphmemberscount = revgraphmemberscount
        self.create = create
        self.remove = remove
        self.fnset = fnset
        self.fnget = fnget
        self.getstats = getstats
        self.getstatsext = getstatsext
        self.clearstats = clearstats
        self.isexperimental = isexperimental
        self.statenum = statenum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.objecttype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.objecttypename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attridstart = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.attridend = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.enummetadata = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = sai_thrift_enum_metadata_t()
                        _elem96.read(iprot)
                        self.enummetadata.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.attrmetadata = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = sai_thrift_attr_metadata_t()
                        _elem102.read(iprot)
                        self.attrmetadata.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.attrmetadatalength = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.isnonobjectid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isobjectid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.structmembers = []
                    (_etype106, _size103) = iprot.readListBegin()
                    for _i107 in range(_size103):
                        _elem108 = sai_thrift_struct_member_info_t()
                        _elem108.read(iprot)
                        self.structmembers.append(_elem108)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.structmemberscount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.revgraphmembers = []
                    (_etype112, _size109) = iprot.readListBegin()
                    for _i113 in range(_size109):
                        _elem114 = sai_thrift_rev_graph_member_t()
                        _elem114.read(iprot)
                        self.revgraphmembers.append(_elem114)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.revgraphmemberscount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.create = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.remove = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.fnset = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.fnget = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.getstats = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.getstatsext = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I64:
                    self.clearstats = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.isexperimental = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.statenum = []
                    (_etype118, _size115) = iprot.readListBegin()
                    for _i119 in range(_size115):
                        _elem120 = sai_thrift_enum_metadata_t()
                        _elem120.read(iprot)
                        self.statenum.append(_elem120)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_type_info_t')
        if self.objecttype is not None:
            oprot.writeFieldBegin('objecttype', TType.I32, 1)
            oprot.writeI32(self.objecttype)
            oprot.writeFieldEnd()
        if self.objecttypename is not None:
            oprot.writeFieldBegin('objecttypename', TType.STRING, 2)
            oprot.writeString(self.objecttypename.encode('utf-8') if sys.version_info[0] == 2 else self.objecttypename)
            oprot.writeFieldEnd()
        if self.attridstart is not None:
            oprot.writeFieldBegin('attridstart', TType.I32, 3)
            oprot.writeI32(self.attridstart)
            oprot.writeFieldEnd()
        if self.attridend is not None:
            oprot.writeFieldBegin('attridend', TType.I32, 4)
            oprot.writeI32(self.attridend)
            oprot.writeFieldEnd()
        if self.enummetadata is not None:
            oprot.writeFieldBegin('enummetadata', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.enummetadata))
            for iter121 in self.enummetadata:
                iter121.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attrmetadata is not None:
            oprot.writeFieldBegin('attrmetadata', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.attrmetadata))
            for iter122 in self.attrmetadata:
                iter122.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attrmetadatalength is not None:
            oprot.writeFieldBegin('attrmetadatalength', TType.I64, 7)
            oprot.writeI64(self.attrmetadatalength)
            oprot.writeFieldEnd()
        if self.isnonobjectid is not None:
            oprot.writeFieldBegin('isnonobjectid', TType.BOOL, 8)
            oprot.writeBool(self.isnonobjectid)
            oprot.writeFieldEnd()
        if self.isobjectid is not None:
            oprot.writeFieldBegin('isobjectid', TType.BOOL, 9)
            oprot.writeBool(self.isobjectid)
            oprot.writeFieldEnd()
        if self.structmembers is not None:
            oprot.writeFieldBegin('structmembers', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.structmembers))
            for iter123 in self.structmembers:
                iter123.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.structmemberscount is not None:
            oprot.writeFieldBegin('structmemberscount', TType.I64, 11)
            oprot.writeI64(self.structmemberscount)
            oprot.writeFieldEnd()
        if self.revgraphmembers is not None:
            oprot.writeFieldBegin('revgraphmembers', TType.LIST, 12)
            oprot.writeListBegin(TType.STRUCT, len(self.revgraphmembers))
            for iter124 in self.revgraphmembers:
                iter124.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revgraphmemberscount is not None:
            oprot.writeFieldBegin('revgraphmemberscount', TType.I64, 13)
            oprot.writeI64(self.revgraphmemberscount)
            oprot.writeFieldEnd()
        if self.create is not None:
            oprot.writeFieldBegin('create', TType.I64, 14)
            oprot.writeI64(self.create)
            oprot.writeFieldEnd()
        if self.remove is not None:
            oprot.writeFieldBegin('remove', TType.I64, 15)
            oprot.writeI64(self.remove)
            oprot.writeFieldEnd()
        if self.fnset is not None:
            oprot.writeFieldBegin('fnset', TType.I64, 16)
            oprot.writeI64(self.fnset)
            oprot.writeFieldEnd()
        if self.fnget is not None:
            oprot.writeFieldBegin('fnget', TType.I64, 17)
            oprot.writeI64(self.fnget)
            oprot.writeFieldEnd()
        if self.getstats is not None:
            oprot.writeFieldBegin('getstats', TType.I64, 18)
            oprot.writeI64(self.getstats)
            oprot.writeFieldEnd()
        if self.getstatsext is not None:
            oprot.writeFieldBegin('getstatsext', TType.I64, 19)
            oprot.writeI64(self.getstatsext)
            oprot.writeFieldEnd()
        if self.clearstats is not None:
            oprot.writeFieldBegin('clearstats', TType.I64, 20)
            oprot.writeI64(self.clearstats)
            oprot.writeFieldEnd()
        if self.isexperimental is not None:
            oprot.writeFieldBegin('isexperimental', TType.BOOL, 21)
            oprot.writeBool(self.isexperimental)
            oprot.writeFieldEnd()
        if self.statenum is not None:
            oprot.writeFieldBegin('statenum', TType.LIST, 22)
            oprot.writeListBegin(TType.STRUCT, len(self.statenum))
            for iter125 in self.statenum:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_timespec_t(object):
    """
    Attributes:
     - tv_sec
     - tv_nsec
    """


    def __init__(self, tv_sec=None, tv_nsec=None,):
        self.tv_sec = tv_sec
        self.tv_nsec = tv_nsec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tv_sec = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tv_nsec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_timespec_t')
        if self.tv_sec is not None:
            oprot.writeFieldBegin('tv_sec', TType.I64, 1)
            oprot.writeI64(self.tv_sec)
            oprot.writeFieldEnd()
        if self.tv_nsec is not None:
            oprot.writeFieldBegin('tv_nsec', TType.I32, 2)
            oprot.writeI32(self.tv_nsec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_object_list_t(object):
    """
    Attributes:
     - count
     - idlist
    """


    def __init__(self, count=None, idlist=None,):
        self.count = count
        self.idlist = idlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.idlist = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readI64()
                        self.idlist.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.idlist is not None:
            oprot.writeFieldBegin('idlist', TType.LIST, 2)
            oprot.writeListBegin(TType.I64, len(self.idlist))
            for iter132 in self.idlist:
                oprot.writeI64(iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u8_list_t(object):
    """
    Attributes:
     - count
     - uint8list
    """


    def __init__(self, count=None, uint8list=None,):
        self.count = count
        self.uint8list = uint8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.uint8list = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readByte()
                        self.uint8list.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u8_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.uint8list is not None:
            oprot.writeFieldBegin('uint8list', TType.LIST, 2)
            oprot.writeListBegin(TType.BYTE, len(self.uint8list))
            for iter139 in self.uint8list:
                oprot.writeByte(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s8_list_t(object):
    """
    Attributes:
     - count
     - int8list
    """


    def __init__(self, count=None, int8list=None,):
        self.count = count
        self.int8list = int8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.int8list = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readByte()
                        self.int8list.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s8_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.int8list is not None:
            oprot.writeFieldBegin('int8list', TType.LIST, 2)
            oprot.writeListBegin(TType.BYTE, len(self.int8list))
            for iter146 in self.int8list:
                oprot.writeByte(iter146)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u16_list_t(object):
    """
    Attributes:
     - count
     - uint16list
    """


    def __init__(self, count=None, uint16list=None,):
        self.count = count
        self.uint16list = uint16list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.uint16list = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = iprot.readI16()
                        self.uint16list.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u16_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.uint16list is not None:
            oprot.writeFieldBegin('uint16list', TType.LIST, 2)
            oprot.writeListBegin(TType.I16, len(self.uint16list))
            for iter153 in self.uint16list:
                oprot.writeI16(iter153)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s16_list_t(object):
    """
    Attributes:
     - count
     - int16list
    """


    def __init__(self, count=None, int16list=None,):
        self.count = count
        self.int16list = int16list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.int16list = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readI16()
                        self.int16list.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s16_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.int16list is not None:
            oprot.writeFieldBegin('int16list', TType.LIST, 2)
            oprot.writeListBegin(TType.I16, len(self.int16list))
            for iter160 in self.int16list:
                oprot.writeI16(iter160)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u32_list_t(object):
    """
    Attributes:
     - count
     - uint32list
    """


    def __init__(self, count=None, uint32list=None,):
        self.count = count
        self.uint32list = uint32list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.uint32list = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = iprot.readI32()
                        self.uint32list.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u32_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.uint32list is not None:
            oprot.writeFieldBegin('uint32list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.uint32list))
            for iter167 in self.uint32list:
                oprot.writeI32(iter167)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s32_list_t(object):
    """
    Attributes:
     - count
     - int32list
    """


    def __init__(self, count=None, int32list=None,):
        self.count = count
        self.int32list = int32list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.int32list = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = iprot.readI32()
                        self.int32list.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s32_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.int32list is not None:
            oprot.writeFieldBegin('int32list', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.int32list))
            for iter174 in self.int32list:
                oprot.writeI32(iter174)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u32_range_t(object):
    """
    Attributes:
     - min
     - max
    """


    def __init__(self, min=None, max=None,):
        self.min = min
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u32_range_t')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 1)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 2)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_s32_range_t(object):
    """
    Attributes:
     - min
     - max
    """


    def __init__(self, min=None, max=None,):
        self.min = min
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.min = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.max = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_s32_range_t')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I32, 1)
            oprot.writeI32(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I32, 2)
            oprot.writeI32(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u16_range_t(object):
    """
    Attributes:
     - min
     - max
    """


    def __init__(self, min=None, max=None,):
        self.min = min
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.min = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.max = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u16_range_t')
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.I16, 1)
            oprot.writeI16(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.I16, 2)
            oprot.writeI16(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_u16_range_list_t(object):
    """
    Attributes:
     - count
     - rangelist
    """


    def __init__(self, count=None, rangelist=None,):
        self.count = count
        self.rangelist = rangelist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.rangelist = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = sai_thrift_u16_range_t()
                        _elem180.read(iprot)
                        self.rangelist.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_u16_range_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.rangelist is not None:
            oprot.writeFieldBegin('rangelist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.rangelist))
            for iter181 in self.rangelist:
                iter181.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_vlan_list_t(object):
    """
    Attributes:
     - count
     - idlist
    """


    def __init__(self, count=None, idlist=None,):
        self.count = count
        self.idlist = idlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.idlist = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = iprot.readI16()
                        self.idlist.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_vlan_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.idlist is not None:
            oprot.writeFieldBegin('idlist', TType.LIST, 2)
            oprot.writeListBegin(TType.I16, len(self.idlist))
            for iter188 in self.idlist:
                oprot.writeI16(iter188)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_addr_t(object):
    """
    Attributes:
     - ip4
     - ip6
    """


    def __init__(self, ip4=None, ip6=None,):
        self.ip4 = ip4
        self.ip6 = ip6

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_addr_t')
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 1)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 2)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_address_t(object):
    """
    Attributes:
     - addr_family
     - addr
    """


    def __init__(self, addr_family=None, addr=None,):
        self.addr_family = addr_family
        self.addr = addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.addr_family = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.addr = sai_thrift_ip_addr_t()
                    self.addr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_address_t')
        if self.addr_family is not None:
            oprot.writeFieldBegin('addr_family', TType.I32, 1)
            oprot.writeI32(self.addr_family)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRUCT, 2)
            self.addr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_address_list_t(object):
    """
    Attributes:
     - count
     - addresslist
    """


    def __init__(self, count=None, addresslist=None,):
        self.count = count
        self.addresslist = addresslist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.addresslist = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = sai_thrift_ip_address_t()
                        _elem194.read(iprot)
                        self.addresslist.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_address_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.addresslist is not None:
            oprot.writeFieldBegin('addresslist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.addresslist))
            for iter195 in self.addresslist:
                iter195.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_prefix_t(object):
    """
    Attributes:
     - addr_family
     - addr
     - mask
    """


    def __init__(self, addr_family=None, addr=None, mask=None,):
        self.addr_family = addr_family
        self.addr = addr
        self.mask = mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.addr_family = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.addr = sai_thrift_ip_addr_t()
                    self.addr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mask = sai_thrift_ip_addr_t()
                    self.mask.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_prefix_t')
        if self.addr_family is not None:
            oprot.writeFieldBegin('addr_family', TType.I32, 1)
            oprot.writeI32(self.addr_family)
            oprot.writeFieldEnd()
        if self.addr is not None:
            oprot.writeFieldBegin('addr', TType.STRUCT, 2)
            self.addr.write(oprot)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRUCT, 3)
            self.mask.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ip_prefix_list_t(object):
    """
    Attributes:
     - count
     - prefixlist
    """


    def __init__(self, count=None, prefixlist=None,):
        self.count = count
        self.prefixlist = prefixlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.prefixlist = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = sai_thrift_ip_prefix_t()
                        _elem201.read(iprot)
                        self.prefixlist.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ip_prefix_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.prefixlist is not None:
            oprot.writeFieldBegin('prefixlist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.prefixlist))
            for iter202 in self.prefixlist:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_prbs_rx_state_t(object):
    """
    Attributes:
     - rx_status
     - error_count
    """


    def __init__(self, rx_status=None, error_count=None,):
        self.rx_status = rx_status
        self.error_count = error_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.rx_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.error_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_prbs_rx_state_t')
        if self.rx_status is not None:
            oprot.writeFieldBegin('rx_status', TType.I32, 1)
            oprot.writeI32(self.rx_status)
            oprot.writeFieldEnd()
        if self.error_count is not None:
            oprot.writeFieldBegin('error_count', TType.I32, 2)
            oprot.writeI32(self.error_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_latch_status_t(object):
    """
    Attributes:
     - current_status
     - changed
    """


    def __init__(self, current_status=None, changed=None,):
        self.current_status = current_status
        self.changed = changed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.current_status = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.changed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_latch_status_t')
        if self.current_status is not None:
            oprot.writeFieldBegin('current_status', TType.BOOL, 1)
            oprot.writeBool(self.current_status)
            oprot.writeFieldEnd()
        if self.changed is not None:
            oprot.writeFieldBegin('changed', TType.BOOL, 2)
            oprot.writeBool(self.changed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_lane_latch_status_t(object):
    """
    Attributes:
     - lane
     - value
    """


    def __init__(self, lane=None, value=None,):
        self.lane = lane
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = sai_thrift_latch_status_t()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_lane_latch_status_t')
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 1)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_lane_latch_status_list_t(object):
    """
    Attributes:
     - count
     - statuslist
    """


    def __init__(self, count=None, statuslist=None,):
        self.count = count
        self.statuslist = statuslist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.statuslist = []
                    (_etype206, _size203) = iprot.readListBegin()
                    for _i207 in range(_size203):
                        _elem208 = sai_thrift_port_lane_latch_status_t()
                        _elem208.read(iprot)
                        self.statuslist.append(_elem208)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_lane_latch_status_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.statuslist is not None:
            oprot.writeFieldBegin('statuslist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.statuslist))
            for iter209 in self.statuslist:
                iter209.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_field_data_mask_t(object):
    """
    Attributes:
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - u64
     - mac
     - ip4
     - ip6
     - u8list
    """


    def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, u64=None, mac=None, ip4=None, ip6=None, u8list=None,):
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.u64 = u64
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.u8list = u8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.u64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_field_data_mask_t')
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 1)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 2)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 3)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 4)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 5)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 6)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.u64 is not None:
            oprot.writeFieldBegin('u64', TType.I64, 7)
            oprot.writeI64(self.u64)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 8)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 9)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 10)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 11)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_field_data_data_t(object):
    """
    Attributes:
     - booldata
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - u64
     - mac
     - ip4
     - ip6
     - oid
     - objlist
     - u8list
    """


    def __init__(self, booldata=None, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, u64=None, mac=None, ip4=None, ip6=None, oid=None, objlist=None, u8list=None,):
        self.booldata = booldata
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.u64 = u64
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.oid = oid
        self.objlist = objlist
        self.u8list = u8list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.booldata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.u64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_field_data_data_t')
        if self.booldata is not None:
            oprot.writeFieldBegin('booldata', TType.BOOL, 1)
            oprot.writeBool(self.booldata)
            oprot.writeFieldEnd()
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 2)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 3)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 4)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 5)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 6)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 7)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.u64 is not None:
            oprot.writeFieldBegin('u64', TType.I64, 8)
            oprot.writeI64(self.u64)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 9)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 10)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 11)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 12)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 13)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 14)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_field_data_t(object):
    """
    Attributes:
     - enable
     - mask
     - data
    """


    def __init__(self, enable=None, mask=None, data=None,):
        self.enable = enable
        self.mask = mask
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.mask = sai_thrift_acl_field_data_mask_t()
                    self.mask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.data = sai_thrift_acl_field_data_data_t()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_field_data_t')
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 1)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRUCT, 2)
            self.mask.write(oprot)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 3)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_action_parameter_t(object):
    """
    Attributes:
     - booldata
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - mac
     - ip4
     - ip6
     - oid
     - objlist
     - ipaddr
    """


    def __init__(self, booldata=None, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, oid=None, objlist=None, ipaddr=None,):
        self.booldata = booldata
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.oid = oid
        self.objlist = objlist
        self.ipaddr = ipaddr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.booldata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.ipaddr = sai_thrift_ip_address_t()
                    self.ipaddr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_action_parameter_t')
        if self.booldata is not None:
            oprot.writeFieldBegin('booldata', TType.BOOL, 1)
            oprot.writeBool(self.booldata)
            oprot.writeFieldEnd()
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 2)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 3)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 4)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 5)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 6)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 7)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 8)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 9)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 10)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 11)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 12)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.ipaddr is not None:
            oprot.writeFieldBegin('ipaddr', TType.STRUCT, 13)
            self.ipaddr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_action_data_t(object):
    """
    Attributes:
     - enable
     - parameter
    """


    def __init__(self, enable=None, parameter=None,):
        self.enable = enable
        self.parameter = parameter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.parameter = sai_thrift_acl_action_parameter_t()
                    self.parameter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_action_data_t')
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 1)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        if self.parameter is not None:
            oprot.writeFieldBegin('parameter', TType.STRUCT, 2)
            self.parameter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_params_t(object):
    """
    Attributes:
     - tc
     - dscp
     - dot1p
     - prio
     - pg
     - queue_index
     - color
     - mpls_exp
     - fc
    """


    def __init__(self, tc=None, dscp=None, dot1p=None, prio=None, pg=None, queue_index=None, color=None, mpls_exp=None, fc=None,):
        self.tc = tc
        self.dscp = dscp
        self.dot1p = dot1p
        self.prio = prio
        self.pg = pg
        self.queue_index = queue_index
        self.color = color
        self.mpls_exp = mpls_exp
        self.fc = fc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.tc = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.dscp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.dot1p = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.prio = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.pg = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.queue_index = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.color = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.mpls_exp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.fc = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_params_t')
        if self.tc is not None:
            oprot.writeFieldBegin('tc', TType.BYTE, 1)
            oprot.writeByte(self.tc)
            oprot.writeFieldEnd()
        if self.dscp is not None:
            oprot.writeFieldBegin('dscp', TType.BYTE, 2)
            oprot.writeByte(self.dscp)
            oprot.writeFieldEnd()
        if self.dot1p is not None:
            oprot.writeFieldBegin('dot1p', TType.BYTE, 3)
            oprot.writeByte(self.dot1p)
            oprot.writeFieldEnd()
        if self.prio is not None:
            oprot.writeFieldBegin('prio', TType.BYTE, 4)
            oprot.writeByte(self.prio)
            oprot.writeFieldEnd()
        if self.pg is not None:
            oprot.writeFieldBegin('pg', TType.BYTE, 5)
            oprot.writeByte(self.pg)
            oprot.writeFieldEnd()
        if self.queue_index is not None:
            oprot.writeFieldBegin('queue_index', TType.BYTE, 6)
            oprot.writeByte(self.queue_index)
            oprot.writeFieldEnd()
        if self.color is not None:
            oprot.writeFieldBegin('color', TType.I32, 7)
            oprot.writeI32(self.color)
            oprot.writeFieldEnd()
        if self.mpls_exp is not None:
            oprot.writeFieldBegin('mpls_exp', TType.BYTE, 8)
            oprot.writeByte(self.mpls_exp)
            oprot.writeFieldEnd()
        if self.fc is not None:
            oprot.writeFieldBegin('fc', TType.BYTE, 9)
            oprot.writeByte(self.fc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_t(object):
    """
    Attributes:
     - key
     - value
    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.key = sai_thrift_qos_map_params_t()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = sai_thrift_qos_map_params_t()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_t')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 1)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_qos_map_list_t(object):
    """
    Attributes:
     - count
     - maplist
    """


    def __init__(self, count=None, maplist=None,):
        self.count = count
        self.maplist = maplist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.maplist = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = sai_thrift_qos_map_t()
                        _elem215.read(iprot)
                        self.maplist.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_qos_map_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.maplist is not None:
            oprot.writeFieldBegin('maplist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.maplist))
            for iter216 in self.maplist:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_map_t(object):
    """
    Attributes:
     - key
     - value
    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.key = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_map_t')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.I32, 1)
            oprot.writeI32(self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 2)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_map_list_t(object):
    """
    Attributes:
     - count
     - maplist
    """


    def __init__(self, count=None, maplist=None,):
        self.count = count
        self.maplist = maplist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.maplist = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = sai_thrift_map_t()
                        _elem222.read(iprot)
                        self.maplist.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_map_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.maplist is not None:
            oprot.writeFieldBegin('maplist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.maplist))
            for iter223 in self.maplist:
                iter223.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_chain_t(object):
    """
    Attributes:
     - chain_group_stage
     - supported_match_type
    """


    def __init__(self, chain_group_stage=None, supported_match_type=None,):
        self.chain_group_stage = chain_group_stage
        self.supported_match_type = supported_match_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.chain_group_stage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.supported_match_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_chain_t')
        if self.chain_group_stage is not None:
            oprot.writeFieldBegin('chain_group_stage', TType.I32, 1)
            oprot.writeI32(self.chain_group_stage)
            oprot.writeFieldEnd()
        if self.supported_match_type is not None:
            oprot.writeFieldBegin('supported_match_type', TType.I32, 2)
            oprot.writeI32(self.supported_match_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_chain_list_t(object):
    """
    Attributes:
     - count
     - chainlist
    """


    def __init__(self, count=None, chainlist=None,):
        self.count = count
        self.chainlist = chainlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.chainlist = []
                    (_etype227, _size224) = iprot.readListBegin()
                    for _i228 in range(_size224):
                        _elem229 = sai_thrift_acl_chain_t()
                        _elem229.read(iprot)
                        self.chainlist.append(_elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_chain_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.chainlist is not None:
            oprot.writeFieldBegin('chainlist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.chainlist))
            for iter230 in self.chainlist:
                iter230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_capability_t(object):
    """
    Attributes:
     - is_action_list_mandatory
     - action_list
     - supported_match_type
     - is_non_contiguous_bits_exact_match_supported
    """


    def __init__(self, is_action_list_mandatory=None, action_list=None, supported_match_type=None, is_non_contiguous_bits_exact_match_supported=None,):
        self.is_action_list_mandatory = is_action_list_mandatory
        self.action_list = action_list
        self.supported_match_type = supported_match_type
        self.is_non_contiguous_bits_exact_match_supported = is_non_contiguous_bits_exact_match_supported

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.is_action_list_mandatory = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.action_list = sai_thrift_s32_list_t()
                    self.action_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.supported_match_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.is_non_contiguous_bits_exact_match_supported = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_capability_t')
        if self.is_action_list_mandatory is not None:
            oprot.writeFieldBegin('is_action_list_mandatory', TType.BOOL, 1)
            oprot.writeBool(self.is_action_list_mandatory)
            oprot.writeFieldEnd()
        if self.action_list is not None:
            oprot.writeFieldBegin('action_list', TType.STRUCT, 2)
            self.action_list.write(oprot)
            oprot.writeFieldEnd()
        if self.supported_match_type is not None:
            oprot.writeFieldBegin('supported_match_type', TType.I32, 3)
            oprot.writeI32(self.supported_match_type)
            oprot.writeFieldEnd()
        if self.is_non_contiguous_bits_exact_match_supported is not None:
            oprot.writeFieldBegin('is_non_contiguous_bits_exact_match_supported', TType.BOOL, 4)
            oprot.writeBool(self.is_non_contiguous_bits_exact_match_supported)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_resource_t(object):
    """
    Attributes:
     - stage
     - bind_point
     - avail_num
    """


    def __init__(self, stage=None, bind_point=None, avail_num=None,):
        self.stage = stage
        self.bind_point = bind_point
        self.avail_num = avail_num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stage = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.bind_point = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.avail_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_resource_t')
        if self.stage is not None:
            oprot.writeFieldBegin('stage', TType.I32, 1)
            oprot.writeI32(self.stage)
            oprot.writeFieldEnd()
        if self.bind_point is not None:
            oprot.writeFieldBegin('bind_point', TType.I32, 2)
            oprot.writeI32(self.bind_point)
            oprot.writeFieldEnd()
        if self.avail_num is not None:
            oprot.writeFieldBegin('avail_num', TType.I32, 3)
            oprot.writeI32(self.avail_num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_acl_resource_list_t(object):
    """
    Attributes:
     - count
     - resourcelist
    """


    def __init__(self, count=None, resourcelist=None,):
        self.count = count
        self.resourcelist = resourcelist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.resourcelist = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = sai_thrift_acl_resource_t()
                        _elem236.read(iprot)
                        self.resourcelist.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_acl_resource_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.resourcelist is not None:
            oprot.writeFieldBegin('resourcelist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.resourcelist))
            for iter237 in self.resourcelist:
                iter237.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_hmac_t(object):
    """
    Attributes:
     - key_id
     - hmac
    """


    def __init__(self, key_id=None, hmac=None,):
        self.key_id = key_id
        self.hmac = hmac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.key_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.hmac = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = iprot.readI32()
                        self.hmac.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_hmac_t')
        if self.key_id is not None:
            oprot.writeFieldBegin('key_id', TType.I32, 1)
            oprot.writeI32(self.key_id)
            oprot.writeFieldEnd()
        if self.hmac is not None:
            oprot.writeFieldBegin('hmac', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.hmac))
            for iter244 in self.hmac:
                oprot.writeI32(iter244)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_tlv_entry_t(object):
    """
    Attributes:
     - ingress_node
     - egress_node
     - opaque_container
     - hmac
    """


    def __init__(self, ingress_node=None, egress_node=None, opaque_container=None, hmac=None,):
        self.ingress_node = ingress_node
        self.egress_node = egress_node
        self.opaque_container = opaque_container
        self.hmac = hmac

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ingress_node = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.egress_node = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.opaque_container = []
                    (_etype248, _size245) = iprot.readListBegin()
                    for _i249 in range(_size245):
                        _elem250 = iprot.readI32()
                        self.opaque_container.append(_elem250)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.hmac = sai_thrift_hmac_t()
                    self.hmac.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_tlv_entry_t')
        if self.ingress_node is not None:
            oprot.writeFieldBegin('ingress_node', TType.STRING, 1)
            oprot.writeString(self.ingress_node.encode('utf-8') if sys.version_info[0] == 2 else self.ingress_node)
            oprot.writeFieldEnd()
        if self.egress_node is not None:
            oprot.writeFieldBegin('egress_node', TType.STRING, 2)
            oprot.writeString(self.egress_node.encode('utf-8') if sys.version_info[0] == 2 else self.egress_node)
            oprot.writeFieldEnd()
        if self.opaque_container is not None:
            oprot.writeFieldBegin('opaque_container', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.opaque_container))
            for iter251 in self.opaque_container:
                oprot.writeI32(iter251)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hmac is not None:
            oprot.writeFieldBegin('hmac', TType.STRUCT, 4)
            self.hmac.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_tlv_t(object):
    """
    Attributes:
     - tlv_type
     - entry
    """


    def __init__(self, tlv_type=None, entry=None,):
        self.tlv_type = tlv_type
        self.entry = entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tlv_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.entry = sai_thrift_tlv_entry_t()
                    self.entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_tlv_t')
        if self.tlv_type is not None:
            oprot.writeFieldBegin('tlv_type', TType.I32, 1)
            oprot.writeI32(self.tlv_type)
            oprot.writeFieldEnd()
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.STRUCT, 2)
            self.entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_tlv_list_t(object):
    """
    Attributes:
     - count
     - tlvlist
    """


    def __init__(self, count=None, tlvlist=None,):
        self.count = count
        self.tlvlist = tlvlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tlvlist = []
                    (_etype255, _size252) = iprot.readListBegin()
                    for _i256 in range(_size252):
                        _elem257 = sai_thrift_tlv_t()
                        _elem257.read(iprot)
                        self.tlvlist.append(_elem257)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_tlv_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.tlvlist is not None:
            oprot.writeFieldBegin('tlvlist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tlvlist))
            for iter258 in self.tlvlist:
                iter258.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_segment_list_t(object):
    """
    Attributes:
     - count
     - ip6list
    """


    def __init__(self, count=None, ip6list=None,):
        self.count = count
        self.ip6list = ip6list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.ip6list = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.ip6list.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_segment_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.ip6list is not None:
            oprot.writeFieldBegin('ip6list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.ip6list))
            for iter265 in self.ip6list:
                oprot.writeString(iter265.encode('utf-8') if sys.version_info[0] == 2 else iter265)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_json_t(object):
    """
    Attributes:
     - json
    """


    def __init__(self, json=None,):
        self.json = json

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.json = sai_thrift_s8_list_t()
                    self.json.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_json_t')
        if self.json is not None:
            oprot.writeFieldBegin('json', TType.STRUCT, 1)
            self.json.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_lane_eye_values_t(object):
    """
    Attributes:
     - lane
     - left
     - right
     - up
     - down
    """


    def __init__(self, lane=None, left=None, right=None, up=None, down=None,):
        self.lane = lane
        self.left = left
        self.right = right
        self.up = up
        self.down = down

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.left = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.right = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.up = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.down = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_lane_eye_values_t')
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 1)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.left is not None:
            oprot.writeFieldBegin('left', TType.I32, 2)
            oprot.writeI32(self.left)
            oprot.writeFieldEnd()
        if self.right is not None:
            oprot.writeFieldBegin('right', TType.I32, 3)
            oprot.writeI32(self.right)
            oprot.writeFieldEnd()
        if self.up is not None:
            oprot.writeFieldBegin('up', TType.I32, 4)
            oprot.writeI32(self.up)
            oprot.writeFieldEnd()
        if self.down is not None:
            oprot.writeFieldBegin('down', TType.I32, 5)
            oprot.writeI32(self.down)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_eye_values_list_t(object):
    """
    Attributes:
     - count
     - valueslist
    """


    def __init__(self, count=None, valueslist=None,):
        self.count = count
        self.valueslist = valueslist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.valueslist = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = sai_thrift_port_lane_eye_values_t()
                        _elem271.read(iprot)
                        self.valueslist.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_eye_values_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.valueslist is not None:
            oprot.writeFieldBegin('valueslist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.valueslist))
            for iter272 in self.valueslist:
                iter272.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_system_port_config_t(object):
    """
    Attributes:
     - port_id
     - attached_switch_id
     - attached_core_index
     - attached_core_port_index
     - speed
     - num_voq
    """


    def __init__(self, port_id=None, attached_switch_id=None, attached_core_index=None, attached_core_port_index=None, speed=None, num_voq=None,):
        self.port_id = port_id
        self.attached_switch_id = attached_switch_id
        self.attached_core_index = attached_core_index
        self.attached_core_port_index = attached_core_port_index
        self.speed = speed
        self.num_voq = num_voq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attached_switch_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attached_core_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.attached_core_port_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.speed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.num_voq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_system_port_config_t')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 1)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        if self.attached_switch_id is not None:
            oprot.writeFieldBegin('attached_switch_id', TType.I32, 2)
            oprot.writeI32(self.attached_switch_id)
            oprot.writeFieldEnd()
        if self.attached_core_index is not None:
            oprot.writeFieldBegin('attached_core_index', TType.I32, 3)
            oprot.writeI32(self.attached_core_index)
            oprot.writeFieldEnd()
        if self.attached_core_port_index is not None:
            oprot.writeFieldBegin('attached_core_port_index', TType.I32, 4)
            oprot.writeI32(self.attached_core_port_index)
            oprot.writeFieldEnd()
        if self.speed is not None:
            oprot.writeFieldBegin('speed', TType.I32, 5)
            oprot.writeI32(self.speed)
            oprot.writeFieldEnd()
        if self.num_voq is not None:
            oprot.writeFieldBegin('num_voq', TType.I32, 6)
            oprot.writeI32(self.num_voq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_system_port_config_list_t(object):
    """
    Attributes:
     - count
     - configlist
    """


    def __init__(self, count=None, configlist=None,):
        self.count = count
        self.configlist = configlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.configlist = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = sai_thrift_system_port_config_t()
                        _elem278.read(iprot)
                        self.configlist.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_system_port_config_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.configlist is not None:
            oprot.writeFieldBegin('configlist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.configlist))
            for iter279 in self.configlist:
                iter279.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_fabric_port_reachability_t(object):
    """
    Attributes:
     - switch_id
     - reachable
    """


    def __init__(self, switch_id=None, reachable=None,):
        self.switch_id = switch_id
        self.reachable = reachable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.switch_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.reachable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_fabric_port_reachability_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I32, 1)
            oprot.writeI32(self.switch_id)
            oprot.writeFieldEnd()
        if self.reachable is not None:
            oprot.writeFieldBegin('reachable', TType.BOOL, 2)
            oprot.writeBool(self.reachable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_err_status_list_t(object):
    """
    Attributes:
     - count
     - statuslist
    """


    def __init__(self, count=None, statuslist=None,):
        self.count = count
        self.statuslist = statuslist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.statuslist = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = iprot.readI32()
                        self.statuslist.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_err_status_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.statuslist is not None:
            oprot.writeFieldBegin('statuslist', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.statuslist))
            for iter286 in self.statuslist:
                oprot.writeI32(iter286)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_value_t(object):
    """
    Attributes:
     - booldata
     - chardata
     - u8
     - s8
     - u16
     - s16
     - u32
     - s32
     - u64
     - s64
     - ptr
     - mac
     - ip4
     - ip6
     - ipaddr
     - ipprefix
     - rx_state
     - oid
     - objlist
     - u8list
     - s8list
     - u16list
     - s16list
     - u32list
     - s32list
     - u32range
     - s32range
     - u16rangelist
     - vlanlist
     - qosmap
     - maplist
     - aclfield
     - aclaction
     - aclmask
     - aclcapability
     - aclresource
     - tlvlist
     - segmentlist
     - ipaddrlist
     - porteyevalues
     - timespec
     - encrypt_key
     - authkey
     - macsecsak
     - macsecauthkey
     - macsecsalt
     - sysportconfig
     - sysportconfiglist
     - reachability
     - porterror
     - portlanelatchstatuslist
     - latchstatus
     - json
     - ipprefixlist
     - aclchainlist
    """


    def __init__(self, booldata=None, chardata=None, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, u64=None, s64=None, ptr=None, mac=None, ip4=None, ip6=None, ipaddr=None, ipprefix=None, rx_state=None, oid=None, objlist=None, u8list=None, s8list=None, u16list=None, s16list=None, u32list=None, s32list=None, u32range=None, s32range=None, u16rangelist=None, vlanlist=None, qosmap=None, maplist=None, aclfield=None, aclaction=None, aclmask=None, aclcapability=None, aclresource=None, tlvlist=None, segmentlist=None, ipaddrlist=None, porteyevalues=None, timespec=None, encrypt_key=None, authkey=None, macsecsak=None, macsecauthkey=None, macsecsalt=None, sysportconfig=None, sysportconfiglist=None, reachability=None, porterror=None, portlanelatchstatuslist=None, latchstatus=None, json=None, ipprefixlist=None, aclchainlist=None,):
        self.booldata = booldata
        self.chardata = chardata
        self.u8 = u8
        self.s8 = s8
        self.u16 = u16
        self.s16 = s16
        self.u32 = u32
        self.s32 = s32
        self.u64 = u64
        self.s64 = s64
        self.ptr = ptr
        self.mac = mac
        self.ip4 = ip4
        self.ip6 = ip6
        self.ipaddr = ipaddr
        self.ipprefix = ipprefix
        self.rx_state = rx_state
        self.oid = oid
        self.objlist = objlist
        self.u8list = u8list
        self.s8list = s8list
        self.u16list = u16list
        self.s16list = s16list
        self.u32list = u32list
        self.s32list = s32list
        self.u32range = u32range
        self.s32range = s32range
        self.u16rangelist = u16rangelist
        self.vlanlist = vlanlist
        self.qosmap = qosmap
        self.maplist = maplist
        self.aclfield = aclfield
        self.aclaction = aclaction
        self.aclmask = aclmask
        self.aclcapability = aclcapability
        self.aclresource = aclresource
        self.tlvlist = tlvlist
        self.segmentlist = segmentlist
        self.ipaddrlist = ipaddrlist
        self.porteyevalues = porteyevalues
        self.timespec = timespec
        self.encrypt_key = encrypt_key
        self.authkey = authkey
        self.macsecsak = macsecsak
        self.macsecauthkey = macsecauthkey
        self.macsecsalt = macsecsalt
        self.sysportconfig = sysportconfig
        self.sysportconfiglist = sysportconfiglist
        self.reachability = reachability
        self.porterror = porterror
        self.portlanelatchstatuslist = portlanelatchstatuslist
        self.latchstatus = latchstatus
        self.json = json
        self.ipprefixlist = ipprefixlist
        self.aclchainlist = aclchainlist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.booldata = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chardata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.u8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.s8 = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.u16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.s16 = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.u32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.s32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.u64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.s64 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.ptr = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.ip4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.ip6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.ipaddr = sai_thrift_ip_address_t()
                    self.ipaddr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.ipprefix = sai_thrift_ip_prefix_t()
                    self.ipprefix.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.rx_state = sai_thrift_prbs_rx_state_t()
                    self.rx_state.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRUCT:
                    self.objlist = sai_thrift_object_list_t()
                    self.objlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.u8list = sai_thrift_u8_list_t()
                    self.u8list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.s8list = sai_thrift_s8_list_t()
                    self.s8list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRUCT:
                    self.u16list = sai_thrift_u16_list_t()
                    self.u16list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRUCT:
                    self.s16list = sai_thrift_s16_list_t()
                    self.s16list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRUCT:
                    self.u32list = sai_thrift_u32_list_t()
                    self.u32list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRUCT:
                    self.s32list = sai_thrift_s32_list_t()
                    self.s32list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.u32range = sai_thrift_u32_range_t()
                    self.u32range.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.s32range = sai_thrift_s32_range_t()
                    self.s32range.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.u16rangelist = sai_thrift_u16_range_list_t()
                    self.u16rangelist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRUCT:
                    self.vlanlist = sai_thrift_vlan_list_t()
                    self.vlanlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.qosmap = sai_thrift_qos_map_list_t()
                    self.qosmap.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRUCT:
                    self.maplist = sai_thrift_map_list_t()
                    self.maplist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRUCT:
                    self.aclfield = sai_thrift_acl_field_data_t()
                    self.aclfield.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRUCT:
                    self.aclaction = sai_thrift_acl_action_data_t()
                    self.aclaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRUCT:
                    self.aclmask = sai_thrift_acl_field_data_mask_t()
                    self.aclmask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRUCT:
                    self.aclcapability = sai_thrift_acl_capability_t()
                    self.aclcapability.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRUCT:
                    self.aclresource = sai_thrift_acl_resource_list_t()
                    self.aclresource.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRUCT:
                    self.tlvlist = sai_thrift_tlv_list_t()
                    self.tlvlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRUCT:
                    self.segmentlist = sai_thrift_segment_list_t()
                    self.segmentlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRUCT:
                    self.ipaddrlist = sai_thrift_ip_address_list_t()
                    self.ipaddrlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRUCT:
                    self.porteyevalues = sai_thrift_port_eye_values_list_t()
                    self.porteyevalues.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRUCT:
                    self.timespec = sai_thrift_timespec_t()
                    self.timespec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.BYTE:
                    self.encrypt_key = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.BYTE:
                    self.authkey = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.BYTE:
                    self.macsecsak = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.BYTE:
                    self.macsecauthkey = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.BYTE:
                    self.macsecsalt = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRUCT:
                    self.sysportconfig = sai_thrift_system_port_config_t()
                    self.sysportconfig.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.STRUCT:
                    self.sysportconfiglist = sai_thrift_system_port_config_list_t()
                    self.sysportconfiglist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.STRUCT:
                    self.reachability = sai_thrift_fabric_port_reachability_t()
                    self.reachability.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRUCT:
                    self.porterror = sai_thrift_port_err_status_list_t()
                    self.porterror.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRUCT:
                    self.portlanelatchstatuslist = sai_thrift_port_lane_latch_status_list_t()
                    self.portlanelatchstatuslist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.STRUCT:
                    self.latchstatus = sai_thrift_latch_status_t()
                    self.latchstatus.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 53:
                if ftype == TType.STRUCT:
                    self.json = sai_thrift_json_t()
                    self.json.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 54:
                if ftype == TType.STRUCT:
                    self.ipprefixlist = sai_thrift_ip_prefix_list_t()
                    self.ipprefixlist.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 55:
                if ftype == TType.STRUCT:
                    self.aclchainlist = sai_thrift_acl_chain_list_t()
                    self.aclchainlist.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_value_t')
        if self.booldata is not None:
            oprot.writeFieldBegin('booldata', TType.BOOL, 1)
            oprot.writeBool(self.booldata)
            oprot.writeFieldEnd()
        if self.chardata is not None:
            oprot.writeFieldBegin('chardata', TType.STRING, 2)
            oprot.writeString(self.chardata.encode('utf-8') if sys.version_info[0] == 2 else self.chardata)
            oprot.writeFieldEnd()
        if self.u8 is not None:
            oprot.writeFieldBegin('u8', TType.BYTE, 3)
            oprot.writeByte(self.u8)
            oprot.writeFieldEnd()
        if self.s8 is not None:
            oprot.writeFieldBegin('s8', TType.BYTE, 4)
            oprot.writeByte(self.s8)
            oprot.writeFieldEnd()
        if self.u16 is not None:
            oprot.writeFieldBegin('u16', TType.I16, 5)
            oprot.writeI16(self.u16)
            oprot.writeFieldEnd()
        if self.s16 is not None:
            oprot.writeFieldBegin('s16', TType.I16, 6)
            oprot.writeI16(self.s16)
            oprot.writeFieldEnd()
        if self.u32 is not None:
            oprot.writeFieldBegin('u32', TType.I32, 7)
            oprot.writeI32(self.u32)
            oprot.writeFieldEnd()
        if self.s32 is not None:
            oprot.writeFieldBegin('s32', TType.I32, 8)
            oprot.writeI32(self.s32)
            oprot.writeFieldEnd()
        if self.u64 is not None:
            oprot.writeFieldBegin('u64', TType.I64, 9)
            oprot.writeI64(self.u64)
            oprot.writeFieldEnd()
        if self.s64 is not None:
            oprot.writeFieldBegin('s64', TType.I64, 10)
            oprot.writeI64(self.s64)
            oprot.writeFieldEnd()
        if self.ptr is not None:
            oprot.writeFieldBegin('ptr', TType.I64, 11)
            oprot.writeI64(self.ptr)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 12)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.ip4 is not None:
            oprot.writeFieldBegin('ip4', TType.STRING, 13)
            oprot.writeString(self.ip4.encode('utf-8') if sys.version_info[0] == 2 else self.ip4)
            oprot.writeFieldEnd()
        if self.ip6 is not None:
            oprot.writeFieldBegin('ip6', TType.STRING, 14)
            oprot.writeString(self.ip6.encode('utf-8') if sys.version_info[0] == 2 else self.ip6)
            oprot.writeFieldEnd()
        if self.ipaddr is not None:
            oprot.writeFieldBegin('ipaddr', TType.STRUCT, 15)
            self.ipaddr.write(oprot)
            oprot.writeFieldEnd()
        if self.ipprefix is not None:
            oprot.writeFieldBegin('ipprefix', TType.STRUCT, 16)
            self.ipprefix.write(oprot)
            oprot.writeFieldEnd()
        if self.rx_state is not None:
            oprot.writeFieldBegin('rx_state', TType.STRUCT, 17)
            self.rx_state.write(oprot)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.I64, 18)
            oprot.writeI64(self.oid)
            oprot.writeFieldEnd()
        if self.objlist is not None:
            oprot.writeFieldBegin('objlist', TType.STRUCT, 19)
            self.objlist.write(oprot)
            oprot.writeFieldEnd()
        if self.u8list is not None:
            oprot.writeFieldBegin('u8list', TType.STRUCT, 20)
            self.u8list.write(oprot)
            oprot.writeFieldEnd()
        if self.s8list is not None:
            oprot.writeFieldBegin('s8list', TType.STRUCT, 21)
            self.s8list.write(oprot)
            oprot.writeFieldEnd()
        if self.u16list is not None:
            oprot.writeFieldBegin('u16list', TType.STRUCT, 22)
            self.u16list.write(oprot)
            oprot.writeFieldEnd()
        if self.s16list is not None:
            oprot.writeFieldBegin('s16list', TType.STRUCT, 23)
            self.s16list.write(oprot)
            oprot.writeFieldEnd()
        if self.u32list is not None:
            oprot.writeFieldBegin('u32list', TType.STRUCT, 24)
            self.u32list.write(oprot)
            oprot.writeFieldEnd()
        if self.s32list is not None:
            oprot.writeFieldBegin('s32list', TType.STRUCT, 25)
            self.s32list.write(oprot)
            oprot.writeFieldEnd()
        if self.u32range is not None:
            oprot.writeFieldBegin('u32range', TType.STRUCT, 26)
            self.u32range.write(oprot)
            oprot.writeFieldEnd()
        if self.s32range is not None:
            oprot.writeFieldBegin('s32range', TType.STRUCT, 27)
            self.s32range.write(oprot)
            oprot.writeFieldEnd()
        if self.u16rangelist is not None:
            oprot.writeFieldBegin('u16rangelist', TType.STRUCT, 28)
            self.u16rangelist.write(oprot)
            oprot.writeFieldEnd()
        if self.vlanlist is not None:
            oprot.writeFieldBegin('vlanlist', TType.STRUCT, 29)
            self.vlanlist.write(oprot)
            oprot.writeFieldEnd()
        if self.qosmap is not None:
            oprot.writeFieldBegin('qosmap', TType.STRUCT, 30)
            self.qosmap.write(oprot)
            oprot.writeFieldEnd()
        if self.maplist is not None:
            oprot.writeFieldBegin('maplist', TType.STRUCT, 31)
            self.maplist.write(oprot)
            oprot.writeFieldEnd()
        if self.aclfield is not None:
            oprot.writeFieldBegin('aclfield', TType.STRUCT, 32)
            self.aclfield.write(oprot)
            oprot.writeFieldEnd()
        if self.aclaction is not None:
            oprot.writeFieldBegin('aclaction', TType.STRUCT, 33)
            self.aclaction.write(oprot)
            oprot.writeFieldEnd()
        if self.aclmask is not None:
            oprot.writeFieldBegin('aclmask', TType.STRUCT, 34)
            self.aclmask.write(oprot)
            oprot.writeFieldEnd()
        if self.aclcapability is not None:
            oprot.writeFieldBegin('aclcapability', TType.STRUCT, 35)
            self.aclcapability.write(oprot)
            oprot.writeFieldEnd()
        if self.aclresource is not None:
            oprot.writeFieldBegin('aclresource', TType.STRUCT, 36)
            self.aclresource.write(oprot)
            oprot.writeFieldEnd()
        if self.tlvlist is not None:
            oprot.writeFieldBegin('tlvlist', TType.STRUCT, 37)
            self.tlvlist.write(oprot)
            oprot.writeFieldEnd()
        if self.segmentlist is not None:
            oprot.writeFieldBegin('segmentlist', TType.STRUCT, 38)
            self.segmentlist.write(oprot)
            oprot.writeFieldEnd()
        if self.ipaddrlist is not None:
            oprot.writeFieldBegin('ipaddrlist', TType.STRUCT, 39)
            self.ipaddrlist.write(oprot)
            oprot.writeFieldEnd()
        if self.porteyevalues is not None:
            oprot.writeFieldBegin('porteyevalues', TType.STRUCT, 40)
            self.porteyevalues.write(oprot)
            oprot.writeFieldEnd()
        if self.timespec is not None:
            oprot.writeFieldBegin('timespec', TType.STRUCT, 41)
            self.timespec.write(oprot)
            oprot.writeFieldEnd()
        if self.encrypt_key is not None:
            oprot.writeFieldBegin('encrypt_key', TType.BYTE, 42)
            oprot.writeByte(self.encrypt_key)
            oprot.writeFieldEnd()
        if self.authkey is not None:
            oprot.writeFieldBegin('authkey', TType.BYTE, 43)
            oprot.writeByte(self.authkey)
            oprot.writeFieldEnd()
        if self.macsecsak is not None:
            oprot.writeFieldBegin('macsecsak', TType.BYTE, 44)
            oprot.writeByte(self.macsecsak)
            oprot.writeFieldEnd()
        if self.macsecauthkey is not None:
            oprot.writeFieldBegin('macsecauthkey', TType.BYTE, 45)
            oprot.writeByte(self.macsecauthkey)
            oprot.writeFieldEnd()
        if self.macsecsalt is not None:
            oprot.writeFieldBegin('macsecsalt', TType.BYTE, 46)
            oprot.writeByte(self.macsecsalt)
            oprot.writeFieldEnd()
        if self.sysportconfig is not None:
            oprot.writeFieldBegin('sysportconfig', TType.STRUCT, 47)
            self.sysportconfig.write(oprot)
            oprot.writeFieldEnd()
        if self.sysportconfiglist is not None:
            oprot.writeFieldBegin('sysportconfiglist', TType.STRUCT, 48)
            self.sysportconfiglist.write(oprot)
            oprot.writeFieldEnd()
        if self.reachability is not None:
            oprot.writeFieldBegin('reachability', TType.STRUCT, 49)
            self.reachability.write(oprot)
            oprot.writeFieldEnd()
        if self.porterror is not None:
            oprot.writeFieldBegin('porterror', TType.STRUCT, 50)
            self.porterror.write(oprot)
            oprot.writeFieldEnd()
        if self.portlanelatchstatuslist is not None:
            oprot.writeFieldBegin('portlanelatchstatuslist', TType.STRUCT, 51)
            self.portlanelatchstatuslist.write(oprot)
            oprot.writeFieldEnd()
        if self.latchstatus is not None:
            oprot.writeFieldBegin('latchstatus', TType.STRUCT, 52)
            self.latchstatus.write(oprot)
            oprot.writeFieldEnd()
        if self.json is not None:
            oprot.writeFieldBegin('json', TType.STRUCT, 53)
            self.json.write(oprot)
            oprot.writeFieldEnd()
        if self.ipprefixlist is not None:
            oprot.writeFieldBegin('ipprefixlist', TType.STRUCT, 54)
            self.ipprefixlist.write(oprot)
            oprot.writeFieldEnd()
        if self.aclchainlist is not None:
            oprot.writeFieldBegin('aclchainlist', TType.STRUCT, 55)
            self.aclchainlist.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_t(object):
    """
    Attributes:
     - id
     - value
    """


    def __init__(self, id=None, value=None,):
        self.id = id
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = sai_thrift_attribute_value_t()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_t')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_stat_capability_t(object):
    """
    Attributes:
     - stat_enum
     - stat_modes
    """


    def __init__(self, stat_enum=None, stat_modes=None,):
        self.stat_enum = stat_enum
        self.stat_modes = stat_modes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stat_enum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.stat_modes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_stat_capability_t')
        if self.stat_enum is not None:
            oprot.writeFieldBegin('stat_enum', TType.I32, 1)
            oprot.writeI32(self.stat_enum)
            oprot.writeFieldEnd()
        if self.stat_modes is not None:
            oprot.writeFieldBegin('stat_modes', TType.I32, 2)
            oprot.writeI32(self.stat_modes)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_stat_capability_list_t(object):
    """
    Attributes:
     - count
     - capabilitylist
    """


    def __init__(self, count=None, capabilitylist=None,):
        self.count = count
        self.capabilitylist = capabilitylist

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.capabilitylist = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = sai_thrift_stat_capability_t()
                        _elem292.read(iprot)
                        self.capabilitylist.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_stat_capability_list_t')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 1)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.capabilitylist is not None:
            oprot.writeFieldBegin('capabilitylist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.capabilitylist))
            for iter293 in self.capabilitylist:
                iter293.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_switch_health_data_t(object):
    """
    Attributes:
     - data_type
    """


    def __init__(self, data_type=None,):
        self.data_type = data_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.data_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_health_data_t')
        if self.data_type is not None:
            oprot.writeFieldBegin('data_type', TType.I32, 1)
            oprot.writeI32(self.data_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_bfd_session_state_notification_t(object):
    """
    Attributes:
     - bfd_session_id
     - session_state
    """


    def __init__(self, bfd_session_id=None, session_state=None,):
        self.bfd_session_id = bfd_session_id
        self.session_state = session_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.session_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bfd_session_state_notification_t')
        if self.bfd_session_id is not None:
            oprot.writeFieldBegin('bfd_session_id', TType.I64, 1)
            oprot.writeI64(self.bfd_session_id)
            oprot.writeFieldEnd()
        if self.session_state is not None:
            oprot.writeFieldBegin('session_state', TType.I32, 2)
            oprot.writeI32(self.session_state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_direction_lookup_entry_t(object):
    """
    Attributes:
     - switch_id
     - vni
    """


    def __init__(self, switch_id=None, vni=None,):
        self.switch_id = switch_id
        self.vni = vni

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vni = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_direction_lookup_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vni is not None:
            oprot.writeFieldBegin('vni', TType.I32, 2)
            oprot.writeI32(self.vni)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_eni_ether_address_map_entry_t(object):
    """
    Attributes:
     - switch_id
     - address
    """


    def __init__(self, switch_id=None, address=None,):
        self.switch_id = switch_id
        self.address = address

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_eni_ether_address_map_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 2)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_inbound_routing_entry_t(object):
    """
    Attributes:
     - switch_id
     - eni_id
     - vni
     - sip
     - sip_mask
     - priority
    """


    def __init__(self, switch_id=None, eni_id=None, vni=None, sip=None, sip_mask=None, priority=None,):
        self.switch_id = switch_id
        self.eni_id = eni_id
        self.vni = vni
        self.sip = sip
        self.sip_mask = sip_mask
        self.priority = priority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.eni_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.vni = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sip = sai_thrift_ip_address_t()
                    self.sip.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.sip_mask = sai_thrift_ip_address_t()
                    self.sip_mask.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_inbound_routing_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.eni_id is not None:
            oprot.writeFieldBegin('eni_id', TType.I64, 2)
            oprot.writeI64(self.eni_id)
            oprot.writeFieldEnd()
        if self.vni is not None:
            oprot.writeFieldBegin('vni', TType.I32, 3)
            oprot.writeI32(self.vni)
            oprot.writeFieldEnd()
        if self.sip is not None:
            oprot.writeFieldBegin('sip', TType.STRUCT, 4)
            self.sip.write(oprot)
            oprot.writeFieldEnd()
        if self.sip_mask is not None:
            oprot.writeFieldBegin('sip_mask', TType.STRUCT, 5)
            self.sip_mask.write(oprot)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 6)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_outbound_ca_to_pa_entry_t(object):
    """
    Attributes:
     - switch_id
     - dst_vnet_id
     - dip
    """


    def __init__(self, switch_id=None, dst_vnet_id=None, dip=None,):
        self.switch_id = switch_id
        self.dst_vnet_id = dst_vnet_id
        self.dip = dip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.dst_vnet_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.dip = sai_thrift_ip_address_t()
                    self.dip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_outbound_ca_to_pa_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.dst_vnet_id is not None:
            oprot.writeFieldBegin('dst_vnet_id', TType.I64, 2)
            oprot.writeI64(self.dst_vnet_id)
            oprot.writeFieldEnd()
        if self.dip is not None:
            oprot.writeFieldBegin('dip', TType.STRUCT, 3)
            self.dip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_outbound_routing_entry_t(object):
    """
    Attributes:
     - switch_id
     - eni_id
     - destination
    """


    def __init__(self, switch_id=None, eni_id=None, destination=None,):
        self.switch_id = switch_id
        self.eni_id = eni_id
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.eni_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_prefix_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_outbound_routing_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.eni_id is not None:
            oprot.writeFieldBegin('eni_id', TType.I64, 2)
            oprot.writeI64(self.eni_id)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 3)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_pa_validation_entry_t(object):
    """
    Attributes:
     - switch_id
     - vnet_id
     - sip
    """


    def __init__(self, switch_id=None, vnet_id=None, sip=None,):
        self.switch_id = switch_id
        self.vnet_id = vnet_id
        self.sip = sip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vnet_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sip = sai_thrift_ip_address_t()
                    self.sip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_pa_validation_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vnet_id is not None:
            oprot.writeFieldBegin('vnet_id', TType.I64, 2)
            oprot.writeI64(self.vnet_id)
            oprot.writeFieldEnd()
        if self.sip is not None:
            oprot.writeFieldBegin('sip', TType.STRUCT, 3)
            self.sip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_dst_tag_entry_t(object):
    """
    Attributes:
     - switch_id
     - dip
    """


    def __init__(self, switch_id=None, dip=None,):
        self.switch_id = switch_id
        self.dip = dip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dip = sai_thrift_ip_prefix_t()
                    self.dip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_dst_tag_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.dip is not None:
            oprot.writeFieldBegin('dip', TType.STRUCT, 2)
            self.dip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_src_tag_entry_t(object):
    """
    Attributes:
     - switch_id
     - sip
    """


    def __init__(self, switch_id=None, sip=None,):
        self.switch_id = switch_id
        self.sip = sip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sip = sai_thrift_ip_prefix_t()
                    self.sip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_src_tag_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.sip is not None:
            oprot.writeFieldBegin('sip', TType.STRUCT, 2)
            self.sip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_vip_entry_t(object):
    """
    Attributes:
     - switch_id
     - vip
    """


    def __init__(self, switch_id=None, vip=None,):
        self.switch_id = switch_id
        self.vip = vip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.vip = sai_thrift_ip_address_t()
                    self.vip.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_vip_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.STRUCT, 2)
            self.vip.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_fdb_entry_t(object):
    """
    Attributes:
     - switch_id
     - mac_address
     - bv_id
    """


    def __init__(self, switch_id=None, mac_address=None, bv_id=None,):
        self.switch_id = switch_id
        self.mac_address = mac_address
        self.bv_id = bv_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_fdb_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 2)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 3)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_fdb_event_notification_data_t(object):
    """
    Attributes:
     - event_type
     - fdb_entry
     - attr_count
     - attr
    """


    def __init__(self, event_type=None, fdb_entry=None, attr_count=None, attr=None,):
        self.event_type = event_type
        self.fdb_entry = fdb_entry
        self.attr_count = attr_count
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.event_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fdb_entry = sai_thrift_fdb_entry_t()
                    self.fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attr_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.attr = []
                    (_etype297, _size294) = iprot.readListBegin()
                    for _i298 in range(_size294):
                        _elem299 = sai_thrift_attribute_t()
                        _elem299.read(iprot)
                        self.attr.append(_elem299)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_fdb_event_notification_data_t')
        if self.event_type is not None:
            oprot.writeFieldBegin('event_type', TType.I32, 1)
            oprot.writeI32(self.event_type)
            oprot.writeFieldEnd()
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.STRUCT, 2)
            self.fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.I32, 3)
            oprot.writeI32(self.attr_count)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.attr))
            for iter300 in self.attr:
                iter300.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ipmc_entry_t(object):
    """
    Attributes:
     - switch_id
     - vr_id
     - type
     - destination
     - source
    """


    def __init__(self, switch_id=None, vr_id=None, type=None, destination=None, source=None,):
        self.switch_id = switch_id
        self.vr_id = vr_id
        self.type = type
        self.destination = destination
        self.source = source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_address_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.source = sai_thrift_ip_address_t()
                    self.source.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ipmc_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 2)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 4)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRUCT, 5)
            self.source.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_ipsec_sa_status_notification_t(object):
    """
    Attributes:
     - ipsec_sa_id
     - ipsec_sa_octet_count_status
     - ipsec_egress_sn_at_max_limit
    """


    def __init__(self, ipsec_sa_id=None, ipsec_sa_octet_count_status=None, ipsec_egress_sn_at_max_limit=None,):
        self.ipsec_sa_id = ipsec_sa_id
        self.ipsec_sa_octet_count_status = ipsec_sa_octet_count_status
        self.ipsec_egress_sn_at_max_limit = ipsec_egress_sn_at_max_limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ipsec_sa_octet_count_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.ipsec_egress_sn_at_max_limit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_ipsec_sa_status_notification_t')
        if self.ipsec_sa_id is not None:
            oprot.writeFieldBegin('ipsec_sa_id', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_id)
            oprot.writeFieldEnd()
        if self.ipsec_sa_octet_count_status is not None:
            oprot.writeFieldBegin('ipsec_sa_octet_count_status', TType.I32, 2)
            oprot.writeI32(self.ipsec_sa_octet_count_status)
            oprot.writeFieldEnd()
        if self.ipsec_egress_sn_at_max_limit is not None:
            oprot.writeFieldBegin('ipsec_egress_sn_at_max_limit', TType.BOOL, 3)
            oprot.writeBool(self.ipsec_egress_sn_at_max_limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_l2mc_entry_t(object):
    """
    Attributes:
     - switch_id
     - bv_id
     - type
     - destination
     - source
    """


    def __init__(self, switch_id=None, bv_id=None, type=None, destination=None, source=None,):
        self.switch_id = switch_id
        self.bv_id = bv_id
        self.type = type
        self.destination = destination
        self.source = source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_address_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.source = sai_thrift_ip_address_t()
                    self.source.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_l2mc_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 2)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 4)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRUCT, 5)
            self.source.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_mcast_fdb_entry_t(object):
    """
    Attributes:
     - switch_id
     - mac_address
     - bv_id
    """


    def __init__(self, switch_id=None, mac_address=None, bv_id=None,):
        self.switch_id = switch_id
        self.mac_address = mac_address
        self.bv_id = bv_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mac_address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.bv_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_mcast_fdb_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.mac_address is not None:
            oprot.writeFieldBegin('mac_address', TType.STRING, 2)
            oprot.writeString(self.mac_address.encode('utf-8') if sys.version_info[0] == 2 else self.mac_address)
            oprot.writeFieldEnd()
        if self.bv_id is not None:
            oprot.writeFieldBegin('bv_id', TType.I64, 3)
            oprot.writeI64(self.bv_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_inseg_entry_t(object):
    """
    Attributes:
     - switch_id
     - label
    """


    def __init__(self, switch_id=None, label=None,):
        self.switch_id = switch_id
        self.label = label

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.label = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_inseg_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.I32, 2)
            oprot.writeI32(self.label)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_entry_key_t(object):
    """
    Attributes:
     - src_ip
     - dst_ip
     - proto
     - l4_src_port
     - l4_dst_port
    """


    def __init__(self, src_ip=None, dst_ip=None, proto=None, l4_src_port=None, l4_dst_port=None,):
        self.src_ip = src_ip
        self.dst_ip = dst_ip
        self.proto = proto
        self.l4_src_port = l4_src_port
        self.l4_dst_port = l4_dst_port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.src_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dst_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.proto = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.l4_src_port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.l4_dst_port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_entry_key_t')
        if self.src_ip is not None:
            oprot.writeFieldBegin('src_ip', TType.STRING, 1)
            oprot.writeString(self.src_ip.encode('utf-8') if sys.version_info[0] == 2 else self.src_ip)
            oprot.writeFieldEnd()
        if self.dst_ip is not None:
            oprot.writeFieldBegin('dst_ip', TType.STRING, 2)
            oprot.writeString(self.dst_ip.encode('utf-8') if sys.version_info[0] == 2 else self.dst_ip)
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.BYTE, 3)
            oprot.writeByte(self.proto)
            oprot.writeFieldEnd()
        if self.l4_src_port is not None:
            oprot.writeFieldBegin('l4_src_port', TType.I16, 4)
            oprot.writeI16(self.l4_src_port)
            oprot.writeFieldEnd()
        if self.l4_dst_port is not None:
            oprot.writeFieldBegin('l4_dst_port', TType.I16, 5)
            oprot.writeI16(self.l4_dst_port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_entry_mask_t(object):
    """
    Attributes:
     - src_ip
     - dst_ip
     - proto
     - l4_src_port
     - l4_dst_port
    """


    def __init__(self, src_ip=None, dst_ip=None, proto=None, l4_src_port=None, l4_dst_port=None,):
        self.src_ip = src_ip
        self.dst_ip = dst_ip
        self.proto = proto
        self.l4_src_port = l4_src_port
        self.l4_dst_port = l4_dst_port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.src_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dst_ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.proto = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.l4_src_port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.l4_dst_port = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_entry_mask_t')
        if self.src_ip is not None:
            oprot.writeFieldBegin('src_ip', TType.STRING, 1)
            oprot.writeString(self.src_ip.encode('utf-8') if sys.version_info[0] == 2 else self.src_ip)
            oprot.writeFieldEnd()
        if self.dst_ip is not None:
            oprot.writeFieldBegin('dst_ip', TType.STRING, 2)
            oprot.writeString(self.dst_ip.encode('utf-8') if sys.version_info[0] == 2 else self.dst_ip)
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.BYTE, 3)
            oprot.writeByte(self.proto)
            oprot.writeFieldEnd()
        if self.l4_src_port is not None:
            oprot.writeFieldBegin('l4_src_port', TType.I16, 4)
            oprot.writeI16(self.l4_src_port)
            oprot.writeFieldEnd()
        if self.l4_dst_port is not None:
            oprot.writeFieldBegin('l4_dst_port', TType.I16, 5)
            oprot.writeI16(self.l4_dst_port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_entry_data_t(object):
    """
    Attributes:
     - key
     - mask
    """


    def __init__(self, key=None, mask=None,):
        self.key = key
        self.mask = mask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.key = sai_thrift_nat_entry_key_t()
                    self.key.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.mask = sai_thrift_nat_entry_mask_t()
                    self.mask.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_entry_data_t')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRUCT, 1)
            self.key.write(oprot)
            oprot.writeFieldEnd()
        if self.mask is not None:
            oprot.writeFieldBegin('mask', TType.STRUCT, 2)
            self.mask.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_entry_t(object):
    """
    Attributes:
     - switch_id
     - vr_id
     - nat_type
     - data
    """


    def __init__(self, switch_id=None, vr_id=None, nat_type=None, data=None,):
        self.switch_id = switch_id
        self.vr_id = vr_id
        self.nat_type = nat_type
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.nat_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.data = sai_thrift_nat_entry_data_t()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 2)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.nat_type is not None:
            oprot.writeFieldBegin('nat_type', TType.I32, 3)
            oprot.writeI32(self.nat_type)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 4)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_nat_event_notification_data_t(object):
    """
    Attributes:
     - event_type
     - nat_entry
    """


    def __init__(self, event_type=None, nat_entry=None,):
        self.event_type = event_type
        self.nat_entry = nat_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.event_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.nat_entry = sai_thrift_nat_entry_t()
                    self.nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_nat_event_notification_data_t')
        if self.event_type is not None:
            oprot.writeFieldBegin('event_type', TType.I32, 1)
            oprot.writeI32(self.event_type)
            oprot.writeFieldEnd()
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.STRUCT, 2)
            self.nat_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_neighbor_entry_t(object):
    """
    Attributes:
     - switch_id
     - rif_id
     - ip_address
    """


    def __init__(self, switch_id=None, rif_id=None, ip_address=None,):
        self.switch_id = switch_id
        self.rif_id = rif_id
        self.ip_address = ip_address

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.rif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ip_address = sai_thrift_ip_address_t()
                    self.ip_address.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_neighbor_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.rif_id is not None:
            oprot.writeFieldBegin('rif_id', TType.I64, 2)
            oprot.writeI64(self.rif_id)
            oprot.writeFieldEnd()
        if self.ip_address is not None:
            oprot.writeFieldBegin('ip_address', TType.STRUCT, 3)
            self.ip_address.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_port_oper_status_notification_t(object):
    """
    Attributes:
     - port_id
     - port_state
    """


    def __init__(self, port_id=None, port_state=None,):
        self.port_id = port_id
        self.port_state = port_state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_port_oper_status_notification_t')
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I64, 1)
            oprot.writeI64(self.port_id)
            oprot.writeFieldEnd()
        if self.port_state is not None:
            oprot.writeFieldBegin('port_state', TType.I32, 2)
            oprot.writeI32(self.port_state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_queue_deadlock_notification_data_t(object):
    """
    Attributes:
     - queue_id
     - event
     - app_managed_recovery
    """


    def __init__(self, queue_id=None, event=None, app_managed_recovery=None,):
        self.queue_id = queue_id
        self.event = event
        self.app_managed_recovery = app_managed_recovery

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.event = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.app_managed_recovery = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_queue_deadlock_notification_data_t')
        if self.queue_id is not None:
            oprot.writeFieldBegin('queue_id', TType.I64, 1)
            oprot.writeI64(self.queue_id)
            oprot.writeFieldEnd()
        if self.event is not None:
            oprot.writeFieldBegin('event', TType.I32, 2)
            oprot.writeI32(self.event)
            oprot.writeFieldEnd()
        if self.app_managed_recovery is not None:
            oprot.writeFieldBegin('app_managed_recovery', TType.BOOL, 3)
            oprot.writeBool(self.app_managed_recovery)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_route_entry_t(object):
    """
    Attributes:
     - switch_id
     - vr_id
     - destination
    """


    def __init__(self, switch_id=None, vr_id=None, destination=None,):
        self.switch_id = switch_id
        self.vr_id = vr_id
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.destination = sai_thrift_ip_prefix_t()
                    self.destination.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_route_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 2)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRUCT, 3)
            self.destination.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_my_sid_entry_t(object):
    """
    Attributes:
     - switch_id
     - vr_id
     - locator_block_len
     - locator_node_len
     - function_len
     - args_len
     - sid
    """


    def __init__(self, switch_id=None, vr_id=None, locator_block_len=None, locator_node_len=None, function_len=None, args_len=None, sid=None,):
        self.switch_id = switch_id
        self.vr_id = vr_id
        self.locator_block_len = locator_block_len
        self.locator_node_len = locator_node_len
        self.function_len = function_len
        self.args_len = args_len
        self.sid = sid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vr_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.locator_block_len = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.locator_node_len = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.function_len = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.args_len = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_my_sid_entry_t')
        if self.switch_id is not None:
            oprot.writeFieldBegin('switch_id', TType.I64, 1)
            oprot.writeI64(self.switch_id)
            oprot.writeFieldEnd()
        if self.vr_id is not None:
            oprot.writeFieldBegin('vr_id', TType.I64, 2)
            oprot.writeI64(self.vr_id)
            oprot.writeFieldEnd()
        if self.locator_block_len is not None:
            oprot.writeFieldBegin('locator_block_len', TType.BYTE, 3)
            oprot.writeByte(self.locator_block_len)
            oprot.writeFieldEnd()
        if self.locator_node_len is not None:
            oprot.writeFieldBegin('locator_node_len', TType.BYTE, 4)
            oprot.writeByte(self.locator_node_len)
            oprot.writeFieldEnd()
        if self.function_len is not None:
            oprot.writeFieldBegin('function_len', TType.BYTE, 5)
            oprot.writeByte(self.function_len)
            oprot.writeFieldEnd()
        if self.args_len is not None:
            oprot.writeFieldBegin('args_len', TType.BYTE, 6)
            oprot.writeByte(self.args_len)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 7)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_attribute_list_t(object):
    """
    Attributes:
     - attr_list
     - attr_count
    """


    def __init__(self, attr_list=None, attr_count=None,):
        self.attr_list = attr_list
        self.attr_count = attr_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = sai_thrift_attribute_t()
                        _elem306.read(iprot)
                        self.attr_list.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attr_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_attribute_list_t')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter307 in self.attr_list:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.I32, 2)
            oprot.writeI32(self.attr_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sai_thrift_exception(TException):
    """
    Attributes:
     - status
    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_exception')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_object_key_entry_t)
sai_thrift_object_key_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'object_id', None, None, ),  # 1
    (2, TType.I64, 'fdb_entry', None, None, ),  # 2
    (3, TType.I64, 'neighbor_entry', None, None, ),  # 3
    (4, TType.I64, 'route_entry', None, None, ),  # 4
    (5, TType.I64, 'mcast_fdb_entry', None, None, ),  # 5
    (6, TType.I64, 'l2mc_entry', None, None, ),  # 6
    (7, TType.I64, 'ipmc_entry', None, None, ),  # 7
    (8, TType.I64, 'inseg_entry', None, None, ),  # 8
    (9, TType.I64, 'nat_entry', None, None, ),  # 9
)
all_structs.append(sai_thrift_object_key_t)
sai_thrift_object_key_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'key', [sai_thrift_object_key_entry_t, None], None, ),  # 1
)
all_structs.append(sai_thrift_attr_capability_t)
sai_thrift_attr_capability_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'create_implemented', None, None, ),  # 1
    (2, TType.BOOL, 'boolset_implemented', None, None, ),  # 2
    (3, TType.BOOL, 'get_implemented', None, None, ),  # 3
)
all_structs.append(sai_thrift_service_method_table_t)
sai_thrift_service_method_table_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'profile_get_value', None, None, ),  # 1
    (2, TType.I64, 'profile_get_next_value', None, None, ),  # 2
)
all_structs.append(sai_thrift_object_meta_key_t)
sai_thrift_object_meta_key_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objecttype', None, None, ),  # 1
    (2, TType.STRUCT, 'objectkey', [sai_thrift_object_key_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_attr_condition_t)
sai_thrift_attr_condition_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'attrid', None, None, ),  # 1
    (2, TType.I64, 'condition', None, None, ),  # 2
    (3, TType.I32, 'op', None, None, ),  # 3
    (4, TType.I32, 'type', None, None, ),  # 4
)
all_structs.append(sai_thrift_enum_metadata_t)
sai_thrift_enum_metadata_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'valuescount', None, None, ),  # 2
    (3, TType.LIST, 'values', (TType.I32, None, False), None, ),  # 3
    (4, TType.STRING, 'valuesnames', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'valuesshortnames', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'containsflags', None, None, ),  # 6
    (7, TType.I32, 'flagstype', None, None, ),  # 7
    (8, TType.LIST, 'ignorevalues', (TType.I32, None, False), None, ),  # 8
    (9, TType.STRING, 'ignorevaluesnames', 'UTF8', None, ),  # 9
    (10, TType.I32, 'objecttype', None, None, ),  # 10
)
all_structs.append(sai_thrift_attr_capability_metadata_t)
sai_thrift_attr_capability_metadata_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vendorid', None, None, ),  # 1
    (2, TType.STRUCT, 'operationcapability', [sai_thrift_attr_capability_t, None], None, ),  # 2
    (3, TType.I64, 'enumvaluescount', None, None, ),  # 3
    (4, TType.LIST, 'enumvalues', (TType.I32, None, False), None, ),  # 4
)
all_structs.append(sai_thrift_attr_metadata_t)
sai_thrift_attr_metadata_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objecttype', None, None, ),  # 1
    (2, TType.I32, 'attrid', None, None, ),  # 2
    (3, TType.STRING, 'attridname', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'brief', 'UTF8', None, ),  # 4
    (5, TType.I32, 'attrvaluetype', None, None, ),  # 5
    (6, TType.I32, 'flags', None, None, ),  # 6
    (7, TType.LIST, 'allowedobjecttypes', (TType.I32, None, False), None, ),  # 7
    (8, TType.I64, 'allowedobjecttypeslength', None, None, ),  # 8
    (9, TType.BOOL, 'allowrepetitiononlist', None, None, ),  # 9
    (10, TType.BOOL, 'allowmixedobjecttypes', None, None, ),  # 10
    (11, TType.BOOL, 'allowemptylist', None, None, ),  # 11
    (12, TType.BOOL, 'allownullobjectid', None, None, ),  # 12
    (13, TType.BOOL, 'isoidattribute', None, None, ),  # 13
    (14, TType.I32, 'defaultvaluetype', None, None, ),  # 14
    (15, TType.LIST, 'defaultvalue', (TType.STRUCT, [sai_thrift_attribute_value_t, None], False), None, ),  # 15
    (16, TType.I32, 'defaultvalueobjecttype', None, None, ),  # 16
    (17, TType.I32, 'defaultvalueattrid', None, None, ),  # 17
    (18, TType.BOOL, 'storedefaultvalue', None, None, ),  # 18
    (19, TType.BOOL, 'isenum', None, None, ),  # 19
    (20, TType.BOOL, 'isenumlist', None, None, ),  # 20
    (21, TType.LIST, 'enummetadata', (TType.STRUCT, [sai_thrift_enum_metadata_t, None], False), None, ),  # 21
    (22, TType.I32, 'conditiontype', None, None, ),  # 22
    (23, TType.LIST, 'conditions', (TType.STRUCT, [sai_thrift_attr_condition_t, None], False), None, ),  # 23
    (24, TType.I64, 'conditionslength', None, None, ),  # 24
    (25, TType.BOOL, 'isconditional', None, None, ),  # 25
    (26, TType.I32, 'validonlytype', None, None, ),  # 26
    (27, TType.LIST, 'validonly', (TType.STRUCT, [sai_thrift_attr_condition_t, None], False), None, ),  # 27
    (28, TType.I64, 'validonlylength', None, None, ),  # 28
    (29, TType.BOOL, 'isvalidonly', None, None, ),  # 29
    (30, TType.BOOL, 'getsave', None, None, ),  # 30
    (31, TType.BOOL, 'isvlan', None, None, ),  # 31
    (32, TType.BOOL, 'isaclfield', None, None, ),  # 32
    (33, TType.BOOL, 'isaclaction', None, None, ),  # 33
    (34, TType.BOOL, 'isaclmask', None, None, ),  # 34
    (35, TType.BOOL, 'ismandatoryoncreate', None, None, ),  # 35
    (36, TType.BOOL, 'iscreateonly', None, None, ),  # 36
    (37, TType.BOOL, 'iscreateandset', None, None, ),  # 37
    (38, TType.BOOL, 'isreadonly', None, None, ),  # 38
    (39, TType.BOOL, 'iskey', None, None, ),  # 39
    (40, TType.BOOL, 'isprimitive', None, None, ),  # 40
    (41, TType.I32, 'notificationtype', None, None, ),  # 41
    (42, TType.BOOL, 'iscallback', None, None, ),  # 42
    (43, TType.I32, 'pointertype', None, None, ),  # 43
    (44, TType.LIST, 'capability', (TType.STRUCT, [sai_thrift_attr_capability_metadata_t, None], False), None, ),  # 44
    (45, TType.I64, 'capabilitylength', None, None, ),  # 45
    (46, TType.BOOL, 'isextensionattr', None, None, ),  # 46
    (47, TType.BOOL, 'isresourcetype', None, None, ),  # 47
    (48, TType.BOOL, 'isdeprecated', None, None, ),  # 48
)
all_structs.append(sai_thrift_struct_member_info_t)
sai_thrift_struct_member_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'membervaluetype', None, None, ),  # 1
    (2, TType.STRING, 'membername', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'isvlan', None, None, ),  # 3
    (4, TType.LIST, 'allowedobjecttypes', (TType.I32, None, False), None, ),  # 4
    (5, TType.I64, 'allowedobjecttypeslength', None, None, ),  # 5
    (6, TType.BOOL, 'isenum', None, None, ),  # 6
    (7, TType.LIST, 'enummetadata', (TType.STRUCT, [sai_thrift_enum_metadata_t, None], False), None, ),  # 7
    (8, TType.I64, 'getoid', None, None, ),  # 8
    (9, TType.I64, 'setoid', None, None, ),  # 9
    (10, TType.I64, 'offset', None, None, ),  # 10
    (11, TType.I64, 'size', None, None, ),  # 11
)
all_structs.append(sai_thrift_rev_graph_member_t)
sai_thrift_rev_graph_member_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objecttype', None, None, ),  # 1
    (2, TType.I32, 'depobjecttype', None, None, ),  # 2
    (3, TType.LIST, 'attrmetadata', (TType.STRUCT, [sai_thrift_attr_metadata_t, None], False), None, ),  # 3
    (4, TType.LIST, 'structmember', (TType.STRUCT, [sai_thrift_struct_member_info_t, None], False), None, ),  # 4
)
all_structs.append(sai_thrift_object_type_info_t)
sai_thrift_object_type_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'objecttype', None, None, ),  # 1
    (2, TType.STRING, 'objecttypename', 'UTF8', None, ),  # 2
    (3, TType.I32, 'attridstart', None, None, ),  # 3
    (4, TType.I32, 'attridend', None, None, ),  # 4
    (5, TType.LIST, 'enummetadata', (TType.STRUCT, [sai_thrift_enum_metadata_t, None], False), None, ),  # 5
    (6, TType.LIST, 'attrmetadata', (TType.STRUCT, [sai_thrift_attr_metadata_t, None], False), None, ),  # 6
    (7, TType.I64, 'attrmetadatalength', None, None, ),  # 7
    (8, TType.BOOL, 'isnonobjectid', None, None, ),  # 8
    (9, TType.BOOL, 'isobjectid', None, None, ),  # 9
    (10, TType.LIST, 'structmembers', (TType.STRUCT, [sai_thrift_struct_member_info_t, None], False), None, ),  # 10
    (11, TType.I64, 'structmemberscount', None, None, ),  # 11
    (12, TType.LIST, 'revgraphmembers', (TType.STRUCT, [sai_thrift_rev_graph_member_t, None], False), None, ),  # 12
    (13, TType.I64, 'revgraphmemberscount', None, None, ),  # 13
    (14, TType.I64, 'create', None, None, ),  # 14
    (15, TType.I64, 'remove', None, None, ),  # 15
    (16, TType.I64, 'fnset', None, None, ),  # 16
    (17, TType.I64, 'fnget', None, None, ),  # 17
    (18, TType.I64, 'getstats', None, None, ),  # 18
    (19, TType.I64, 'getstatsext', None, None, ),  # 19
    (20, TType.I64, 'clearstats', None, None, ),  # 20
    (21, TType.BOOL, 'isexperimental', None, None, ),  # 21
    (22, TType.LIST, 'statenum', (TType.STRUCT, [sai_thrift_enum_metadata_t, None], False), None, ),  # 22
)
all_structs.append(sai_thrift_timespec_t)
sai_thrift_timespec_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tv_sec', None, None, ),  # 1
    (2, TType.I32, 'tv_nsec', None, None, ),  # 2
)
all_structs.append(sai_thrift_object_list_t)
sai_thrift_object_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'idlist', (TType.I64, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_u8_list_t)
sai_thrift_u8_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'uint8list', (TType.BYTE, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_s8_list_t)
sai_thrift_s8_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'int8list', (TType.BYTE, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_u16_list_t)
sai_thrift_u16_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'uint16list', (TType.I16, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_s16_list_t)
sai_thrift_s16_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'int16list', (TType.I16, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_u32_list_t)
sai_thrift_u32_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'uint32list', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_s32_list_t)
sai_thrift_s32_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'int32list', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_u32_range_t)
sai_thrift_u32_range_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'min', None, None, ),  # 1
    (2, TType.I32, 'max', None, None, ),  # 2
)
all_structs.append(sai_thrift_s32_range_t)
sai_thrift_s32_range_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'min', None, None, ),  # 1
    (2, TType.I32, 'max', None, None, ),  # 2
)
all_structs.append(sai_thrift_u16_range_t)
sai_thrift_u16_range_t.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'min', None, None, ),  # 1
    (2, TType.I16, 'max', None, None, ),  # 2
)
all_structs.append(sai_thrift_u16_range_list_t)
sai_thrift_u16_range_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'rangelist', (TType.STRUCT, [sai_thrift_u16_range_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_vlan_list_t)
sai_thrift_vlan_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'idlist', (TType.I16, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_ip_addr_t)
sai_thrift_ip_addr_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip4', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip6', 'UTF8', None, ),  # 2
)
all_structs.append(sai_thrift_ip_address_t)
sai_thrift_ip_address_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'addr_family', None, None, ),  # 1
    (2, TType.STRUCT, 'addr', [sai_thrift_ip_addr_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_ip_address_list_t)
sai_thrift_ip_address_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'addresslist', (TType.STRUCT, [sai_thrift_ip_address_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_ip_prefix_t)
sai_thrift_ip_prefix_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'addr_family', None, None, ),  # 1
    (2, TType.STRUCT, 'addr', [sai_thrift_ip_addr_t, None], None, ),  # 2
    (3, TType.STRUCT, 'mask', [sai_thrift_ip_addr_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_ip_prefix_list_t)
sai_thrift_ip_prefix_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'prefixlist', (TType.STRUCT, [sai_thrift_ip_prefix_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_prbs_rx_state_t)
sai_thrift_prbs_rx_state_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rx_status', None, None, ),  # 1
    (2, TType.I32, 'error_count', None, None, ),  # 2
)
all_structs.append(sai_thrift_latch_status_t)
sai_thrift_latch_status_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'current_status', None, None, ),  # 1
    (2, TType.BOOL, 'changed', None, None, ),  # 2
)
all_structs.append(sai_thrift_port_lane_latch_status_t)
sai_thrift_port_lane_latch_status_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'lane', None, None, ),  # 1
    (2, TType.STRUCT, 'value', [sai_thrift_latch_status_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_port_lane_latch_status_list_t)
sai_thrift_port_lane_latch_status_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'statuslist', (TType.STRUCT, [sai_thrift_port_lane_latch_status_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_acl_field_data_mask_t)
sai_thrift_acl_field_data_mask_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'u8', None, None, ),  # 1
    (2, TType.BYTE, 's8', None, None, ),  # 2
    (3, TType.I16, 'u16', None, None, ),  # 3
    (4, TType.I16, 's16', None, None, ),  # 4
    (5, TType.I32, 'u32', None, None, ),  # 5
    (6, TType.I32, 's32', None, None, ),  # 6
    (7, TType.I64, 'u64', None, None, ),  # 7
    (8, TType.STRING, 'mac', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ip4', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'ip6', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 11
)
all_structs.append(sai_thrift_acl_field_data_data_t)
sai_thrift_acl_field_data_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'booldata', None, None, ),  # 1
    (2, TType.BYTE, 'u8', None, None, ),  # 2
    (3, TType.BYTE, 's8', None, None, ),  # 3
    (4, TType.I16, 'u16', None, None, ),  # 4
    (5, TType.I16, 's16', None, None, ),  # 5
    (6, TType.I32, 'u32', None, None, ),  # 6
    (7, TType.I32, 's32', None, None, ),  # 7
    (8, TType.I64, 'u64', None, None, ),  # 8
    (9, TType.STRING, 'mac', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'ip4', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'ip6', 'UTF8', None, ),  # 11
    (12, TType.I64, 'oid', None, None, ),  # 12
    (13, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 13
    (14, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 14
)
all_structs.append(sai_thrift_acl_field_data_t)
sai_thrift_acl_field_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enable', None, None, ),  # 1
    (2, TType.STRUCT, 'mask', [sai_thrift_acl_field_data_mask_t, None], None, ),  # 2
    (3, TType.STRUCT, 'data', [sai_thrift_acl_field_data_data_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_acl_action_parameter_t)
sai_thrift_acl_action_parameter_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'booldata', None, None, ),  # 1
    (2, TType.BYTE, 'u8', None, None, ),  # 2
    (3, TType.BYTE, 's8', None, None, ),  # 3
    (4, TType.I16, 'u16', None, None, ),  # 4
    (5, TType.I16, 's16', None, None, ),  # 5
    (6, TType.I32, 'u32', None, None, ),  # 6
    (7, TType.I32, 's32', None, None, ),  # 7
    (8, TType.STRING, 'mac', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'ip4', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'ip6', 'UTF8', None, ),  # 10
    (11, TType.I64, 'oid', None, None, ),  # 11
    (12, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 12
    (13, TType.STRUCT, 'ipaddr', [sai_thrift_ip_address_t, None], None, ),  # 13
)
all_structs.append(sai_thrift_acl_action_data_t)
sai_thrift_acl_action_data_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'enable', None, None, ),  # 1
    (2, TType.STRUCT, 'parameter', [sai_thrift_acl_action_parameter_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_qos_map_params_t)
sai_thrift_qos_map_params_t.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'tc', None, None, ),  # 1
    (2, TType.BYTE, 'dscp', None, None, ),  # 2
    (3, TType.BYTE, 'dot1p', None, None, ),  # 3
    (4, TType.BYTE, 'prio', None, None, ),  # 4
    (5, TType.BYTE, 'pg', None, None, ),  # 5
    (6, TType.BYTE, 'queue_index', None, None, ),  # 6
    (7, TType.I32, 'color', None, None, ),  # 7
    (8, TType.BYTE, 'mpls_exp', None, None, ),  # 8
    (9, TType.BYTE, 'fc', None, None, ),  # 9
)
all_structs.append(sai_thrift_qos_map_t)
sai_thrift_qos_map_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'key', [sai_thrift_qos_map_params_t, None], None, ),  # 1
    (2, TType.STRUCT, 'value', [sai_thrift_qos_map_params_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_qos_map_list_t)
sai_thrift_qos_map_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'maplist', (TType.STRUCT, [sai_thrift_qos_map_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_map_t)
sai_thrift_map_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'key', None, None, ),  # 1
    (2, TType.I32, 'value', None, None, ),  # 2
)
all_structs.append(sai_thrift_map_list_t)
sai_thrift_map_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'maplist', (TType.STRUCT, [sai_thrift_map_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_acl_chain_t)
sai_thrift_acl_chain_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'chain_group_stage', None, None, ),  # 1
    (2, TType.I32, 'supported_match_type', None, None, ),  # 2
)
all_structs.append(sai_thrift_acl_chain_list_t)
sai_thrift_acl_chain_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'chainlist', (TType.STRUCT, [sai_thrift_acl_chain_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_acl_capability_t)
sai_thrift_acl_capability_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'is_action_list_mandatory', None, None, ),  # 1
    (2, TType.STRUCT, 'action_list', [sai_thrift_s32_list_t, None], None, ),  # 2
    (3, TType.I32, 'supported_match_type', None, None, ),  # 3
    (4, TType.BOOL, 'is_non_contiguous_bits_exact_match_supported', None, None, ),  # 4
)
all_structs.append(sai_thrift_acl_resource_t)
sai_thrift_acl_resource_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'stage', None, None, ),  # 1
    (2, TType.I32, 'bind_point', None, None, ),  # 2
    (3, TType.I32, 'avail_num', None, None, ),  # 3
)
all_structs.append(sai_thrift_acl_resource_list_t)
sai_thrift_acl_resource_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'resourcelist', (TType.STRUCT, [sai_thrift_acl_resource_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_hmac_t)
sai_thrift_hmac_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'key_id', None, None, ),  # 1
    (2, TType.LIST, 'hmac', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_tlv_entry_t)
sai_thrift_tlv_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ingress_node', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'egress_node', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'opaque_container', (TType.I32, None, False), None, ),  # 3
    (4, TType.STRUCT, 'hmac', [sai_thrift_hmac_t, None], None, ),  # 4
)
all_structs.append(sai_thrift_tlv_t)
sai_thrift_tlv_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tlv_type', None, None, ),  # 1
    (2, TType.STRUCT, 'entry', [sai_thrift_tlv_entry_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_tlv_list_t)
sai_thrift_tlv_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'tlvlist', (TType.STRUCT, [sai_thrift_tlv_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_segment_list_t)
sai_thrift_segment_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'ip6list', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(sai_thrift_json_t)
sai_thrift_json_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'json', [sai_thrift_s8_list_t, None], None, ),  # 1
)
all_structs.append(sai_thrift_port_lane_eye_values_t)
sai_thrift_port_lane_eye_values_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'lane', None, None, ),  # 1
    (2, TType.I32, 'left', None, None, ),  # 2
    (3, TType.I32, 'right', None, None, ),  # 3
    (4, TType.I32, 'up', None, None, ),  # 4
    (5, TType.I32, 'down', None, None, ),  # 5
)
all_structs.append(sai_thrift_port_eye_values_list_t)
sai_thrift_port_eye_values_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'valueslist', (TType.STRUCT, [sai_thrift_port_lane_eye_values_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_system_port_config_t)
sai_thrift_system_port_config_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'port_id', None, None, ),  # 1
    (2, TType.I32, 'attached_switch_id', None, None, ),  # 2
    (3, TType.I32, 'attached_core_index', None, None, ),  # 3
    (4, TType.I32, 'attached_core_port_index', None, None, ),  # 4
    (5, TType.I32, 'speed', None, None, ),  # 5
    (6, TType.I32, 'num_voq', None, None, ),  # 6
)
all_structs.append(sai_thrift_system_port_config_list_t)
sai_thrift_system_port_config_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'configlist', (TType.STRUCT, [sai_thrift_system_port_config_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_fabric_port_reachability_t)
sai_thrift_fabric_port_reachability_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'switch_id', None, None, ),  # 1
    (2, TType.BOOL, 'reachable', None, None, ),  # 2
)
all_structs.append(sai_thrift_port_err_status_list_t)
sai_thrift_port_err_status_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'statuslist', (TType.I32, None, False), None, ),  # 2
)
all_structs.append(sai_thrift_attribute_value_t)
sai_thrift_attribute_value_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'booldata', None, None, ),  # 1
    (2, TType.STRING, 'chardata', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'u8', None, None, ),  # 3
    (4, TType.BYTE, 's8', None, None, ),  # 4
    (5, TType.I16, 'u16', None, None, ),  # 5
    (6, TType.I16, 's16', None, None, ),  # 6
    (7, TType.I32, 'u32', None, None, ),  # 7
    (8, TType.I32, 's32', None, None, ),  # 8
    (9, TType.I64, 'u64', None, None, ),  # 9
    (10, TType.I64, 's64', None, None, ),  # 10
    (11, TType.I64, 'ptr', None, None, ),  # 11
    (12, TType.STRING, 'mac', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'ip4', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'ip6', 'UTF8', None, ),  # 14
    (15, TType.STRUCT, 'ipaddr', [sai_thrift_ip_address_t, None], None, ),  # 15
    (16, TType.STRUCT, 'ipprefix', [sai_thrift_ip_prefix_t, None], None, ),  # 16
    (17, TType.STRUCT, 'rx_state', [sai_thrift_prbs_rx_state_t, None], None, ),  # 17
    (18, TType.I64, 'oid', None, None, ),  # 18
    (19, TType.STRUCT, 'objlist', [sai_thrift_object_list_t, None], None, ),  # 19
    (20, TType.STRUCT, 'u8list', [sai_thrift_u8_list_t, None], None, ),  # 20
    (21, TType.STRUCT, 's8list', [sai_thrift_s8_list_t, None], None, ),  # 21
    (22, TType.STRUCT, 'u16list', [sai_thrift_u16_list_t, None], None, ),  # 22
    (23, TType.STRUCT, 's16list', [sai_thrift_s16_list_t, None], None, ),  # 23
    (24, TType.STRUCT, 'u32list', [sai_thrift_u32_list_t, None], None, ),  # 24
    (25, TType.STRUCT, 's32list', [sai_thrift_s32_list_t, None], None, ),  # 25
    (26, TType.STRUCT, 'u32range', [sai_thrift_u32_range_t, None], None, ),  # 26
    (27, TType.STRUCT, 's32range', [sai_thrift_s32_range_t, None], None, ),  # 27
    (28, TType.STRUCT, 'u16rangelist', [sai_thrift_u16_range_list_t, None], None, ),  # 28
    (29, TType.STRUCT, 'vlanlist', [sai_thrift_vlan_list_t, None], None, ),  # 29
    (30, TType.STRUCT, 'qosmap', [sai_thrift_qos_map_list_t, None], None, ),  # 30
    (31, TType.STRUCT, 'maplist', [sai_thrift_map_list_t, None], None, ),  # 31
    (32, TType.STRUCT, 'aclfield', [sai_thrift_acl_field_data_t, None], None, ),  # 32
    (33, TType.STRUCT, 'aclaction', [sai_thrift_acl_action_data_t, None], None, ),  # 33
    (34, TType.STRUCT, 'aclmask', [sai_thrift_acl_field_data_mask_t, None], None, ),  # 34
    (35, TType.STRUCT, 'aclcapability', [sai_thrift_acl_capability_t, None], None, ),  # 35
    (36, TType.STRUCT, 'aclresource', [sai_thrift_acl_resource_list_t, None], None, ),  # 36
    (37, TType.STRUCT, 'tlvlist', [sai_thrift_tlv_list_t, None], None, ),  # 37
    (38, TType.STRUCT, 'segmentlist', [sai_thrift_segment_list_t, None], None, ),  # 38
    (39, TType.STRUCT, 'ipaddrlist', [sai_thrift_ip_address_list_t, None], None, ),  # 39
    (40, TType.STRUCT, 'porteyevalues', [sai_thrift_port_eye_values_list_t, None], None, ),  # 40
    (41, TType.STRUCT, 'timespec', [sai_thrift_timespec_t, None], None, ),  # 41
    (42, TType.BYTE, 'encrypt_key', None, None, ),  # 42
    (43, TType.BYTE, 'authkey', None, None, ),  # 43
    (44, TType.BYTE, 'macsecsak', None, None, ),  # 44
    (45, TType.BYTE, 'macsecauthkey', None, None, ),  # 45
    (46, TType.BYTE, 'macsecsalt', None, None, ),  # 46
    (47, TType.STRUCT, 'sysportconfig', [sai_thrift_system_port_config_t, None], None, ),  # 47
    (48, TType.STRUCT, 'sysportconfiglist', [sai_thrift_system_port_config_list_t, None], None, ),  # 48
    (49, TType.STRUCT, 'reachability', [sai_thrift_fabric_port_reachability_t, None], None, ),  # 49
    (50, TType.STRUCT, 'porterror', [sai_thrift_port_err_status_list_t, None], None, ),  # 50
    (51, TType.STRUCT, 'portlanelatchstatuslist', [sai_thrift_port_lane_latch_status_list_t, None], None, ),  # 51
    (52, TType.STRUCT, 'latchstatus', [sai_thrift_latch_status_t, None], None, ),  # 52
    (53, TType.STRUCT, 'json', [sai_thrift_json_t, None], None, ),  # 53
    (54, TType.STRUCT, 'ipprefixlist', [sai_thrift_ip_prefix_list_t, None], None, ),  # 54
    (55, TType.STRUCT, 'aclchainlist', [sai_thrift_acl_chain_list_t, None], None, ),  # 55
)
all_structs.append(sai_thrift_attribute_t)
sai_thrift_attribute_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRUCT, 'value', [sai_thrift_attribute_value_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_stat_capability_t)
sai_thrift_stat_capability_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'stat_enum', None, None, ),  # 1
    (2, TType.I32, 'stat_modes', None, None, ),  # 2
)
all_structs.append(sai_thrift_stat_capability_list_t)
sai_thrift_stat_capability_list_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'count', None, None, ),  # 1
    (2, TType.LIST, 'capabilitylist', (TType.STRUCT, [sai_thrift_stat_capability_t, None], False), None, ),  # 2
)
all_structs.append(sai_thrift_switch_health_data_t)
sai_thrift_switch_health_data_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'data_type', None, None, ),  # 1
)
all_structs.append(sai_thrift_bfd_session_state_notification_t)
sai_thrift_bfd_session_state_notification_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_id', None, None, ),  # 1
    (2, TType.I32, 'session_state', None, None, ),  # 2
)
all_structs.append(sai_thrift_direction_lookup_entry_t)
sai_thrift_direction_lookup_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I32, 'vni', None, None, ),  # 2
)
all_structs.append(sai_thrift_eni_ether_address_map_entry_t)
sai_thrift_eni_ether_address_map_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRING, 'address', 'UTF8', None, ),  # 2
)
all_structs.append(sai_thrift_inbound_routing_entry_t)
sai_thrift_inbound_routing_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'eni_id', None, None, ),  # 2
    (3, TType.I32, 'vni', None, None, ),  # 3
    (4, TType.STRUCT, 'sip', [sai_thrift_ip_address_t, None], None, ),  # 4
    (5, TType.STRUCT, 'sip_mask', [sai_thrift_ip_address_t, None], None, ),  # 5
    (6, TType.I32, 'priority', None, None, ),  # 6
)
all_structs.append(sai_thrift_outbound_ca_to_pa_entry_t)
sai_thrift_outbound_ca_to_pa_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'dst_vnet_id', None, None, ),  # 2
    (3, TType.STRUCT, 'dip', [sai_thrift_ip_address_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_outbound_routing_entry_t)
sai_thrift_outbound_routing_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'eni_id', None, None, ),  # 2
    (3, TType.STRUCT, 'destination', [sai_thrift_ip_prefix_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_pa_validation_entry_t)
sai_thrift_pa_validation_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'vnet_id', None, None, ),  # 2
    (3, TType.STRUCT, 'sip', [sai_thrift_ip_address_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_dst_tag_entry_t)
sai_thrift_dst_tag_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRUCT, 'dip', [sai_thrift_ip_prefix_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_src_tag_entry_t)
sai_thrift_src_tag_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRUCT, 'sip', [sai_thrift_ip_prefix_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_vip_entry_t)
sai_thrift_vip_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRUCT, 'vip', [sai_thrift_ip_address_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_fdb_entry_t)
sai_thrift_fdb_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRING, 'mac_address', 'UTF8', None, ),  # 2
    (3, TType.I64, 'bv_id', None, None, ),  # 3
)
all_structs.append(sai_thrift_fdb_event_notification_data_t)
sai_thrift_fdb_event_notification_data_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'event_type', None, None, ),  # 1
    (2, TType.STRUCT, 'fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 2
    (3, TType.I32, 'attr_count', None, None, ),  # 3
    (4, TType.LIST, 'attr', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 4
)
all_structs.append(sai_thrift_ipmc_entry_t)
sai_thrift_ipmc_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'vr_id', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.STRUCT, 'destination', [sai_thrift_ip_address_t, None], None, ),  # 4
    (5, TType.STRUCT, 'source', [sai_thrift_ip_address_t, None], None, ),  # 5
)
all_structs.append(sai_thrift_ipsec_sa_status_notification_t)
sai_thrift_ipsec_sa_status_notification_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_id', None, None, ),  # 1
    (2, TType.I32, 'ipsec_sa_octet_count_status', None, None, ),  # 2
    (3, TType.BOOL, 'ipsec_egress_sn_at_max_limit', None, None, ),  # 3
)
all_structs.append(sai_thrift_l2mc_entry_t)
sai_thrift_l2mc_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'bv_id', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.STRUCT, 'destination', [sai_thrift_ip_address_t, None], None, ),  # 4
    (5, TType.STRUCT, 'source', [sai_thrift_ip_address_t, None], None, ),  # 5
)
all_structs.append(sai_thrift_mcast_fdb_entry_t)
sai_thrift_mcast_fdb_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.STRING, 'mac_address', 'UTF8', None, ),  # 2
    (3, TType.I64, 'bv_id', None, None, ),  # 3
)
all_structs.append(sai_thrift_inseg_entry_t)
sai_thrift_inseg_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I32, 'label', None, None, ),  # 2
)
all_structs.append(sai_thrift_nat_entry_key_t)
sai_thrift_nat_entry_key_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'src_ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dst_ip', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'proto', None, None, ),  # 3
    (4, TType.I16, 'l4_src_port', None, None, ),  # 4
    (5, TType.I16, 'l4_dst_port', None, None, ),  # 5
)
all_structs.append(sai_thrift_nat_entry_mask_t)
sai_thrift_nat_entry_mask_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'src_ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dst_ip', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'proto', None, None, ),  # 3
    (4, TType.I16, 'l4_src_port', None, None, ),  # 4
    (5, TType.I16, 'l4_dst_port', None, None, ),  # 5
)
all_structs.append(sai_thrift_nat_entry_data_t)
sai_thrift_nat_entry_data_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'key', [sai_thrift_nat_entry_key_t, None], None, ),  # 1
    (2, TType.STRUCT, 'mask', [sai_thrift_nat_entry_mask_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_nat_entry_t)
sai_thrift_nat_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'vr_id', None, None, ),  # 2
    (3, TType.I32, 'nat_type', None, None, ),  # 3
    (4, TType.STRUCT, 'data', [sai_thrift_nat_entry_data_t, None], None, ),  # 4
)
all_structs.append(sai_thrift_nat_event_notification_data_t)
sai_thrift_nat_event_notification_data_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'event_type', None, None, ),  # 1
    (2, TType.STRUCT, 'nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 2
)
all_structs.append(sai_thrift_neighbor_entry_t)
sai_thrift_neighbor_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'rif_id', None, None, ),  # 2
    (3, TType.STRUCT, 'ip_address', [sai_thrift_ip_address_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_port_oper_status_notification_t)
sai_thrift_port_oper_status_notification_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_id', None, None, ),  # 1
    (2, TType.I32, 'port_state', None, None, ),  # 2
)
all_structs.append(sai_thrift_queue_deadlock_notification_data_t)
sai_thrift_queue_deadlock_notification_data_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_id', None, None, ),  # 1
    (2, TType.I32, 'event', None, None, ),  # 2
    (3, TType.BOOL, 'app_managed_recovery', None, None, ),  # 3
)
all_structs.append(sai_thrift_route_entry_t)
sai_thrift_route_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'vr_id', None, None, ),  # 2
    (3, TType.STRUCT, 'destination', [sai_thrift_ip_prefix_t, None], None, ),  # 3
)
all_structs.append(sai_thrift_my_sid_entry_t)
sai_thrift_my_sid_entry_t.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_id', None, None, ),  # 1
    (2, TType.I64, 'vr_id', None, None, ),  # 2
    (3, TType.BYTE, 'locator_block_len', None, None, ),  # 3
    (4, TType.BYTE, 'locator_node_len', None, None, ),  # 4
    (5, TType.BYTE, 'function_len', None, None, ),  # 5
    (6, TType.BYTE, 'args_len', None, None, ),  # 6
    (7, TType.STRING, 'sid', 'UTF8', None, ),  # 7
)
all_structs.append(sai_thrift_attribute_list_t)
sai_thrift_attribute_list_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
    (2, TType.I32, 'attr_count', None, None, ),  # 2
)
all_structs.append(sai_thrift_exception)
sai_thrift_exception.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
